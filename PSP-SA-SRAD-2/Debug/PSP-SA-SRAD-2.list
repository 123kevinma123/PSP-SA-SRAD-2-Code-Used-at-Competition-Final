
PSP-SA-SRAD-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  0801bf20  0801bf20  0002bf20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ccf0  0801ccf0  00030330  2**0
                  CONTENTS
  4 .ARM          00000008  0801ccf0  0801ccf0  0002ccf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ccf8  0801ccf8  00030330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ccf8  0801ccf8  0002ccf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ccfc  0801ccfc  0002ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0801cd00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030330  2**0
                  CONTENTS
 10 .bss          00002918  20000330  20000330  00030330  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002c48  20002c48  00030330  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ef96  00000000  00000000  000303a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000074a6  00000000  00000000  0005f339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000026a8  00000000  00000000  000667e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001dcf  00000000  00000000  00068e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002da57  00000000  00000000  0006ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036c1d  00000000  00000000  000986ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4a7d  00000000  00000000  000cf2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bab8  00000000  00000000  001b3d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  001bf800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bf04 	.word	0x0801bf04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	0801bf04 	.word	0x0801bf04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_accelerometer>:
vec3f rotation;

static uint32_t last_time_us;


void init_accelerometer(system_data* data) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	heartbeat_entry* accel_entry = calloc(1, sizeof(heartbeat_entry));
 8000ff8:	2114      	movs	r1, #20
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f015 fbfc 	bl	80167f8 <calloc>
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
	accel_entry->function = accelerometer_heartbeat;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <init_accelerometer+0x58>)
 8001008:	601a      	str	r2, [r3, #0]
	accel_entry->interval = ACCELEROMETER_HEARTBEAT_INTERVAL;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2202      	movs	r2, #2
 800100e:	809a      	strh	r2, [r3, #4]
	accel_entry->next = null;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
	accel_entry->timeUntilNext = 0; // give 3ms so hopefully tasks dont overlap, plus 150 MS so that the BME280 device can take at least one sample
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
	accel_entry->name = "mpu6050";
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <init_accelerometer+0x5c>)
 8001020:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(accel_entry);
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f001 ff5a 	bl	8002edc <register_heartbeat_func>

	mpu6050_init(&ACCELEROMETER_I2C_HANDLE);
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <init_accelerometer+0x60>)
 800102a:	f004 f89b 	bl	8005164 <mpu6050_init>

	last_time_us = get_time_us();
 800102e:	f001 ffcf 	bl	8002fd0 <get_time_us>
 8001032:	4603      	mov	r3, r0
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <init_accelerometer+0x64>)
 8001036:	6013      	str	r3, [r2, #0]

	accelerometer_heartbeat(data); // read data
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f80d 	bl	8001058 <accelerometer_heartbeat>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08001059 	.word	0x08001059
 800104c:	0801bf20 	.word	0x0801bf20
 8001050:	20000874 	.word	0x20000874
 8001054:	20000370 	.word	0x20000370

08001058 <accelerometer_heartbeat>:


static void accelerometer_heartbeat(system_data* data) {
 8001058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	mpu6050_read_accel(&ACCELEROMETER_I2C_HANDLE, &mpu);
 8001062:	4967      	ldr	r1, [pc, #412]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 8001064:	4867      	ldr	r0, [pc, #412]	; (8001204 <accelerometer_heartbeat+0x1ac>)
 8001066:	f004 f8d5 	bl	8005214 <mpu6050_read_accel>
	mpu6050_read_gyro(&ACCELEROMETER_I2C_HANDLE, &mpu);
 800106a:	4965      	ldr	r1, [pc, #404]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 800106c:	4865      	ldr	r0, [pc, #404]	; (8001204 <accelerometer_heartbeat+0x1ac>)
 800106e:	f004 f93b 	bl	80052e8 <mpu6050_read_gyro>

	uint32_t timeNow = get_time_us();
 8001072:	f001 ffad 	bl	8002fd0 <get_time_us>
 8001076:	60f8      	str	r0, [r7, #12]
	uint32_t timeDiff = timeNow - last_time_us;
 8001078:	4b63      	ldr	r3, [pc, #396]	; (8001208 <accelerometer_heartbeat+0x1b0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	60bb      	str	r3, [r7, #8]


	if (abs((int) mpu.Gx) >= 2) {
 8001082:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 8001084:	edd3 7a03 	vldr	s15, [r3, #12]
 8001088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108c:	ee17 3a90 	vmov	r3, s15
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfb8      	it	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	dd2e      	ble.n	80010f8 <accelerometer_heartbeat+0xa0>
		rotation.x += ((double) mpu.Gx) * timeDiff / 1000000;
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <accelerometer_heartbeat+0x1b4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa52 	bl	8000548 <__aeabi_f2d>
 80010a4:	4604      	mov	r4, r0
 80010a6:	460d      	mov	r5, r1
 80010a8:	4b55      	ldr	r3, [pc, #340]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa4b 	bl	8000548 <__aeabi_f2d>
 80010b2:	4680      	mov	r8, r0
 80010b4:	4689      	mov	r9, r1
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f7ff fa24 	bl	8000504 <__aeabi_ui2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4640      	mov	r0, r8
 80010c2:	4649      	mov	r1, r9
 80010c4:	f7ff fa98 	bl	80005f8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	a349      	add	r3, pc, #292	; (adr r3, 80011f8 <accelerometer_heartbeat+0x1a0>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fbb9 	bl	800084c <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff f8d3 	bl	800028c <__adddf3>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd7b 	bl	8000be8 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <accelerometer_heartbeat+0x1b4>)
 80010f6:	6013      	str	r3, [r2, #0]
	}
	if (abs((int) mpu.Gy) >= 2) {
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 80010fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 3a90 	vmov	r3, s15
 8001106:	2b00      	cmp	r3, #0
 8001108:	bfb8      	it	lt
 800110a:	425b      	neglt	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	dd2e      	ble.n	800116e <accelerometer_heartbeat+0x116>
		rotation.y += ((double) mpu.Gy) * timeDiff / 1000000;
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <accelerometer_heartbeat+0x1b4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa17 	bl	8000548 <__aeabi_f2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa10 	bl	8000548 <__aeabi_f2d>
 8001128:	4680      	mov	r8, r0
 800112a:	4689      	mov	r9, r1
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f7ff f9e9 	bl	8000504 <__aeabi_ui2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4640      	mov	r0, r8
 8001138:	4649      	mov	r1, r9
 800113a:	f7ff fa5d 	bl	80005f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	a32c      	add	r3, pc, #176	; (adr r3, 80011f8 <accelerometer_heartbeat+0x1a0>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fb7e 	bl	800084c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff f898 	bl	800028c <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd40 	bl	8000be8 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	4a28      	ldr	r2, [pc, #160]	; (800120c <accelerometer_heartbeat+0x1b4>)
 800116c:	6053      	str	r3, [r2, #4]
	}
	if (abs((int) mpu.Gz) >= 2) {
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 8001170:	edd3 7a05 	vldr	s15, [r3, #20]
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	2b00      	cmp	r3, #0
 800117e:	bfb8      	it	lt
 8001180:	425b      	neglt	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	dd2e      	ble.n	80011e4 <accelerometer_heartbeat+0x18c>
		rotation.z += ((double) mpu.Gz) * timeDiff / 1000000;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <accelerometer_heartbeat+0x1b4>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <accelerometer_heartbeat+0x1a8>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9d5 	bl	8000548 <__aeabi_f2d>
 800119e:	4680      	mov	r8, r0
 80011a0:	4689      	mov	r9, r1
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f7ff f9ae 	bl	8000504 <__aeabi_ui2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4640      	mov	r0, r8
 80011ae:	4649      	mov	r1, r9
 80011b0:	f7ff fa22 	bl	80005f8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	a30e      	add	r3, pc, #56	; (adr r3, 80011f8 <accelerometer_heartbeat+0x1a0>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fb43 	bl	800084c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f85d 	bl	800028c <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd05 	bl	8000be8 <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <accelerometer_heartbeat+0x1b4>)
 80011e2:	6093      	str	r3, [r2, #8]
//		char* message = smintf("GYRO z %d %d %f", timeDiff, get_time_us(), (float) mpu.Gx);
//		log_message(message);
//		free(message);
	}

	last_time_us = timeNow;
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <accelerometer_heartbeat+0x1b0>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6013      	str	r3, [r2, #0]

}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	00000000 	.word	0x00000000
 80011fc:	412e8480 	.word	0x412e8480
 8001200:	2000034c 	.word	0x2000034c
 8001204:	20000874 	.word	0x20000874
 8001208:	20000370 	.word	0x20000370
 800120c:	20000364 	.word	0x20000364

08001210 <accel_acceleration>:

void accel_acceleration(vec3f* ptr) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	ptr->x = mpu.Ax;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <accel_acceleration+0x2c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
	ptr->y = mpu.Ay;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <accel_acceleration+0x2c>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	605a      	str	r2, [r3, #4]
	ptr->z = mpu.Az;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <accel_acceleration+0x2c>)
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000034c 	.word	0x2000034c

08001240 <accel_gyro>:

void accel_gyro(vec3f* ptr) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
//	ptr->x = mpu.Gx;
//	ptr->y = mpu.Gy;
//	ptr->z = mpu.Gz;
	ptr->x = rotation.x;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <accel_gyro+0x2c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
	ptr->y = rotation.y;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <accel_gyro+0x2c>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	605a      	str	r2, [r3, #4]
	ptr->z = rotation.z;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <accel_gyro+0x2c>)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000364 	.word	0x20000364

08001270 <init_active_controls>:
#include "active_controls.h"

static void active_controls_heartbeat(system_data* data);


void init_active_controls(system_data* data) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	heartbeat_entry* ac_entry = calloc(1, sizeof(heartbeat_entry));
 8001278:	2114      	movs	r1, #20
 800127a:	2001      	movs	r0, #1
 800127c:	f015 fabc 	bl	80167f8 <calloc>
 8001280:	4603      	mov	r3, r0
 8001282:	60fb      	str	r3, [r7, #12]
	ac_entry->function = active_controls_heartbeat;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <init_active_controls+0x44>)
 8001288:	601a      	str	r2, [r3, #0]
	ac_entry->interval = ACTIVE_CONTROLS_INTERVAL;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	220a      	movs	r2, #10
 800128e:	809a      	strh	r2, [r3, #4]
	ac_entry->next = null;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
	ac_entry->timeUntilNext = 2000;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800129c:	609a      	str	r2, [r3, #8]
	ac_entry->name = "active controls";
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <init_active_controls+0x48>)
 80012a2:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(ac_entry);
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f001 fe19 	bl	8002edc <register_heartbeat_func>

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	080012bd 	.word	0x080012bd
 80012b8:	0801bf28 	.word	0x0801bf28

080012bc <active_controls_heartbeat>:

static void active_controls_heartbeat(system_data* data) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b09c      	sub	sp, #112	; 0x70
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	const flight_data_t flight = flight_data();
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 feef 	bl	80020ac <flight_data>
	if (!flight.activeControlsPermitted) {
 80012ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <active_controls_heartbeat+0x20>
		retract_airbrakes();
 80012d6:	f000 f885 	bl	80013e4 <retract_airbrakes>
		return;
 80012da:	e044      	b.n	8001366 <active_controls_heartbeat+0xaa>
	}

	if (flight.apogeeReached) {
 80012dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <active_controls_heartbeat+0x2e>
		retract_airbrakes();
 80012e4:	f000 f87e 	bl	80013e4 <retract_airbrakes>
		return;
 80012e8:	e03d      	b.n	8001366 <active_controls_heartbeat+0xaa>
	}

	// TODO : active controls stuff (assume it is permitted now)

	vec3f accel_vec;
	accel_acceleration(&accel_vec);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff8e 	bl	8001210 <accel_acceleration>

	float height = interpolate_height_agl();
 80012f4:	f000 fe78 	bl	8001fe8 <interpolate_height_agl>
 80012f8:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	float accel = accel_vec.z; // z is up for the MPU. Assuming that the MPU starts pointed up
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	66bb      	str	r3, [r7, #104]	; 0x68
	float vel = flight_data().approxVelocity;
 8001300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fed1 	bl	80020ac <flight_data>
 800130a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc69 	bl	8000be8 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	667b      	str	r3, [r7, #100]	; 0x64

	float current_apogee = predict_apogee(vel, accel, height, 0);
 800131a:	eddf 1a14 	vldr	s3, [pc, #80]	; 800136c <active_controls_heartbeat+0xb0>
 800131e:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 8001322:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8001326:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800132a:	f000 f825 	bl	8001378 <predict_apogee>
 800132e:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	float apogee_if_deployed = predict_apogee(vel, accel, height, AIRBRAKE_DRAG_COEFF);
 8001332:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8001370 <active_controls_heartbeat+0xb4>
 8001336:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 800133a:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 800133e:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001342:	f000 f819 	bl	8001378 <predict_apogee>
 8001346:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	if (apogee_if_deployed < TARGET_APOGEE) {
 800134a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800134e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001374 <active_controls_heartbeat+0xb8>
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d502      	bpl.n	8001362 <active_controls_heartbeat+0xa6>
		retract_airbrakes();
 800135c:	f000 f842 	bl	80013e4 <retract_airbrakes>
 8001360:	e001      	b.n	8001366 <active_controls_heartbeat+0xaa>
	} else {
		deploy_airbrakes();
 8001362:	f000 f846 	bl	80013f2 <deploy_airbrakes>
	}

}
 8001366:	3770      	adds	r7, #112	; 0x70
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	00000000 	.word	0x00000000
 8001370:	3f19999a 	.word	0x3f19999a
 8001374:	461c4000 	.word	0x461c4000

08001378 <predict_apogee>:

static float predict_apogee(float vel, float accel, float height, float extraDragCoeff) {
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001382:	edc7 0a02 	vstr	s1, [r7, #8]
 8001386:	ed87 1a01 	vstr	s2, [r7, #4]
 800138a:	edc7 1a00 	vstr	s3, [r7]
	// x = x_0 + vt + 1/2at^2
	// v = v_0 + at
	// t = (v-v_0)/a = -v_0/a (v = 0 at apogee)

	float time = -vel/accel;
 800138e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001392:	eef1 6a67 	vneg.f32	s13, s15
 8001396:	ed97 7a02 	vldr	s14, [r7, #8]
 800139a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800139e:	edc7 7a05 	vstr	s15, [r7, #20]
	return height + vel * time + 0.5f * accel * time * time; // TODO : use drag equation for acceleration (since it's not constant)
 80013a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80013be:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <retract_airbrakes>:

static void retract_airbrakes() {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <deploy_airbrakes>:

static void deploy_airbrakes() {
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <BMP280_SPI_Write>:

#define BMP280_CS_GPIO_Port GPIOE
#define BMP280_CS_GPIO_Pin GPIO_PIN_0

static int8_t BMP280_SPI_Write(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	603a      	str	r2, [r7, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	460b      	mov	r3, r1
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	4613      	mov	r3, r2
 8001414:	80bb      	strh	r3, [r7, #4]
    // Select the BMP280 sensor
    HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_GPIO_Pin, GPIO_PIN_RESET);  // Set appropriate GPIO pin to low for chip select
 8001416:	2200      	movs	r2, #0
 8001418:	2101      	movs	r1, #1
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <BMP280_SPI_Write+0x7c>)
 800141c:	f005 fc26 	bl	8006c6c <HAL_GPIO_WritePin>

    // Transmit the register address with the MSB cleared to indicate write operation
    uint8_t txData = reg_addr & ~0x80;
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
    if (HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY) != HAL_OK)
 800142a:	f107 010f 	add.w	r1, r7, #15
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2201      	movs	r2, #1
 8001434:	4812      	ldr	r0, [pc, #72]	; (8001480 <BMP280_SPI_Write+0x80>)
 8001436:	f00b fb27 	bl	800ca88 <HAL_SPI_Transmit>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <BMP280_SPI_Write+0x4a>
    {
        // Error in SPI transmission
    	Error_Handler();
 8001440:	f001 fe0a 	bl	8003058 <Error_Handler>
        return BMP280_E_COMM_FAIL;
 8001444:	f06f 0303 	mvn.w	r3, #3
 8001448:	e014      	b.n	8001474 <BMP280_SPI_Write+0x74>
    }

    // Transmit the data
    if (HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY) != HAL_OK)
 800144a:	88ba      	ldrh	r2, [r7, #4]
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <BMP280_SPI_Write+0x80>)
 8001454:	f00b fb18 	bl	800ca88 <HAL_SPI_Transmit>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <BMP280_SPI_Write+0x68>
    {
        // Error in SPI transmission
    	Error_Handler();
 800145e:	f001 fdfb 	bl	8003058 <Error_Handler>
        return BMP280_E_COMM_FAIL;
 8001462:	f06f 0303 	mvn.w	r3, #3
 8001466:	e005      	b.n	8001474 <BMP280_SPI_Write+0x74>
    }

    // Deselect the BMP280 sensor
    HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_GPIO_Pin, GPIO_PIN_SET);  // Set appropriate GPIO pin to high for chip deselect
 8001468:	2201      	movs	r2, #1
 800146a:	2101      	movs	r1, #1
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <BMP280_SPI_Write+0x7c>)
 800146e:	f005 fbfd 	bl	8006c6c <HAL_GPIO_WritePin>

    return BMP280_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	20000a00 	.word	0x20000a00

08001484 <BMP280_SPI_Read>:

// Function to read data from the BMP280 sensor
static int8_t BMP280_SPI_Read(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	603a      	str	r2, [r7, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	460b      	mov	r3, r1
 8001494:	71bb      	strb	r3, [r7, #6]
 8001496:	4613      	mov	r3, r2
 8001498:	80bb      	strh	r3, [r7, #4]
    // Select the BMP280 sensor
    HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_GPIO_Pin, GPIO_PIN_RESET);  // Set appropriate GPIO pin to low for chip select
 800149a:	2200      	movs	r2, #0
 800149c:	2101      	movs	r1, #1
 800149e:	4818      	ldr	r0, [pc, #96]	; (8001500 <BMP280_SPI_Read+0x7c>)
 80014a0:	f005 fbe4 	bl	8006c6c <HAL_GPIO_WritePin>

    // Transmit the register address with the MSB set to indicate read operation
    uint8_t txData = reg_addr | 0x80;
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
    if (HAL_SPI_Transmit(&hspi1, &txData, 1, HAL_MAX_DELAY) != HAL_OK)
 80014ae:	f107 010f 	add.w	r1, r7, #15
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	2201      	movs	r2, #1
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <BMP280_SPI_Read+0x80>)
 80014ba:	f00b fae5 	bl	800ca88 <HAL_SPI_Transmit>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <BMP280_SPI_Read+0x4a>
    {
        // Error in SPI transmission
    	Error_Handler();
 80014c4:	f001 fdc8 	bl	8003058 <Error_Handler>
        return BMP280_E_COMM_FAIL;
 80014c8:	f06f 0303 	mvn.w	r3, #3
 80014cc:	e014      	b.n	80014f8 <BMP280_SPI_Read+0x74>
    }

    // Receive the data
    if (HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY) != HAL_OK)
 80014ce:	88ba      	ldrh	r2, [r7, #4]
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <BMP280_SPI_Read+0x80>)
 80014d8:	f00b fc12 	bl	800cd00 <HAL_SPI_Receive>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <BMP280_SPI_Read+0x68>
    {
        // Error in SPI reception
    	Error_Handler();
 80014e2:	f001 fdb9 	bl	8003058 <Error_Handler>
        return BMP280_E_COMM_FAIL;
 80014e6:	f06f 0303 	mvn.w	r3, #3
 80014ea:	e005      	b.n	80014f8 <BMP280_SPI_Read+0x74>
    }

    // Deselect the BMP280 sensor
    HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_GPIO_Pin, GPIO_PIN_SET);  // Set appropriate GPIO pin to high for chip deselect
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <BMP280_SPI_Read+0x7c>)
 80014f2:	f005 fbbb 	bl	8006c6c <HAL_GPIO_WritePin>

    return BMP280_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	20000a00 	.word	0x20000a00

08001508 <init_altimeter>:

struct bmp280_dev bmp;
static double alt_feet;


void init_altimeter(system_data* data) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
//    	log_messagef("BMP280 no ok big sad");
//        Error_Handler();
//    }


	bmp.dev_id = 0;
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <init_altimeter+0xb0>)
 8001512:	2200      	movs	r2, #0
 8001514:	705a      	strb	r2, [r3, #1]
	bmp.intf = BMP280_SPI_INTF;
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <init_altimeter+0xb0>)
 8001518:	2200      	movs	r2, #0
 800151a:	709a      	strb	r2, [r3, #2]
	bmp.read = BMP280_SPI_Read;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <init_altimeter+0xb0>)
 800151e:	4a27      	ldr	r2, [pc, #156]	; (80015bc <init_altimeter+0xb4>)
 8001520:	605a      	str	r2, [r3, #4]
	bmp.write = BMP280_SPI_Write;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <init_altimeter+0xb0>)
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <init_altimeter+0xb8>)
 8001526:	609a      	str	r2, [r3, #8]
	bmp.delay_ms = HAL_Delay;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <init_altimeter+0xb0>)
 800152a:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <init_altimeter+0xbc>)
 800152c:	60da      	str	r2, [r3, #12]
	int8_t rslt = bmp280_init(&bmp);
 800152e:	4822      	ldr	r0, [pc, #136]	; (80015b8 <init_altimeter+0xb0>)
 8001530:	f002 ff46 	bl	80043c0 <bmp280_init>
 8001534:	4603      	mov	r3, r0
 8001536:	75fb      	strb	r3, [r7, #23]
	if (rslt != BMP280_OK) {
 8001538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <init_altimeter+0x42>
		log_messagef("BMP280 no ok big sad");
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <init_altimeter+0xc0>)
 8001542:	f001 fcad 	bl	8002ea0 <log_messagef>
		Error_Handler();
 8001546:	f001 fd87 	bl	8003058 <Error_Handler>
	}

	struct bmp280_config config = {
 800154a:	4a20      	ldr	r2, [pc, #128]	; (80015cc <init_altimeter+0xc4>)
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001554:	6018      	str	r0, [r3, #0]
 8001556:	3304      	adds	r3, #4
 8001558:	7019      	strb	r1, [r3, #0]
		    .odr = BMP280_ODR_0_5_MS,
		    .filter = BMP280_FILTER_COEFF_16,
		    .spi3w_en = BMP280_SPI3_WIRE_DISABLE
	};

	bmp280_set_config(&config, &bmp);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4916      	ldr	r1, [pc, #88]	; (80015b8 <init_altimeter+0xb0>)
 8001560:	4618      	mov	r0, r3
 8001562:	f002 ff9b 	bl	800449c <bmp280_set_config>
	bmp280_set_power_mode(BMP280_FORCED_MODE, &bmp);
 8001566:	4914      	ldr	r1, [pc, #80]	; (80015b8 <init_altimeter+0xb0>)
 8001568:	2001      	movs	r0, #1
 800156a:	f002 ffa6 	bl	80044ba <bmp280_set_power_mode>


    alt_feet = -1.0;
 800156e:	4918      	ldr	r1, [pc, #96]	; (80015d0 <init_altimeter+0xc8>)
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <init_altimeter+0xcc>)
 8001576:	e9c1 2300 	strd	r2, r3, [r1]

	heartbeat_entry* alt_entry = calloc(1, sizeof(heartbeat_entry));
 800157a:	2114      	movs	r1, #20
 800157c:	2001      	movs	r0, #1
 800157e:	f015 f93b 	bl	80167f8 <calloc>
 8001582:	4603      	mov	r3, r0
 8001584:	613b      	str	r3, [r7, #16]
	alt_entry->function = altimeter_heartbeat;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <init_altimeter+0xd0>)
 800158a:	601a      	str	r2, [r3, #0]
	alt_entry->interval = 100; // 100 ms for now
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2264      	movs	r2, #100	; 0x64
 8001590:	809a      	strh	r2, [r3, #4]
	alt_entry->next = NULL;
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
	alt_entry->timeUntilNext = alt_entry->interval;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	889b      	ldrh	r3, [r3, #4]
 800159c:	461a      	mov	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]
	alt_entry->name = "altimeter-v2";
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <init_altimeter+0xd4>)
 80015a6:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(alt_entry);
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	f001 fc97 	bl	8002edc <register_heartbeat_func>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000374 	.word	0x20000374
 80015bc:	08001485 	.word	0x08001485
 80015c0:	08001401 	.word	0x08001401
 80015c4:	08005e91 	.word	0x08005e91
 80015c8:	0801bf94 	.word	0x0801bf94
 80015cc:	0801bfbc 	.word	0x0801bfbc
 80015d0:	200003a8 	.word	0x200003a8
 80015d4:	bff00000 	.word	0xbff00000
 80015d8:	080015e1 	.word	0x080015e1
 80015dc:	0801bfac 	.word	0x0801bfac

080015e0 <altimeter_heartbeat>:

static void altimeter_heartbeat(system_data* data) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	query_sensor(); // for now, just so it prints and I know its working
 80015e8:	f000 f804 	bl	80015f4 <query_sensor>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <query_sensor>:

static int32_t last_raw_pressure, last_raw_temperature;
static double last_pressure, last_temperature;

static void query_sensor() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	struct bmp280_uncomp_data ucomp_data;
	bmp280_get_uncomp_data(&ucomp_data, &bmp);
 80015fa:	463b      	mov	r3, r7
 80015fc:	4911      	ldr	r1, [pc, #68]	; (8001644 <query_sensor+0x50>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 ff7a 	bl	80044f8 <bmp280_get_uncomp_data>

	bmp280_set_power_mode(BMP280_FORCED_MODE, &bmp);
 8001604:	490f      	ldr	r1, [pc, #60]	; (8001644 <query_sensor+0x50>)
 8001606:	2001      	movs	r0, #1
 8001608:	f002 ff57 	bl	80044ba <bmp280_set_power_mode>

	bmp280_get_comp_temp_32bit(&last_raw_temperature, ucomp_data.uncomp_temp, &bmp);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <query_sensor+0x50>)
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <query_sensor+0x54>)
 8001614:	f002 ffbe 	bl	8004594 <bmp280_get_comp_temp_32bit>
	bmp280_get_comp_pres_32bit(&last_raw_pressure, ucomp_data.uncomp_press, &bmp);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <query_sensor+0x50>)
 800161c:	4619      	mov	r1, r3
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <query_sensor+0x58>)
 8001620:	f003 f822 	bl	8004668 <bmp280_get_comp_pres_32bit>

	bmp280_get_comp_pres_double(&last_pressure, ucomp_data.uncomp_press, &bmp);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <query_sensor+0x50>)
 8001628:	4619      	mov	r1, r3
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <query_sensor+0x5c>)
 800162c:	f003 f9ec 	bl	8004a08 <bmp280_get_comp_pres_double>
	bmp280_get_comp_temp_double(&last_temperature, ucomp_data.uncomp_press, &bmp);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <query_sensor+0x50>)
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <query_sensor+0x60>)
 8001638:	f003 f90e 	bl	8004858 <bmp280_get_comp_temp_double>

//    log_messagef("pressure: %f temp: %f", (double) last_pressure, (double) last_temperature);

}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000374 	.word	0x20000374
 8001648:	200003b4 	.word	0x200003b4
 800164c:	200003b0 	.word	0x200003b0
 8001650:	200003b8 	.word	0x200003b8
 8001654:	200003c0 	.word	0x200003c0

08001658 <get_altitude_feet>:

double get_altitude_feet() {
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0

    float press =  (float) last_pressure;
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <get_altitude_feet+0x100>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fabe 	bl	8000be8 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	617b      	str	r3, [r7, #20]
    float temp = (float) last_temperature;
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <get_altitude_feet+0x104>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fab5 	bl	8000be8 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	613b      	str	r3, [r7, #16]

//    log_messagef("pressure: %f temperature: %f", (double) press, (double) temp);

//    double P_inHg = 0.000295300 * press;
//	double P_mb = 33.8639 * P_inHg;
    double P_mb = press; // pressure is in hPa, but this I think is equivalent to 1hPa = 1mb
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7fe ff60 	bl	8000548 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// https://www.weather.gov/media/epz/wxcalc/pressureAltitude.pdf
	// P_sta is in mb, so P_sta = P_mb
//	double H_alt_m = (0.3048) * (1 - pow((P_mb / 1013.25), 0.190284)) * 145366.45;

	// new formula which includes temperature from https://keisan.casio.com/exec/system/1224585971#!
	double H_alt_m = (pow(101325.0 / press, 1.0/5.257) - 1) * (temp + 273.15)/ 0.0065;
 8001690:	6978      	ldr	r0, [r7, #20]
 8001692:	f7fe ff59 	bl	8000548 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	a125      	add	r1, pc, #148	; (adr r1, 8001730 <get_altitude_feet+0xd8>)
 800169c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a0:	f7ff f8d4 	bl	800084c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	ec43 2b17 	vmov	d7, r2, r3
 80016ac:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001738 <get_altitude_feet+0xe0>
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	eef0 0a67 	vmov.f32	s1, s15
 80016b8:	f019 fcec 	bl	801b094 <pow>
 80016bc:	ec51 0b10 	vmov	r0, r1, d0
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <get_altitude_feet+0x108>)
 80016c6:	f7fe fddf 	bl	8000288 <__aeabi_dsub>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	6938      	ldr	r0, [r7, #16]
 80016d4:	f7fe ff38 	bl	8000548 <__aeabi_f2d>
 80016d8:	a319      	add	r3, pc, #100	; (adr r3, 8001740 <get_altitude_feet+0xe8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe fdd5 	bl	800028c <__adddf3>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4620      	mov	r0, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	f7fe ff85 	bl	80005f8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	a314      	add	r3, pc, #80	; (adr r3, 8001748 <get_altitude_feet+0xf0>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7ff f8a6 	bl	800084c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 2300 	strd	r2, r3, [r7]

//    log_messagef("pressure: %f temp: %f H_alt_m: %f", (double) last_pressure, (double) last_temperature, (double) H_alt_m);

	return H_alt_m / 0.3048;
 8001708:	a311      	add	r3, pc, #68	; (adr r3, 8001750 <get_altitude_feet+0xf8>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001712:	f7ff f89b 	bl	800084c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	ec43 2b17 	vmov	d7, r2, r3
}
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	eef0 0a67 	vmov.f32	s1, s15
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	00000000 	.word	0x00000000
 8001734:	40f8bcd0 	.word	0x40f8bcd0
 8001738:	7dee2d4a 	.word	0x7dee2d4a
 800173c:	3fc85936 	.word	0x3fc85936
 8001740:	66666666 	.word	0x66666666
 8001744:	40711266 	.word	0x40711266
 8001748:	76c8b439 	.word	0x76c8b439
 800174c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001750:	dbf487fd 	.word	0xdbf487fd
 8001754:	3fd381d7 	.word	0x3fd381d7
 8001758:	200003b8 	.word	0x200003b8
 800175c:	200003c0 	.word	0x200003c0
 8001760:	3ff00000 	.word	0x3ff00000

08001764 <get_last_pressure_data>:

double get_last_pressure_data() {
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
	return last_pressure;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <get_last_pressure_data+0x20>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001772:	eeb0 0a47 	vmov.f32	s0, s14
 8001776:	eef0 0a67 	vmov.f32	s1, s15
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200003b8 	.word	0x200003b8

08001788 <get_last_temperature_data>:

double get_last_temperature_data() {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	return last_temperature;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <get_last_temperature_data+0x20>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	ec43 2b17 	vmov	d7, r2, r3
}
 8001796:	eeb0 0a47 	vmov.f32	s0, s14
 800179a:	eef0 0a67 	vmov.f32	s1, s15
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200003c0 	.word	0x200003c0

080017ac <get_last_pressure_data_raw>:

int32_t get_last_pressure_data_raw() {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	return last_raw_pressure;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <get_last_pressure_data_raw+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200003b0 	.word	0x200003b0

080017c4 <get_last_temperature_data_raw>:

int32_t get_last_temperature_data_raw() {
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	return last_raw_temperature;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <get_last_temperature_data_raw+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200003b4 	.word	0x200003b4

080017dc <init_audio>:
static void morse_dash();
static void tune(uint32_t,uint32_t);
static void audio_heartbeat(system_data* data);
void* audio_thread(void *arg);

void init_audio(system_data* data) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

	morse_code("init");
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <init_audio+0x48>)
 80017e6:	f000 f823 	bl	8001830 <morse_code>

	heartbeat_entry* audio_entry = calloc(1, sizeof(heartbeat_entry));
 80017ea:	2114      	movs	r1, #20
 80017ec:	2001      	movs	r0, #1
 80017ee:	f015 f803 	bl	80167f8 <calloc>
 80017f2:	4603      	mov	r3, r0
 80017f4:	60fb      	str	r3, [r7, #12]
	audio_entry->function = audio_heartbeat;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <init_audio+0x4c>)
 80017fa:	601a      	str	r2, [r3, #0]
	audio_entry->interval = 17;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2211      	movs	r2, #17
 8001800:	809a      	strh	r2, [r3, #4]
	audio_entry->next = null;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
	audio_entry->timeUntilNext = 0; // give 3ms so hopefully tasks dont overlap, plus 150 MS so that the BME280 device can take at least one sample
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
	audio_entry->name = "audio";
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <init_audio+0x50>)
 8001812:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(audio_entry);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f001 fb61 	bl	8002edc <register_heartbeat_func>

}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0801bfc4 	.word	0x0801bfc4
 8001828:	080018b1 	.word	0x080018b1
 800182c:	0801bfcc 	.word	0x0801bfcc

08001830 <morse_code>:

/**
 * NOTE: requires message to be all lowercase, and no numbers
 */
void morse_code(char* message) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	ms_message = malloc(strlen(message)+1);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fd19 	bl	8000270 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	3301      	adds	r3, #1
 8001842:	4618      	mov	r0, r3
 8001844:	f014 fff6 	bl	8016834 <malloc>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <morse_code+0x70>)
 800184e:	601a      	str	r2, [r3, #0]
	strcpy(ms_message, message);
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <morse_code+0x70>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f016 fa09 	bl	8017c6e <strcpy>

	ms_idx = 0;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <morse_code+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
	ms_char_beep_idx = 255;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <morse_code+0x78>)
 8001864:	22ff      	movs	r2, #255	; 0xff
 8001866:	701a      	strb	r2, [r3, #0]
	ms_next_beat = HAL_GetTick() - 1;
 8001868:	f004 fb06 	bl	8005e78 <HAL_GetTick>
 800186c:	4603      	mov	r3, r0
 800186e:	3b01      	subs	r3, #1
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <morse_code+0x7c>)
 8001872:	6013      	str	r3, [r2, #0]

	if (flight_data().state == INIT) {
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fc17 	bl	80020ac <flight_data>
 800187e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001882:	2b00      	cmp	r3, #0
 8001884:	d107      	bne.n	8001896 <morse_code+0x66>
		while (ms_message != null)
 8001886:	e002      	b.n	800188e <morse_code+0x5e>
			audio_heartbeat(null);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f811 	bl	80018b0 <audio_heartbeat>
		while (ms_message != null)
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <morse_code+0x70>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f8      	bne.n	8001888 <morse_code+0x58>
	}
}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003c8 	.word	0x200003c8
 80018a4:	200003cc 	.word	0x200003cc
 80018a8:	200003cd 	.word	0x200003cd
 80018ac:	200003d0 	.word	0x200003d0

080018b0 <audio_heartbeat>:

/**
 * TODO : make this function take less time (the tune function has a lot of delays in it)
 */
static void audio_heartbeat(system_data* data) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (ms_message == null)
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <audio_heartbeat+0x128>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8082 	beq.w	80019c6 <audio_heartbeat+0x116>
		return;
	if (HAL_GetTick() < ms_next_beat)
 80018c2:	f004 fad9 	bl	8005e78 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b44      	ldr	r3, [pc, #272]	; (80019dc <audio_heartbeat+0x12c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d37c      	bcc.n	80019ca <audio_heartbeat+0x11a>
		return;

	flight_state_t state = flight_data().state;
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fbe9 	bl	80020ac <flight_data>
 80018da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (state != INIT && state != PAD && state != LANDED)
 80018e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <audio_heartbeat+0x4a>
 80018ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d003      	beq.n	80018fa <audio_heartbeat+0x4a>
 80018f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d169      	bne.n	80019ce <audio_heartbeat+0x11e>
		return;

	if (ms_message[ms_idx] != '\0') {
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <audio_heartbeat+0x128>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <audio_heartbeat+0x130>)
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d054      	beq.n	80019b4 <audio_heartbeat+0x104>
		if (ms_message[ms_idx] - 'a' < 26) {
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <audio_heartbeat+0x128>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <audio_heartbeat+0x130>)
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b7a      	cmp	r3, #122	; 0x7a
 8001918:	d846      	bhi.n	80019a8 <audio_heartbeat+0xf8>
			uint8_t code = morse_table[ms_message[ms_idx] - 'a'];
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <audio_heartbeat+0x128>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <audio_heartbeat+0x130>)
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3b61      	subs	r3, #97	; 0x61
 8001928:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <audio_heartbeat+0x134>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			uint8_t len = (code >> 5) & 0b111;
 8001930:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

			if (ms_char_beep_idx == 255)
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <audio_heartbeat+0x138>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d105      	bne.n	800194e <audio_heartbeat+0x9e>
				ms_char_beep_idx = len-1;
 8001942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001946:	3b01      	subs	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <audio_heartbeat+0x138>)
 800194c:	701a      	strb	r2, [r3, #0]

			if (code & (1 << ms_char_beep_idx)) {
 800194e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001952:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <audio_heartbeat+0x138>)
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	4113      	asrs	r3, r2
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <audio_heartbeat+0xb6>
				morse_dash();
 8001960:	f000 f850 	bl	8001a04 <morse_dash>
 8001964:	e001      	b.n	800196a <audio_heartbeat+0xba>
			} else {
				morse_beep();
 8001966:	f000 f841 	bl	80019ec <morse_beep>
			}

			if (ms_char_beep_idx == 0) {
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <audio_heartbeat+0x138>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10e      	bne.n	8001990 <audio_heartbeat+0xe0>
				ms_idx++;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <audio_heartbeat+0x130>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <audio_heartbeat+0x130>)
 800197c:	701a      	strb	r2, [r3, #0]
				ms_char_beep_idx = 255;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <audio_heartbeat+0x138>)
 8001980:	22ff      	movs	r2, #255	; 0xff
 8001982:	701a      	strb	r2, [r3, #0]
				set_next_beat(500);
 8001984:	f004 fa78 	bl	8005e78 <HAL_GetTick>
 8001988:	4603      	mov	r3, r0
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <audio_heartbeat+0x12c>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01f      	b.n	80019d0 <audio_heartbeat+0x120>
			} else {
				ms_char_beep_idx--;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <audio_heartbeat+0x138>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	3b01      	subs	r3, #1
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <audio_heartbeat+0x138>)
 800199a:	701a      	strb	r2, [r3, #0]
				set_next_beat(200);
 800199c:	f004 fa6c 	bl	8005e78 <HAL_GetTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <audio_heartbeat+0x12c>)
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e013      	b.n	80019d0 <audio_heartbeat+0x120>
			}
		} else {
			set_next_beat(500);
 80019a8:	f004 fa66 	bl	8005e78 <HAL_GetTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <audio_heartbeat+0x12c>)
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00d      	b.n	80019d0 <audio_heartbeat+0x120>
		}
	} else {
		free(ms_message);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <audio_heartbeat+0x128>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f014 ff43 	bl	8016844 <free>
		ms_message = null;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <audio_heartbeat+0x128>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e004      	b.n	80019d0 <audio_heartbeat+0x120>
		return;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <audio_heartbeat+0x120>
		return;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <audio_heartbeat+0x120>
		return;
 80019ce:	bf00      	nop
	}

}
 80019d0:	3730      	adds	r7, #48	; 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200003c8 	.word	0x200003c8
 80019dc:	200003d0 	.word	0x200003d0
 80019e0:	200003cc 	.word	0x200003cc
 80019e4:	0801c7a8 	.word	0x0801c7a8
 80019e8:	200003cd 	.word	0x200003cd

080019ec <morse_beep>:

static void morse_beep() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	tune(4700,100000);
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <morse_beep+0x14>)
 80019f2:	f241 205c 	movw	r0, #4700	; 0x125c
 80019f6:	f000 f811 	bl	8001a1c <tune>
//	HAL_Delay(200);
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	000186a0 	.word	0x000186a0

08001a04 <morse_dash>:

static void morse_dash() {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	tune(4700,250000);
 8001a08:	4903      	ldr	r1, [pc, #12]	; (8001a18 <morse_dash+0x14>)
 8001a0a:	f241 205c 	movw	r0, #4700	; 0x125c
 8001a0e:	f000 f805 	bl	8001a1c <tune>
//	HAL_Delay(200);
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0003d090 	.word	0x0003d090

08001a1c <tune>:
	return null;
}

// play a tune at 50% duty cycle at a given frequency
// basically the same idea as the arduino tune function
static void tune(uint32_t freq, uint32_t duration_us) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
		delay_us(delayUs/2);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
		delay_us(delayUs/2);
	}
#endif
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <init_flight>:
	flight_state_landed
};

static double _last_heights[NEEDED_SAMPLES_FOR_VELOCITY+1];

void init_flight(system_data* data) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	heartbeat_entry* flight_entry = calloc(1, sizeof(heartbeat_entry));
 8001a3c:	2114      	movs	r1, #20
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f014 feda 	bl	80167f8 <calloc>
 8001a44:	4603      	mov	r3, r0
 8001a46:	60bb      	str	r3, [r7, #8]
	flight_entry->function = flight_heartbeat;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <init_flight+0x8c>)
 8001a4c:	601a      	str	r2, [r3, #0]
	flight_entry->interval = FLIGHT_HEARTBEAT_INTERVAL;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	220f      	movs	r2, #15
 8001a52:	809a      	strh	r2, [r3, #4]
	flight_entry->next = null;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
	flight_entry->timeUntilNext = 153; // give 3ms so hopefully tasks dont overlap, plus 150 MS so that the BME280 device can take at least one sample
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2299      	movs	r2, #153	; 0x99
 8001a5e:	609a      	str	r2, [r3, #8]
	flight_entry->name = "flight";
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <init_flight+0x90>)
 8001a64:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(flight_entry);
 8001a66:	68b8      	ldr	r0, [r7, #8]
 8001a68:	f001 fa38 	bl	8002edc <register_heartbeat_func>

	f_flight_log = (FIL*) calloc(1, sizeof(FIL));
 8001a6c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001a70:	2001      	movs	r0, #1
 8001a72:	f014 fec1 	bl	80167f8 <calloc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <init_flight+0x94>)
 8001a7c:	601a      	str	r2, [r3, #0]
	f_open(f_flight_log, "/flight/flightlog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <init_flight+0x94>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	220a      	movs	r2, #10
 8001a84:	4911      	ldr	r1, [pc, #68]	; (8001acc <init_flight+0x98>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f013 f8fa 	bl	8014c80 <f_open>

	flight_log("Flight Initialized, assuming all systems are GO\n");
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <init_flight+0x9c>)
 8001a8e:	f000 faed 	bl	800206c <flight_log>

	for (uint8_t i = 0; i < NEEDED_SAMPLES_FOR_VELOCITY + 1; i ++) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e00b      	b.n	8001ab0 <init_flight+0x7c>
		_last_heights[i] = -1;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <init_flight+0xa0>)
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	18d1      	adds	r1, r2, r3
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <init_flight+0xa4>)
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t i = 0; i < NEEDED_SAMPLES_FOR_VELOCITY + 1; i ++) {
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3301      	adds	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d9f0      	bls.n	8001a98 <init_flight+0x64>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	08001add 	.word	0x08001add
 8001ac4:	0801bfd8 	.word	0x0801bfd8
 8001ac8:	200003d4 	.word	0x200003d4
 8001acc:	0801bfe0 	.word	0x0801bfe0
 8001ad0:	0801bff8 	.word	0x0801bff8
 8001ad4:	200003d8 	.word	0x200003d8
 8001ad8:	bff00000 	.word	0xbff00000

08001adc <flight_heartbeat>:

void flight_heartbeat(system_data* data) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08e      	sub	sp, #56	; 0x38
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (flightData.groundAlt == -1) {
 8001ae4:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <flight_heartbeat+0x1c4>)
 8001af0:	f7fe ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d024      	beq.n	8001b44 <flight_heartbeat+0x68>
		struct bme280_data thp_data;
		flightData.groundAlt = get_altitude_feet();
 8001afa:	f7ff fdad 	bl	8001658 <get_altitude_feet>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd0f 	bl	8000524 <__aeabi_i2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4964      	ldr	r1, [pc, #400]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001b0c:	e9c1 2300 	strd	r2, r3, [r1]

		char* message = smintf("Detected ground level: %f ft\n", (float) flightData.groundAlt);
 8001b10:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f865 	bl	8000be8 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd11 	bl	8000548 <__aeabi_f2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ec43 2b10 	vmov	d0, r2, r3
 8001b2e:	485d      	ldr	r0, [pc, #372]	; (8001ca4 <flight_heartbeat+0x1c8>)
 8001b30:	f001 fde0 	bl	80036f4 <smintf>
 8001b34:	4603      	mov	r3, r0
 8001b36:	623b      	str	r3, [r7, #32]
		flight_log(message);
 8001b38:	6a38      	ldr	r0, [r7, #32]
 8001b3a:	f000 fa97 	bl	800206c <flight_log>
		free(message);
 8001b3e:	6a38      	ldr	r0, [r7, #32]
 8001b40:	f014 fe80 	bl	8016844 <free>
	}

	// get new altitude

	flightData.currAlt = get_altitude_feet();
 8001b44:	f7ff fd88 	bl	8001658 <get_altitude_feet>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcea 	bl	8000524 <__aeabi_i2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4951      	ldr	r1, [pc, #324]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001b56:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// calculate velocity
	for (int8_t i = NEEDED_SAMPLES_FOR_VELOCITY; i > 0; i --) {
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b60:	e015      	b.n	8001b8e <flight_heartbeat+0xb2>
		_last_heights[i] = _last_heights[i-1];
 8001b62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f997 1037 	ldrsb.w	r1, [r7, #55]	; 0x37
 8001b6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ca8 <flight_heartbeat+0x1cc>)
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	484c      	ldr	r0, [pc, #304]	; (8001ca8 <flight_heartbeat+0x1cc>)
 8001b78:	00c9      	lsls	r1, r1, #3
 8001b7a:	4401      	add	r1, r0
 8001b7c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int8_t i = NEEDED_SAMPLES_FOR_VELOCITY; i > 0; i --) {
 8001b80:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dce5      	bgt.n	8001b62 <flight_heartbeat+0x86>
	}
	_last_heights[0] = flightData.currAlt;
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b9c:	4942      	ldr	r1, [pc, #264]	; (8001ca8 <flight_heartbeat+0x1cc>)
 8001b9e:	e9c1 2300 	strd	r2, r3, [r1]

	double vel = 0;
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (int8_t i = 0; i < NEEDED_SAMPLES_FOR_VELOCITY; i ++) {
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bb4:	e048      	b.n	8001c48 <flight_heartbeat+0x16c>
		vel += (_last_heights[i] - _last_heights[i+1]) * 1000 / FLIGHT_HEARTBEAT_INTERVAL;
 8001bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bba:	4a3b      	ldr	r2, [pc, #236]	; (8001ca8 <flight_heartbeat+0x1cc>)
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a37      	ldr	r2, [pc, #220]	; (8001ca8 <flight_heartbeat+0x1cc>)
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fb58 	bl	8000288 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <flight_heartbeat+0x1d0>)
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <flight_heartbeat+0x1d4>)
 8001bf8:	f7fe fe28 	bl	800084c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c04:	f7fe fb42 	bl	800028c <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (_last_heights[i+1] == -1) vel = -NEEDED_SAMPLES_FOR_VELOCITY;
 8001c10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <flight_heartbeat+0x1cc>)
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <flight_heartbeat+0x1c4>)
 8001c26:	f7fe ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <flight_heartbeat+0x15e>
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <flight_heartbeat+0x1d8>)
 8001c36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (int8_t i = 0; i < NEEDED_SAMPLES_FOR_VELOCITY; i ++) {
 8001c3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	ddb2      	ble.n	8001bb6 <flight_heartbeat+0xda>
	}
	vel /= NEEDED_SAMPLES_FOR_VELOCITY;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <flight_heartbeat+0x1dc>)
 8001c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c5a:	f7fe fdf7 	bl	800084c <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	flightData.approxVelocity = vel;
 8001c66:	490d      	ldr	r1, [pc, #52]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	flightData.lastUpdateMs = HAL_GetTick();
 8001c70:	f004 f902 	bl	8005e78 <HAL_GetTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001c78:	61d3      	str	r3, [r2, #28]

	// do things depending on flight state

	flightData.state = flight_state_funcs[flightData.state](data);
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001c7c:	7e5b      	ldrb	r3, [r3, #25]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <flight_heartbeat+0x1e0>)
 8001c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <flight_heartbeat+0x1c0>)
 8001c90:	765a      	strb	r2, [r3, #25]
}
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	; 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	bff00000 	.word	0xbff00000
 8001ca4:	0801c02c 	.word	0x0801c02c
 8001ca8:	200003d8 	.word	0x200003d8
 8001cac:	408f4000 	.word	0x408f4000
 8001cb0:	402e0000 	.word	0x402e0000
 8001cb4:	c0080000 	.word	0xc0080000
 8001cb8:	40080000 	.word	0x40080000
 8001cbc:	20000020 	.word	0x20000020

08001cc0 <flight_state_init>:


flight_state_t flight_state_init(system_data* data) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	return PAD;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <flight_state_pad>:

uint32_t _fsp_last_time = 0;

flight_state_t flight_state_pad(system_data* data) {
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() / 15000 > _fsp_last_time) {
 8001ce0:	f004 f8ca 	bl	8005e78 <HAL_GetTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a31      	ldr	r2, [pc, #196]	; (8001dac <flight_state_pad+0xd4>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0b1a      	lsrs	r2, r3, #12
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <flight_state_pad+0xd8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d90b      	bls.n	8001d0e <flight_state_pad+0x36>
		_fsp_last_time = HAL_GetTick() / 15000;
 8001cf6:	f004 f8bf 	bl	8005e78 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <flight_state_pad+0xd4>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0b1b      	lsrs	r3, r3, #12
 8001d04:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <flight_state_pad+0xd8>)
 8001d06:	6013      	str	r3, [r2, #0]
		morse_code("ready");
 8001d08:	482a      	ldr	r0, [pc, #168]	; (8001db4 <flight_state_pad+0xdc>)
 8001d0a:	f7ff fd91 	bl	8001830 <morse_code>
	}


	if (flightData.approxVelocity == -1) return PAD;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <flight_state_pad+0xe0>)
 8001d10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <flight_state_pad+0xe4>)
 8001d1a:	f7fe fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <flight_state_pad+0x50>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e03d      	b.n	8001da4 <flight_state_pad+0xcc>
	if (flightData.approxVelocity < 20) return PAD;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <flight_state_pad+0xe0>)
 8001d2a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <flight_state_pad+0xe8>)
 8001d34:	f7fe fed2 	bl	8000adc <__aeabi_dcmplt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <flight_state_pad+0x6a>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e030      	b.n	8001da4 <flight_state_pad+0xcc>
	if (flightData.currAlt < flightData.groundAlt + 100) return PAD;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <flight_state_pad+0xe0>)
 8001d44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <flight_state_pad+0xe0>)
 8001d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <flight_state_pad+0xec>)
 8001d54:	f7fe fa9a 	bl	800028c <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe febc 	bl	8000adc <__aeabi_dcmplt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <flight_state_pad+0x96>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e01a      	b.n	8001da4 <flight_state_pad+0xcc>

	char* message = smintf("Detected liftoff. Approximate velocity: %f", (float) flightData.approxVelocity);
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <flight_state_pad+0xe0>)
 8001d70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe ff36 	bl	8000be8 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbe2 	bl	8000548 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	ec43 2b10 	vmov	d0, r2, r3
 8001d8c:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <flight_state_pad+0xf0>)
 8001d8e:	f001 fcb1 	bl	80036f4 <smintf>
 8001d92:	4603      	mov	r3, r0
 8001d94:	60fb      	str	r3, [r7, #12]
	flight_log(message);
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f968 	bl	800206c <flight_log>
	free(message);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f014 fd51 	bl	8016844 <free>

	return MOTOR_BURN;
 8001da2:	2302      	movs	r3, #2
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	45e7b273 	.word	0x45e7b273
 8001db0:	200003f8 	.word	0x200003f8
 8001db4:	0801c04c 	.word	0x0801c04c
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	bff00000 	.word	0xbff00000
 8001dc0:	40340000 	.word	0x40340000
 8001dc4:	40590000 	.word	0x40590000
 8001dc8:	0801c054 	.word	0x0801c054

08001dcc <flight_state_motor_burn>:


static double _fsmb_lastVel = -1;

flight_state_t flight_state_motor_burn(system_data* data) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	storage_write_to_flash(true);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f000 fac1 	bl	800235c <storage_write_to_flash>

	if (_fsmb_lastVel == -1) {
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <flight_state_motor_burn+0x94>)
 8001ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <flight_state_motor_burn+0x98>)
 8001de6:	f7fe fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <flight_state_motor_burn+0x34>
		_fsmb_lastVel = flightData.approxVelocity;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <flight_state_motor_burn+0x9c>)
 8001df2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001df6:	491a      	ldr	r1, [pc, #104]	; (8001e60 <flight_state_motor_burn+0x94>)
 8001df8:	e9c1 2300 	strd	r2, r3, [r1]
		return MOTOR_BURN;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e02a      	b.n	8001e56 <flight_state_motor_burn+0x8a>
	}
	if (_fsmb_lastVel < flightData.approxVelocity) {
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <flight_state_motor_burn+0x9c>)
 8001e02:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <flight_state_motor_burn+0x94>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <flight_state_motor_burn+0x5a>
		_fsmb_lastVel = flightData.approxVelocity;
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <flight_state_motor_burn+0x9c>)
 8001e18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1c:	4910      	ldr	r1, [pc, #64]	; (8001e60 <flight_state_motor_burn+0x94>)
 8001e1e:	e9c1 2300 	strd	r2, r3, [r1]
		return MOTOR_BURN;
 8001e22:	2302      	movs	r3, #2
 8001e24:	e017      	b.n	8001e56 <flight_state_motor_burn+0x8a>
	}

	if (flightData.approxVelocity < 0) {
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <flight_state_motor_burn+0x9c>)
 8001e28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f7fe fe52 	bl	8000adc <__aeabi_dcmplt>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <flight_state_motor_burn+0x7c>
		flightData.apogeeReached = 1;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <flight_state_motor_burn+0x9c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	761a      	strb	r2, [r3, #24]
		return DESCENT;
 8001e44:	2304      	movs	r3, #4
 8001e46:	e006      	b.n	8001e56 <flight_state_motor_burn+0x8a>
	}

	flight_log("Detected motor burnout");
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <flight_state_motor_burn+0xa0>)
 8001e4a:	f000 f90f 	bl	800206c <flight_log>
	flightData.activeControlsPermitted = 1;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <flight_state_motor_burn+0x9c>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	769a      	strb	r2, [r3, #26]
	return ASCENT;
 8001e54:	2303      	movs	r3, #3
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000038 	.word	0x20000038
 8001e64:	bff00000 	.word	0xbff00000
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	0801c080 	.word	0x0801c080

08001e70 <flight_state_ascent>:

flight_state_t flight_state_ascent(system_data* data) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	if (flightData.approxVelocity > 0) return ASCENT;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <flight_state_ascent+0x70>)
 8001e7a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f7fe fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <flight_state_ascent+0x24>
 8001e90:	2303      	movs	r3, #3
 8001e92:	e021      	b.n	8001ed8 <flight_state_ascent+0x68>
	flightData.apogeeReached = 1;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <flight_state_ascent+0x70>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	761a      	strb	r2, [r3, #24]

	char* message = smintf("Detected apogee (%f ft)", (flightData.currAlt - flightData.groundAlt));
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <flight_state_ascent+0x70>)
 8001e9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <flight_state_ascent+0x70>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe f9ef 	bl	8000288 <__aeabi_dsub>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b17 	vmov	d7, r2, r3
 8001eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb6:	eef0 0a67 	vmov.f32	s1, s15
 8001eba:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <flight_state_ascent+0x74>)
 8001ebc:	f001 fc1a 	bl	80036f4 <smintf>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
	flight_log(message);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f8d1 	bl	800206c <flight_log>
	free(message);
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f014 fcba 	bl	8016844 <free>

	fire_ejection_charge(DROGUE);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f901 	bl	80020d8 <fire_ejection_charge>

	return DESCENT;
 8001ed6:	2304      	movs	r3, #4
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	0801c098 	.word	0x0801c098

08001ee8 <flight_state_descent>:

flight_state_t flight_state_descent(system_data* data) {
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	if (flightData.currAlt - flightData.groundAlt < MAIN_PARACHUTE_ALT_FT) {
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <flight_state_descent+0xd8>)
 8001ef2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <flight_state_descent+0xd8>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe f9c4 	bl	8000288 <__aeabi_dsub>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <flight_state_descent+0xdc>)
 8001f0e:	f7fe fde5 	bl	8000adc <__aeabi_dcmplt>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <flight_state_descent+0x36>
		fire_ejection_charge(MAIN);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f000 f8dd 	bl	80020d8 <fire_ejection_charge>
	}
	if (flightData.currAlt > flightData.groundAlt + 100) return DESCENT;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <flight_state_descent+0xd8>)
 8001f20:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <flight_state_descent+0xd8>)
 8001f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <flight_state_descent+0xe0>)
 8001f30:	f7fe f9ac 	bl	800028c <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <flight_state_descent+0x62>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e036      	b.n	8001fb8 <flight_state_descent+0xd0>
	if (abs(flightData.approxVelocity) > 10) return DESCENT;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <flight_state_descent+0xd8>)
 8001f4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe00 	bl	8000b58 <__aeabi_d2iz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bfb8      	it	lt
 8001f5e:	425b      	neglt	r3, r3
 8001f60:	2b0a      	cmp	r3, #10
 8001f62:	dd01      	ble.n	8001f68 <flight_state_descent+0x80>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e027      	b.n	8001fb8 <flight_state_descent+0xd0>


	// LANDED

	storage_write_to_flash(false);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f9f7 	bl	800235c <storage_write_to_flash>
	storage_finish_flight(data);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9a8 	bl	80022c4 <storage_finish_flight>

	char* message = smintf("Landed at altitude %f", (float) (flightData.currAlt - flightData.groundAlt));
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <flight_state_descent+0xd8>)
 8001f76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <flight_state_descent+0xd8>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe f982 	bl	8000288 <__aeabi_dsub>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe2c 	bl	8000be8 <__aeabi_d2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fad8 	bl	8000548 <__aeabi_f2d>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	ec43 2b10 	vmov	d0, r2, r3
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <flight_state_descent+0xe4>)
 8001fa2:	f001 fba7 	bl	80036f4 <smintf>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60fb      	str	r3, [r7, #12]
	flight_log(message);
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f85e 	bl	800206c <flight_log>
	free(message);
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f014 fc47 	bl	8016844 <free>


	return LANDED;
 8001fb6:	2305      	movs	r3, #5
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	408f4000 	.word	0x408f4000
 8001fc8:	40590000 	.word	0x40590000
 8001fcc:	0801c0b0 	.word	0x0801c0b0

08001fd0 <flight_state_landed>:

flight_state_t flight_state_landed(system_data* data) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

	activate_beepx();
 8001fd8:	f000 f889 	bl	80020ee <activate_beepx>
	return LANDED;
 8001fdc:	2305      	movs	r3, #5
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <interpolate_height_agl>:

float interpolate_height_agl() {
 8001fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fec:	af00      	add	r7, sp, #0
	return (flightData.currAlt - flightData.groundAlt) + flightData.approxVelocity * (HAL_GetTick() - flightData.lastUpdateMs) / 1000;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <interpolate_height_agl+0x7c>)
 8001ff0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <interpolate_height_agl+0x7c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f945 	bl	8000288 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4690      	mov	r8, r2
 8002004:	4699      	mov	r9, r3
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <interpolate_height_agl+0x7c>)
 8002008:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800200c:	f003 ff34 	bl	8005e78 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <interpolate_height_agl+0x7c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa73 	bl	8000504 <__aeabi_ui2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe fae7 	bl	80005f8 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <interpolate_height_agl+0x80>)
 8002038:	f7fe fc08 	bl	800084c <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4640      	mov	r0, r8
 8002042:	4649      	mov	r1, r9
 8002044:	f7fe f922 	bl	800028c <__adddf3>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fdca 	bl	8000be8 <__aeabi_d2f>
 8002054:	4603      	mov	r3, r0
 8002056:	ee07 3a90 	vmov	s15, r3
}
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000
 8002068:	408f4000 	.word	0x408f4000

0800206c <flight_log>:

void flight_log(char* message) {
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	f_printf(f_flight_log, "[%d] %s\n", (int) HAL_GetTick(), message);
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <flight_log+0x38>)
 8002076:	681c      	ldr	r4, [r3, #0]
 8002078:	f003 fefe 	bl	8005e78 <HAL_GetTick>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4909      	ldr	r1, [pc, #36]	; (80020a8 <flight_log+0x3c>)
 8002084:	4620      	mov	r0, r4
 8002086:	f013 fc05 	bl	8015894 <f_printf>
	f_sync(f_flight_log);
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <flight_log+0x38>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f013 f929 	bl	80152e6 <f_sync>

	log_message(message);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fee5 	bl	8002e64 <log_message>
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200003d4 	.word	0x200003d4
 80020a8:	0801c0c8 	.word	0x0801c0c8

080020ac <flight_data>:

const flight_data_t flight_data() {
 80020ac:	b4b0      	push	{r4, r5, r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return (const flight_data_t) flightData;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <flight_data+0x28>)
 80020b8:	461c      	mov	r4, r3
 80020ba:	4615      	mov	r5, r2
 80020bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bcb0      	pop	{r4, r5, r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000

080020d8 <fire_ejection_charge>:

void fire_ejection_charge(ejection_type_t type) {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]

}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <activate_beepx>:

void activate_beepx() {
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <init_storage>:
	log_message("flash init complete. hopefully it works!");
}

#endif

void init_storage(system_data* data) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	data->file = &file;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <init_storage+0xfc>)
 8002108:	605a      	str	r2, [r3, #4]
	data->fs = &fs;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <init_storage+0x100>)
 800210e:	609a      	str	r2, [r3, #8]

	// mount the file system

	log_message("mounting file system");
 8002110:	483b      	ldr	r0, [pc, #236]	; (8002200 <init_storage+0x104>)
 8002112:	f000 fea7 	bl	8002e64 <log_message>
	log_message("mounting file system");
 8002116:	483a      	ldr	r0, [pc, #232]	; (8002200 <init_storage+0x104>)
 8002118:	f000 fea4 	bl	8002e64 <log_message>
	log_message("mounting file system");
 800211c:	4838      	ldr	r0, [pc, #224]	; (8002200 <init_storage+0x104>)
 800211e:	f000 fea1 	bl	8002e64 <log_message>

	HAL_Delay(500);
 8002122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002126:	f003 feb3 	bl	8005e90 <HAL_Delay>

	log_message("mounting file system");
 800212a:	4835      	ldr	r0, [pc, #212]	; (8002200 <init_storage+0x104>)
 800212c:	f000 fe9a 	bl	8002e64 <log_message>

	f_status = f_mount(&fs, "/", 1);
 8002130:	2201      	movs	r2, #1
 8002132:	4934      	ldr	r1, [pc, #208]	; (8002204 <init_storage+0x108>)
 8002134:	4831      	ldr	r0, [pc, #196]	; (80021fc <init_storage+0x100>)
 8002136:	f012 fd5d 	bl	8014bf4 <f_mount>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <init_storage+0x10c>)
 8002140:	701a      	strb	r2, [r3, #0]
	check_ff_status(f_status, "mount root");
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <init_storage+0x10c>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4931      	ldr	r1, [pc, #196]	; (800220c <init_storage+0x110>)
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f913 	bl	8002374 <check_ff_status>

	if (f_status != FR_OK) {
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <init_storage+0x10c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <init_storage+0x6e>
		data->fileOpen = false;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	731a      	strb	r2, [r3, #12]
		log_messagef("error mounting file system (errno %d).", (int) f_status);
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <init_storage+0x10c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	482b      	ldr	r0, [pc, #172]	; (8002210 <init_storage+0x114>)
 8002164:	f000 fe9c 	bl	8002ea0 <log_messagef>
		return;
 8002168:	e043      	b.n	80021f2 <init_storage+0xf6>
	}

	log_message("mounted file system");
 800216a:	482a      	ldr	r0, [pc, #168]	; (8002214 <init_storage+0x118>)
 800216c:	f000 fe7a 	bl	8002e64 <log_message>

	// try to open a file

	char* fileName = smintf("/alt/data%d.csv", (int) get_file_count("/alt"));
 8002170:	4829      	ldr	r0, [pc, #164]	; (8002218 <init_storage+0x11c>)
 8002172:	f000 f8b1 	bl	80022d8 <get_file_count>
 8002176:	4603      	mov	r3, r0
 8002178:	4619      	mov	r1, r3
 800217a:	4828      	ldr	r0, [pc, #160]	; (800221c <init_storage+0x120>)
 800217c:	f001 faba 	bl	80036f4 <smintf>
 8002180:	4603      	mov	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]
	f_status = f_open(&file, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 8002184:	220a      	movs	r2, #10
 8002186:	68f9      	ldr	r1, [r7, #12]
 8002188:	481b      	ldr	r0, [pc, #108]	; (80021f8 <init_storage+0xfc>)
 800218a:	f012 fd79 	bl	8014c80 <f_open>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <init_storage+0x10c>)
 8002194:	701a      	strb	r2, [r3, #0]
	data->fileOpen = f_status == FR_OK;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <init_storage+0x10c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	731a      	strb	r2, [r3, #12]
	check_ff_status(f_status, "create file"); // these checks might be kinda redundant, but oh well
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <init_storage+0x10c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	491c      	ldr	r1, [pc, #112]	; (8002220 <init_storage+0x124>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f8e0 	bl	8002374 <check_ff_status>

	if (f_status != FR_OK) {
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <init_storage+0x10c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <init_storage+0xd0>
		log_messagef("could not create file %s (errno %d)", fileName, (int) f_status);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <init_storage+0x10c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	4817      	ldr	r0, [pc, #92]	; (8002224 <init_storage+0x128>)
 80021c6:	f000 fe6b 	bl	8002ea0 <log_messagef>
		return;
 80021ca:	e012      	b.n	80021f2 <init_storage+0xf6>
	}

	log_messagef("Logging data to file %s", fileName);
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	4816      	ldr	r0, [pc, #88]	; (8002228 <init_storage+0x12c>)
 80021d0:	f000 fe66 	bl	8002ea0 <log_messagef>

	char* header = FILE_HEADER;
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <init_storage+0x130>)
 80021d6:	60bb      	str	r3, [r7, #8]
	f_printf(&file, header);
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <init_storage+0xfc>)
 80021dc:	f013 fb5a 	bl	8015894 <f_printf>
	f_sync(&file);
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <init_storage+0xfc>)
 80021e2:	f013 f880 	bl	80152e6 <f_sync>

	log_message("created file");
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <init_storage+0x134>)
 80021e8:	f000 fe3c 	bl	8002e64 <log_message>


	free(fileName); // dont forget to free memory called with smintf
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f014 fb29 	bl	8016844 <free>

#ifdef ENABLE_FLASH
	init_flash(data);
#endif

}
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000062c 	.word	0x2000062c
 80021fc:	200003fc 	.word	0x200003fc
 8002200:	0801c0d4 	.word	0x0801c0d4
 8002204:	0801c0ec 	.word	0x0801c0ec
 8002208:	2000085c 	.word	0x2000085c
 800220c:	0801c0f0 	.word	0x0801c0f0
 8002210:	0801c0fc 	.word	0x0801c0fc
 8002214:	0801c124 	.word	0x0801c124
 8002218:	0801c138 	.word	0x0801c138
 800221c:	0801c140 	.word	0x0801c140
 8002220:	0801c150 	.word	0x0801c150
 8002224:	0801c15c 	.word	0x0801c15c
 8002228:	0801c180 	.word	0x0801c180
 800222c:	0801c198 	.word	0x0801c198
 8002230:	0801c260 	.word	0x0801c260

08002234 <storage_log>:

void storage_log(system_data* data, char* message) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	f_printf(data->file, message);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f013 fb25 	bl	8015894 <f_printf>
	f_printf(data->file, "\n");
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <storage_log+0x34>)
 8002250:	4618      	mov	r0, r3
 8002252:	f013 fb1f 	bl	8015894 <f_printf>
	f_sync(data->file);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f013 f843 	bl	80152e6 <f_sync>

#ifdef ENABLE_FLASH
	if (writeToFlash)
		wq_write_bytes(flash_ptr, message, (int32_t) strlen(message));
#endif
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0801c270 	.word	0x0801c270

0800226c <mkfile_and_dump>:

void mkfile_and_dump(char* path, uint8_t* data, uint32_t len) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a0      	sub	sp, #128	; 0x80
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
	FILE file;
	f_open(&file, path, FA_CREATE_ALWAYS | FA_WRITE);
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	220a      	movs	r2, #10
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	4618      	mov	r0, r3
 8002282:	f012 fcfd 	bl	8014c80 <f_open>
	UINT bw;
	while (bw < len)
 8002286:	e00b      	b.n	80022a0 <mkfile_and_dump+0x34>
		f_write(&file, data+bw, len-bw, &bw);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	18d1      	adds	r1, r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	f107 0018 	add.w	r0, r7, #24
 800229c:	f012 feae 	bl	8014ffc <f_write>
	while (bw < len)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8ef      	bhi.n	8002288 <mkfile_and_dump+0x1c>
	f_sync(&file);
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f013 f81a 	bl	80152e6 <f_sync>
	f_close(&file);
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f013 f893 	bl	80153e2 <f_close>
}
 80022bc:	bf00      	nop
 80022be:	3780      	adds	r7, #128	; 0x80
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <storage_finish_flight>:

// flight is finished, so we dont need to worry about vibrations effecting our SD card
// so we will copy from flash to SD card
void storage_finish_flight(system_data* data) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	}

	f_sync(&file);
	f_close(&file);
#endif
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <get_file_count>:

uint16_t get_file_count(char* dir_loc) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b096      	sub	sp, #88	; 0x58
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	char* nameSoWeEnterWhileLoop = "y";
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <get_file_count+0x80>)
 80022e2:	653b      	str	r3, [r7, #80]	; 0x50

	DIR dir;
	FILINFO fno = {
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	747b      	strb	r3, [r7, #17]
			.fname = nameSoWeEnterWhileLoop
	};
	f_mkdir(dir_loc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f013 f94a 	bl	8015596 <f_mkdir>
	f_opendir(&dir, dir_loc);
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4618      	mov	r0, r3
 800230a:	f013 f894 	bl	8015436 <f_opendir>
	FRESULT result = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint16_t i = 65535; // force cause an overflow, so when we run while loop for the first time, i = 0
 8002314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002318:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	while (result == 0 && fno.fname[0] != 0) {
 800231c:	e00f      	b.n	800233e <get_file_count+0x66>

		i++;
 800231e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002322:	3301      	adds	r3, #1
 8002324:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		result = f_readdir(&dir, &fno);
 8002328:	f107 0208 	add.w	r2, r7, #8
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f013 f8f2 	bl	801551c <f_readdir>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while (result == 0 && fno.fname[0] != 0) {
 800233e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <get_file_count+0x74>
 8002346:	7c7b      	ldrb	r3, [r7, #17]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e8      	bne.n	800231e <get_file_count+0x46>

	}
	return i;
 800234c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
}
 8002350:	4618      	mov	r0, r3
 8002352:	3758      	adds	r7, #88	; 0x58
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	0801c274 	.word	0x0801c274

0800235c <storage_write_to_flash>:

void storage_write_to_flash(bool newVal) {
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
#ifdef ENABLE_FLASH
	writeToFlash = newVal;
#endif
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <check_ff_status>:


// these functions down below are just for debugging purposes

void check_ff_status(FRESULT result, char* desc) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
	if (result == FR_OK) {
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <check_ff_status+0x1c>
		led_blink_delay(3,50); // just something obvious
 8002386:	2132      	movs	r1, #50	; 0x32
 8002388:	2003      	movs	r0, #3
 800238a:	f000 fdf5 	bl	8002f78 <led_blink_delay>
	}

#ifndef DEBUG
	assert(result == FR_OK);
#endif
}
 800238e:	e00f      	b.n	80023b0 <check_ff_status+0x3c>
		 uint8_t code = (uint8_t) result;
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	73fb      	strb	r3, [r7, #15]
		 char* message = smintf("FATFS Error: %d %s\n", (int) code, desc);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	4807      	ldr	r0, [pc, #28]	; (80023b8 <check_ff_status+0x44>)
 800239c:	f001 f9aa 	bl	80036f4 <smintf>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60bb      	str	r3, [r7, #8]
		 log_message(message);
 80023a4:	68b8      	ldr	r0, [r7, #8]
 80023a6:	f000 fd5d 	bl	8002e64 <log_message>
		 free(message);
 80023aa:	68b8      	ldr	r0, [r7, #8]
 80023ac:	f014 fa4a 	bl	8016844 <free>
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	0801c278 	.word	0x0801c278

080023bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



  data = (system_data*) calloc(1, sizeof(system_data));
 80023c2:	2110      	movs	r1, #16
 80023c4:	2001      	movs	r0, #1
 80023c6:	f014 fa17 	bl	80167f8 <calloc>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <main+0x164>)
 80023d0:	601a      	str	r2, [r3, #0]

  data->main_entry = &main_entry;
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <main+0x164>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a53      	ldr	r2, [pc, #332]	; (8002524 <main+0x168>)
 80023d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023da:	f003 fce7 	bl	8005dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023de:	f000 f8bb 	bl	8002558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  HAL_Delay(1000); // give time for SD reader to load firmware or something - otherwise reset button has to be pressed
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e2:	f000 fb5b 	bl	8002a9c <MX_GPIO_Init>
  MX_DAC_Init();
 80023e6:	f000 f91f 	bl	8002628 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 80023ea:	f000 f9a3 	bl	8002734 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80023ee:	f000 f9c1 	bl	8002774 <MX_SPI1_Init>
  MX_SPI2_Init();
 80023f2:	f000 f9f5 	bl	80027e0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80023f6:	f000 fa29 	bl	800284c <MX_SPI3_Init>
  MX_TIM1_Init();
 80023fa:	f000 fa5d 	bl	80028b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023fe:	f000 fab1 	bl	8002964 <MX_TIM2_Init>
  MX_FATFS_Init();
 8002402:	f00e fbf1 	bl	8010be8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002406:	f013 fcbf 	bl	8015d88 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800240a:	f000 f937 	bl	800267c <MX_I2C1_Init>
  MX_DMA_Init();
 800240e:	f000 fb25 	bl	8002a5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002412:	f000 faf9 	bl	8002a08 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002416:	f000 f95f 	bl	80026d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  led_blink(3);
 800241a:	2003      	movs	r0, #3
 800241c:	f000 fda0 	bl	8002f60 <led_blink>

  log_message("initializing flight computer");
 8002420:	4841      	ldr	r0, [pc, #260]	; (8002528 <main+0x16c>)
 8002422:	f000 fd1f 	bl	8002e64 <log_message>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // sets the Vcc for the IO interface on the THP sensor to high
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242c:	483f      	ldr	r0, [pc, #252]	; (800252c <main+0x170>)
 800242e:	f004 fc1d 	bl	8006c6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, PIN_THP_CHIP_SELECT, GPIO_PIN_SET); // pin needs to be high initially for BME280
 8002432:	2201      	movs	r2, #1
 8002434:	2102      	movs	r1, #2
 8002436:	483e      	ldr	r0, [pc, #248]	; (8002530 <main+0x174>)
 8002438:	f004 fc18 	bl	8006c6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // audio port off by default
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002442:	483a      	ldr	r0, [pc, #232]	; (800252c <main+0x170>)
 8002444:	f004 fc12 	bl	8006c6c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim1); // make sure we do this before starting audio
 8002448:	483a      	ldr	r0, [pc, #232]	; (8002534 <main+0x178>)
 800244a:	f00b fb41 	bl	800dad0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800244e:	483a      	ldr	r0, [pc, #232]	; (8002538 <main+0x17c>)
 8002450:	f00b fb3e 	bl	800dad0 <HAL_TIM_Base_Start>

  init_audio(data); // initialize early so we can hear a beep early too
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <main+0x164>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f9bf 	bl	80017dc <init_audio>


  uint32_t timeMS = HAL_GetTick();
 800245e:	f003 fd0b 	bl	8005e78 <HAL_GetTick>
 8002462:	6078      	str	r0, [r7, #4]
  delay_us(1500000);
 8002464:	4835      	ldr	r0, [pc, #212]	; (800253c <main+0x180>)
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	f000 fdbd 	bl	8002fe8 <delay_us>
  timeMS = HAL_GetTick() - timeMS;
 800246e:	f003 fd03 	bl	8005e78 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	607b      	str	r3, [r7, #4]
  log_message("initializing storage");
 800247a:	4831      	ldr	r0, [pc, #196]	; (8002540 <main+0x184>)
 800247c:	f000 fcf2 	bl	8002e64 <log_message>
  log_message("initializing storage");
 8002480:	482f      	ldr	r0, [pc, #188]	; (8002540 <main+0x184>)
 8002482:	f000 fcef 	bl	8002e64 <log_message>
  log_message("initializing storage");
 8002486:	482e      	ldr	r0, [pc, #184]	; (8002540 <main+0x184>)
 8002488:	f000 fcec 	bl	8002e64 <log_message>
  log_message("initializing storage");
 800248c:	482c      	ldr	r0, [pc, #176]	; (8002540 <main+0x184>)
 800248e:	f000 fce9 	bl	8002e64 <log_message>
  log_message("initializing storage");
 8002492:	482b      	ldr	r0, [pc, #172]	; (8002540 <main+0x184>)
 8002494:	f000 fce6 	bl	8002e64 <log_message>
  log_message("initializing storage");
 8002498:	4829      	ldr	r0, [pc, #164]	; (8002540 <main+0x184>)
 800249a:	f000 fce3 	bl	8002e64 <log_message>
  log_message("initializing storage");
 800249e:	4828      	ldr	r0, [pc, #160]	; (8002540 <main+0x184>)
 80024a0:	f000 fce0 	bl	8002e64 <log_message>
  log_message("initializing storage");
 80024a4:	4826      	ldr	r0, [pc, #152]	; (8002540 <main+0x184>)
 80024a6:	f000 fcdd 	bl	8002e64 <log_message>
  log_messagef("1500ms in delay_us is really %d ms", timeMS);
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4825      	ldr	r0, [pc, #148]	; (8002544 <main+0x188>)
 80024ae:	f000 fcf7 	bl	8002ea0 <log_messagef>
//  Create_File("test.txt");
//  Write_File("test.txt","Hello, World!");
//  Unmount_SD("/");

  // initialize SD card file system
  init_storage(data);
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <main+0x164>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fe20 	bl	80020fc <init_storage>

  // initialize different "modules"

  log_message("initializing modules");
 80024bc:	4822      	ldr	r0, [pc, #136]	; (8002548 <main+0x18c>)
 80024be:	f000 fcd1 	bl	8002e64 <log_message>

  init_altimeter(data);
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <main+0x164>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f81e 	bl	8001508 <init_altimeter>
  init_accelerometer(data);
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <main+0x164>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fd8d 	bl	8000ff0 <init_accelerometer>
  init_flight(data);
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <main+0x164>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff faaa 	bl	8001a34 <init_flight>
  init_telemetry(data);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <main+0x164>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fb9b 	bl	8005c20 <init_telemetry>
  init_active_controls(data);
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <main+0x164>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe febe 	bl	8001270 <init_active_controls>
  init_tracking(data);
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <main+0x164>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 fe59 	bl	80041b0 <init_tracking>
  init_prometheus(data);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <main+0x164>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fe4e 	bl	80031a4 <init_prometheus>

  log_message("initialized modules");
 8002508:	4810      	ldr	r0, [pc, #64]	; (800254c <main+0x190>)
 800250a:	f000 fcab 	bl	8002e64 <log_message>

  log_message(FILE_HEADER); // defined in fs_storage.h
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <main+0x194>)
 8002510:	f000 fca8 	bl	8002e64 <log_message>

//	led_blink(5);

  morse_code("OK");
 8002514:	480f      	ldr	r0, [pc, #60]	; (8002554 <main+0x198>)
 8002516:	f7ff f98b 	bl	8001830 <morse_code>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  run_heartbeats();
 800251a:	f000 fb73 	bl	8002c04 <run_heartbeats>
 800251e:	e7fc      	b.n	800251a <main+0x15e>
 8002520:	20000bdc 	.word	0x20000bdc
 8002524:	20000040 	.word	0x20000040
 8002528:	0801c294 	.word	0x0801c294
 800252c:	40020000 	.word	0x40020000
 8002530:	40021000 	.word	0x40021000
 8002534:	20000b08 	.word	0x20000b08
 8002538:	20000b50 	.word	0x20000b50
 800253c:	0016e360 	.word	0x0016e360
 8002540:	0801c2b4 	.word	0x0801c2b4
 8002544:	0801c2cc 	.word	0x0801c2cc
 8002548:	0801c2f0 	.word	0x0801c2f0
 800254c:	0801c308 	.word	0x0801c308
 8002550:	0801c31c 	.word	0x0801c31c
 8002554:	0801c3e4 	.word	0x0801c3e4

08002558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b094      	sub	sp, #80	; 0x50
 800255c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	2230      	movs	r2, #48	; 0x30
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f015 fac2 	bl	8017af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <SystemClock_Config+0xc8>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <SystemClock_Config+0xc8>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6413      	str	r3, [r2, #64]	; 0x40
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <SystemClock_Config+0xc8>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <SystemClock_Config+0xcc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <SystemClock_Config+0xcc>)
 80025a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <SystemClock_Config+0xcc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025b4:	2302      	movs	r3, #2
 80025b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025b8:	2301      	movs	r3, #1
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025bc:	2310      	movs	r3, #16
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c0:	2302      	movs	r3, #2
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80025c8:	2310      	movs	r3, #16
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d0:	2302      	movs	r3, #2
 80025d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025d4:	2304      	movs	r3, #4
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d8:	f107 0320 	add.w	r3, r7, #32
 80025dc:	4618      	mov	r0, r3
 80025de:	f008 fa3f 	bl	800aa60 <HAL_RCC_OscConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025e8:	f000 fd36 	bl	8003058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ec:	230f      	movs	r3, #15
 80025ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f008 fca2 	bl	800af50 <HAL_RCC_ClockConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002612:	f000 fd21 	bl	8003058 <Error_Handler>
  }
}
 8002616:	bf00      	nop
 8002618:	3750      	adds	r7, #80	; 0x50
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40007000 	.word	0x40007000

08002628 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800262e:	463b      	mov	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_DAC_Init+0x4c>)
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <MX_DAC_Init+0x50>)
 800263a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_DAC_Init+0x4c>)
 800263e:	f003 fd5c 	bl	80060fa <HAL_DAC_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002648:	f000 fd06 	bl	8003058 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800264c:	2300      	movs	r3, #0
 800264e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002654:	463b      	mov	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_DAC_Init+0x4c>)
 800265c:	f003 fd6f 	bl	800613e <HAL_DAC_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002666:	f000 fcf7 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000860 	.word	0x20000860
 8002678:	40007400 	.word	0x40007400

0800267c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <MX_I2C1_Init+0x50>)
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <MX_I2C1_Init+0x54>)
 8002684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_I2C1_Init+0x50>)
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <MX_I2C1_Init+0x58>)
 800268a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <MX_I2C1_Init+0x50>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_I2C1_Init+0x50>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_I2C1_Init+0x50>)
 800269a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800269e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MX_I2C1_Init+0x50>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_I2C1_Init+0x50>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <MX_I2C1_Init+0x50>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_I2C1_Init+0x50>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <MX_I2C1_Init+0x50>)
 80026ba:	f004 fb0b 	bl	8006cd4 <HAL_I2C_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026c4:	f000 fcc8 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000874 	.word	0x20000874
 80026d0:	40005400 	.word	0x40005400
 80026d4:	000186a0 	.word	0x000186a0

080026d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_I2C2_Init+0x50>)
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <MX_I2C2_Init+0x54>)
 80026e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_I2C2_Init+0x50>)
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <MX_I2C2_Init+0x58>)
 80026e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_I2C2_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_I2C2_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_I2C2_Init+0x50>)
 80026f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MX_I2C2_Init+0x50>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_I2C2_Init+0x50>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <MX_I2C2_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_I2C2_Init+0x50>)
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002714:	4804      	ldr	r0, [pc, #16]	; (8002728 <MX_I2C2_Init+0x50>)
 8002716:	f004 fadd 	bl	8006cd4 <HAL_I2C_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002720:	f000 fc9a 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200008c8 	.word	0x200008c8
 800272c:	40005800 	.word	0x40005800
 8002730:	000186a0 	.word	0x000186a0

08002734 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_SDIO_SD_Init+0x38>)
 800273a:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <MX_SDIO_SD_Init+0x3c>)
 800273c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_SDIO_SD_Init+0x38>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <MX_SDIO_SD_Init+0x38>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_SDIO_SD_Init+0x38>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_SDIO_SD_Init+0x38>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <MX_SDIO_SD_Init+0x38>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <MX_SDIO_SD_Init+0x38>)
 800275e:	2204      	movs	r2, #4
 8002760:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	2000091c 	.word	0x2000091c
 8002770:	40012c00 	.word	0x40012c00

08002774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_SPI1_Init+0x64>)
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <MX_SPI1_Init+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_SPI1_Init+0x64>)
 8002780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_SPI1_Init+0x64>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_SPI1_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_SPI1_Init+0x64>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_SPI1_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027c0:	220a      	movs	r2, #10
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027c6:	f00a f8d6 	bl	800c976 <HAL_SPI_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027d0:	f000 fc42 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000a00 	.word	0x20000a00
 80027dc:	40013000 	.word	0x40013000

080027e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_SPI2_Init+0x64>)
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <MX_SPI2_Init+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_SPI2_Init+0x64>)
 80027ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_SPI2_Init+0x64>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_SPI2_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_SPI2_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_SPI2_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_SPI2_Init+0x64>)
 800280c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002810:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_SPI2_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <MX_SPI2_Init+0x64>)
 800281a:	2200      	movs	r2, #0
 800281c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_SPI2_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <MX_SPI2_Init+0x64>)
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_SPI2_Init+0x64>)
 800282c:	220a      	movs	r2, #10
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_SPI2_Init+0x64>)
 8002832:	f00a f8a0 	bl	800c976 <HAL_SPI_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800283c:	f000 fc0c 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000a58 	.word	0x20000a58
 8002848:	40003800 	.word	0x40003800

0800284c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <MX_SPI3_Init+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800285c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_SPI3_Init+0x64>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MX_SPI3_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_SPI3_Init+0x64>)
 8002898:	220a      	movs	r2, #10
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800289c:	4804      	ldr	r0, [pc, #16]	; (80028b0 <MX_SPI3_Init+0x64>)
 800289e:	f00a f86a 	bl	800c976 <HAL_SPI_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80028a8:	f000 fbd6 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000ab0 	.word	0x20000ab0
 80028b4:	40003c00 	.word	0x40003c00

080028b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028c8:	463b      	mov	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_TIM1_Init+0xa4>)
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <MX_TIM1_Init+0xa8>)
 80028d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <MX_TIM1_Init+0xa4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_TIM1_Init+0xa4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_TIM1_Init+0xa4>)
 80028e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_TIM1_Init+0xa4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <MX_TIM1_Init+0xa4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_TIM1_Init+0xa4>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002900:	4816      	ldr	r0, [pc, #88]	; (800295c <MX_TIM1_Init+0xa4>)
 8002902:	f00b f94d 	bl	800dba0 <HAL_TIM_IC_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800290c:	f000 fba4 	bl	8003058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4619      	mov	r1, r3
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <MX_TIM1_Init+0xa4>)
 8002920:	f00b fbf4 	bl	800e10c <HAL_TIMEx_MasterConfigSynchronization>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800292a:	f000 fb95 	bl	8003058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800292e:	2300      	movs	r3, #0
 8002930:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002932:	2301      	movs	r3, #1
 8002934:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_TIM1_Init+0xa4>)
 8002946:	f00b f97a 	bl	800dc3e <HAL_TIM_IC_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002950:	f000 fb82 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000b08 	.word	0x20000b08
 8002960:	40010000 	.word	0x40010000

08002964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002974:	463b      	mov	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <MX_TIM2_Init+0xa0>)
 8002982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <MX_TIM2_Init+0xa0>)
 800298a:	2210      	movs	r2, #16
 800298c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_TIM2_Init+0xa0>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_TIM2_Init+0xa0>)
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <MX_TIM2_Init+0xa0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_TIM2_Init+0xa0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80029a8:	4816      	ldr	r0, [pc, #88]	; (8002a04 <MX_TIM2_Init+0xa0>)
 80029aa:	f00b f8f9 	bl	800dba0 <HAL_TIM_IC_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029b4:	f000 fb50 	bl	8003058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <MX_TIM2_Init+0xa0>)
 80029c8:	f00b fba0 	bl	800e10c <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80029d2:	f000 fb41 	bl	8003058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029d6:	2300      	movs	r3, #0
 80029d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029da:	2301      	movs	r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_TIM2_Init+0xa0>)
 80029ee:	f00b f926 	bl	800dc3e <HAL_TIM_IC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80029f8:	f000 fb2e 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000b50 	.word	0x20000b50

08002a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <MX_USART2_UART_Init+0x50>)
 8002a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a2e:	220c      	movs	r2, #12
 8002a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a3e:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a40:	f00b fbe0 	bl	800e204 <HAL_UART_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a4a:	f000 fb05 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000b98 	.word	0x20000b98
 8002a58:	40004400 	.word	0x40004400

08002a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_DMA_Init+0x3c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <MX_DMA_Init+0x3c>)
 8002a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_DMA_Init+0x3c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2045      	movs	r0, #69	; 0x45
 8002a84:	f003 fb03 	bl	800608e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002a88:	2045      	movs	r0, #69	; 0x45
 8002a8a:	f003 fb1c 	bl	80060c6 <HAL_NVIC_EnableIRQ>

}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b4f      	ldr	r3, [pc, #316]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a4e      	ldr	r2, [pc, #312]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002abc:	f043 0310 	orr.w	r3, r3, #16
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a32      	ldr	r2, [pc, #200]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <MX_GPIO_Init+0x158>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2107      	movs	r1, #7
 8002b42:	482d      	ldr	r0, [pc, #180]	; (8002bf8 <MX_GPIO_Init+0x15c>)
 8002b44:	f004 f892 	bl	8006c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	482b      	ldr	r0, [pc, #172]	; (8002bfc <MX_GPIO_Init+0x160>)
 8002b4e:	f004 f88d 	bl	8006c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f241 010b 	movw	r1, #4107	; 0x100b
 8002b58:	4829      	ldr	r0, [pc, #164]	; (8002c00 <MX_GPIO_Init+0x164>)
 8002b5a:	f004 f887 	bl	8006c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002b5e:	2306      	movs	r3, #6
 8002b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4820      	ldr	r0, [pc, #128]	; (8002bf8 <MX_GPIO_Init+0x15c>)
 8002b76:	f003 fedd 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	481a      	ldr	r0, [pc, #104]	; (8002bfc <MX_GPIO_Init+0x160>)
 8002b92:	f003 fecf 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	4814      	ldr	r0, [pc, #80]	; (8002c00 <MX_GPIO_Init+0x164>)
 8002bb0:	f003 fec0 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002bb4:	230b      	movs	r3, #11
 8002bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480d      	ldr	r0, [pc, #52]	; (8002c00 <MX_GPIO_Init+0x164>)
 8002bcc:	f003 feb2 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <MX_GPIO_Init+0x15c>)
 8002be8:	f003 fea4 	bl	8006934 <HAL_GPIO_Init>

}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40020c00 	.word	0x40020c00

08002c04 <run_heartbeats>:

/* USER CODE BEGIN 4 */

uint32_t currentTime, timePassed, time;

static void run_heartbeats() {
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 8002c0a:	f003 f935 	bl	8005e78 <HAL_GetTick>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <run_heartbeats+0xbc>)
 8002c12:	6013      	str	r3, [r2, #0]
	timePassed = currentTime - time;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <run_heartbeats+0xbc>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <run_heartbeats+0xc0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <run_heartbeats+0xc4>)
 8002c20:	6013      	str	r3, [r2, #0]
	time = currentTime;
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <run_heartbeats+0xbc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <run_heartbeats+0xc0>)
 8002c28:	6013      	str	r3, [r2, #0]

	heartbeat_entry* current_entry = &main_entry;
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <run_heartbeats+0xc8>)
 8002c2c:	607b      	str	r3, [r7, #4]
	while (current_entry != null) {
 8002c2e:	e03e      	b.n	8002cae <run_heartbeats+0xaa>
		current_entry->timeUntilNext -= timePassed;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <run_heartbeats+0xc4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

		if (current_entry->timeUntilNext <= 0) {
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	dc2e      	bgt.n	8002ca8 <run_heartbeats+0xa4>
			if (current_entry->interval == 0) current_entry->interval = 100;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	889b      	ldrh	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <run_heartbeats+0x64>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2264      	movs	r2, #100	; 0x64
 8002c56:	809a      	strh	r2, [r3, #4]
			while (current_entry->timeUntilNext <= 0) current_entry->timeUntilNext += current_entry->interval;
 8002c58:	e006      	b.n	8002c68 <run_heartbeats+0x64>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	8892      	ldrh	r2, [r2, #4]
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	ddf4      	ble.n	8002c5a <run_heartbeats+0x56>

			uint32_t timeNow = HAL_GetTick();
 8002c70:	f003 f902 	bl	8005e78 <HAL_GetTick>
 8002c74:	6038      	str	r0, [r7, #0]

			current_entry->function(data);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <run_heartbeats+0xcc>)
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4798      	blx	r3

			if (HAL_GetTick() - timeNow > 5) {
 8002c82:	f003 f8f9 	bl	8005e78 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d90b      	bls.n	8002ca8 <run_heartbeats+0xa4>
				log_messagef("Heartbeat func %s took %dms", current_entry->name, (HAL_GetTick() - timeNow));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68dc      	ldr	r4, [r3, #12]
 8002c94:	f003 f8f0 	bl	8005e78 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	480c      	ldr	r0, [pc, #48]	; (8002cd4 <run_heartbeats+0xd0>)
 8002ca4:	f000 f8fc 	bl	8002ea0 <log_messagef>
			}

		}

		current_entry = current_entry->next;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	607b      	str	r3, [r7, #4]
	while (current_entry != null) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1bd      	bne.n	8002c30 <run_heartbeats+0x2c>
	}
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000be0 	.word	0x20000be0
 8002cc4:	20000be8 	.word	0x20000be8
 8002cc8:	20000be4 	.word	0x20000be4
 8002ccc:	20000040 	.word	0x20000040
 8002cd0:	20000bdc 	.word	0x20000bdc
 8002cd4:	0801c3e8 	.word	0x0801c3e8

08002cd8 <HAL_SPI_RxCpltCallback>:


HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2) { // telemetry spi
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <HAL_SPI_RxCpltCallback+0x20>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d102      	bne.n	8002cee <HAL_SPI_RxCpltCallback+0x16>
		telemetry_RxCplt(&hspi2);
 8002ce8:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <HAL_SPI_RxCpltCallback+0x20>)
 8002cea:	f003 f81d 	bl	8005d28 <telemetry_RxCplt>
	}
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000a58 	.word	0x20000a58
 8002cfc:	00000000 	.word	0x00000000

08002d00 <main_heartbeat>:


static struct bme280_data THP_data_buffer;
static double alt_ft;

void main_heartbeat(system_data* sys_data) {
 8002d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d04:	ed2d 8b08 	vpush	{d8-d11}
 8002d08:	b0ae      	sub	sp, #184	; 0xb8
 8002d0a:	af18      	add	r7, sp, #96	; 0x60
 8002d0c:	61f8      	str	r0, [r7, #28]
	FRESULT f_status;

	flight_data_t flightData = flight_data();
 8002d0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff f9ca 	bl	80020ac <flight_data>

	uint32_t time = HAL_GetTick();
 8002d18:	f003 f8ae 	bl	8005e78 <HAL_GetTick>
 8002d1c:	6578      	str	r0, [r7, #84]	; 0x54
	alt_ft = get_altitude_feet();
 8002d1e:	f7fe fc9b 	bl	8001658 <get_altitude_feet>
 8002d22:	eeb0 7a40 	vmov.f32	s14, s0
 8002d26:	eef0 7a60 	vmov.f32	s15, s1
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <main_heartbeat+0x158>)
 8002d2c:	ed83 7b00 	vstr	d7, [r3]

	vec3f rot;
	accel_gyro(&rot);
 8002d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fa83 	bl	8001240 <accel_gyro>

	// TODO : smintf takes like 7ms, and sprintf takes 22ms, so we NEED to make an optimized smintf function

//	log_messagef("%f %f %f", (double) get_last_pressure_data(), (double) get_last_temperature_data(), (double) alt_ft);

	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002d3a:	f7fe fd13 	bl	8001764 <get_last_pressure_data>
 8002d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8002d42:	eef0 8a60 	vmov.f32	s17, s1
 8002d46:	f7fe fd1f 	bl	8001788 <get_last_temperature_data>
 8002d4a:	eeb0 9a40 	vmov.f32	s18, s0
 8002d4e:	eef0 9a60 	vmov.f32	s19, s1
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <main_heartbeat+0x158>)
 8002d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d58:	a33d      	add	r3, pc, #244	; (adr r3, 8002e50 <main_heartbeat+0x150>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fc4b 	bl	80005f8 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	ec43 2b1b 	vmov	d11, r2, r3
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <main_heartbeat+0x158>)
 8002d6c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002d70:	ed97 ab10 	vldr	d10, [r7, #64]	; 0x40
			(double) get_last_temperature_data(), //THP_data_buffer.temperature,
			(double) 0.0,//THP_data_buffer.humidity,
			(double) (alt_ft*0.3048),
			(double) alt_ft,
			(double) flightData.approxVelocity,
			(double) flightData.state,
 8002d74:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fbc3 	bl	8000504 <__aeabi_ui2d>
 8002d7e:	e9c7 0104 	strd	r0, r1, [r7, #16]
			tracking_currentLat(),
 8002d82:	f001 f9c5 	bl	8004110 <tracking_currentLat>
 8002d86:	ee10 3a10 	vmov	r3, s0
	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbdc 	bl	8000548 <__aeabi_f2d>
 8002d90:	e9c7 0102 	strd	r0, r1, [r7, #8]
			tracking_currentLong(),
 8002d94:	f001 f9ca 	bl	800412c <tracking_currentLong>
 8002d98:	ee10 3a10 	vmov	r3, s0
	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fbd3 	bl	8000548 <__aeabi_f2d>
 8002da2:	e9c7 0100 	strd	r0, r1, [r7]
			rot.x,
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbcd 	bl	8000548 <__aeabi_f2d>
 8002dae:	4680      	mov	r8, r0
 8002db0:	4689      	mov	r9, r1
			rot.y,
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
			rot.z
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	char* string = smintf_fast_v1("%d,%f,%f,%f,,,%f,%f,%f,%d,%f,%f,%f,%f,%f", 2048,
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbc1 	bl	8000548 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8002dce:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002dd2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8002dd6:	ed97 7b00 	vldr	d7, [r7]
 8002dda:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002dde:	ed97 7b02 	vldr	d7, [r7, #8]
 8002de2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002de6:	ed97 7b04 	vldr	d7, [r7, #16]
 8002dea:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002dee:	ed8d ab0a 	vstr	d10, [sp, #40]	; 0x28
 8002df2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002df6:	ed8d bb06 	vstr	d11, [sp, #24]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e06:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002e0a:	ed8d 8b00 	vstr	d8, [sp]
 8002e0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e14:	4811      	ldr	r0, [pc, #68]	; (8002e5c <main_heartbeat+0x15c>)
 8002e16:	f000 fca2 	bl	800375e <smintf_fast_v1>
 8002e1a:	6538      	str	r0, [r7, #80]	; 0x50
	);

	if (sys_data->fileOpen) {
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	7b1b      	ldrb	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <main_heartbeat+0x12c>
//		f_status = f_printf(sys_data->file, string);
//		f_printf(sys_data->file, "\n");
//		f_sync(sys_data->file);

		storage_log(sys_data, string);
 8002e24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e26:	69f8      	ldr	r0, [r7, #28]
 8002e28:	f7ff fa04 	bl	8002234 <storage_log>
	}

//	telemetry_send(string);
//	telemetry_send(",W9FTX\n");

	log_message(string);
 8002e2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002e2e:	f000 f819 	bl	8002e64 <log_message>

	free(string);
 8002e32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002e34:	f013 fd06 	bl	8016844 <free>

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4809      	ldr	r0, [pc, #36]	; (8002e60 <main_heartbeat+0x160>)
 8002e3c:	f003 ff2f 	bl	8006c9e <HAL_GPIO_TogglePin>

}
 8002e40:	bf00      	nop
 8002e42:	3758      	adds	r7, #88	; 0x58
 8002e44:	46bd      	mov	sp, r7
 8002e46:	ecbd 8b08 	vpop	{d8-d11}
 8002e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4e:	bf00      	nop
 8002e50:	dbf487fd 	.word	0xdbf487fd
 8002e54:	3fd381d7 	.word	0x3fd381d7
 8002e58:	20000bf0 	.word	0x20000bf0
 8002e5c:	0801c404 	.word	0x0801c404
 8002e60:	40020000 	.word	0x40020000

08002e64 <log_message>:

void log_message(const char* message) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
#ifdef DEBUG // see log_messagef
	char* msg = smintf("[%d] %s\n\r", HAL_GetTick(), message);
 8002e6c:	f003 f804 	bl	8005e78 <HAL_GetTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4619      	mov	r1, r3
 8002e76:	4809      	ldr	r0, [pc, #36]	; (8002e9c <log_message+0x38>)
 8002e78:	f000 fc3c 	bl	80036f4 <smintf>
 8002e7c:	60f8      	str	r0, [r7, #12]
//	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
	CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7fd f9f6 	bl	8000270 <strlen>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f013 f83b 	bl	8015f04 <CDC_Transmit_FS>
	free(msg);
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f013 fcd8 	bl	8016844 <free>
#endif
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	0801c430 	.word	0x0801c430

08002ea0 <log_messagef>:

void log_messagef(const char* message, ...) {
 8002ea0:	b40f      	push	{r0, r1, r2, r3}
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
#ifdef DEBUG // don't waste time on this if not debug mode (so a real launch)
	va_list args;
	va_start(args, message);
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	60bb      	str	r3, [r7, #8]
	va_list args2;
	va_start(args2, message);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	607b      	str	r3, [r7, #4]

	char* message2 = smintf_list(message, args, args2);
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	69b8      	ldr	r0, [r7, #24]
 8002eba:	f000 fc81 	bl	80037c0 <smintf_list>
 8002ebe:	60f8      	str	r0, [r7, #12]
	log_message(message2);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff ffcf 	bl	8002e64 <log_message>
	free(message2);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f013 fcbc 	bl	8016844 <free>
	va_end(args);
	va_end(args2);
#endif
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ed6:	b004      	add	sp, #16
 8002ed8:	4770      	bx	lr
	...

08002edc <register_heartbeat_func>:

void register_heartbeat_func(heartbeat_entry* entry) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	assert(entry->name != null);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <register_heartbeat_func+0x1e>
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <register_heartbeat_func+0x70>)
 8002eee:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <register_heartbeat_func+0x74>)
 8002ef0:	f240 316e 	movw	r1, #878	; 0x36e
 8002ef4:	4817      	ldr	r0, [pc, #92]	; (8002f54 <register_heartbeat_func+0x78>)
 8002ef6:	f013 fc61 	bl	80167bc <__assert_func>
	assert(entry->name[0] != '\0');
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <register_heartbeat_func+0x36>
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <register_heartbeat_func+0x7c>)
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <register_heartbeat_func+0x74>)
 8002f08:	f240 316f 	movw	r1, #879	; 0x36f
 8002f0c:	4811      	ldr	r0, [pc, #68]	; (8002f54 <register_heartbeat_func+0x78>)
 8002f0e:	f013 fc55 	bl	80167bc <__assert_func>

	entry->name = strdup(entry->name); // make sure the memory won't be free'd/released
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f014 fdf2 	bl	8017b00 <strdup>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]

	heartbeat_entry* curr = data->main_entry;
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <register_heartbeat_func+0x80>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]
	while (curr->next != null) curr = curr->next;
 8002f2c:	e002      	b.n	8002f34 <register_heartbeat_func+0x58>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f8      	bne.n	8002f2e <register_heartbeat_func+0x52>
	curr->next = entry;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	0801c43c 	.word	0x0801c43c
 8002f50:	0801c7c4 	.word	0x0801c7c4
 8002f54:	0801c450 	.word	0x0801c450
 8002f58:	0801c464 	.word	0x0801c464
 8002f5c:	20000bdc 	.word	0x20000bdc

08002f60 <led_blink>:

void led_blink(uint8_t count) {
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(250);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		HAL_Delay(250);
	  }
#endif
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <led_blink_delay>:

void led_blink_delay(uint8_t count, uint16_t delay) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460a      	mov	r2, r1
 8002f82:	71fb      	strb	r3, [r7, #7]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80bb      	strh	r3, [r7, #4]
	for (uint8_t i = 0; i < count; i ++) {
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e014      	b.n	8002fb8 <led_blink_delay+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2102      	movs	r1, #2
 8002f92:	480e      	ldr	r0, [pc, #56]	; (8002fcc <led_blink_delay+0x54>)
 8002f94:	f003 fe6a 	bl	8006c6c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002f98:	88bb      	ldrh	r3, [r7, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 ff78 	bl	8005e90 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4809      	ldr	r0, [pc, #36]	; (8002fcc <led_blink_delay+0x54>)
 8002fa6:	f003 fe61 	bl	8006c6c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002faa:	88bb      	ldrh	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 ff6f 	bl	8005e90 <HAL_Delay>
	for (uint8_t i = 0; i < count; i ++) {
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3e6      	bcc.n	8002f8e <led_blink_delay+0x16>
	  }
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <get_time_us>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		HAL_Delay(500);
	}
}

uint32_t get_time_us() {
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <get_time_us+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000b50 	.word	0x20000b50

08002fe8 <delay_us>:

void delay_us(uint64_t delay) {
 8002fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	e9c7 0100 	strd	r0, r1, [r7]
	while (delay > 65535) {
 8002ff4:	e00e      	b.n	8003014 <delay_us+0x2c>
		delay_us(65535);
 8002ff6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	f7ff fff3 	bl	8002fe8 <delay_us>
		delay -= 65535;
 8003002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003006:	4912      	ldr	r1, [pc, #72]	; (8003050 <delay_us+0x68>)
 8003008:	eb12 0801 	adds.w	r8, r2, r1
 800300c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8003010:	e9c7 8900 	strd	r8, r9, [r7]
	while (delay > 65535) {
 8003014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003018:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800301c:	f173 0300 	sbcs.w	r3, r3, #0
 8003020:	d2e9      	bcs.n	8002ff6 <delay_us+0xe>
	}
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <delay_us+0x6c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800302a:	bf00      	nop
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <delay_us+0x6c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2200      	movs	r2, #0
 8003034:	461c      	mov	r4, r3
 8003036:	4615      	mov	r5, r2
 8003038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800303c:	4294      	cmp	r4, r2
 800303e:	eb75 0303 	sbcs.w	r3, r5, r3
 8003042:	d3f3      	bcc.n	800302c <delay_us+0x44>
	return;
 8003044:	bf00      	nop
}
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800304e:	bf00      	nop
 8003050:	ffff0001 	.word	0xffff0001
 8003054:	20000b08 	.word	0x20000b08

08003058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800305c:	b672      	cpsid	i
}
 800305e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8003060:	2102      	movs	r1, #2
 8003062:	4804      	ldr	r0, [pc, #16]	; (8003074 <Error_Handler+0x1c>)
 8003064:	f003 fe1b 	bl	8006c9e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800306c:	f002 ff10 	bl	8005e90 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8003070:	e7f6      	b.n	8003060 <Error_Handler+0x8>
 8003072:	bf00      	nop
 8003074:	40020000 	.word	0x40020000

08003078 <dump_and_reset_buffer>:
#define SAMPLE_FLUSH_RATE_MINS 45 // a 10 min launch, less than 25% chance of it a flush being during a launch

static uint8_t* buffer;
static uint32_t current_sample_count;

static void dump_and_reset_buffer(uint8_t isOkToKeepHalf) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
	char* path = smintf("/sensorbin/data%d.csv", (int) get_file_count("/sensorbin"));
 8003082:	4827      	ldr	r0, [pc, #156]	; (8003120 <dump_and_reset_buffer+0xa8>)
 8003084:	f7ff f928 	bl	80022d8 <get_file_count>
 8003088:	4603      	mov	r3, r0
 800308a:	4619      	mov	r1, r3
 800308c:	4825      	ldr	r0, [pc, #148]	; (8003124 <dump_and_reset_buffer+0xac>)
 800308e:	f000 fb31 	bl	80036f4 <smintf>
 8003092:	4603      	mov	r3, r0
 8003094:	613b      	str	r3, [r7, #16]
	mkfile_and_dump(path, buffer, current_sample_count*4*2);
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <dump_and_reset_buffer+0xb0>)
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <dump_and_reset_buffer+0xb4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	461a      	mov	r2, r3
 80030a2:	6938      	ldr	r0, [r7, #16]
 80030a4:	f7ff f8e2 	bl	800226c <mkfile_and_dump>
	free(path);
 80030a8:	6938      	ldr	r0, [r7, #16]
 80030aa:	f013 fbcb 	bl	8016844 <free>

	if (isOkToKeepHalf) {
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02d      	beq.n	8003110 <dump_and_reset_buffer+0x98>
		if (current_sample_count < SAMPLE_COUNT/2); // we can store an extra half, so keep as much data as possible
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <dump_and_reset_buffer+0xb4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f648 52c4 	movw	r2, #36292	; 0x8dc4
 80030bc:	4293      	cmp	r3, r2
 80030be:	d92a      	bls.n	8003116 <dump_and_reset_buffer+0x9e>
		else {
			if (SAMPLE_FLUSH_RATE_MINS * 60 * SAMPLE_RATE < BUFFER_SIZE/8/2) {
				// delete some old data, but make a backup of the newish/just barely old data as well just in case
				uint32_t second_start_idx = current_sample_count - SAMPLE_FLUSH_RATE_MINS * 60 * SAMPLE_RATE;
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <dump_and_reset_buffer+0xb4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 80030c8:	3b78      	subs	r3, #120	; 0x78
 80030ca:	60fb      	str	r3, [r7, #12]
				uint32_t* buffer_int = (uint32_t*) buffer;
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <dump_and_reset_buffer+0xb0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60bb      	str	r3, [r7, #8]
				for (uint32_t i = 0; i < SAMPLE_FLUSH_RATE_MINS * 60 * SAMPLE_RATE * 2; i ++) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e00e      	b.n	80030f6 <dump_and_reset_buffer+0x7e>
					buffer_int[i] = buffer_int[second_start_idx+i];
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	441a      	add	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	440b      	add	r3, r1
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	601a      	str	r2, [r3, #0]
				for (uint32_t i = 0; i < SAMPLE_FLUSH_RATE_MINS * 60 * SAMPLE_RATE * 2; i ++) {
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3301      	adds	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d9eb      	bls.n	80030d8 <dump_and_reset_buffer+0x60>
				}
				current_sample_count = SAMPLE_FLUSH_RATE_MINS * 60 * SAMPLE_RATE;
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <dump_and_reset_buffer+0xb4>)
 8003102:	f646 1278 	movw	r2, #27000	; 0x6978
 8003106:	601a      	str	r2, [r3, #0]
			}
			current_sample_count = 0;
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <dump_and_reset_buffer+0xb4>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
		}
	} else {
		current_sample_count = 0;
	}
}
 800310e:	e002      	b.n	8003116 <dump_and_reset_buffer+0x9e>
		current_sample_count = 0;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <dump_and_reset_buffer+0xb4>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	0801c47c 	.word	0x0801c47c
 8003124:	0801c488 	.word	0x0801c488
 8003128:	20000bf8 	.word	0x20000bf8
 800312c:	20000bfc 	.word	0x20000bfc

08003130 <prometheus_heartbeat>:

static void prometheus_heartbeat(system_data* data) {
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	int32_t* newBuffer = (int32_t*) buffer; // i'm too lazy to make a union and this works so i dont care
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <prometheus_heartbeat+0x68>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
	newBuffer[current_sample_count*2] = get_last_pressure_data_raw(); // I dont know if this is Big Endian or LE but I will find out later
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <prometheus_heartbeat+0x6c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	18d4      	adds	r4, r2, r3
 8003148:	f7fe fb30 	bl	80017ac <get_last_pressure_data_raw>
 800314c:	4603      	mov	r3, r0
 800314e:	6023      	str	r3, [r4, #0]
	newBuffer[current_sample_count*2+1] = get_last_temperature_data_raw();
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <prometheus_heartbeat+0x6c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	3304      	adds	r3, #4
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	18d4      	adds	r4, r2, r3
 800315c:	f7fe fb32 	bl	80017c4 <get_last_temperature_data_raw>
 8003160:	4603      	mov	r3, r0
 8003162:	6023      	str	r3, [r4, #0]

	current_sample_count++;
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <prometheus_heartbeat+0x6c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <prometheus_heartbeat+0x6c>)
 800316c:	6013      	str	r3, [r2, #0]

	if (current_sample_count >= 60 * SAMPLE_RATE * SAMPLE_FLUSH_RATE_MINS) { // we are very close to ground, so assume little to no vibration from an actual launch
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <prometheus_heartbeat+0x6c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f646 1277 	movw	r2, #26999	; 0x6977
 8003176:	4293      	cmp	r3, r2
 8003178:	d902      	bls.n	8003180 <prometheus_heartbeat+0x50>
		dump_and_reset_buffer(1);
 800317a:	2001      	movs	r0, #1
 800317c:	f7ff ff7c 	bl	8003078 <dump_and_reset_buffer>
	}

	if (current_sample_count >= SAMPLE_COUNT) {
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <prometheus_heartbeat+0x6c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <prometheus_heartbeat+0x70>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d902      	bls.n	8003190 <prometheus_heartbeat+0x60>
		dump_and_reset_buffer(0);
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff ff74 	bl	8003078 <dump_and_reset_buffer>
	}

}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	20000bf8 	.word	0x20000bf8
 800319c:	20000bfc 	.word	0x20000bfc
 80031a0:	00011b8a 	.word	0x00011b8a

080031a4 <init_prometheus>:

void init_prometheus(system_data* data) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	buffer = malloc(BUFFER_SIZE);
 80031ac:	4816      	ldr	r0, [pc, #88]	; (8003208 <init_prometheus+0x64>)
 80031ae:	f013 fb41 	bl	8016834 <malloc>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <init_prometheus+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
	log_messagef("created buffer for prometheus launch data successfully");
 80031ba:	4815      	ldr	r0, [pc, #84]	; (8003210 <init_prometheus+0x6c>)
 80031bc:	f7ff fe70 	bl	8002ea0 <log_messagef>
	log_messagef("buffer can hold %ds (%d min) of data before needing to dump", (int) (SAMPLE_COUNT/SAMPLE_RATE), (int) (SAMPLE_COUNT/SAMPLE_RATE/60));
 80031c0:	2278      	movs	r2, #120	; 0x78
 80031c2:	f641 415a 	movw	r1, #7258	; 0x1c5a
 80031c6:	4813      	ldr	r0, [pc, #76]	; (8003214 <init_prometheus+0x70>)
 80031c8:	f7ff fe6a 	bl	8002ea0 <log_messagef>

	heartbeat_entry* prometheus_entry = calloc(1, sizeof(heartbeat_entry));
 80031cc:	2114      	movs	r1, #20
 80031ce:	2001      	movs	r0, #1
 80031d0:	f013 fb12 	bl	80167f8 <calloc>
 80031d4:	4603      	mov	r3, r0
 80031d6:	60fb      	str	r3, [r7, #12]
	prometheus_entry->function = prometheus_heartbeat;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <init_prometheus+0x74>)
 80031dc:	601a      	str	r2, [r3, #0]
	prometheus_entry->interval = 1000/SAMPLE_RATE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2264      	movs	r2, #100	; 0x64
 80031e2:	809a      	strh	r2, [r3, #4]
	prometheus_entry->next = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
	prometheus_entry->timeUntilNext = 5017; // 5 seconds because rocket will take a while before launch, and 17 since its a prime number and we want to space them out so theres no overlap really
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f241 3299 	movw	r2, #5017	; 0x1399
 80031f0:	609a      	str	r2, [r3, #8]
	prometheus_entry->name = "prometheus";
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <init_prometheus+0x78>)
 80031f6:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(prometheus_entry);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fe6f 	bl	8002edc <register_heartbeat_func>
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	0008dc5c 	.word	0x0008dc5c
 800320c:	20000bf8 	.word	0x20000bf8
 8003210:	0801c4a0 	.word	0x0801c4a0
 8003214:	0801c4d8 	.word	0x0801c4d8
 8003218:	08003131 	.word	0x08003131
 800321c:	0801c514 	.word	0x0801c514

08003220 <_putc>:
/*
*
*	if buffer is NULL, then it will only increment current index and return
*
*/
void _putc(char c, char* buffer, int *currentIndex) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	73fb      	strb	r3, [r7, #15]
	if (*currentIndex == -1) {
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d108      	bne.n	800324a <_putc+0x2a>
		fputc(c, stdout);
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <_putc+0x50>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f014 fb02 	bl	801784c <fputc>
		if (buffer != NULL) {
			buffer[*currentIndex] = c;
		}
		*currentIndex = *currentIndex + 1;
	}
}
 8003248:	e00e      	b.n	8003268 <_putc+0x48>
		if (buffer != NULL) {
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <_putc+0x3e>
			buffer[*currentIndex] = c;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	701a      	strb	r2, [r3, #0]
		*currentIndex = *currentIndex + 1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200001ac 	.word	0x200001ac

08003274 <__print_integer>:


void __print_integer(int n, int radix, char* prefix, char* buffer, int *currentIndex) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b08c      	sub	sp, #48	; 0x30
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
	int digitCount = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
	long nCopy = n; // use long here since -INT_MIN = INT_MAX + 1 and would cause an overflow
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28

	if (nCopy < 0) {
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	da0b      	bge.n	80032a8 <__print_integer+0x34>
		nCopy *= -1; // make sure nCopy is positive
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	425b      	negs	r3, r3
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	while (nCopy > 0) {
 8003296:	e007      	b.n	80032a8 <__print_integer+0x34>
		nCopy /= radix;
 8003298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	fb92 f3f3 	sdiv	r3, r2, r3
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
		digitCount ++;
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a4:	3301      	adds	r3, #1
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (nCopy > 0) {
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	dcf4      	bgt.n	8003298 <__print_integer+0x24>
	}

	if (n < 0) {
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da04      	bge.n	80032be <__print_integer+0x4a>
		_putc('-', buffer, currentIndex);
 80032b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	202d      	movs	r0, #45	; 0x2d
 80032ba:	f7ff ffb1 	bl	8003220 <_putc>
	}

	int prefixIdx = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
	while (prefix[prefixIdx] != '\0') {
 80032c2:	e00b      	b.n	80032dc <__print_integer+0x68>
		_putc(prefix[prefixIdx], buffer, currentIndex);
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ce:	6839      	ldr	r1, [r7, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ffa5 	bl	8003220 <_putc>
		prefixIdx++;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	3301      	adds	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
	while (prefix[prefixIdx] != '\0') {
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ed      	bne.n	80032c4 <__print_integer+0x50>
	}

	if (n == 0) {
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <__print_integer+0x86>
		
		_putc('0', buffer, currentIndex);
 80032ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	2030      	movs	r0, #48	; 0x30
 80032f4:	f7ff ff94 	bl	8003220 <_putc>
			_putc(digitChar, buffer, currentIndex);
		}
	
	}

}
 80032f8:	e03c      	b.n	8003374 <__print_integer+0x100>
		for (int currentDigit = digitCount - 1; currentDigit >= 0; currentDigit --) {
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	3b01      	subs	r3, #1
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	e035      	b.n	800336e <__print_integer+0xfa>
			nCopy = n;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
			if (nCopy < 0) {
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	da02      	bge.n	8003312 <__print_integer+0x9e>
				nCopy *= -1;
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	425b      	negs	r3, r3
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int j = 0; j < currentDigit; j ++) {
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e007      	b.n	8003328 <__print_integer+0xb4>
				nCopy /= radix;
 8003318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int j = 0; j < currentDigit; j ++) {
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3301      	adds	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	429a      	cmp	r2, r3
 800332e:	dbf3      	blt.n	8003318 <__print_integer+0xa4>
			int digitValue = (nCopy % radix);
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	fb93 f2f2 	sdiv	r2, r3, r2
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	fb01 f202 	mul.w	r2, r1, r2
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	617b      	str	r3, [r7, #20]
			int digitChar = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
			if (digitValue < 10) {
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b09      	cmp	r3, #9
 800334a:	dc03      	bgt.n	8003354 <__print_integer+0xe0>
				digitChar = digitValue + '0';
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3330      	adds	r3, #48	; 0x30
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e002      	b.n	800335a <__print_integer+0xe6>
				digitChar = digitValue - 10 + 'a';
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3357      	adds	r3, #87	; 0x57
 8003358:	61bb      	str	r3, [r7, #24]
			_putc(digitChar, buffer, currentIndex);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff5c 	bl	8003220 <_putc>
		for (int currentDigit = digitCount - 1; currentDigit >= 0; currentDigit --) {
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	3b01      	subs	r3, #1
 800336c:	623b      	str	r3, [r7, #32]
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2b00      	cmp	r3, #0
 8003372:	dac6      	bge.n	8003302 <__print_integer+0x8e>
}
 8003374:	bf00      	nop
 8003376:	3730      	adds	r7, #48	; 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <__operation_smintf>:


/*
*	NOTE: if returnLength is -1, then that means print to the console. Otherwise, add to the buffer if it's not null
*/
void __operation_smintf(char* buffer, int* returnLength, const char* format, va_list args) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b096      	sub	sp, #88	; 0x58
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]

	int length = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c

	while (format[length] != '\0') {
 800338e:	e002      	b.n	8003396 <__operation_smintf+0x1a>
		length ++;	
 8003390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003392:	3301      	adds	r3, #1
 8003394:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (format[length] != '\0') {
 8003396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f6      	bne.n	8003390 <__operation_smintf+0x14>
	}
	
	int currentCharacterIdx = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
	for (; currentCharacterIdx < length; currentCharacterIdx ++) {
 80033a6:	e18d      	b.n	80036c4 <__operation_smintf+0x348>
		char theChar = format[currentCharacterIdx];
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (theChar == '%' && (currentCharacterIdx != (length - 1)) /* <--- if the last character is a % then just print a % */) {
 80033b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80033b8:	2b25      	cmp	r3, #37	; 0x25
 80033ba:	f040 8179 	bne.w	80036b0 <__operation_smintf+0x334>
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	3b01      	subs	r3, #1
 80033c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f000 8173 	beq.w	80036b0 <__operation_smintf+0x334>
			currentCharacterIdx = currentCharacterIdx + 1;
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	3301      	adds	r3, #1
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
			char specialChar = format[currentCharacterIdx];
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			switch (specialChar) {
 80033dc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80033e0:	2b78      	cmp	r3, #120	; 0x78
 80033e2:	f300 8157 	bgt.w	8003694 <__operation_smintf+0x318>
 80033e6:	2b62      	cmp	r3, #98	; 0x62
 80033e8:	da05      	bge.n	80033f6 <__operation_smintf+0x7a>
 80033ea:	2b24      	cmp	r3, #36	; 0x24
 80033ec:	d070      	beq.n	80034d0 <__operation_smintf+0x154>
 80033ee:	2b25      	cmp	r3, #37	; 0x25
 80033f0:	f000 812f 	beq.w	8003652 <__operation_smintf+0x2d6>
 80033f4:	e14e      	b.n	8003694 <__operation_smintf+0x318>
 80033f6:	3b62      	subs	r3, #98	; 0x62
 80033f8:	2b16      	cmp	r3, #22
 80033fa:	f200 814b 	bhi.w	8003694 <__operation_smintf+0x318>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <__operation_smintf+0x88>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	080034b5 	.word	0x080034b5
 8003408:	0800347d 	.word	0x0800347d
 800340c:	08003461 	.word	0x08003461
 8003410:	08003695 	.word	0x08003695
 8003414:	08003597 	.word	0x08003597
 8003418:	08003695 	.word	0x08003695
 800341c:	08003695 	.word	0x08003695
 8003420:	08003695 	.word	0x08003695
 8003424:	08003695 	.word	0x08003695
 8003428:	08003695 	.word	0x08003695
 800342c:	08003695 	.word	0x08003695
 8003430:	08003695 	.word	0x08003695
 8003434:	08003695 	.word	0x08003695
 8003438:	08003695 	.word	0x08003695
 800343c:	08003695 	.word	0x08003695
 8003440:	08003695 	.word	0x08003695
 8003444:	08003695 	.word	0x08003695
 8003448:	0800365f 	.word	0x0800365f
 800344c:	08003695 	.word	0x08003695
 8003450:	08003695 	.word	0x08003695
 8003454:	08003695 	.word	0x08003695
 8003458:	08003695 	.word	0x08003695
 800345c:	08003499 	.word	0x08003499
				case 'd': {
					int theArgAsInt = va_arg(args, int);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	1d1a      	adds	r2, r3, #4
 8003464:	603a      	str	r2, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
					__print_integer(theArgAsInt, 10, "", buffer, returnLength);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a99      	ldr	r2, [pc, #612]	; (80036d8 <__operation_smintf+0x35c>)
 8003472:	210a      	movs	r1, #10
 8003474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003476:	f7ff fefd 	bl	8003274 <__print_integer>
				}
				break;
 800347a:	e118      	b.n	80036ae <__operation_smintf+0x332>
				case 'c': {
					char theCharToPrint = (char) va_arg(args, int);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	603a      	str	r2, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					_putc(theCharToPrint, buffer, returnLength);
 8003488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fec5 	bl	8003220 <_putc>
				}
				break;
 8003496:	e10a      	b.n	80036ae <__operation_smintf+0x332>
				case 'x': {
					int theArgAsInt = va_arg(args, int);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	603a      	str	r2, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
					__print_integer(theArgAsInt, 16, "0x", buffer, returnLength);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a8c      	ldr	r2, [pc, #560]	; (80036dc <__operation_smintf+0x360>)
 80034aa:	2110      	movs	r1, #16
 80034ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034ae:	f7ff fee1 	bl	8003274 <__print_integer>
				}
				break;
 80034b2:	e0fc      	b.n	80036ae <__operation_smintf+0x332>
				case 'b': {
					int theArgAsInt = va_arg(args, int);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1d1a      	adds	r2, r3, #4
 80034b8:	603a      	str	r2, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61fb      	str	r3, [r7, #28]
					__print_integer(theArgAsInt, 2, "0b", buffer, returnLength);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a86      	ldr	r2, [pc, #536]	; (80036e0 <__operation_smintf+0x364>)
 80034c6:	2102      	movs	r1, #2
 80034c8:	69f8      	ldr	r0, [r7, #28]
 80034ca:	f7ff fed3 	bl	8003274 <__print_integer>
				}
				break;
 80034ce:	e0ee      	b.n	80036ae <__operation_smintf+0x332>
				case '$': {
					double theArgAsDouble = va_arg(args, int)/100.0;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	603a      	str	r2, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd f823 	bl	8000524 <__aeabi_i2d>
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	4b80      	ldr	r3, [pc, #512]	; (80036e4 <__operation_smintf+0x368>)
 80034e4:	f7fd f9b2 	bl	800084c <__aeabi_ddiv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
					__print_integer((int) (theArgAsDouble), 10, "$", buffer, returnLength);
 80034f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034f4:	f7fd fb30 	bl	8000b58 <__aeabi_d2iz>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a7a      	ldr	r2, [pc, #488]	; (80036e8 <__operation_smintf+0x36c>)
 8003500:	210a      	movs	r1, #10
 8003502:	f7ff feb7 	bl	8003274 <__print_integer>
					int decimalValue = (int) (((int) (theArgAsDouble * 100)) % 100);
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <__operation_smintf+0x368>)
 800350c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003510:	f7fd f872 	bl	80005f8 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd fb1c 	bl	8000b58 <__aeabi_d2iz>
 8003520:	4603      	mov	r3, r0
 8003522:	4a72      	ldr	r2, [pc, #456]	; (80036ec <__operation_smintf+0x370>)
 8003524:	fb82 1203 	smull	r1, r2, r2, r3
 8003528:	1151      	asrs	r1, r2, #5
 800352a:	17da      	asrs	r2, r3, #31
 800352c:	1a8a      	subs	r2, r1, r2
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f202 	mul.w	r2, r1, r2
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	647b      	str	r3, [r7, #68]	; 0x44
					if (decimalValue < 0) {
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	2b00      	cmp	r3, #0
 800353c:	da02      	bge.n	8003544 <__operation_smintf+0x1c8>
						decimalValue = -1 * decimalValue;
 800353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003540:	425b      	negs	r3, r3
 8003542:	647b      	str	r3, [r7, #68]	; 0x44
					}
					_putc('.', buffer, returnLength);
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	202e      	movs	r0, #46	; 0x2e
 800354a:	f7ff fe69 	bl	8003220 <_putc>
					_putc('0' + (decimalValue / 10), buffer, returnLength);
 800354e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003550:	4a67      	ldr	r2, [pc, #412]	; (80036f0 <__operation_smintf+0x374>)
 8003552:	fb82 1203 	smull	r1, r2, r2, r3
 8003556:	1092      	asrs	r2, r2, #2
 8003558:	17db      	asrs	r3, r3, #31
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3330      	adds	r3, #48	; 0x30
 8003560:	b2db      	uxtb	r3, r3
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fe5a 	bl	8003220 <_putc>
					_putc('0' + (decimalValue % 10), buffer, returnLength);
 800356c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800356e:	4b60      	ldr	r3, [pc, #384]	; (80036f0 <__operation_smintf+0x374>)
 8003570:	fb83 1302 	smull	r1, r3, r3, r2
 8003574:	1099      	asrs	r1, r3, #2
 8003576:	17d3      	asrs	r3, r2, #31
 8003578:	1ac9      	subs	r1, r1, r3
 800357a:	460b      	mov	r3, r1
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	1ad1      	subs	r1, r2, r3
 8003584:	b2cb      	uxtb	r3, r1
 8003586:	3330      	adds	r3, #48	; 0x30
 8003588:	b2db      	uxtb	r3, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fe46 	bl	8003220 <_putc>
				}
				break;
 8003594:	e08b      	b.n	80036ae <__operation_smintf+0x332>
				case 'f':{
					double theArgAsDouble = va_arg(args, double);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	3307      	adds	r3, #7
 800359a:	f023 0307 	bic.w	r3, r3, #7
 800359e:	f103 0208 	add.w	r2, r3, #8
 80035a2:	603a      	str	r2, [r7, #0]
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					__print_integer((int) (theArgAsDouble), 10, "", buffer, returnLength);
 80035ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035b0:	f7fd fad2 	bl	8000b58 <__aeabi_d2iz>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <__operation_smintf+0x35c>)
 80035bc:	210a      	movs	r1, #10
 80035be:	f7ff fe59 	bl	8003274 <__print_integer>
					int decimalValue = (int) (((int) (theArgAsDouble * 100)) % 100);
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <__operation_smintf+0x368>)
 80035c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035cc:	f7fd f814 	bl	80005f8 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7fd fabe 	bl	8000b58 <__aeabi_d2iz>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a43      	ldr	r2, [pc, #268]	; (80036ec <__operation_smintf+0x370>)
 80035e0:	fb82 1203 	smull	r1, r2, r2, r3
 80035e4:	1151      	asrs	r1, r2, #5
 80035e6:	17da      	asrs	r2, r3, #31
 80035e8:	1a8a      	subs	r2, r1, r2
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	fb01 f202 	mul.w	r2, r1, r2
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
					if (decimalValue < 0) {
 80035f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da02      	bge.n	8003600 <__operation_smintf+0x284>
						decimalValue = -1 * decimalValue;
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	425b      	negs	r3, r3
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
					}
					_putc('.', buffer, returnLength);
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	202e      	movs	r0, #46	; 0x2e
 8003606:	f7ff fe0b 	bl	8003220 <_putc>
					_putc('0' + (decimalValue / 10), buffer, returnLength);
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <__operation_smintf+0x374>)
 800360e:	fb82 1203 	smull	r1, r2, r2, r3
 8003612:	1092      	asrs	r2, r2, #2
 8003614:	17db      	asrs	r3, r3, #31
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3330      	adds	r3, #48	; 0x30
 800361c:	b2db      	uxtb	r3, r3
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fdfc 	bl	8003220 <_putc>
					_putc('0' + (decimalValue % 10), buffer, returnLength);
 8003628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <__operation_smintf+0x374>)
 800362c:	fb83 1302 	smull	r1, r3, r3, r2
 8003630:	1099      	asrs	r1, r3, #2
 8003632:	17d3      	asrs	r3, r2, #31
 8003634:	1ac9      	subs	r1, r1, r3
 8003636:	460b      	mov	r3, r1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	1ad1      	subs	r1, r2, r3
 8003640:	b2cb      	uxtb	r3, r1
 8003642:	3330      	adds	r3, #48	; 0x30
 8003644:	b2db      	uxtb	r3, r3
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	68f9      	ldr	r1, [r7, #12]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fde8 	bl	8003220 <_putc>
				}
				break;
 8003650:	e02d      	b.n	80036ae <__operation_smintf+0x332>
				case '%': {
					_putc('%', buffer, returnLength);
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	68f9      	ldr	r1, [r7, #12]
 8003656:	2025      	movs	r0, #37	; 0x25
 8003658:	f7ff fde2 	bl	8003220 <_putc>
				}
				break;
 800365c:	e027      	b.n	80036ae <__operation_smintf+0x332>
				case 's': {
					int i = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
					char* str = va_arg(args, char*);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	1d1a      	adds	r2, r3, #4
 8003666:	603a      	str	r2, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
					while (str[i] != '\0') {
 800366c:	e00b      	b.n	8003686 <__operation_smintf+0x30a>
						_putc(str[i++], buffer, returnLength);					
 800366e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003674:	461a      	mov	r2, r3
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	4413      	add	r3, r2
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fdcd 	bl	8003220 <_putc>
					while (str[i] != '\0') {
 8003686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ed      	bne.n	800366e <__operation_smintf+0x2f2>
					}
				}
				break;
 8003692:	e00c      	b.n	80036ae <__operation_smintf+0x332>
				default: {
					_putc('%', buffer, returnLength);
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	2025      	movs	r0, #37	; 0x25
 800369a:	f7ff fdc1 	bl	8003220 <_putc>
					_putc(specialChar, buffer, returnLength);
 800369e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	68f9      	ldr	r1, [r7, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fdba 	bl	8003220 <_putc>
				}
				break;
 80036ac:	bf00      	nop
        if (theChar == '%' && (currentCharacterIdx != (length - 1)) /* <--- if the last character is a % then just print a % */) {
 80036ae:	e006      	b.n	80036be <__operation_smintf+0x342>
			}
        } else {
			_putc(theChar, buffer, returnLength);		
 80036b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fdb1 	bl	8003220 <_putc>
	for (; currentCharacterIdx < length; currentCharacterIdx ++) {
 80036be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c0:	3301      	adds	r3, #1
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	f6ff ae6d 	blt.w	80033a8 <__operation_smintf+0x2c>
		}
	}
	
	va_end(args);

}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	3750      	adds	r7, #80	; 0x50
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	0801c520 	.word	0x0801c520
 80036dc:	0801c524 	.word	0x0801c524
 80036e0:	0801c528 	.word	0x0801c528
 80036e4:	40590000 	.word	0x40590000
 80036e8:	0801c52c 	.word	0x0801c52c
 80036ec:	51eb851f 	.word	0x51eb851f
 80036f0:	66666667 	.word	0x66666667

080036f4 <smintf>:
	__operation_smintf(NULL, &theInt, format, args);
	va_end(args);
}


char* smintf(const char *format, ...) {
 80036f4:	b40f      	push	{r0, r1, r2, r3}
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
	int bufferLength = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, format);
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	607b      	str	r3, [r7, #4]
	__operation_smintf(NULL, &bufferLength, format, args);
 8003706:	f107 0108 	add.w	r1, r7, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	2000      	movs	r0, #0
 8003710:	f7ff fe34 	bl	800337c <__operation_smintf>
	
	char* buffer = malloc(bufferLength+1);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3301      	adds	r3, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f013 f88b 	bl	8016834 <malloc>
 800371e:	4603      	mov	r3, r0
 8003720:	60fb      	str	r3, [r7, #12]
	if (buffer == NULL) return NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <smintf+0x38>
 8003728:	2300      	movs	r3, #0
 800372a:	e011      	b.n	8003750 <smintf+0x5c>
	int bufferIndex = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	603b      	str	r3, [r7, #0]
	va_start(args, format);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	607b      	str	r3, [r7, #4]
	__operation_smintf(buffer, &bufferIndex, format, args);
 8003736:	4639      	mov	r1, r7
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fe1d 	bl	800337c <__operation_smintf>
	
	buffer[bufferIndex] = '\0';
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
	return buffer;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800375a:	b004      	add	sp, #16
 800375c:	4770      	bx	lr

0800375e <smintf_fast_v1>:

char* smintf_fast_v1(const char *format, uint16_t predictedLen, ...) {
 800375e:	b40e      	push	{r1, r2, r3}
 8003760:	b580      	push	{r7, lr}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	char* buffer = malloc(predictedLen+1);
 8003768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800376a:	3301      	adds	r3, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f013 f861 	bl	8016834 <malloc>
 8003772:	4603      	mov	r3, r0
 8003774:	617b      	str	r3, [r7, #20]
	if (buffer == NULL) return NULL;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <smintf_fast_v1+0x22>
 800377c:	2300      	movs	r3, #0
 800377e:	e018      	b.n	80037b2 <smintf_fast_v1+0x54>
	int bufferIndex = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]

	va_list args;
	va_start(args, predictedLen);
 8003784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003788:	60fb      	str	r3, [r7, #12]
	__operation_smintf(buffer, &bufferIndex, format, args);
 800378a:	f107 0110 	add.w	r1, r7, #16
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff fdf2 	bl	800337c <__operation_smintf>

	va_end(args);

	if (bufferIndex > predictedLen)
 8003798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	da01      	bge.n	80037a4 <smintf_fast_v1+0x46>
		bufferIndex = predictedLen;
 80037a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037a2:	613b      	str	r3, [r7, #16]

	buffer[bufferIndex] = '\0';
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	461a      	mov	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4413      	add	r3, r2
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
	return buffer;
 80037b0:	697b      	ldr	r3, [r7, #20]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037bc:	b003      	add	sp, #12
 80037be:	4770      	bx	lr

080037c0 <smintf_list>:

char* smintf_list(const char *format, va_list args1, va_list args2) { // pass the same list twice, I'm lazy
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
	int bufferLength = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
	__operation_smintf(NULL, &bufferLength, format, args1);
 80037d0:	f107 0118 	add.w	r1, r7, #24
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	2000      	movs	r0, #0
 80037da:	f7ff fdcf 	bl	800337c <__operation_smintf>

	char* buffer = malloc(bufferLength+1);
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f013 f826 	bl	8016834 <malloc>
 80037e8:	4603      	mov	r3, r0
 80037ea:	61fb      	str	r3, [r7, #28]
	if (buffer == NULL) return NULL;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <smintf_list+0x36>
 80037f2:	2300      	movs	r3, #0
 80037f4:	e00f      	b.n	8003816 <smintf_list+0x56>
	int bufferIndex = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
	__operation_smintf(buffer, &bufferIndex, format, args2);
 80037fa:	f107 0114 	add.w	r1, r7, #20
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	69f8      	ldr	r0, [r7, #28]
 8003804:	f7ff fdba 	bl	800337c <__operation_smintf>

	buffer[bufferIndex] = '\0';
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	461a      	mov	r2, r3
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
	return buffer;
 8003814:	69fb      	ldr	r3, [r7, #28]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_MspInit+0x4c>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	4a0f      	ldr	r2, [pc, #60]	; (800386c <HAL_MspInit+0x4c>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003834:	6453      	str	r3, [r2, #68]	; 0x44
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_MspInit+0x4c>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_MspInit+0x4c>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <HAL_MspInit+0x4c>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_MspInit+0x4c>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_DAC_MspInit+0x7c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d127      	bne.n	80038e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_DAC_MspInit+0x80>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_DAC_MspInit+0x80>)
 800389c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_DAC_MspInit+0x80>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_DAC_MspInit+0x80>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_DAC_MspInit+0x80>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_DAC_MspInit+0x80>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038ca:	2310      	movs	r3, #16
 80038cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ce:	2303      	movs	r3, #3
 80038d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	4619      	mov	r1, r3
 80038dc:	4805      	ldr	r0, [pc, #20]	; (80038f4 <HAL_DAC_MspInit+0x84>)
 80038de:	f003 f829 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80038e2:	bf00      	nop
 80038e4:	3728      	adds	r7, #40	; 0x28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40007400 	.word	0x40007400
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020000 	.word	0x40020000

080038f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_I2C_MspInit+0x108>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d12c      	bne.n	8003974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a38      	ldr	r2, [pc, #224]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003936:	23c0      	movs	r3, #192	; 0xc0
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800393a:	2312      	movs	r3, #18
 800393c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003946:	2304      	movs	r3, #4
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4619      	mov	r1, r3
 8003950:	482d      	ldr	r0, [pc, #180]	; (8003a08 <HAL_I2C_MspInit+0x110>)
 8003952:	f002 ffef 	bl	8006934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003972:	e041      	b.n	80039f8 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <HAL_I2C_MspInit+0x114>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d13c      	bne.n	80039f8 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800399a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a0:	2312      	movs	r3, #18
 80039a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039ac:	2304      	movs	r3, #4
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	4619      	mov	r1, r3
 80039b6:	4814      	ldr	r0, [pc, #80]	; (8003a08 <HAL_I2C_MspInit+0x110>)
 80039b8:	f002 ffbc 	bl	8006934 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 80039c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ca:	6413      	str	r3, [r2, #64]	; 0x40
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_I2C_MspInit+0x10c>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80039d8:	2200      	movs	r2, #0
 80039da:	2100      	movs	r1, #0
 80039dc:	2021      	movs	r0, #33	; 0x21
 80039de:	f002 fb56 	bl	800608e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80039e2:	2021      	movs	r0, #33	; 0x21
 80039e4:	f002 fb6f 	bl	80060c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	2100      	movs	r1, #0
 80039ec:	2022      	movs	r0, #34	; 0x22
 80039ee:	f002 fb4e 	bl	800608e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80039f2:	2022      	movs	r0, #34	; 0x22
 80039f4:	f002 fb67 	bl	80060c6 <HAL_NVIC_EnableIRQ>
}
 80039f8:	bf00      	nop
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40005400 	.word	0x40005400
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40005800 	.word	0x40005800

08003a10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a4d      	ldr	r2, [pc, #308]	; (8003b64 <HAL_SD_MspInit+0x154>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	f040 8094 	bne.w	8003b5c <HAL_SD_MspInit+0x14c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a42:	6453      	str	r3, [r2, #68]	; 0x44
 8003a44:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a76:	f043 0308 	orr.w	r3, r3, #8
 8003a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7c:	4b3a      	ldr	r3, [pc, #232]	; (8003b68 <HAL_SD_MspInit+0x158>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9e:	f107 0314 	add.w	r3, r7, #20
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4831      	ldr	r0, [pc, #196]	; (8003b6c <HAL_SD_MspInit+0x15c>)
 8003aa6:	f002 ff45 	bl	8006934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aaa:	2304      	movs	r3, #4
 8003aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003aba:	230c      	movs	r3, #12
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	482a      	ldr	r0, [pc, #168]	; (8003b70 <HAL_SD_MspInit+0x160>)
 8003ac6:	f002 ff35 	bl	8006934 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream6;
 8003aca:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003acc:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <HAL_SD_MspInit+0x168>)
 8003ace:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8003ad0:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ad6:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ade:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aea:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003af2:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003afa:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003afe:	2220      	movs	r2, #32
 8003b00:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b10:	2203      	movs	r2, #3
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8003b24:	4813      	ldr	r0, [pc, #76]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b26:	f002 fb59 	bl	80061dc <HAL_DMA_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8003b30:	f7ff fa92 	bl	8003058 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <HAL_SD_MspInit+0x164>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2100      	movs	r1, #0
 8003b50:	2031      	movs	r0, #49	; 0x31
 8003b52:	f002 fa9c 	bl	800608e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003b56:	2031      	movs	r0, #49	; 0x31
 8003b58:	f002 fab5 	bl	80060c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003b5c:	bf00      	nop
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	200009a0 	.word	0x200009a0
 8003b78:	400264a0 	.word	0x400264a0

08003b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08e      	sub	sp, #56	; 0x38
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5a      	ldr	r2, [pc, #360]	; (8003d04 <HAL_SPI_MspInit+0x188>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d12c      	bne.n	8003bf8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bac:	6453      	str	r3, [r2, #68]	; 0x44
 8003bae:	4b56      	ldr	r3, [pc, #344]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a51      	ldr	r2, [pc, #324]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bd6:	23e0      	movs	r3, #224	; 0xe0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be2:	2303      	movs	r3, #3
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003be6:	2305      	movs	r3, #5
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4846      	ldr	r0, [pc, #280]	; (8003d0c <HAL_SPI_MspInit+0x190>)
 8003bf2:	f002 fe9f 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003bf6:	e081      	b.n	8003cfc <HAL_SPI_MspInit+0x180>
  else if(hspi->Instance==SPI2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a44      	ldr	r2, [pc, #272]	; (8003d10 <HAL_SPI_MspInit+0x194>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d14b      	bne.n	8003c9a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a3f      	ldr	r2, [pc, #252]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a31      	ldr	r2, [pc, #196]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c56:	230c      	movs	r3, #12
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c66:	2305      	movs	r3, #5
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4828      	ldr	r0, [pc, #160]	; (8003d14 <HAL_SPI_MspInit+0x198>)
 8003c72:	f002 fe5f 	bl	8006934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c88:	2305      	movs	r3, #5
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c90:	4619      	mov	r1, r3
 8003c92:	4821      	ldr	r0, [pc, #132]	; (8003d18 <HAL_SPI_MspInit+0x19c>)
 8003c94:	f002 fe4e 	bl	8006934 <HAL_GPIO_Init>
}
 8003c98:	e030      	b.n	8003cfc <HAL_SPI_MspInit+0x180>
  else if(hspi->Instance==SPI3)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_SPI_MspInit+0x1a0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d12b      	bne.n	8003cfc <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_SPI_MspInit+0x18c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003cdc:	2338      	movs	r3, #56	; 0x38
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003cec:	2306      	movs	r3, #6
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4808      	ldr	r0, [pc, #32]	; (8003d18 <HAL_SPI_MspInit+0x19c>)
 8003cf8:	f002 fe1c 	bl	8006934 <HAL_GPIO_Init>
}
 8003cfc:	bf00      	nop
 8003cfe:	3738      	adds	r7, #56	; 0x38
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013000 	.word	0x40013000
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40003800 	.word	0x40003800
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40003c00 	.word	0x40003c00

08003d20 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	; 0x30
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a32      	ldr	r2, [pc, #200]	; (8003e08 <HAL_TIM_IC_MspInit+0xe8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d12d      	bne.n	8003d9e <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6453      	str	r3, [r2, #68]	; 0x44
 8003d52:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003d68:	f043 0310 	orr.w	r3, r3, #16
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d80:	2302      	movs	r3, #2
 8003d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	4619      	mov	r1, r3
 8003d96:	481e      	ldr	r0, [pc, #120]	; (8003e10 <HAL_TIM_IC_MspInit+0xf0>)
 8003d98:	f002 fdcc 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d9c:	e030      	b.n	8003e00 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d12b      	bne.n	8003e00 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	4a0f      	ldr	r2, [pc, #60]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_TIM_IC_MspInit+0xec>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003de0:	2301      	movs	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003df0:	2301      	movs	r3, #1
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df4:	f107 031c 	add.w	r3, r7, #28
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4806      	ldr	r0, [pc, #24]	; (8003e14 <HAL_TIM_IC_MspInit+0xf4>)
 8003dfc:	f002 fd9a 	bl	8006934 <HAL_GPIO_Init>
}
 8003e00:	bf00      	nop
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40020000 	.word	0x40020000

08003e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_UART_MspInit+0x84>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d12b      	bne.n	8003e92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <HAL_UART_MspInit+0x88>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <HAL_UART_MspInit+0x88>)
 8003e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_UART_MspInit+0x88>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_UART_MspInit+0x88>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_UART_MspInit+0x88>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <HAL_UART_MspInit+0x88>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e72:	230c      	movs	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e82:	2307      	movs	r3, #7
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <HAL_UART_MspInit+0x8c>)
 8003e8e:	f002 fd51 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e92:	bf00      	nop
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <NMI_Handler+0x4>

08003eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb2:	e7fe      	b.n	8003eb2 <HardFault_Handler+0x4>

08003eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <MemManage_Handler+0x4>

08003eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <BusFault_Handler+0x4>

08003ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <UsageFault_Handler+0x4>

08003ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef4:	f001 ffac 	bl	8005e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <I2C2_EV_IRQHandler+0x10>)
 8003f02:	f003 fb4f 	bl	80075a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200008c8 	.word	0x200008c8

08003f10 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <I2C2_ER_IRQHandler+0x10>)
 8003f16:	f003 fc98 	bl	800784a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200008c8 	.word	0x200008c8

08003f24 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <SDIO_IRQHandler+0x10>)
 8003f2a:	f007 fc69 	bl	800b800 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000091c 	.word	0x2000091c

08003f38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <OTG_FS_IRQHandler+0x10>)
 8003f3e:	f005 fc61 	bl	8009804 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200023d0 	.word	0x200023d0

08003f4c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <DMA2_Stream6_IRQHandler+0x10>)
 8003f52:	f002 fa6b 	bl	800642c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200009a0 	.word	0x200009a0

08003f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
	return 1;
 8003f64:	2301      	movs	r3, #1
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_kill>:

int _kill(int pid, int sig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f7a:	f013 fe4b 	bl	8017c14 <__errno>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2216      	movs	r2, #22
 8003f82:	601a      	str	r2, [r3, #0]
	return -1;
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_exit>:

void _exit (int status)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ffe7 	bl	8003f70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fa2:	e7fe      	b.n	8003fa2 <_exit+0x12>

08003fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e00a      	b.n	8003fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003fb6:	f3af 8000 	nop.w
 8003fba:	4601      	mov	r1, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	60ba      	str	r2, [r7, #8]
 8003fc2:	b2ca      	uxtb	r2, r1
 8003fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	dbf0      	blt.n	8003fb6 <_read+0x12>
	}

return len;
 8003fd4:	687b      	ldr	r3, [r7, #4]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e009      	b.n	8004004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	60ba      	str	r2, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	dbf1      	blt.n	8003ff0 <_write+0x12>
	}
	return len;
 800400c:	687b      	ldr	r3, [r7, #4]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <_close>:

int _close(int file)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
	return -1;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800403e:	605a      	str	r2, [r3, #4]
	return 0;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <_isatty>:

int _isatty(int file)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
	return 1;
 8004056:	2301      	movs	r3, #1
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
	return 0;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <_sbrk+0x5c>)
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <_sbrk+0x60>)
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <_sbrk+0x64>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <_sbrk+0x64>)
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <_sbrk+0x68>)
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <_sbrk+0x64>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d207      	bcs.n	80040c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040b0:	f013 fdb0 	bl	8017c14 <__errno>
 80040b4:	4603      	mov	r3, r0
 80040b6:	220c      	movs	r2, #12
 80040b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	e009      	b.n	80040d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040c0:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <_sbrk+0x64>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <_sbrk+0x64>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <_sbrk+0x64>)
 80040d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20020000 	.word	0x20020000
 80040e0:	00000400 	.word	0x00000400
 80040e4:	20000c00 	.word	0x20000c00
 80040e8:	20002c48 	.word	0x20002c48

080040ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <SystemInit+0x20>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	4a05      	ldr	r2, [pc, #20]	; (800410c <SystemInit+0x20>)
 80040f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <tracking_currentLat>:
#include "smintf.h"

extern GPS_t GPS;


float tracking_currentLat() {
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
	return (float) GPS.nmea_latitude;
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <tracking_currentLat+0x18>)
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	ee07 3a90 	vmov	s15, r3
}
 800411c:	eeb0 0a67 	vmov.f32	s0, s15
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20000c08 	.word	0x20000c08

0800412c <tracking_currentLong>:

float tracking_currentLong() {
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
	return (float) GPS.nmea_longitude;
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <tracking_currentLong+0x18>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	ee07 3a90 	vmov	s15, r3
}
 8004138:	eeb0 0a67 	vmov.f32	s0, s15
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	20000c08 	.word	0x20000c08

08004148 <tracking_heartbeat>:

static void tracking_heartbeat(system_data* data) {
 8004148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800414c:	b088      	sub	sp, #32
 800414e:	af04      	add	r7, sp, #16
 8004150:	6078      	str	r0, [r7, #4]
	char* message = smintf("lat:%f,long:%f,alt_ft:%f",(double) GPS.nmea_latitude, (double) GPS.nmea_longitude, (double) GPS.altitude_ft); // TODO : APRS format it
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <tracking_heartbeat+0x60>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f9f6 	bl	8000548 <__aeabi_f2d>
 800415c:	4680      	mov	r8, r0
 800415e:	4689      	mov	r9, r1
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <tracking_heartbeat+0x60>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc f9ef 	bl	8000548 <__aeabi_f2d>
 800416a:	4604      	mov	r4, r0
 800416c:	460d      	mov	r5, r1
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <tracking_heartbeat+0x60>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc f9e8 	bl	8000548 <__aeabi_f2d>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004180:	e9cd 4500 	strd	r4, r5, [sp]
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <tracking_heartbeat+0x64>)
 800418a:	f7ff fab3 	bl	80036f4 <smintf>
 800418e:	60f8      	str	r0, [r7, #12]

	log_message(message);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7fe fe67 	bl	8002e64 <log_message>
//	telemetry_send(message);
//	telemetry_send("W9FTX");

	free(message);
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f012 fb54 	bl	8016844 <free>
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041a6:	bf00      	nop
 80041a8:	20000c08 	.word	0x20000c08
 80041ac:	0801c530 	.word	0x0801c530

080041b0 <init_tracking>:

void init_tracking(system_data* data) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	GPS.nmea_latitude = 1.0f/0; // set default values to nan
 80041b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041bc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800421c <init_tracking+0x6c>
 80041c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c4:	4b16      	ldr	r3, [pc, #88]	; (8004220 <init_tracking+0x70>)
 80041c6:	edc3 7a04 	vstr	s15, [r3, #16]
	GPS.nmea_longitude = 1.0f/0;
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800421c <init_tracking+0x6c>
 80041d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <init_tracking+0x70>)
 80041d8:	edc3 7a03 	vstr	s15, [r3, #12]

	GPS_Init();
 80041dc:	f000 ffb4 	bl	8005148 <GPS_Init>

	heartbeat_entry* tracking_entry = calloc(1, sizeof(heartbeat_entry));
 80041e0:	2114      	movs	r1, #20
 80041e2:	2001      	movs	r0, #1
 80041e4:	f012 fb08 	bl	80167f8 <calloc>
 80041e8:	4603      	mov	r3, r0
 80041ea:	60fb      	str	r3, [r7, #12]
	tracking_entry->function = tracking_heartbeat;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <init_tracking+0x74>)
 80041f0:	601a      	str	r2, [r3, #0]
	tracking_entry->interval = TRACKING_INTERVAL_MS;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	809a      	strh	r2, [r3, #4]
	tracking_entry->next = null;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
	tracking_entry->timeUntilNext = 0; // give 3ms so hopefully tasks dont overlap, plus 150 MS so that the BME280 device can take at least one sample
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
	tracking_entry->name = "tracking";
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <init_tracking+0x78>)
 800420a:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(tracking_entry);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7fe fe65 	bl	8002edc <register_heartbeat_func>


}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00000000 	.word	0x00000000
 8004220:	20000c08 	.word	0x20000c08
 8004224:	08004149 	.word	0x08004149
 8004228:	0801c54c 	.word	0x0801c54c

0800422c <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	4603      	mov	r3, r0
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	4613      	mov	r3, r2
 800423c:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fdaa 	bl	8004d98 <null_ptr_check>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8004248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11c      	bne.n	800428a <bmp280_get_regs+0x5e>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d019      	beq.n	800428a <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	789b      	ldrb	r3, [r3, #2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004264:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685c      	ldr	r4, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7858      	ldrb	r0, [r3, #1]
 800426e:	7bbb      	ldrb	r3, [r7, #14]
 8004270:	b29b      	uxth	r3, r3
 8004272:	7bf9      	ldrb	r1, [r7, #15]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	47a0      	blx	r4
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 800427c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8004284:	23fc      	movs	r3, #252	; 0xfc
 8004286:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8004288:	e001      	b.n	800428e <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800428a:	23ff      	movs	r3, #255	; 0xff
 800428c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800428e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd90      	pop	{r4, r7, pc}

0800429a <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800429a:	b590      	push	{r4, r7, lr}
 800429c:	b089      	sub	sp, #36	; 0x24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d901      	bls.n	80042b4 <bmp280_set_regs+0x1a>
    {
        len = 4;
 80042b0:	2304      	movs	r3, #4
 80042b2:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f000 fd6f 	bl	8004d98 <null_ptr_check>
 80042ba:	4603      	mov	r3, r0
 80042bc:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80042be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d14d      	bne.n	8004362 <bmp280_set_regs+0xc8>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d04a      	beq.n	8004362 <bmp280_set_regs+0xc8>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d047      	beq.n	8004362 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d041      	beq.n	800435c <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	789b      	ldrb	r3, [r3, #2]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d114      	bne.n	8004310 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e00d      	b.n	8004308 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80042ec:	7efb      	ldrb	r3, [r7, #27]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	7efb      	ldrb	r3, [r7, #27]
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	440b      	add	r3, r1
 80042fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004302:	7efb      	ldrb	r3, [r7, #27]
 8004304:	3301      	adds	r3, #1
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	7efa      	ldrb	r2, [r7, #27]
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d3ed      	bcc.n	80042ec <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d90d      	bls.n	8004332 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	f107 0110 	add.w	r1, r7, #16
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fd5a 	bl	8004dd8 <interleave_data>
                temp_len = ((len * 2) - 1);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	b29b      	uxth	r3, r3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	83bb      	strh	r3, [r7, #28]
 8004330:	e001      	b.n	8004336 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689c      	ldr	r4, [r3, #8]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	7858      	ldrb	r0, [r3, #1]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	7819      	ldrb	r1, [r3, #0]
 8004342:	8bbb      	ldrh	r3, [r7, #28]
 8004344:	f107 0210 	add.w	r2, r7, #16
 8004348:	47a0      	blx	r4
 800434a:	4603      	mov	r3, r0
 800434c:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 800434e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8004356:	23fc      	movs	r3, #252	; 0xfc
 8004358:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800435a:	e005      	b.n	8004368 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 800435c:	23fd      	movs	r3, #253	; 0xfd
 800435e:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8004360:	e002      	b.n	8004368 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8004362:	23ff      	movs	r3, #255	; 0xff
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e000      	b.n	800436a <bmp280_set_regs+0xd0>
        if (len != 0)
 8004368:	bf00      	nop
    }

    return rslt;
 800436a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}

08004376 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800437e:	23e0      	movs	r3, #224	; 0xe0
 8004380:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8004382:	23b6      	movs	r3, #182	; 0xb6
 8004384:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fd06 	bl	8004d98 <null_ptr_check>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8004390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10d      	bne.n	80043b4 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004398:	f107 010d 	add.w	r1, r7, #13
 800439c:	f107 000e 	add.w	r0, r7, #14
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f7ff ff79 	bl	800429a <bmp280_set_regs>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2002      	movs	r0, #2
 80043b2:	4798      	blx	r3
    }

    return rslt;
 80043b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 80043c8:	2305      	movs	r3, #5
 80043ca:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fce3 	bl	8004d98 <null_ptr_check>
 80043d2:	4603      	mov	r3, r0
 80043d4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80043d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d156      	bne.n	800448c <bmp280_init+0xcc>
    {
        while (try_count)
 80043de:	e033      	b.n	8004448 <bmp280_init+0x88>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	20d0      	movs	r0, #208	; 0xd0
 80043e8:	f7ff ff20 	bl	800422c <bmp280_get_regs>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11a      	bne.n	800442e <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80043fc:	2b56      	cmp	r3, #86	; 0x56
 80043fe:	d007      	beq.n	8004410 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b57      	cmp	r3, #87	; 0x57
 8004406:	d003      	beq.n	8004410 <bmp280_init+0x50>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b58      	cmp	r3, #88	; 0x58
 800440e:	d10e      	bne.n	800442e <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ffb0 	bl	8004376 <bmp280_soft_reset>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <bmp280_init+0x90>
                {
                    rslt = get_calib_param(dev);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fd04 	bl	8004e30 <get_calib_param>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
                }
                break;
 800442c:	e010      	b.n	8004450 <bmp280_init+0x90>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	200a      	movs	r0, #10
 8004434:	4798      	blx	r3
            --try_count;
 8004436:	7bbb      	ldrb	r3, [r7, #14]
 8004438:	3b01      	subs	r3, #1
 800443a:	73bb      	strb	r3, [r7, #14]
            log_messagef("chip ID: %d", (int) dev->chip_id);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	4619      	mov	r1, r3
 8004442:	4815      	ldr	r0, [pc, #84]	; (8004498 <bmp280_init+0xd8>)
 8004444:	f7fe fd2c 	bl	8002ea0 <log_messagef>
        while (try_count)
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1c8      	bne.n	80043e0 <bmp280_init+0x20>
 800444e:	e000      	b.n	8004452 <bmp280_init+0x92>
                break;
 8004450:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8004452:	7bbb      	ldrb	r3, [r7, #14]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <bmp280_init+0x9c>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8004458:	23fe      	movs	r3, #254	; 0xfe
 800445a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 800445c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d113      	bne.n	800448c <bmp280_init+0xcc>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800448c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	0801c558 	.word	0x0801c558

0800449c <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	2000      	movs	r0, #0
 80044ac:	f000 fd5e 	bl	8004f6c <conf_sensor>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	6039      	str	r1, [r7, #0]
 80044c4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80044c6:	6838      	ldr	r0, [r7, #0]
 80044c8:	f000 fc66 	bl	8004d98 <null_ptr_check>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80044d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fd42 	bl	8004f6c <conf_sensor>
 80044e8:	4603      	mov	r3, r0
 80044ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80044ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	2300      	movs	r3, #0
 8004508:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f000 fc44 	bl	8004d98 <null_ptr_check>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8004514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d133      	bne.n	8004584 <bmp280_get_uncomp_data+0x8c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d030      	beq.n	8004584 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8004522:	f107 0108 	add.w	r1, r7, #8
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2206      	movs	r2, #6
 800452a:	20f7      	movs	r0, #247	; 0xf7
 800452c:	f7ff fe7e 	bl	800422c <bmp280_get_regs>
 8004530:	4603      	mov	r3, r0
 8004532:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8004534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d120      	bne.n	800457e <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800453c:	7a3b      	ldrb	r3, [r7, #8]
 800453e:	031a      	lsls	r2, r3, #12
 8004540:	7a7b      	ldrb	r3, [r7, #9]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4313      	orrs	r3, r2
 8004546:	7aba      	ldrb	r2, [r7, #10]
 8004548:	0912      	lsrs	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	031a      	lsls	r2, r3, #12
 8004556:	7b3b      	ldrb	r3, [r7, #12]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	4313      	orrs	r3, r2
 800455c:	7b7a      	ldrb	r2, [r7, #13]
 800455e:	0912      	lsrs	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fdb0 	bl	80050d8 <st_check_boundaries>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800457c:	e004      	b.n	8004588 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800457e:	23f3      	movs	r3, #243	; 0xf3
 8004580:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8004582:	e001      	b.n	8004588 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8004584:	23ff      	movs	r3, #255	; 0xff
 8004586:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fbf9 	bl	8004d98 <null_ptr_check>
 80045a6:	4603      	mov	r3, r0
 80045a8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80045aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d14f      	bne.n	8004652 <bmp280_get_comp_temp_32bit+0xbe>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	da00      	bge.n	80045ba <bmp280_get_comp_temp_32bit+0x26>
 80045b8:	3307      	adds	r3, #7
 80045ba:	10db      	asrs	r3, r3, #3
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8a1b      	ldrh	r3, [r3, #16]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80045cc:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	da01      	bge.n	80045d8 <bmp280_get_comp_temp_32bit+0x44>
 80045d4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80045d8:	12db      	asrs	r3, r3, #11
 80045da:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	da00      	bge.n	80045e4 <bmp280_get_comp_temp_32bit+0x50>
 80045e2:	330f      	adds	r3, #15
 80045e4:	111b      	asrs	r3, r3, #4
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8a1b      	ldrh	r3, [r3, #16]
 80045ec:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da00      	bge.n	80045f6 <bmp280_get_comp_temp_32bit+0x62>
 80045f4:	330f      	adds	r3, #15
 80045f6:	111b      	asrs	r3, r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8a1b      	ldrh	r3, [r3, #16]
 80045fe:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8004600:	fb02 f303 	mul.w	r3, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8004604:	2b00      	cmp	r3, #0
 8004606:	da01      	bge.n	800460c <bmp280_get_comp_temp_32bit+0x78>
 8004608:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800460c:	131b      	asrs	r3, r3, #12
 800460e:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8004616:	fb02 f303 	mul.w	r3, r2, r3
        var2 =
 800461a:	2b00      	cmp	r3, #0
 800461c:	da02      	bge.n	8004624 <bmp280_get_comp_temp_32bit+0x90>
 800461e:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004622:	333f      	adds	r3, #63	; 0x3f
 8004624:	139b      	asrs	r3, r3, #14
 8004626:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	3380      	adds	r3, #128	; 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	da00      	bge.n	8004644 <bmp280_get_comp_temp_32bit+0xb0>
 8004642:	33ff      	adds	r3, #255	; 0xff
 8004644:	121b      	asrs	r3, r3, #8
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e004      	b.n	800465c <bmp280_get_comp_temp_32bit+0xc8>
    }
    else
    {
        *comp_temp = 0;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8004658:	23f2      	movs	r3, #242	; 0xf2
 800465a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800465c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <bmp280_get_comp_pres_32bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_pres_32bit(uint32_t *comp_pres, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fb8f 	bl	8004d98 <null_ptr_check>
 800467a:	4603      	mov	r3, r0
 800467c:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 800467e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 80e2 	bne.w	800484c <bmp280_get_comp_pres_32bit+0x1e4>
    {
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	0fda      	lsrs	r2, r3, #31
 800468e:	4413      	add	r3, r2
 8004690:	105b      	asrs	r3, r3, #1
 8004692:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8004696:	61bb      	str	r3, [r7, #24]
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da00      	bge.n	80046a0 <bmp280_get_comp_pres_32bit+0x38>
 800469e:	3303      	adds	r3, #3
 80046a0:	109b      	asrs	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da00      	bge.n	80046ac <bmp280_get_comp_pres_32bit+0x44>
 80046aa:	3303      	adds	r3, #3
 80046ac:	109b      	asrs	r3, r3, #2
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da01      	bge.n	80046ba <bmp280_get_comp_pres_32bit+0x52>
 80046b6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80046ba:	12db      	asrs	r3, r3, #11
 80046bc:	461a      	mov	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80046d0:	461a      	mov	r2, r3
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da00      	bge.n	80046e8 <bmp280_get_comp_pres_32bit+0x80>
 80046e6:	3303      	adds	r3, #3
 80046e8:	109b      	asrs	r3, r3, #2
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	4413      	add	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
        var1 =
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80046fe:	461a      	mov	r2, r3
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da00      	bge.n	8004708 <bmp280_get_comp_pres_32bit+0xa0>
 8004706:	3303      	adds	r3, #3
 8004708:	109b      	asrs	r3, r3, #2
 800470a:	4619      	mov	r1, r3
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	da00      	bge.n	8004714 <bmp280_get_comp_pres_32bit+0xac>
 8004712:	3303      	adds	r3, #3
 8004714:	109b      	asrs	r3, r3, #2
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	da02      	bge.n	8004724 <bmp280_get_comp_pres_32bit+0xbc>
 800471e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8004722:	331f      	adds	r3, #31
 8004724:	135b      	asrs	r3, r3, #13
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	da00      	bge.n	8004730 <bmp280_get_comp_pres_32bit+0xc8>
 800472e:	3307      	adds	r3, #7
 8004730:	10db      	asrs	r3, r3, #3
 8004732:	4619      	mov	r1, r3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800473a:	461a      	mov	r2, r3
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	0fda      	lsrs	r2, r3, #31
 8004744:	4413      	add	r3, r2
 8004746:	105b      	asrs	r3, r3, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 8004748:	440b      	add	r3, r1
        var1 =
 800474a:	2b00      	cmp	r3, #0
 800474c:	da03      	bge.n	8004756 <bmp280_get_comp_pres_32bit+0xee>
 800474e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8004752:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004756:	149b      	asrs	r3, r3, #18
 8004758:	61bb      	str	r3, [r7, #24]
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	8ad2      	ldrh	r2, [r2, #22]
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	da02      	bge.n	8004772 <bmp280_get_comp_pres_32bit+0x10a>
 800476c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004770:	337f      	adds	r3, #127	; 0x7f
 8004772:	13db      	asrs	r3, r3, #15
 8004774:	61bb      	str	r3, [r7, #24]
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	da01      	bge.n	8004780 <bmp280_get_comp_pres_32bit+0x118>
 800477c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004780:	131b      	asrs	r3, r3, #12
 8004782:	425b      	negs	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f640 4235 	movw	r2, #3125	; 0xc35
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8004796:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6013      	str	r3, [r2, #0]

        /* Avoid exception caused by division with zero */
        if (var1 != 0)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d04e      	beq.n	8004842 <bmp280_get_comp_pres_32bit+0x1da>
        {
            /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
            if (*comp_pres < 0x80000000)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db08      	blt.n	80047be <bmp280_get_comp_pres_32bit+0x156>
            {
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	005a      	lsls	r2, r3, #1
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e007      	b.n	80047ce <bmp280_get_comp_pres_32bit+0x166>
            }
            else
            {
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	005a      	lsls	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	601a      	str	r2, [r3, #0]
            }
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80047d4:	4619      	mov	r1, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	08d2      	lsrs	r2, r2, #3
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	da01      	bge.n	80047f4 <bmp280_get_comp_pres_32bit+0x18c>
 80047f0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80047f4:	131b      	asrs	r3, r3, #12
 80047f6:	61bb      	str	r3, [r7, #24]
                   4096;
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	da02      	bge.n	8004814 <bmp280_get_comp_pres_32bit+0x1ac>
 800480e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8004812:	331f      	adds	r3, #31
 8004814:	135b      	asrs	r3, r3, #13
 8004816:	617b      	str	r3, [r7, #20]
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800482a:	4413      	add	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	da00      	bge.n	8004832 <bmp280_get_comp_pres_32bit+0x1ca>
 8004830:	330f      	adds	r3, #15
 8004832:	111b      	asrs	r3, r3, #4
 8004834:	440b      	add	r3, r1
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e004      	b.n	800484c <bmp280_get_comp_pres_32bit+0x1e4>
        }
        else
        {
            *comp_pres = 0;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
 8004848:	23f1      	movs	r3, #241	; 0xf1
 800484a:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800484c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8004858:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800485c:	b08a      	sub	sp, #40	; 0x28
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa96 	bl	8004d98 <null_ptr_check>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8004872:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 80ac 	bne.w	80049d4 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800487c:	68b8      	ldr	r0, [r7, #8]
 800487e:	f7fb fe51 	bl	8000524 <__aeabi_i2d>
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	4b5c      	ldr	r3, [pc, #368]	; (80049f8 <bmp280_get_comp_temp_double+0x1a0>)
 8004888:	f7fb ffe0 	bl	800084c <__aeabi_ddiv>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4614      	mov	r4, r2
 8004892:	461d      	mov	r5, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8a1b      	ldrh	r3, [r3, #16]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe33 	bl	8000504 <__aeabi_ui2d>
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	4b56      	ldr	r3, [pc, #344]	; (80049fc <bmp280_get_comp_temp_double+0x1a4>)
 80048a4:	f7fb ffd2 	bl	800084c <__aeabi_ddiv>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fb fcea 	bl	8000288 <__aeabi_dsub>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4614      	mov	r4, r2
 80048ba:	461d      	mov	r5, r3
               ((double) dev->calib_param.dig_t2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fb fe2e 	bl	8000524 <__aeabi_i2d>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80048cc:	4620      	mov	r0, r4
 80048ce:	4629      	mov	r1, r5
 80048d0:	f7fb fe92 	bl	80005f8 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80048dc:	68b8      	ldr	r0, [r7, #8]
 80048de:	f7fb fe21 	bl	8000524 <__aeabi_i2d>
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80048ea:	f7fb ffaf 	bl	800084c <__aeabi_ddiv>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4614      	mov	r4, r2
 80048f4:	461d      	mov	r5, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8a1b      	ldrh	r3, [r3, #16]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fb fe02 	bl	8000504 <__aeabi_ui2d>
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <bmp280_get_comp_temp_double+0x1a8>)
 8004906:	f7fb ffa1 	bl	800084c <__aeabi_ddiv>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fcb9 	bl	8000288 <__aeabi_dsub>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4614      	mov	r4, r2
 800491c:	461d      	mov	r5, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f7fb fe00 	bl	8000524 <__aeabi_i2d>
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800492c:	f7fb ff8e 	bl	800084c <__aeabi_ddiv>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4690      	mov	r8, r2
 8004936:	4699      	mov	r9, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8a1b      	ldrh	r3, [r3, #16]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fb fde1 	bl	8000504 <__aeabi_ui2d>
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <bmp280_get_comp_temp_double+0x1a8>)
 8004948:	f7fb ff80 	bl	800084c <__aeabi_ddiv>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4640      	mov	r0, r8
 8004952:	4649      	mov	r1, r9
 8004954:	f7fb fc98 	bl	8000288 <__aeabi_dsub>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f7fb fe4a 	bl	80005f8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4614      	mov	r4, r2
 800496a:	461d      	mov	r5, r3
            ((double) dev->calib_param.dig_t3);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fb fdd6 	bl	8000524 <__aeabi_i2d>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
        var2 =
 800497c:	4620      	mov	r0, r4
 800497e:	4629      	mov	r1, r5
 8004980:	f7fb fe3a 	bl	80005f8 <__aeabi_dmul>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 800498c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004990:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004994:	f7fb fc7a 	bl	800028c <__adddf3>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	f7fc f8da 	bl	8000b58 <__aeabi_d2iz>
 80049a4:	4602      	mov	r2, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 80049aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049b2:	f7fb fc6b 	bl	800028c <__adddf3>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <bmp280_get_comp_temp_double+0x1ac>)
 80049c4:	f7fb ff42 	bl	800084c <__aeabi_ddiv>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	e9c1 2300 	strd	r2, r3, [r1]
 80049d2:	e009      	b.n	80049e8 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 80049e2:	23ef      	movs	r3, #239	; 0xef
 80049e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80049e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3728      	adds	r7, #40	; 0x28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049f6:	bf00      	nop
 80049f8:	40d00000 	.word	0x40d00000
 80049fc:	40900000 	.word	0x40900000
 8004a00:	40c00000 	.word	0x40c00000
 8004a04:	40b40000 	.word	0x40b40000

08004a08 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8004a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a0c:	b08a      	sub	sp, #40	; 0x28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9be 	bl	8004d98 <null_ptr_check>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8004a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 8197 	bne.w	8004d5a <bmp280_get_comp_pres_double+0x352>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd77 	bl	8000524 <__aeabi_i2d>
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a3e:	f7fb ff05 	bl	800084c <__aeabi_ddiv>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	4bc8      	ldr	r3, [pc, #800]	; (8004d70 <bmp280_get_comp_pres_double+0x368>)
 8004a50:	f7fb fc1a 	bl	8000288 <__aeabi_dsub>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8004a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a64:	f7fb fdc8 	bl	80005f8 <__aeabi_dmul>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	461d      	mov	r5, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fb fd54 	bl	8000524 <__aeabi_i2d>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4620      	mov	r0, r4
 8004a82:	4629      	mov	r1, r5
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	4bb7      	ldr	r3, [pc, #732]	; (8004d74 <bmp280_get_comp_pres_double+0x36c>)
 8004a96:	f7fb fed9 	bl	800084c <__aeabi_ddiv>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fd3b 	bl	8000524 <__aeabi_i2d>
 8004aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab2:	f7fb fda1 	bl	80005f8 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	f7fb fbe3 	bl	800028c <__adddf3>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ace:	f7fb fbdd 	bl	800028c <__adddf3>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	4ba6      	ldr	r3, [pc, #664]	; (8004d78 <bmp280_get_comp_pres_double+0x370>)
 8004ae0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ae4:	f7fb feb2 	bl	800084c <__aeabi_ddiv>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb fd14 	bl	8000524 <__aeabi_i2d>
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	4b9e      	ldr	r3, [pc, #632]	; (8004d7c <bmp280_get_comp_pres_double+0x374>)
 8004b02:	f7fb fd79 	bl	80005f8 <__aeabi_dmul>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	f7fb fbbd 	bl	800028c <__adddf3>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fb fcff 	bl	8000524 <__aeabi_i2d>
 8004b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2a:	f7fb fd65 	bl	80005f8 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3a:	f7fb fd5d 	bl	80005f8 <__aeabi_dmul>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	4b8d      	ldr	r3, [pc, #564]	; (8004d80 <bmp280_get_comp_pres_double+0x378>)
 8004b4c:	f7fb fe7e 	bl	800084c <__aeabi_ddiv>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fb fce0 	bl	8000524 <__aeabi_i2d>
 8004b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b68:	f7fb fd46 	bl	80005f8 <__aeabi_dmul>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4620      	mov	r0, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7fb fb8a 	bl	800028c <__adddf3>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	4b7e      	ldr	r3, [pc, #504]	; (8004d80 <bmp280_get_comp_pres_double+0x378>)
 8004b86:	f7fb fe61 	bl	800084c <__aeabi_ddiv>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	4b77      	ldr	r3, [pc, #476]	; (8004d74 <bmp280_get_comp_pres_double+0x36c>)
 8004b98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b9c:	f7fb fe56 	bl	800084c <__aeabi_ddiv>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	4b75      	ldr	r3, [pc, #468]	; (8004d84 <bmp280_get_comp_pres_double+0x37c>)
 8004bae:	f7fb fb6d 	bl	800028c <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4614      	mov	r4, r2
 8004bb8:	461d      	mov	r5, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8adb      	ldrh	r3, [r3, #22]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb fca0 	bl	8000504 <__aeabi_ui2d>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f7fb fd14 	bl	80005f8 <__aeabi_dmul>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	e9c7 2306 	strd	r2, r3, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8004bd8:	68b8      	ldr	r0, [r7, #8]
 8004bda:	f7fb fc93 	bl	8000504 <__aeabi_ui2d>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	4968      	ldr	r1, [pc, #416]	; (8004d88 <bmp280_get_comp_pres_double+0x380>)
 8004be8:	f7fb fb4e 	bl	8000288 <__aeabi_dsub>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	e9c1 2300 	strd	r2, r3, [r1]
        if (var1 < 0 || var1 > 0)
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c02:	f7fb ff6b 	bl	8000adc <__aeabi_dcmplt>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <bmp280_get_comp_pres_double+0x21c>
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c18:	f7fb ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8091 	beq.w	8004d46 <bmp280_get_comp_pres_double+0x33e>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <bmp280_get_comp_pres_double+0x384>)
 8004c30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c34:	f7fb fe0a 	bl	800084c <__aeabi_ddiv>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7fb fb22 	bl	8000288 <__aeabi_dsub>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	a346      	add	r3, pc, #280	; (adr r3, 8004d68 <bmp280_get_comp_pres_double+0x360>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb fcd1 	bl	80005f8 <__aeabi_dmul>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c62:	f7fb fdf3 	bl	800084c <__aeabi_ddiv>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	e9c1 2300 	strd	r2, r3, [r1]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb fc54 	bl	8000524 <__aeabi_i2d>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fcb9 	bl	80005f8 <__aeabi_dmul>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fcb0 	bl	80005f8 <__aeabi_dmul>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <bmp280_get_comp_pres_double+0x388>)
 8004ca6:	f7fb fdd1 	bl	800084c <__aeabi_ddiv>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	e9c7 2306 	strd	r2, r3, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb fc30 	bl	8000524 <__aeabi_i2d>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4620      	mov	r0, r4
 8004cca:	4629      	mov	r1, r5
 8004ccc:	f7fb fc94 	bl	80005f8 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <bmp280_get_comp_pres_double+0x36c>)
 8004cde:	f7fb fdb5 	bl	800084c <__aeabi_ddiv>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cf8:	f7fb fac8 	bl	800028c <__adddf3>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4690      	mov	r8, r2
 8004d02:	4699      	mov	r9, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fc0a 	bl	8000524 <__aeabi_i2d>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fab8 	bl	800028c <__adddf3>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <bmp280_get_comp_pres_double+0x38c>)
 8004d2a:	f7fb fd8f 	bl	800084c <__aeabi_ddiv>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4620      	mov	r0, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	f7fb faa9 	bl	800028c <__adddf3>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	e9c1 2300 	strd	r2, r3, [r1]
 8004d44:	e009      	b.n	8004d5a <bmp280_get_comp_pres_double+0x352>
        }
        else
        {
            *pressure = 0;
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9c1 2300 	strd	r2, r3, [r1]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8004d54:	23ee      	movs	r3, #238	; 0xee
 8004d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8004d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	40b86a00 	.word	0x40b86a00
 8004d70:	40ef4000 	.word	0x40ef4000
 8004d74:	40e00000 	.word	0x40e00000
 8004d78:	40100000 	.word	0x40100000
 8004d7c:	40f00000 	.word	0x40f00000
 8004d80:	41200000 	.word	0x41200000
 8004d84:	3ff00000 	.word	0x3ff00000
 8004d88:	41300000 	.word	0x41300000
 8004d8c:	40b00000 	.word	0x40b00000
 8004d90:	41e00000 	.word	0x41e00000
 8004d94:	40300000 	.word	0x40300000

08004d98 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <null_ptr_check+0x26>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <null_ptr_check+0x26>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <null_ptr_check+0x26>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8004dbe:	23ff      	movs	r3, #255	; 0xff
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	e001      	b.n	8004dc8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
 8004dea:	e016      	b.n	8004e1a <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	441a      	add	r2, r3
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	3b01      	subs	r3, #1
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	440b      	add	r3, r1
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	440b      	add	r3, r1
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	3301      	adds	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
 8004e1a:	7dfa      	ldrb	r2, [r7, #23]
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3e4      	bcc.n	8004dec <interleave_data+0x14>
    }
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ffa3 	bl	8004d98 <null_ptr_check>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8004e58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d17f      	bne.n	8004f60 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8004e60:	f107 010c 	add.w	r1, r7, #12
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2218      	movs	r2, #24
 8004e68:	2088      	movs	r0, #136	; 0x88
 8004e6a:	f7ff f9df 	bl	800422c <bmp280_get_regs>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8004e74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d171      	bne.n	8004f60 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8004e7c:	7b7b      	ldrb	r3, [r7, #13]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	b21a      	sxth	r2, r3
 8004e82:	7b3b      	ldrb	r3, [r7, #12]
 8004e84:	b21b      	sxth	r3, r3
 8004e86:	4313      	orrs	r3, r2
 8004e88:	b21b      	sxth	r3, r3
 8004e8a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	b21a      	sxth	r2, r3
 8004e96:	7bbb      	ldrb	r3, [r7, #14]
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8004ea2:	7c7b      	ldrb	r3, [r7, #17]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	7c3b      	ldrb	r3, [r7, #16]
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	4313      	orrs	r3, r2
 8004eae:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	7cbb      	ldrb	r3, [r7, #18]
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b21b      	sxth	r3, r3
 8004ec2:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8004ec8:	7d7b      	ldrb	r3, [r7, #21]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	b21a      	sxth	r2, r3
 8004ece:	7d3b      	ldrb	r3, [r7, #20]
 8004ed0:	b21b      	sxth	r3, r3
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	b21a      	sxth	r2, r3
 8004ee0:	7dbb      	ldrb	r3, [r7, #22]
 8004ee2:	b21b      	sxth	r3, r3
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8004eec:	7e7b      	ldrb	r3, [r7, #25]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	b21a      	sxth	r2, r3
 8004ef2:	7e3b      	ldrb	r3, [r7, #24]
 8004ef4:	b21b      	sxth	r3, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8004efe:	7efb      	ldrb	r3, [r7, #27]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	b21a      	sxth	r2, r3
 8004f04:	7ebb      	ldrb	r3, [r7, #26]
 8004f06:	b21b      	sxth	r3, r3
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8004f10:	7f7b      	ldrb	r3, [r7, #29]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	b21a      	sxth	r2, r3
 8004f16:	7f3b      	ldrb	r3, [r7, #28]
 8004f18:	b21b      	sxth	r3, r3
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	b21a      	sxth	r2, r3
 8004f28:	7fbb      	ldrb	r3, [r7, #30]
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8004f34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	b21a      	sxth	r2, r3
 8004f3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8004f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	b21a      	sxth	r2, r3
 8004f52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8004f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3728      	adds	r7, #40	; 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8004f7e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8004f82:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff07 	bl	8004d98 <null_ptr_check>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8004f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 8095 	bne.w	80050c2 <conf_sensor+0x156>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8091 	beq.w	80050c2 <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8004fa0:	f107 0114 	add.w	r1, r7, #20
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	20f4      	movs	r0, #244	; 0xf4
 8004faa:	f7ff f93f 	bl	800422c <bmp280_get_regs>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8004fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f040 8086 	bne.w	80050c8 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff f9da 	bl	8004376 <bmp280_soft_reset>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8004fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d17c      	bne.n	80050c8 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8004fce:	7d3b      	ldrb	r3, [r7, #20]
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	b25a      	sxtb	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8004fe8:	7d3b      	ldrb	r3, [r7, #20]
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	f023 031c 	bic.w	r3, r3, #28
 8004ff0:	b25a      	sxtb	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	f003 031c 	and.w	r3, r3, #28
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	b25b      	sxtb	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8005008:	7d7b      	ldrb	r3, [r7, #21]
 800500a:	b25b      	sxtb	r3, r3
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	b25a      	sxtb	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	789b      	ldrb	r3, [r3, #2]
 8005016:	015b      	lsls	r3, r3, #5
 8005018:	b25b      	sxtb	r3, r3
 800501a:	4313      	orrs	r3, r2
 800501c:	b25b      	sxtb	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8005022:	7d7b      	ldrb	r3, [r7, #21]
 8005024:	b25b      	sxtb	r3, r3
 8005026:	f023 031c 	bic.w	r3, r3, #28
 800502a:	b25a      	sxtb	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	78db      	ldrb	r3, [r3, #3]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	b25b      	sxtb	r3, r3
 8005034:	f003 031c 	and.w	r3, r3, #28
 8005038:	b25b      	sxtb	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b25b      	sxtb	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8005042:	7d7b      	ldrb	r3, [r7, #21]
 8005044:	b25b      	sxtb	r3, r3
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	b25a      	sxtb	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	b25b      	sxtb	r3, r3
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	b25b      	sxtb	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b25b      	sxtb	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8005060:	f107 0114 	add.w	r1, r7, #20
 8005064:	f107 0010 	add.w	r0, r7, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f7ff f915 	bl	800429a <bmp280_set_regs>
 8005070:	4603      	mov	r3, r0
 8005072:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8005074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d125      	bne.n	80050c8 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	332c      	adds	r3, #44	; 0x2c
 8005082:	6810      	ldr	r0, [r2, #0]
 8005084:	6018      	str	r0, [r3, #0]
 8005086:	7912      	ldrb	r2, [r2, #4]
 8005088:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8005090:	7d3b      	ldrb	r3, [r7, #20]
 8005092:	b25b      	sxtb	r3, r3
 8005094:	f023 0303 	bic.w	r3, r3, #3
 8005098:	b25a      	sxtb	r2, r3
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	4313      	orrs	r3, r2
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 80050ac:	f107 0114 	add.w	r1, r7, #20
 80050b0:	f107 0010 	add.w	r0, r7, #16
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f7ff f8ef 	bl	800429a <bmp280_set_regs>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80050c0:	e002      	b.n	80050c8 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80050c2:	23ff      	movs	r3, #255	; 0xff
 80050c4:	75fb      	strb	r3, [r7, #23]
 80050c6:	e000      	b.n	80050ca <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 80050c8:	bf00      	nop
    }

    return rslt;
 80050ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dd03      	ble.n	80050f4 <st_check_boundaries+0x1c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <st_check_boundaries+0x6c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	dd09      	ble.n	8005108 <st_check_boundaries+0x30>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dd03      	ble.n	8005102 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4a11      	ldr	r2, [pc, #68]	; (8005144 <st_check_boundaries+0x6c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	dd02      	ble.n	8005108 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8005102:	23f4      	movs	r3, #244	; 0xf4
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	e015      	b.n	8005134 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	dd03      	ble.n	8005116 <st_check_boundaries+0x3e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <st_check_boundaries+0x6c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	dd02      	ble.n	800511c <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8005116:	23f6      	movs	r3, #246	; 0xf6
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	e00b      	b.n	8005134 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	dd03      	ble.n	800512a <st_check_boundaries+0x52>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4a07      	ldr	r2, [pc, #28]	; (8005144 <st_check_boundaries+0x6c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	dd02      	ble.n	8005130 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 800512a:	23f5      	movs	r3, #245	; 0xf5
 800512c:	73fb      	strb	r3, [r7, #15]
 800512e:	e001      	b.n	8005134 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	000fffef 	.word	0x000fffef

08005148 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800514c:	2201      	movs	r2, #1
 800514e:	4903      	ldr	r1, [pc, #12]	; (800515c <GPS_Init+0x14>)
 8005150:	4803      	ldr	r0, [pc, #12]	; (8005160 <GPS_Init+0x18>)
 8005152:	f009 f8a4 	bl	800e29e <HAL_UART_Receive_IT>
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000c04 	.word	0x20000c04
 8005160:	20000b98 	.word	0x20000b98

08005164 <mpu6050_init>:
static void i2c_write(I2C_HandleTypeDef* dev, uint8_t subAddr, uint8_t data);
static int16_t i2c_read(I2C_HandleTypeDef* dev, uint8_t addr_L, uint8_t addr_H);

static uint8_t isDisabled;

void mpu6050_init (I2C_HandleTypeDef* dev) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af02      	add	r7, sp, #8
 800516a:	6078      	str	r0, [r7, #4]

	i2c_write(dev, RA_PWR_ADDR, RA_PWR_MGMT_1);
 800516c:	2200      	movs	r2, #0
 800516e:	216b      	movs	r1, #107	; 0x6b
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f925 	bl	80053c0 <i2c_write>
	HAL_Delay(100);
 8005176:	2064      	movs	r0, #100	; 0x64
 8005178:	f000 fe8a 	bl	8005e90 <HAL_Delay>
	i2c_write(dev, RA_USER_CTRL, USER_CTRL);
 800517c:	2200      	movs	r2, #0
 800517e:	216a      	movs	r1, #106	; 0x6a
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f91d 	bl	80053c0 <i2c_write>
	i2c_write(dev, RA_INT_PIN_CFG, PIN_CFG);
 8005186:	2202      	movs	r2, #2
 8005188:	2137      	movs	r1, #55	; 0x37
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f918 	bl	80053c0 <i2c_write>
	i2c_write(dev, RA_SMPLRT_DIV, SMPLRT_DIV);
 8005190:	2213      	movs	r2, #19
 8005192:	2119      	movs	r1, #25
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f913 	bl	80053c0 <i2c_write>
	i2c_write(dev, RA_GYRO_CONFIG, G_SELF_TEST_X | G_SELF_TEST_Y | G_SELF_TEST_Z | FS_SEL);
 800519a:	2200      	movs	r2, #0
 800519c:	211b      	movs	r1, #27
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f90e 	bl	80053c0 <i2c_write>
	i2c_write(dev, RA_ACCEL_CONFIG, ACC_SELF_TEST_X | ACC_SELF_TEST_Y | ACC_SELF_TEST_Z | AF_SEL | ACC_HPF);
 80051a4:	2200      	movs	r2, #0
 80051a6:	211c      	movs	r1, #28
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f909 	bl	80053c0 <i2c_write>

	uint8_t whoAmI = 0x75;
 80051ae:	2375      	movs	r3, #117	; 0x75
 80051b0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(dev, MPU6050_ADDR, &whoAmI, 1, HAL_MAX_DELAY);
 80051b2:	f107 020b 	add.w	r2, r7, #11
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2301      	movs	r3, #1
 80051be:	21d0      	movs	r1, #208	; 0xd0
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fecb 	bl	8006f5c <HAL_I2C_Master_Transmit>
	whoAmI = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Receive(dev, MPU6050_ADDR, &whoAmI, 1, HAL_MAX_DELAY);
 80051ca:	f107 020b 	add.w	r2, r7, #11
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2301      	movs	r3, #1
 80051d6:	21d0      	movs	r1, #208	; 0xd0
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f001 ffbd 	bl	8007158 <HAL_I2C_Master_Receive>

	char* message = smintf("mpu6050 returned %d, not 114", (int) whoAmI);
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	4619      	mov	r1, r3
 80051e2:	480a      	ldr	r0, [pc, #40]	; (800520c <mpu6050_init+0xa8>)
 80051e4:	f7fe fa86 	bl	80036f4 <smintf>
 80051e8:	4603      	mov	r3, r0
 80051ea:	60fb      	str	r3, [r7, #12]
	log_message(message);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7fd fe39 	bl	8002e64 <log_message>
	free(message);
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f011 fb26 	bl	8016844 <free>
//	assert(0);

	if (whoAmI != 114) {
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	2b72      	cmp	r3, #114	; 0x72
 80051fc:	d002      	beq.n	8005204 <mpu6050_init+0xa0>
		isDisabled = 1;
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <mpu6050_init+0xac>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
	}


}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	0801c564 	.word	0x0801c564
 8005210:	20000c60 	.word	0x20000c60

08005214 <mpu6050_read_accel>:

void mpu6050_read_accel (I2C_HandleTypeDef* dev, mpu6050_data_t* out_data)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	if (isDisabled) {
 800521e:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <mpu6050_read_accel+0xc8>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <mpu6050_read_accel+0x26>
		out_data->Ax = NAN;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <mpu6050_read_accel+0xcc>)
 800522a:	601a      	str	r2, [r3, #0]
		out_data->Ay = NAN;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <mpu6050_read_accel+0xcc>)
 8005230:	605a      	str	r2, [r3, #4]
		out_data->Az = NAN;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <mpu6050_read_accel+0xcc>)
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	e04d      	b.n	80052d6 <mpu6050_read_accel+0xc2>
		return;
	}

	int16_t data[3];

	data[0] = i2c_read(dev, RA_ACCEL_XOUT_L, RA_ACCEL_XOUT_H);
 800523a:	223b      	movs	r2, #59	; 0x3b
 800523c:	213c      	movs	r1, #60	; 0x3c
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f8de 	bl	8005400 <i2c_read>
 8005244:	4603      	mov	r3, r0
 8005246:	813b      	strh	r3, [r7, #8]
	data[1] = i2c_read(dev, RA_ACCEL_YOUT_L, RA_ACCEL_YOUT_H);
 8005248:	223d      	movs	r2, #61	; 0x3d
 800524a:	213e      	movs	r1, #62	; 0x3e
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f8d7 	bl	8005400 <i2c_read>
 8005252:	4603      	mov	r3, r0
 8005254:	817b      	strh	r3, [r7, #10]
	data[2] = i2c_read(dev, RA_ACCEL_ZOUT_L, RA_ACCEL_ZOUT_H);
 8005256:	223f      	movs	r2, #63	; 0x3f
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8d0 	bl	8005400 <i2c_read>
 8005260:	4603      	mov	r3, r0
 8005262:	81bb      	strh	r3, [r7, #12]


	//see the other github for the reasons behind these numbers
	out_data->Ax = data[0]/16384.0;
 8005264:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fb f95b 	bl	8000524 <__aeabi_i2d>
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <mpu6050_read_accel+0xd0>)
 8005274:	f7fb faea 	bl	800084c <__aeabi_ddiv>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	f7fb fcb2 	bl	8000be8 <__aeabi_d2f>
 8005284:	4602      	mov	r2, r0
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	601a      	str	r2, [r3, #0]
	out_data->Ay = data[1]/16384.0;
 800528a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fb f948 	bl	8000524 <__aeabi_i2d>
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <mpu6050_read_accel+0xd0>)
 800529a:	f7fb fad7 	bl	800084c <__aeabi_ddiv>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	f7fb fc9f 	bl	8000be8 <__aeabi_d2f>
 80052aa:	4602      	mov	r2, r0
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	605a      	str	r2, [r3, #4]
	out_data->Az = data[2]/16384.0;
 80052b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb f935 	bl	8000524 <__aeabi_i2d>
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <mpu6050_read_accel+0xd0>)
 80052c0:	f7fb fac4 	bl	800084c <__aeabi_ddiv>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	f7fb fc8c 	bl	8000be8 <__aeabi_d2f>
 80052d0:	4602      	mov	r2, r0
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	609a      	str	r2, [r3, #8]
}
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000c60 	.word	0x20000c60
 80052e0:	7fc00000 	.word	0x7fc00000
 80052e4:	40d00000 	.word	0x40d00000

080052e8 <mpu6050_read_gyro>:

void mpu6050_read_gyro (I2C_HandleTypeDef* dev, mpu6050_data_t* out_data)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	if (isDisabled) {
 80052f2:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <mpu6050_read_gyro+0xd0>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <mpu6050_read_gyro+0x26>
		out_data->Gx = NAN;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <mpu6050_read_gyro+0xd4>)
 80052fe:	60da      	str	r2, [r3, #12]
		out_data->Gy = NAN;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4a2e      	ldr	r2, [pc, #184]	; (80053bc <mpu6050_read_gyro+0xd4>)
 8005304:	611a      	str	r2, [r3, #16]
		out_data->Gz = NAN;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <mpu6050_read_gyro+0xd4>)
 800530a:	615a      	str	r2, [r3, #20]
 800530c:	e04d      	b.n	80053aa <mpu6050_read_gyro+0xc2>
		return;
	}

	int16_t data[3];

	data[0] = i2c_read(dev, RA_GYRO_XOUT_L, RA_GYRO_XOUT_H);
 800530e:	2243      	movs	r2, #67	; 0x43
 8005310:	2144      	movs	r1, #68	; 0x44
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f874 	bl	8005400 <i2c_read>
 8005318:	4603      	mov	r3, r0
 800531a:	813b      	strh	r3, [r7, #8]
	data[1] = i2c_read(dev, RA_GYRO_YOUT_L, RA_GYRO_YOUT_H);
 800531c:	2245      	movs	r2, #69	; 0x45
 800531e:	2146      	movs	r1, #70	; 0x46
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f86d 	bl	8005400 <i2c_read>
 8005326:	4603      	mov	r3, r0
 8005328:	817b      	strh	r3, [r7, #10]
	data[2] = i2c_read(dev, RA_GYRO_ZOUT_L, RA_GYRO_ZOUT_H);
 800532a:	2247      	movs	r2, #71	; 0x47
 800532c:	2148      	movs	r1, #72	; 0x48
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f866 	bl	8005400 <i2c_read>
 8005334:	4603      	mov	r3, r0
 8005336:	81bb      	strh	r3, [r7, #12]

//	log_messagef("Gyro raw data: %d %d %d", (int) data[0], (int) data[1], (int) data[2]);

	// see the other github for the reasons behind these numbers
	out_data->Gx = data[0]/131.0;
 8005338:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f8f1 	bl	8000524 <__aeabi_i2d>
 8005342:	a31b      	add	r3, pc, #108	; (adr r3, 80053b0 <mpu6050_read_gyro+0xc8>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fb fa80 	bl	800084c <__aeabi_ddiv>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f7fb fc48 	bl	8000be8 <__aeabi_d2f>
 8005358:	4602      	mov	r2, r0
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	60da      	str	r2, [r3, #12]
	out_data->Gy = data[1]/131.0;
 800535e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f8de 	bl	8000524 <__aeabi_i2d>
 8005368:	a311      	add	r3, pc, #68	; (adr r3, 80053b0 <mpu6050_read_gyro+0xc8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb fa6d 	bl	800084c <__aeabi_ddiv>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f7fb fc35 	bl	8000be8 <__aeabi_d2f>
 800537e:	4602      	mov	r2, r0
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	611a      	str	r2, [r3, #16]
	out_data->Gz = data[2]/131.0;
 8005384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb f8cb 	bl	8000524 <__aeabi_i2d>
 800538e:	a308      	add	r3, pc, #32	; (adr r3, 80053b0 <mpu6050_read_gyro+0xc8>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb fa5a 	bl	800084c <__aeabi_ddiv>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4610      	mov	r0, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	f7fb fc22 	bl	8000be8 <__aeabi_d2f>
 80053a4:	4602      	mov	r2, r0
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	615a      	str	r2, [r3, #20]
}
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	00000000 	.word	0x00000000
 80053b4:	40606000 	.word	0x40606000
 80053b8:	20000c60 	.word	0x20000c60
 80053bc:	7fc00000 	.word	0x7fc00000

080053c0 <i2c_write>:


static void i2c_write(I2C_HandleTypeDef* dev, uint8_t subAddr, uint8_t data) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
 80053cc:	4613      	mov	r3, r2
 80053ce:	70bb      	strb	r3, [r7, #2]
	if (isDisabled)
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <i2c_write+0x3c>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <i2c_write+0x34>
		return;

	char buf[2];
	buf[0] = subAddr;
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80053dc:	78bb      	ldrb	r3, [r7, #2]
 80053de:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(dev, MPU6050_ADDR, &buf, 2, 5);
 80053e0:	f107 020c 	add.w	r2, r7, #12
 80053e4:	2305      	movs	r3, #5
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2302      	movs	r3, #2
 80053ea:	21d0      	movs	r1, #208	; 0xd0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 fdb5 	bl	8006f5c <HAL_I2C_Master_Transmit>
 80053f2:	e000      	b.n	80053f6 <i2c_write+0x36>
		return;
 80053f4:	bf00      	nop
}
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000c60 	.word	0x20000c60

08005400 <i2c_read>:

static int16_t i2c_read(I2C_HandleTypeDef* dev, uint8_t addr_L, uint8_t addr_H) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af02      	add	r7, sp, #8
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
 800540c:	4613      	mov	r3, r2
 800540e:	70bb      	strb	r3, [r7, #2]
	if (isDisabled)
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <i2c_read+0x80>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d12c      	bne.n	8005472 <i2c_read+0x72>
		return;

	uint8_t data[2];
	HAL_I2C_Master_Transmit(dev, MPU6050_ADDR, &addr_L, 1, 5);
 8005418:	1cfa      	adds	r2, r7, #3
 800541a:	2305      	movs	r3, #5
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2301      	movs	r3, #1
 8005420:	21d0      	movs	r1, #208	; 0xd0
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 fd9a 	bl	8006f5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev, MPU6050_ADDR, &(data[0]), 1, 5);
 8005428:	f107 020c 	add.w	r2, r7, #12
 800542c:	2305      	movs	r3, #5
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2301      	movs	r3, #1
 8005432:	21d0      	movs	r1, #208	; 0xd0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fe8f 	bl	8007158 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(dev, MPU6050_ADDR, &addr_H, 1, 5);
 800543a:	1cba      	adds	r2, r7, #2
 800543c:	2305      	movs	r3, #5
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2301      	movs	r3, #1
 8005442:	21d0      	movs	r1, #208	; 0xd0
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 fd89 	bl	8006f5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev, MPU6050_ADDR, &(data[1]), 1, 5);
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	2305      	movs	r3, #5
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2301      	movs	r3, #1
 8005456:	21d0      	movs	r1, #208	; 0xd0
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fe7d 	bl	8007158 <HAL_I2C_Master_Receive>

	return (uint16_t) (((uint16_t) data[1]) << 8) | data[0];
 800545e:	7b7b      	ldrb	r3, [r7, #13]
 8005460:	b29b      	uxth	r3, r3
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	b29a      	uxth	r2, r3
 8005466:	7b3b      	ldrb	r3, [r7, #12]
 8005468:	b29b      	uxth	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	b21b      	sxth	r3, r3
 8005470:	e001      	b.n	8005476 <i2c_read+0x76>
		return;
 8005472:	bf00      	nop
 8005474:	bf00      	nop

}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000c60 	.word	0x20000c60

08005484 <RF95FSK_write>:

static struct RF95FSK_settings inst;

static HAL_StatusTypeDef err;
HAL_StatusTypeDef RF95FSK_write(char reg, char wValue)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	460a      	mov	r2, r1
 800548e:	71fb      	strb	r3, [r7, #7]
 8005490:	4613      	mov	r3, r2
 8005492:	71bb      	strb	r3, [r7, #6]
	char buff[2]={0};
 8005494:	2300      	movs	r3, #0
 8005496:	81bb      	strh	r3, [r7, #12]
	
	buff[0] = W | reg;
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	733b      	strb	r3, [r7, #12]
	buff[1] = wValue;
 80054a2:	79bb      	ldrb	r3, [r7, #6]
 80054a4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(LoRa_CS_GPIO_Port, LoRa_CS_Pin, GPIO_PIN_RESET);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2101      	movs	r1, #1
 80054aa:	480c      	ldr	r0, [pc, #48]	; (80054dc <RF95FSK_write+0x58>)
 80054ac:	f001 fbde 	bl	8006c6c <HAL_GPIO_WritePin>
	err = HAL_SPI_Transmit(&LoRa_SPI, (uint8_t*)&buff, 2, 100);
 80054b0:	f107 010c 	add.w	r1, r7, #12
 80054b4:	2364      	movs	r3, #100	; 0x64
 80054b6:	2202      	movs	r2, #2
 80054b8:	4809      	ldr	r0, [pc, #36]	; (80054e0 <RF95FSK_write+0x5c>)
 80054ba:	f007 fae5 	bl	800ca88 <HAL_SPI_Transmit>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <RF95FSK_write+0x60>)
 80054c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LoRa_CS_GPIO_Port, LoRa_CS_Pin, GPIO_PIN_SET);
 80054c6:	2201      	movs	r2, #1
 80054c8:	2101      	movs	r1, #1
 80054ca:	4804      	ldr	r0, [pc, #16]	; (80054dc <RF95FSK_write+0x58>)
 80054cc:	f001 fbce 	bl	8006c6c <HAL_GPIO_WritePin>
	
	return err;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <RF95FSK_write+0x60>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40020c00 	.word	0x40020c00
 80054e0:	20000a58 	.word	0x20000a58
 80054e4:	20000c78 	.word	0x20000c78

080054e8 <RF95FSK_read>:
	return err;
}


char RF95FSK_read(char reg)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	71fb      	strb	r3, [r7, #7]
	char buff = R & reg;
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(LoRa_CS_GPIO_Port, LoRa_CS_Pin, GPIO_PIN_RESET);
 80054fc:	2200      	movs	r2, #0
 80054fe:	2101      	movs	r1, #1
 8005500:	480d      	ldr	r0, [pc, #52]	; (8005538 <RF95FSK_read+0x50>)
 8005502:	f001 fbb3 	bl	8006c6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LoRa_SPI, (uint8_t*)&buff, 1, 100);
 8005506:	f107 010f 	add.w	r1, r7, #15
 800550a:	2364      	movs	r3, #100	; 0x64
 800550c:	2201      	movs	r2, #1
 800550e:	480b      	ldr	r0, [pc, #44]	; (800553c <RF95FSK_read+0x54>)
 8005510:	f007 faba 	bl	800ca88 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&LoRa_SPI, (uint8_t*)&buff, 1, 100);
 8005514:	f107 010f 	add.w	r1, r7, #15
 8005518:	2364      	movs	r3, #100	; 0x64
 800551a:	2201      	movs	r2, #1
 800551c:	4807      	ldr	r0, [pc, #28]	; (800553c <RF95FSK_read+0x54>)
 800551e:	f007 fbef 	bl	800cd00 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LoRa_CS_GPIO_Port, LoRa_CS_Pin, GPIO_PIN_SET);
 8005522:	2201      	movs	r2, #1
 8005524:	2101      	movs	r1, #1
 8005526:	4804      	ldr	r0, [pc, #16]	; (8005538 <RF95FSK_read+0x50>)
 8005528:	f001 fba0 	bl	8006c6c <HAL_GPIO_WritePin>
	
	return buff;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40020c00 	.word	0x40020c00
 800553c:	20000a58 	.word	0x20000a58

08005540 <RF95FSK_Reset>:
	return err;
}


void RF95FSK_Reset(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LoRa_RESET_GPIO_Port, LoRa_RESET_Pin, GPIO_PIN_RESET);
 8005544:	2200      	movs	r2, #0
 8005546:	2102      	movs	r1, #2
 8005548:	4806      	ldr	r0, [pc, #24]	; (8005564 <RF95FSK_Reset+0x24>)
 800554a:	f001 fb8f 	bl	8006c6c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800554e:	2014      	movs	r0, #20
 8005550:	f000 fc9e 	bl	8005e90 <HAL_Delay>
	HAL_GPIO_WritePin(LoRa_RESET_GPIO_Port, LoRa_RESET_Pin, GPIO_PIN_SET);
 8005554:	2201      	movs	r2, #1
 8005556:	2102      	movs	r1, #2
 8005558:	4802      	ldr	r0, [pc, #8]	; (8005564 <RF95FSK_Reset+0x24>)
 800555a:	f001 fb87 	bl	8006c6c <HAL_GPIO_WritePin>
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40020c00 	.word	0x40020c00

08005568 <RF95FSK_Init>:

static uint8_t rbuff = 0;
bool RF95FSK_Init(float freq_mhz, float bw_kHz, uint32_t bitrate)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b08b      	sub	sp, #44	; 0x2c
 800556c:	af00      	add	r7, sp, #0
 800556e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005572:	edc7 0a02 	vstr	s1, [r7, #8]
 8005576:	6078      	str	r0, [r7, #4]
	inst = (struct RF95FSK_settings) {
			.freqLow = calc_frf(freq_mhz*FRF_SCALAR2-bw_kHz*500.0f), // *0 so freq is what it is supposed to be. this is no longer really being used IG
 8005578:	edd7 7a03 	vldr	s15, [r7, #12]
 800557c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005664 <RF95FSK_Init+0xfc>
 8005580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005584:	edd7 7a02 	vldr	s15, [r7, #8]
 8005588:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005668 <RF95FSK_Init+0x100>
 800558c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 2a90 	vmov	r2, s15
 800559c:	4b33      	ldr	r3, [pc, #204]	; (800566c <RF95FSK_Init+0x104>)
 800559e:	fba3 2302 	umull	r2, r3, r3, r2
 80055a2:	0918      	lsrs	r0, r3, #4
			.freqMid = calc_frf(freq_mhz*FRF_SCALAR2),
			.freqHigh = calc_frf(freq_mhz*FRF_SCALAR2+bw_kHz*500.0f),
 80055a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80055a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005664 <RF95FSK_Init+0xfc>
 80055ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80055b4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8005668 <RF95FSK_Init+0x100>
 80055b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c4:	ee17 2a90 	vmov	r2, s15
 80055c8:	4b28      	ldr	r3, [pc, #160]	; (800566c <RF95FSK_Init+0x104>)
 80055ca:	fba3 2302 	umull	r2, r3, r3, r2
 80055ce:	0919      	lsrs	r1, r3, #4
			.freqMid = calc_frf(freq_mhz*FRF_SCALAR2),
 80055d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80055d4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005664 <RF95FSK_Init+0xfc>
 80055d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e0:	ee17 2a90 	vmov	r2, s15
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <RF95FSK_Init+0x104>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	091a      	lsrs	r2, r3, #4
			.delay_us_per_bit = 1000000/bitrate,
 80055ec:	4c20      	ldr	r4, [pc, #128]	; (8005670 <RF95FSK_Init+0x108>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	fbb4 f3f3 	udiv	r3, r4, r3
	inst = (struct RF95FSK_settings) {
 80055f4:	4c1f      	ldr	r4, [pc, #124]	; (8005674 <RF95FSK_Init+0x10c>)
 80055f6:	6020      	str	r0, [r4, #0]
 80055f8:	481e      	ldr	r0, [pc, #120]	; (8005674 <RF95FSK_Init+0x10c>)
 80055fa:	6041      	str	r1, [r0, #4]
 80055fc:	491d      	ldr	r1, [pc, #116]	; (8005674 <RF95FSK_Init+0x10c>)
 80055fe:	608a      	str	r2, [r1, #8]
 8005600:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <RF95FSK_Init+0x10c>)
 8005602:	60d3      	str	r3, [r2, #12]
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <RF95FSK_Init+0x10c>)
 8005606:	2200      	movs	r2, #0
 8005608:	741a      	strb	r2, [r3, #16]
			.ookMode = false
	};

	RF95FSK_Reset();
 800560a:	f7ff ff99 	bl	8005540 <RF95FSK_Reset>

	// Set sleep mode, so we can also set LORA mode:
	RF95FSK_sleep();
 800560e:	f000 fa81 	bl	8005b14 <RF95FSK_sleep>
	
    RF95FSK_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP); // need to update this line of code if ook is true
 8005612:	2100      	movs	r1, #0
 8005614:	2001      	movs	r0, #1
 8005616:	f7ff ff35 	bl	8005484 <RF95FSK_write>
    HAL_Delay(20); // Wait for sleep mode to take over from say, CAD
 800561a:	2014      	movs	r0, #20
 800561c:	f000 fc38 	bl	8005e90 <HAL_Delay>

    // Check we are in sleep mode, with LORA set
	rbuff = RF95FSK_read(RH_RF95_REG_01_OP_MODE);
 8005620:	2001      	movs	r0, #1
 8005622:	f7ff ff61 	bl	80054e8 <RF95FSK_read>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <RF95FSK_Init+0x110>)
 800562c:	701a      	strb	r2, [r3, #0]
    if (rbuff != (RH_RF95_MODE_SLEEP))
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <RF95FSK_Init+0x110>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <RF95FSK_Init+0xde>
    {
    	log_messagef("RF95 error 1 (%d)", rbuff);
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <RF95FSK_Init+0x110>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	4619      	mov	r1, r3
 800563c:	480f      	ldr	r0, [pc, #60]	; (800567c <RF95FSK_Init+0x114>)
 800563e:	f7fd fc2f 	bl	8002ea0 <log_messagef>
    	return false; // No device present?
 8005642:	2300      	movs	r3, #0
 8005644:	e00a      	b.n	800565c <RF95FSK_Init+0xf4>
    }


    RF95FSK_setModeIdle();
 8005646:	f000 fa3b 	bl	8005ac0 <RF95FSK_setModeIdle>

    // An innocuous ISM frequency, same as RF22's
    RF95FSK_setFrequency1f(433.0f);
 800564a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005680 <RF95FSK_Init+0x118>
 800564e:	f000 f957 	bl	8005900 <RF95FSK_setFrequency1f>
    // Lowish power
    RF95FSK_setTxPower(13, false);
 8005652:	2100      	movs	r1, #0
 8005654:	200d      	movs	r0, #13
 8005656:	f000 f9e0 	bl	8005a1a <RF95FSK_setTxPower>

    return true;
 800565a:	2301      	movs	r3, #1
}
 800565c:	4618      	mov	r0, r3
 800565e:	372c      	adds	r7, #44	; 0x2c
 8005660:	46bd      	mov	sp, r7
 8005662:	bd90      	pop	{r4, r7, pc}
 8005664:	49740040 	.word	0x49740040
 8005668:	43fa0000 	.word	0x43fa0000
 800566c:	4325c53f 	.word	0x4325c53f
 8005670:	000f4240 	.word	0x000f4240
 8005674:	20000c64 	.word	0x20000c64
 8005678:	20000c79 	.word	0x20000c79
 800567c:	0801c584 	.word	0x0801c584
 8005680:	43d88000 	.word	0x43d88000

08005684 <radio_enqueue>:
static uint32_t next_ms_to_swap;

const uint16_t _fdev = 16;
const uint16_t _bitrate = 512;

bool radio_enqueue(uint8_t* buffer, uint8_t len) {
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
	if (fifo_idx + len < sizeof(fifo_buffer)) {
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <radio_enqueue+0x64>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	4413      	add	r3, r2
 800569a:	2bfe      	cmp	r3, #254	; 0xfe
 800569c:	d81d      	bhi.n	80056da <radio_enqueue+0x56>
		for (int i = 0; i < len; i ++) {
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e00d      	b.n	80056c0 <radio_enqueue+0x3c>
			fifo_buffer[i + fifo_idx] = buffer[i];
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	441a      	add	r2, r3
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <radio_enqueue+0x64>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	4619      	mov	r1, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	440b      	add	r3, r1
 80056b4:	7811      	ldrb	r1, [r2, #0]
 80056b6:	4a0d      	ldr	r2, [pc, #52]	; (80056ec <radio_enqueue+0x68>)
 80056b8:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < len; i ++) {
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3301      	adds	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	dbed      	blt.n	80056a4 <radio_enqueue+0x20>
		}
		fifo_idx += len;
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <radio_enqueue+0x64>)
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	4413      	add	r3, r2
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <radio_enqueue+0x64>)
 80056d4:	701a      	strb	r2, [r3, #0]
		return true;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <radio_enqueue+0x58>
	}
	return false;
 80056da:	2300      	movs	r3, #0

}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000d7b 	.word	0x20000d7b
 80056ec:	20000c7c 	.word	0x20000c7c

080056f0 <radio_heartbeat>:

void radio_heartbeat(system_data* data) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	if (transmitting_state == 0) {
 80056f8:	4b79      	ldr	r3, [pc, #484]	; (80058e0 <radio_heartbeat+0x1f0>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d166      	bne.n	80057ce <radio_heartbeat+0xde>
		// currently off
		if (fifo_idx > 0) {
 8005700:	4b78      	ldr	r3, [pc, #480]	; (80058e4 <radio_heartbeat+0x1f4>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80e3 	beq.w	80058d0 <radio_heartbeat+0x1e0>
			curr_byte = fifo_buffer[0];
 800570a:	4b77      	ldr	r3, [pc, #476]	; (80058e8 <radio_heartbeat+0x1f8>)
 800570c:	781a      	ldrb	r2, [r3, #0]
 800570e:	4b77      	ldr	r3, [pc, #476]	; (80058ec <radio_heartbeat+0x1fc>)
 8005710:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= fifo_idx; i ++) {
 8005712:	2301      	movs	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e00a      	b.n	800572e <radio_heartbeat+0x3e>
				fifo_buffer[i-1] = fifo_buffer[i];
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3b01      	subs	r3, #1
 800571c:	4972      	ldr	r1, [pc, #456]	; (80058e8 <radio_heartbeat+0x1f8>)
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	440a      	add	r2, r1
 8005722:	7811      	ldrb	r1, [r2, #0]
 8005724:	4a70      	ldr	r2, [pc, #448]	; (80058e8 <radio_heartbeat+0x1f8>)
 8005726:	54d1      	strb	r1, [r2, r3]
			for (int i = 1; i <= fifo_idx; i ++) {
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3301      	adds	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	4b6d      	ldr	r3, [pc, #436]	; (80058e4 <radio_heartbeat+0x1f4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4293      	cmp	r3, r2
 8005738:	ddee      	ble.n	8005718 <radio_heartbeat+0x28>
			}
			fifo_idx--;
 800573a:	4b6a      	ldr	r3, [pc, #424]	; (80058e4 <radio_heartbeat+0x1f4>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	4b68      	ldr	r3, [pc, #416]	; (80058e4 <radio_heartbeat+0x1f4>)
 8005744:	701a      	strb	r2, [r3, #0]
			curr_bit = 7;
 8005746:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <radio_heartbeat+0x200>)
 8005748:	2207      	movs	r2, #7
 800574a:	701a      	strb	r2, [r3, #0]

			// begin transmitting
			RF95FSK_setModeIdle();
 800574c:	f000 f9b8 	bl	8005ac0 <RF95FSK_setModeIdle>

			// TODO : reset the RFM96 so its at a known state

			RF95FSK_write(0x25, 0x00);
 8005750:	2100      	movs	r1, #0
 8005752:	2025      	movs	r0, #37	; 0x25
 8005754:	f7ff fe96 	bl	8005484 <RF95FSK_write>
			RF95FSK_write(0x26, 0x00); // set preamble len to 0
 8005758:	2100      	movs	r1, #0
 800575a:	2026      	movs	r0, #38	; 0x26
 800575c:	f7ff fe92 	bl	8005484 <RF95FSK_write>
			RF95FSK_write(0x31, 0x00); // set to continuous mode
 8005760:	2100      	movs	r1, #0
 8005762:	2031      	movs	r0, #49	; 0x31
 8005764:	f7ff fe8e 	bl	8005484 <RF95FSK_write>
			RF95FSK_write(0x40, 0x00); // pin mapping
 8005768:	2100      	movs	r1, #0
 800576a:	2040      	movs	r0, #64	; 0x40
 800576c:	f7ff fe8a 	bl	8005484 <RF95FSK_write>
			RF95FSK_write(0x35, 0b10000000); // set preamble len to 0
 8005770:	2180      	movs	r1, #128	; 0x80
 8005772:	2035      	movs	r0, #53	; 0x35
 8005774:	f7ff fe86 	bl	8005484 <RF95FSK_write>

			RF95FSK_write(0x02, (uint8_t) ((_bitrate & 0xFF00) >> 8)); // bitrate MSB
 8005778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	b29b      	uxth	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	2002      	movs	r0, #2
 8005786:	f7ff fe7d 	bl	8005484 <RF95FSK_write>
			RF95FSK_write(0x03, (uint8_t) (_bitrate & 0xFF)); // bitrate LSB
 800578a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4619      	mov	r1, r3
 8005792:	2003      	movs	r0, #3
 8005794:	f7ff fe76 	bl	8005484 <RF95FSK_write>
		    RF95FSK_write(0x04, (uint8_t) ((_fdev & 0xFF00) >> 8)); // Fdev MSB
 8005798:	2310      	movs	r3, #16
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	b29b      	uxth	r3, r3
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	2004      	movs	r0, #4
 80057a4:	f7ff fe6e 	bl	8005484 <RF95FSK_write>
			RF95FSK_write(0x05, (uint8_t) (_fdev & 0xFF)); // Fdev LSB
 80057a8:	2310      	movs	r3, #16
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	2005      	movs	r0, #5
 80057b0:	f7ff fe68 	bl	8005484 <RF95FSK_write>
			RF95FSK_setFrequency1i(inst.freqMid);
 80057b4:	4b4f      	ldr	r3, [pc, #316]	; (80058f4 <radio_heartbeat+0x204>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 f8fb 	bl	80059b4 <RF95FSK_setFrequency1i>
			RF95FSK_write(0x00, 0x00);
 80057be:	2100      	movs	r1, #0
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7ff fe5f 	bl	8005484 <RF95FSK_write>

			transmitting_state = 1; // ready to xmit
 80057c6:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <radio_heartbeat+0x1f0>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e080      	b.n	80058d0 <radio_heartbeat+0x1e0>

		}
	} else if (transmitting_state == 1) {
 80057ce:	4b44      	ldr	r3, [pc, #272]	; (80058e0 <radio_heartbeat+0x1f0>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d11d      	bne.n	8005812 <radio_heartbeat+0x122>
		uint8_t isHigh = (curr_byte >> (curr_bit)) & 0x1;
 80057d6:	4b45      	ldr	r3, [pc, #276]	; (80058ec <radio_heartbeat+0x1fc>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <radio_heartbeat+0x200>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	fa42 f303 	asr.w	r3, r2, r3
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(RFM96_DIO2_GPIO_Port, RFM96_DIO2_GPIO_Pin, isHigh); // sets the Vcc for the IO interface on the THP sensor to high
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057f4:	4840      	ldr	r0, [pc, #256]	; (80058f8 <radio_heartbeat+0x208>)
 80057f6:	f001 fa39 	bl	8006c6c <HAL_GPIO_WritePin>
		RF95FSK_setModeTx(); // Start the transmitter
 80057fa:	f000 f9b3 	bl	8005b64 <RF95FSK_setModeTx>

		next_ms_to_swap = HAL_GetTick() + 1000 / BITRATE - 1; // hardcode for now is ok. add - 1 to adjust for clock cycles, etc
 80057fe:	f000 fb3b 	bl	8005e78 <HAL_GetTick>
 8005802:	4603      	mov	r3, r0
 8005804:	337c      	adds	r3, #124	; 0x7c
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <radio_heartbeat+0x20c>)
 8005808:	6013      	str	r3, [r2, #0]
		transmitting_state = 2; // now actively transmitting
 800580a:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <radio_heartbeat+0x1f0>)
 800580c:	2202      	movs	r2, #2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e05e      	b.n	80058d0 <radio_heartbeat+0x1e0>
	} else if (transmitting_state == 2) {
 8005812:	4b33      	ldr	r3, [pc, #204]	; (80058e0 <radio_heartbeat+0x1f0>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d15a      	bne.n	80058d0 <radio_heartbeat+0x1e0>
		if (HAL_GetTick() >= next_ms_to_swap) {
 800581a:	f000 fb2d 	bl	8005e78 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	4b36      	ldr	r3, [pc, #216]	; (80058fc <radio_heartbeat+0x20c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d353      	bcc.n	80058d0 <radio_heartbeat+0x1e0>
			curr_bit--;
 8005828:	4b31      	ldr	r3, [pc, #196]	; (80058f0 <radio_heartbeat+0x200>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <radio_heartbeat+0x200>)
 8005832:	701a      	strb	r2, [r3, #0]

			if (curr_bit == 99) {
 8005834:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <radio_heartbeat+0x200>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b63      	cmp	r3, #99	; 0x63
 800583a:	d105      	bne.n	8005848 <radio_heartbeat+0x158>
				// finish xmit
				RF95FSK_setModeIdle();
 800583c:	f000 f940 	bl	8005ac0 <RF95FSK_setModeIdle>
				transmitting_state = 0;
 8005840:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <radio_heartbeat+0x1f0>)
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e043      	b.n	80058d0 <radio_heartbeat+0x1e0>
			} else {
				uint8_t isHigh = (curr_byte >> (curr_bit)) & 0x1;
 8005848:	4b28      	ldr	r3, [pc, #160]	; (80058ec <radio_heartbeat+0x1fc>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <radio_heartbeat+0x200>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	fa42 f303 	asr.w	r3, r2, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
				HAL_GPIO_WritePin(RFM96_DIO2_GPIO_Port, RFM96_DIO2_GPIO_Pin, isHigh); // sets the Vcc for the IO interface on the THP sensor to high
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	461a      	mov	r2, r3
 8005862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005866:	4824      	ldr	r0, [pc, #144]	; (80058f8 <radio_heartbeat+0x208>)
 8005868:	f001 fa00 	bl	8006c6c <HAL_GPIO_WritePin>

				next_ms_to_swap += 1000 / BITRATE;
 800586c:	4b23      	ldr	r3, [pc, #140]	; (80058fc <radio_heartbeat+0x20c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	337d      	adds	r3, #125	; 0x7d
 8005872:	4a22      	ldr	r2, [pc, #136]	; (80058fc <radio_heartbeat+0x20c>)
 8005874:	6013      	str	r3, [r2, #0]

				if (curr_bit == 0) {
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <radio_heartbeat+0x200>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d128      	bne.n	80058d0 <radio_heartbeat+0x1e0>
					if (fifo_idx == 0) {
 800587e:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <radio_heartbeat+0x1f4>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <radio_heartbeat+0x19e>
						curr_bit = 100; // no more data left
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <radio_heartbeat+0x200>)
 8005888:	2264      	movs	r2, #100	; 0x64
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e020      	b.n	80058d0 <radio_heartbeat+0x1e0>
					} else {
						curr_bit = 8;
 800588e:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <radio_heartbeat+0x200>)
 8005890:	2208      	movs	r2, #8
 8005892:	701a      	strb	r2, [r3, #0]
						curr_byte = fifo_buffer[0];
 8005894:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <radio_heartbeat+0x1f8>)
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <radio_heartbeat+0x1fc>)
 800589a:	701a      	strb	r2, [r3, #0]
						for (int i = 1; i <= fifo_idx; i ++) {
 800589c:	2301      	movs	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	e00a      	b.n	80058b8 <radio_heartbeat+0x1c8>
							fifo_buffer[i-1] = fifo_buffer[i];
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	4910      	ldr	r1, [pc, #64]	; (80058e8 <radio_heartbeat+0x1f8>)
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	440a      	add	r2, r1
 80058ac:	7811      	ldrb	r1, [r2, #0]
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <radio_heartbeat+0x1f8>)
 80058b0:	54d1      	strb	r1, [r2, r3]
						for (int i = 1; i <= fifo_idx; i ++) {
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3301      	adds	r3, #1
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <radio_heartbeat+0x1f4>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	ddee      	ble.n	80058a2 <radio_heartbeat+0x1b2>
						}
						fifo_idx--;
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <radio_heartbeat+0x1f4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <radio_heartbeat+0x1f4>)
 80058ce:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	telemetry_heartbeat(data);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f9db 	bl	8005c8c <telemetry_heartbeat>

}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000d7c 	.word	0x20000d7c
 80058e4:	20000d7b 	.word	0x20000d7b
 80058e8:	20000c7c 	.word	0x20000c7c
 80058ec:	20000d7d 	.word	0x20000d7d
 80058f0:	20000d7e 	.word	0x20000d7e
 80058f4:	20000c64 	.word	0x20000c64
 80058f8:	40020c00 	.word	0x40020c00
 80058fc:	20000d80 	.word	0x20000d80

08005900 <RF95FSK_setFrequency1f>:
    RF95FSK_write(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}


static bool RF95FSK_setFrequency1f(float centre)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	ed87 0a01 	vstr	s0, [r7, #4]

	HAL_StatusTypeDef err = 0;
 800590a:	2100      	movs	r1, #0
 800590c:	75f9      	strb	r1, [r7, #23]

    uint64_t frf = calc_frf(centre);
 800590e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005912:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80059ac <RF95FSK_setFrequency1f+0xac>
 8005916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800591a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591e:	ee17 0a90 	vmov	r0, s15
 8005922:	4923      	ldr	r1, [pc, #140]	; (80059b0 <RF95FSK_setFrequency1f+0xb0>)
 8005924:	fba1 0100 	umull	r0, r1, r1, r0
 8005928:	0909      	lsrs	r1, r1, #4
 800592a:	2000      	movs	r0, #0
 800592c:	460a      	mov	r2, r1
 800592e:	4603      	mov	r3, r0
 8005930:	e9c7 2302 	strd	r2, r3, [r7, #8]
    err = err | RF95FSK_write(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 8005934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	0c02      	lsrs	r2, r0, #16
 8005942:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005946:	0c0b      	lsrs	r3, r1, #16
 8005948:	b2d3      	uxtb	r3, r2
 800594a:	4619      	mov	r1, r3
 800594c:	2006      	movs	r0, #6
 800594e:	f7ff fd99 	bl	8005484 <RF95FSK_write>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	4313      	orrs	r3, r2
 800595a:	75fb      	strb	r3, [r7, #23]
    err = err | RF95FSK_write(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 800595c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	0a02      	lsrs	r2, r0, #8
 800596a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800596e:	0a0b      	lsrs	r3, r1, #8
 8005970:	b2d3      	uxtb	r3, r2
 8005972:	4619      	mov	r1, r3
 8005974:	2007      	movs	r0, #7
 8005976:	f7ff fd85 	bl	8005484 <RF95FSK_write>
 800597a:	4603      	mov	r3, r0
 800597c:	461a      	mov	r2, r3
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	4313      	orrs	r3, r2
 8005982:	75fb      	strb	r3, [r7, #23]
    err = err | RF95FSK_write(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 8005984:	7a3b      	ldrb	r3, [r7, #8]
 8005986:	4619      	mov	r1, r3
 8005988:	2008      	movs	r0, #8
 800598a:	f7ff fd7b 	bl	8005484 <RF95FSK_write>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	4313      	orrs	r3, r2
 8005996:	75fb      	strb	r3, [r7, #23]

    return !err;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	49740040 	.word	0x49740040
 80059b0:	4325c53f 	.word	0x4325c53f

080059b4 <RF95FSK_setFrequency1i>:

static bool RF95FSK_setFrequency1i(uint32_t frf)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef err = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]

    err = err | RF95FSK_write(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	2006      	movs	r0, #6
 80059ca:	f7ff fd5b 	bl	8005484 <RF95FSK_write>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	73fb      	strb	r3, [r7, #15]
    err = err | RF95FSK_write(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	2007      	movs	r0, #7
 80059e2:	f7ff fd4f 	bl	8005484 <RF95FSK_write>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	73fb      	strb	r3, [r7, #15]
    err = err | RF95FSK_write(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	4619      	mov	r1, r3
 80059f6:	2008      	movs	r0, #8
 80059f8:	f7ff fd44 	bl	8005484 <RF95FSK_write>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	73fb      	strb	r3, [r7, #15]

    return !err;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <RF95FSK_setTxPower>:

void RF95FSK_setTxPower(int8_t power, bool useRFO)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	4603      	mov	r3, r0
 8005a22:	460a      	mov	r2, r1
 8005a24:	71fb      	strb	r3, [r7, #7]
 8005a26:	4613      	mov	r3, r2
 8005a28:	71bb      	strb	r3, [r7, #6]
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
 8005a2a:	79bb      	ldrb	r3, [r7, #6]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d019      	beq.n	8005a64 <RF95FSK_setTxPower+0x4a>
    {
        if (power > 14)power = 14;
 8005a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a34:	2b0e      	cmp	r3, #14
 8005a36:	dd01      	ble.n	8005a3c <RF95FSK_setTxPower+0x22>
 8005a38:	230e      	movs	r3, #14
 8005a3a:	71fb      	strb	r3, [r7, #7]
        if (power < -1)power = -1;
 8005a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	da01      	bge.n	8005a4a <RF95FSK_setTxPower+0x30>
 8005a46:	23ff      	movs	r3, #255	; 0xff
 8005a48:	71fb      	strb	r3, [r7, #7]
        RF95FSK_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	2009      	movs	r0, #9
 8005a5e:	f7ff fd11 	bl	8005484 <RF95FSK_write>
        // The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
        // but OutputPower claims it would be 17dBm.
        // My measurements show 20dBm is correct
        RF95FSK_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 8005a62:	e028      	b.n	8005ab6 <RF95FSK_setTxPower+0x9c>
        if (power > 23)power = 23;
 8005a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a68:	2b17      	cmp	r3, #23
 8005a6a:	dd01      	ble.n	8005a70 <RF95FSK_setTxPower+0x56>
 8005a6c:	2317      	movs	r3, #23
 8005a6e:	71fb      	strb	r3, [r7, #7]
        if (power < 5)power = 5;
 8005a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	dc01      	bgt.n	8005a7c <RF95FSK_setTxPower+0x62>
 8005a78:	2305      	movs	r3, #5
 8005a7a:	71fb      	strb	r3, [r7, #7]
        if (power > 20)
 8005a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a80:	2b14      	cmp	r3, #20
 8005a82:	dd08      	ble.n	8005a96 <RF95FSK_setTxPower+0x7c>
            RF95FSK_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 8005a84:	2107      	movs	r1, #7
 8005a86:	204d      	movs	r0, #77	; 0x4d
 8005a88:	f7ff fcfc 	bl	8005484 <RF95FSK_write>
            power -= 3;
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	3b03      	subs	r3, #3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	71fb      	strb	r3, [r7, #7]
 8005a94:	e003      	b.n	8005a9e <RF95FSK_setTxPower+0x84>
            RF95FSK_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 8005a96:	2104      	movs	r1, #4
 8005a98:	204d      	movs	r0, #77	; 0x4d
 8005a9a:	f7ff fcf3 	bl	8005484 <RF95FSK_write>
        RF95FSK_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	3b05      	subs	r3, #5
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	b25b      	sxtb	r3, r3
 8005aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	4619      	mov	r1, r3
 8005ab0:	2009      	movs	r0, #9
 8005ab2:	f7ff fce7 	bl	8005484 <RF95FSK_write>
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <RF95FSK_setModeIdle>:
	}
}

static uint8_t aux = 0;
void RF95FSK_setModeIdle(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeIdle)
 8005ac4:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <RF95FSK_setModeIdle+0x4c>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d01d      	beq.n	8005b08 <RF95FSK_setModeIdle+0x48>
    {
				aux = RF95FSK_read(RH_RF95_REG_01_OP_MODE);
 8005acc:	2001      	movs	r0, #1
 8005ace:	f7ff fd0b 	bl	80054e8 <RF95FSK_read>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <RF95FSK_setModeIdle+0x50>)
 8005ad8:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <RF95FSK_setModeIdle+0x50>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <RF95FSK_setModeIdle+0x50>)
 8005ae6:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_STDBY;
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <RF95FSK_setModeIdle+0x50>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <RF95FSK_setModeIdle+0x50>)
 8005af4:	701a      	strb	r2, [r3, #0]
        RF95FSK_write(RH_RF95_REG_01_OP_MODE, aux);
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <RF95FSK_setModeIdle+0x50>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	4619      	mov	r1, r3
 8005afc:	2001      	movs	r0, #1
 8005afe:	f7ff fcc1 	bl	8005484 <RF95FSK_write>
        _mode = RHModeIdle;
 8005b02:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <RF95FSK_setModeIdle+0x4c>)
 8005b04:	2202      	movs	r2, #2
 8005b06:	701a      	strb	r2, [r3, #0]
    }
}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000c61 	.word	0x20000c61
 8005b10:	20000d84 	.word	0x20000d84

08005b14 <RF95FSK_sleep>:


bool RF95FSK_sleep(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeSleep)
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <RF95FSK_sleep+0x48>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d01a      	beq.n	8005b56 <RF95FSK_sleep+0x42>
    {
				aux = RF95FSK_read(RH_RF95_REG_01_OP_MODE);
 8005b20:	2001      	movs	r0, #1
 8005b22:	f7ff fce1 	bl	80054e8 <RF95FSK_read>
 8005b26:	4603      	mov	r3, r0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <RF95FSK_sleep+0x4c>)
 8005b2c:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <RF95FSK_sleep+0x4c>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <RF95FSK_sleep+0x4c>)
 8005b3a:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_SLEEP;
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <RF95FSK_sleep+0x4c>)
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <RF95FSK_sleep+0x4c>)
 8005b42:	701a      	strb	r2, [r3, #0]
        RF95FSK_write(RH_RF95_REG_01_OP_MODE, aux);
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <RF95FSK_sleep+0x4c>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f7ff fc9a 	bl	8005484 <RF95FSK_write>
        _mode = RHModeSleep;
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <RF95FSK_sleep+0x48>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8005b56:	2301      	movs	r3, #1
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000c61 	.word	0x20000c61
 8005b60:	20000d84 	.word	0x20000d84

08005b64 <RF95FSK_setModeTx>:
    }
}


void RF95FSK_setModeTx(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeTx)
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <RF95FSK_setModeTx+0x54>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d021      	beq.n	8005bb4 <RF95FSK_setModeTx+0x50>
    {
				aux = RF95FSK_read(RH_RF95_REG_01_OP_MODE);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7ff fcb9 	bl	80054e8 <RF95FSK_read>
 8005b76:	4603      	mov	r3, r0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <RF95FSK_setModeTx+0x58>)
 8005b7c:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <RF95FSK_setModeTx+0x58>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f023 0307 	bic.w	r3, r3, #7
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <RF95FSK_setModeTx+0x58>)
 8005b8a:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_TX;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <RF95FSK_setModeTx+0x58>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f043 0303 	orr.w	r3, r3, #3
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <RF95FSK_setModeTx+0x58>)
 8005b98:	701a      	strb	r2, [r3, #0]
        RF95FSK_write(RH_RF95_REG_01_OP_MODE, aux);
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <RF95FSK_setModeTx+0x58>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f7ff fc6f 	bl	8005484 <RF95FSK_write>
        RF95FSK_write(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 8005ba6:	2140      	movs	r1, #64	; 0x40
 8005ba8:	2040      	movs	r0, #64	; 0x40
 8005baa:	f7ff fc6b 	bl	8005484 <RF95FSK_write>
        _mode = RHModeTx;
 8005bae:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <RF95FSK_setModeTx+0x54>)
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	701a      	strb	r2, [r3, #0]
    }
}
 8005bb4:	bf00      	nop
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000c61 	.word	0x20000c61
 8005bbc:	20000d84 	.word	0x20000d84

08005bc0 <reset_telemetry>:
static bool initOk;

extern uint16_t fdev0_override;
extern uint16_t bitrate0_override;

void reset_telemetry() {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0

#ifdef RADIO_FSK_MODE
	bool freqOk;
	RF95FSK_Reset();
 8005bc6:	f7ff fcbb 	bl	8005540 <RF95FSK_Reset>
	initOk = freqOk = RF95FSK_Init(FREQUENCY,BANDWIDTH,BITRATE);
 8005bca:	2008      	movs	r0, #8
 8005bcc:	eef2 0a08 	vmov.f32	s1, #40	; 0x41400000  12.0
 8005bd0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005c0c <reset_telemetry+0x4c>
 8005bd4:	f7ff fcc8 	bl	8005568 <RF95FSK_Init>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <reset_telemetry+0x50>)
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	7013      	strb	r3, [r2, #0]
	RF95FSK_setTxPower(14, false); // this function returns void, not bool
 8005be2:	2100      	movs	r1, #0
 8005be4:	200e      	movs	r0, #14
 8005be6:	f7ff ff18 	bl	8005a1a <RF95FSK_setTxPower>
				  RF95_setModemConfigFSK(BITRATE, 15000); // keep it as narrow as possible right now for my ham radio (20kHz BW on wide mode)
	bool freqOk = RF95_setFrequency(FREQUENCY);
				  RF95_setTxPower(14, false); // this function returns void, not bool
#endif

	log_messagef("Telemetry status: %d %d (1 is good)", (int) initOk, (int) freqOk);
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <reset_telemetry+0x50>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4807      	ldr	r0, [pc, #28]	; (8005c14 <reset_telemetry+0x54>)
 8005bf6:	f7fd f953 	bl	8002ea0 <log_messagef>

	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, sizeof(RX_Buffer));
 8005bfa:	22ff      	movs	r2, #255	; 0xff
 8005bfc:	4906      	ldr	r1, [pc, #24]	; (8005c18 <reset_telemetry+0x58>)
 8005bfe:	4807      	ldr	r0, [pc, #28]	; (8005c1c <reset_telemetry+0x5c>)
 8005c00:	f007 fb32 	bl	800d268 <HAL_SPI_Receive_IT>
//			}
//		}
	}
#endif

}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	43da0000 	.word	0x43da0000
 8005c10:	20000e87 	.word	0x20000e87
 8005c14:	0801c620 	.word	0x0801c620
 8005c18:	20000d88 	.word	0x20000d88
 8005c1c:	20000a58 	.word	0x20000a58

08005c20 <init_telemetry>:


void init_telemetry(system_data* data) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	reset_telemetry();
 8005c28:	f7ff ffca 	bl	8005bc0 <reset_telemetry>
////		RFM96_TransmitAFSK(message, strlen(message));
//		rfm96_send_afsk_data(message, strlen(message), &hspi2, LoRa_CS_GPIO_Port, LoRa_CS_Pin);
//		log_message("send message");
//	}

	heartbeat_entry* radio_entry = calloc(1, sizeof(heartbeat_entry));
 8005c2c:	2114      	movs	r1, #20
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f010 fde2 	bl	80167f8 <calloc>
 8005c34:	4603      	mov	r3, r0
 8005c36:	60fb      	str	r3, [r7, #12]
	radio_entry->function = radio_heartbeat;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <init_telemetry+0x5c>)
 8005c3c:	601a      	str	r2, [r3, #0]
	radio_entry->interval = 1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	809a      	strh	r2, [r3, #4]
	radio_entry->next = null;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	611a      	str	r2, [r3, #16]
	radio_entry->timeUntilNext = 1; // give 3ms so hopefully tasks dont overlap, plus 150 MS so that the BME280 device can take at least one sample
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	609a      	str	r2, [r3, #8]
	radio_entry->name = "radio";
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a0b      	ldr	r2, [pc, #44]	; (8005c80 <init_telemetry+0x60>)
 8005c54:	60da      	str	r2, [r3, #12]

	register_heartbeat_func(radio_entry);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7fd f940 	bl	8002edc <register_heartbeat_func>


	uint8_t data2[4] = {0x00, 0xFF, 0b10101010, 0b11000011};
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <init_telemetry+0x64>)
 8005c5e:	60bb      	str	r3, [r7, #8]
	radio_enqueue(data2, sizeof(data2));
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	2104      	movs	r1, #4
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fd0c 	bl	8005684 <radio_enqueue>

	telemetry_send("W9FTX radio check");
 8005c6c:	4806      	ldr	r0, [pc, #24]	; (8005c88 <init_telemetry+0x68>)
 8005c6e:	f000 f82f 	bl	8005cd0 <telemetry_send>

}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	080056f1 	.word	0x080056f1
 8005c80:	0801c644 	.word	0x0801c644
 8005c84:	c3aaff00 	.word	0xc3aaff00
 8005c88:	0801c64c 	.word	0x0801c64c

08005c8c <telemetry_heartbeat>:

#define TELEMETRY_INTERVAL 8000 // every 7 seconds

static int32_t timer = TELEMETRY_INTERVAL*2;

void telemetry_heartbeat(system_data* data) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	timer--;
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <telemetry_heartbeat+0x38>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <telemetry_heartbeat+0x38>)
 8005c9c:	6013      	str	r3, [r2, #0]
	if (timer <= 0) {
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <telemetry_heartbeat+0x38>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dc09      	bgt.n	8005cba <telemetry_heartbeat+0x2e>
		telemetry_send("W9FTX");
 8005ca6:	4808      	ldr	r0, [pc, #32]	; (8005cc8 <telemetry_heartbeat+0x3c>)
 8005ca8:	f000 f812 	bl	8005cd0 <telemetry_send>
		timer = TELEMETRY_INTERVAL;
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <telemetry_heartbeat+0x38>)
 8005cae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005cb2:	601a      	str	r2, [r3, #0]
		log_message("sending message");
 8005cb4:	4805      	ldr	r0, [pc, #20]	; (8005ccc <telemetry_heartbeat+0x40>)
 8005cb6:	f7fd f8d5 	bl	8002e64 <log_message>
	}
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000058 	.word	0x20000058
 8005cc8:	0801c660 	.word	0x0801c660
 8005ccc:	0801c668 	.word	0x0801c668

08005cd0 <telemetry_send>:

/*
 * Make sure data ends with a null character, otherwise program will break
 * Also, size of data must be less than 255
 */
void telemetry_send(const char* data) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	if (!initOk) {
 8005cd8:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <telemetry_send+0x4c>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <telemetry_send+0x1e>
		log_message("cannot send radio data because initOk is bad");
 8005ce6:	480e      	ldr	r0, [pc, #56]	; (8005d20 <telemetry_send+0x50>)
 8005ce8:	f7fd f8bc 	bl	8002e64 <log_message>
		return;
 8005cec:	e012      	b.n	8005d14 <telemetry_send+0x44>
	}
	if (strlen(data) > 254) {
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fa fabe 	bl	8000270 <strlen>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2bfe      	cmp	r3, #254	; 0xfe
 8005cf8:	d903      	bls.n	8005d02 <telemetry_send+0x32>
		log_message("Trying to send too much data over radio! (at least as of right now), max is 254 characters");
 8005cfa:	480a      	ldr	r0, [pc, #40]	; (8005d24 <telemetry_send+0x54>)
 8005cfc:	f7fd f8b2 	bl	8002e64 <log_message>
		return;
 8005d00:	e008      	b.n	8005d14 <telemetry_send+0x44>
	}

	radio_enqueue(data, strlen(data));
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fa fab4 	bl	8000270 <strlen>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fcb8 	bl	8005684 <radio_enqueue>
//	else
////		;
//		log_message("RF95 reports good transmit");
//
//	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, sizeof(RX_Buffer)); // I think transmitting disables the IRQ/receive so we need to re-enable
}
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000e87 	.word	0x20000e87
 8005d20:	0801c678 	.word	0x0801c678
 8005d24:	0801c6a8 	.word	0x0801c6a8

08005d28 <telemetry_RxCplt>:

void telemetry_RxCplt(SPI_HandleTypeDef* spi) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, sizeof(RX_Buffer));
 8005d30:	22ff      	movs	r2, #255	; 0xff
 8005d32:	4906      	ldr	r1, [pc, #24]	; (8005d4c <telemetry_RxCplt+0x24>)
 8005d34:	4806      	ldr	r0, [pc, #24]	; (8005d50 <telemetry_RxCplt+0x28>)
 8005d36:	f007 fa97 	bl	800d268 <HAL_SPI_Receive_IT>
	log_messagef("TELEMETRY RECIEVED: %s", RX_Buffer);
 8005d3a:	4904      	ldr	r1, [pc, #16]	; (8005d4c <telemetry_RxCplt+0x24>)
 8005d3c:	4805      	ldr	r0, [pc, #20]	; (8005d54 <telemetry_RxCplt+0x2c>)
 8005d3e:	f7fd f8af 	bl	8002ea0 <log_messagef>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000d88 	.word	0x20000d88
 8005d50:	20000a58 	.word	0x20000a58
 8005d54:	0801c704 	.word	0x0801c704

08005d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d5e:	490e      	ldr	r1, [pc, #56]	; (8005d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d60:	4a0e      	ldr	r2, [pc, #56]	; (8005d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d64:	e002      	b.n	8005d6c <LoopCopyDataInit>

08005d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d6a:	3304      	adds	r3, #4

08005d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d70:	d3f9      	bcc.n	8005d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d72:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d74:	4c0b      	ldr	r4, [pc, #44]	; (8005da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d78:	e001      	b.n	8005d7e <LoopFillZerobss>

08005d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d7c:	3204      	adds	r2, #4

08005d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d80:	d3fb      	bcc.n	8005d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d82:	f7fe f9b3 	bl	80040ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d86:	f011 ff4b 	bl	8017c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d8a:	f7fc fb17 	bl	80023bc <main>
  bx  lr    
 8005d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d98:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8005d9c:	0801cd00 	.word	0x0801cd00
  ldr r2, =_sbss
 8005da0:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8005da4:	20002c48 	.word	0x20002c48

08005da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005da8:	e7fe      	b.n	8005da8 <ADC_IRQHandler>
	...

08005dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005db0:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <HAL_Init+0x40>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a0d      	ldr	r2, [pc, #52]	; (8005dec <HAL_Init+0x40>)
 8005db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_Init+0x40>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <HAL_Init+0x40>)
 8005dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HAL_Init+0x40>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a07      	ldr	r2, [pc, #28]	; (8005dec <HAL_Init+0x40>)
 8005dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dd4:	2003      	movs	r0, #3
 8005dd6:	f000 f94f 	bl	8006078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dda:	200f      	movs	r0, #15
 8005ddc:	f000 f808 	bl	8005df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005de0:	f7fd fd1e 	bl	8003820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023c00 	.word	0x40023c00

08005df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005df8:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <HAL_InitTick+0x54>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_InitTick+0x58>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	4619      	mov	r1, r3
 8005e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f967 	bl	80060e2 <HAL_SYSTICK_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e00e      	b.n	8005e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b0f      	cmp	r3, #15
 8005e22:	d80a      	bhi.n	8005e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e24:	2200      	movs	r2, #0
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	f000 f92f 	bl	800608e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e30:	4a06      	ldr	r2, [pc, #24]	; (8005e4c <HAL_InitTick+0x5c>)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000054 	.word	0x20000054
 8005e48:	20000060 	.word	0x20000060
 8005e4c:	2000005c 	.word	0x2000005c

08005e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <HAL_IncTick+0x20>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_IncTick+0x24>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4413      	add	r3, r2
 8005e60:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <HAL_IncTick+0x24>)
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000060 	.word	0x20000060
 8005e74:	20000e88 	.word	0x20000e88

08005e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <HAL_GetTick+0x14>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000e88 	.word	0x20000e88

08005e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e98:	f7ff ffee 	bl	8005e78 <HAL_GetTick>
 8005e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d005      	beq.n	8005eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_Delay+0x44>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005eb6:	bf00      	nop
 8005eb8:	f7ff ffde 	bl	8005e78 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d8f7      	bhi.n	8005eb8 <HAL_Delay+0x28>
  {
  }
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000060 	.word	0x20000060

08005ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <__NVIC_SetPriorityGrouping+0x44>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f0a:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <__NVIC_SetPriorityGrouping+0x44>)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	60d3      	str	r3, [r2, #12]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	e000ed00 	.word	0xe000ed00

08005f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <__NVIC_GetPriorityGrouping+0x18>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	0a1b      	lsrs	r3, r3, #8
 8005f2a:	f003 0307 	and.w	r3, r3, #7
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	e000ed00 	.word	0xe000ed00

08005f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	db0b      	blt.n	8005f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	f003 021f 	and.w	r2, r3, #31
 8005f54:	4907      	ldr	r1, [pc, #28]	; (8005f74 <__NVIC_EnableIRQ+0x38>)
 8005f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	e000e100 	.word	0xe000e100

08005f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	6039      	str	r1, [r7, #0]
 8005f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	db0a      	blt.n	8005fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	490c      	ldr	r1, [pc, #48]	; (8005fc4 <__NVIC_SetPriority+0x4c>)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	0112      	lsls	r2, r2, #4
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fa0:	e00a      	b.n	8005fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	4908      	ldr	r1, [pc, #32]	; (8005fc8 <__NVIC_SetPriority+0x50>)
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	3b04      	subs	r3, #4
 8005fb0:	0112      	lsls	r2, r2, #4
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	761a      	strb	r2, [r3, #24]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000e100 	.word	0xe000e100
 8005fc8:	e000ed00 	.word	0xe000ed00

08005fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f1c3 0307 	rsb	r3, r3, #7
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	bf28      	it	cs
 8005fea:	2304      	movcs	r3, #4
 8005fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d902      	bls.n	8005ffc <NVIC_EncodePriority+0x30>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3b03      	subs	r3, #3
 8005ffa:	e000      	b.n	8005ffe <NVIC_EncodePriority+0x32>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	43da      	mvns	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	401a      	ands	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006014:	f04f 31ff 	mov.w	r1, #4294967295
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	fa01 f303 	lsl.w	r3, r1, r3
 800601e:	43d9      	mvns	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006024:	4313      	orrs	r3, r2
         );
}
 8006026:	4618      	mov	r0, r3
 8006028:	3724      	adds	r7, #36	; 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3b01      	subs	r3, #1
 8006040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006044:	d301      	bcc.n	800604a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006046:	2301      	movs	r3, #1
 8006048:	e00f      	b.n	800606a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800604a:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <SysTick_Config+0x40>)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3b01      	subs	r3, #1
 8006050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006052:	210f      	movs	r1, #15
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	f7ff ff8e 	bl	8005f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <SysTick_Config+0x40>)
 800605e:	2200      	movs	r2, #0
 8006060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006062:	4b04      	ldr	r3, [pc, #16]	; (8006074 <SysTick_Config+0x40>)
 8006064:	2207      	movs	r2, #7
 8006066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	e000e010 	.word	0xe000e010

08006078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff ff29 	bl	8005ed8 <__NVIC_SetPriorityGrouping>
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	4603      	mov	r3, r0
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060a0:	f7ff ff3e 	bl	8005f20 <__NVIC_GetPriorityGrouping>
 80060a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f7ff ff8e 	bl	8005fcc <NVIC_EncodePriority>
 80060b0:	4602      	mov	r2, r0
 80060b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ff5d 	bl	8005f78 <__NVIC_SetPriority>
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	4603      	mov	r3, r0
 80060ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff ff31 	bl	8005f3c <__NVIC_EnableIRQ>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ffa2 	bl	8006034 <SysTick_Config>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e014      	b.n	8006136 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	791b      	ldrb	r3, [r3, #4]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d105      	bne.n	8006122 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fd fba7 	bl	8003870 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	795b      	ldrb	r3, [r3, #5]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_DAC_ConfigChannel+0x18>
 8006152:	2302      	movs	r3, #2
 8006154:	e03c      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x92>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2202      	movs	r2, #2
 8006160:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4013      	ands	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	22c0      	movs	r2, #192	; 0xc0
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43da      	mvns	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	400a      	ands	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061e8:	f7ff fe46 	bl	8005e78 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e099      	b.n	800632c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0201 	bic.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006218:	e00f      	b.n	800623a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800621a:	f7ff fe2d 	bl	8005e78 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b05      	cmp	r3, #5
 8006226:	d908      	bls.n	800623a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2203      	movs	r2, #3
 8006232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e078      	b.n	800632c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e8      	bne.n	800621a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4b38      	ldr	r3, [pc, #224]	; (8006334 <HAL_DMA_Init+0x158>)
 8006254:	4013      	ands	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800627e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b04      	cmp	r3, #4
 8006292:	d107      	bne.n	80062a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	4313      	orrs	r3, r2
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d117      	bne.n	80062fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 faab 	bl	800683c <DMA_CheckFifoParam>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2240      	movs	r2, #64	; 0x40
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062fa:	2301      	movs	r3, #1
 80062fc:	e016      	b.n	800632c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa62 	bl	80067d0 <DMA_CalcBaseAndBitshift>
 800630c:	4603      	mov	r3, r0
 800630e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	223f      	movs	r2, #63	; 0x3f
 8006316:	409a      	lsls	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	f010803f 	.word	0xf010803f

08006338 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_DMA_Start_IT+0x26>
 800635a:	2302      	movs	r3, #2
 800635c:	e040      	b.n	80063e0 <HAL_DMA_Start_IT+0xa8>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	d12f      	bne.n	80063d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f9f4 	bl	8006774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006390:	223f      	movs	r2, #63	; 0x3f
 8006392:	409a      	lsls	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0216 	orr.w	r2, r2, #22
 80063a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0208 	orr.w	r2, r2, #8
 80063be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e005      	b.n	80063de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063da:	2302      	movs	r3, #2
 80063dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d004      	beq.n	8006406 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e00c      	b.n	8006420 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2205      	movs	r2, #5
 800640a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006438:	4b8e      	ldr	r3, [pc, #568]	; (8006674 <HAL_DMA_IRQHandler+0x248>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a8e      	ldr	r2, [pc, #568]	; (8006678 <HAL_DMA_IRQHandler+0x24c>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	0a9b      	lsrs	r3, r3, #10
 8006444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	2208      	movs	r2, #8
 8006458:	409a      	lsls	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01a      	beq.n	8006498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d013      	beq.n	8006498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0204 	bic.w	r2, r2, #4
 800647e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006484:	2208      	movs	r2, #8
 8006486:	409a      	lsls	r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	f043 0201 	orr.w	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649c:	2201      	movs	r2, #1
 800649e:	409a      	lsls	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d012      	beq.n	80064ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ba:	2201      	movs	r2, #1
 80064bc:	409a      	lsls	r2, r3
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f043 0202 	orr.w	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	2204      	movs	r2, #4
 80064d4:	409a      	lsls	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d012      	beq.n	8006504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	2204      	movs	r2, #4
 80064f2:	409a      	lsls	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fc:	f043 0204 	orr.w	r2, r3, #4
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	2210      	movs	r2, #16
 800650a:	409a      	lsls	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d043      	beq.n	800659c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d03c      	beq.n	800659c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	2210      	movs	r2, #16
 8006528:	409a      	lsls	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d018      	beq.n	800656e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d108      	bne.n	800655c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d024      	beq.n	800659c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
 800655a:	e01f      	b.n	800659c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01b      	beq.n	800659c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
 800656c:	e016      	b.n	800659c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0208 	bic.w	r2, r2, #8
 800658a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	2220      	movs	r2, #32
 80065a2:	409a      	lsls	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 808f 	beq.w	80066cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8087 	beq.w	80066cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c2:	2220      	movs	r2, #32
 80065c4:	409a      	lsls	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	d136      	bne.n	8006644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0216 	bic.w	r2, r2, #22
 80065e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_DMA_IRQHandler+0x1da>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0208 	bic.w	r2, r2, #8
 8006614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661a:	223f      	movs	r2, #63	; 0x3f
 800661c:	409a      	lsls	r2, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006636:	2b00      	cmp	r3, #0
 8006638:	d07e      	beq.n	8006738 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
        }
        return;
 8006642:	e079      	b.n	8006738 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01d      	beq.n	800668e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10d      	bne.n	800667c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	2b00      	cmp	r3, #0
 8006666:	d031      	beq.n	80066cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
 8006670:	e02c      	b.n	80066cc <HAL_DMA_IRQHandler+0x2a0>
 8006672:	bf00      	nop
 8006674:	20000054 	.word	0x20000054
 8006678:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d023      	beq.n	80066cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
 800668c:	e01e      	b.n	80066cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10f      	bne.n	80066bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0210 	bic.w	r2, r2, #16
 80066aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d032      	beq.n	800673a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d022      	beq.n	8006726 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2205      	movs	r2, #5
 80066e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	429a      	cmp	r2, r3
 8006702:	d307      	bcc.n	8006714 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f2      	bne.n	80066f8 <HAL_DMA_IRQHandler+0x2cc>
 8006712:	e000      	b.n	8006716 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006714:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	e000      	b.n	800673a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006738:	bf00      	nop
    }
  }
}
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800674e:	b2db      	uxtb	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d108      	bne.n	80067b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067b2:	e007      	b.n	80067c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]
}
 80067c4:	bf00      	nop
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	3b10      	subs	r3, #16
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <DMA_CalcBaseAndBitshift+0x64>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <DMA_CalcBaseAndBitshift+0x68>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d909      	bls.n	8006812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	659a      	str	r2, [r3, #88]	; 0x58
 8006810:	e007      	b.n	8006822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	aaaaaaab 	.word	0xaaaaaaab
 8006838:	0801c7f4 	.word	0x0801c7f4

0800683c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11f      	bne.n	8006896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d856      	bhi.n	800690a <DMA_CheckFifoParam+0xce>
 800685c:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <DMA_CheckFifoParam+0x28>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006875 	.word	0x08006875
 8006868:	08006887 	.word	0x08006887
 800686c:	08006875 	.word	0x08006875
 8006870:	0800690b 	.word	0x0800690b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d046      	beq.n	800690e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006884:	e043      	b.n	800690e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800688e:	d140      	bne.n	8006912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006894:	e03d      	b.n	8006912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689e:	d121      	bne.n	80068e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d837      	bhi.n	8006916 <DMA_CheckFifoParam+0xda>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <DMA_CheckFifoParam+0x70>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068c3 	.word	0x080068c3
 80068b4:	080068bd 	.word	0x080068bd
 80068b8:	080068d5 	.word	0x080068d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      break;
 80068c0:	e030      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d025      	beq.n	800691a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d2:	e022      	b.n	800691a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068dc:	d11f      	bne.n	800691e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068e2:	e01c      	b.n	800691e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d903      	bls.n	80068f2 <DMA_CheckFifoParam+0xb6>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d003      	beq.n	80068f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068f0:	e018      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	73fb      	strb	r3, [r7, #15]
      break;
 80068f6:	e015      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e00b      	b.n	8006922 <DMA_CheckFifoParam+0xe6>
      break;
 800690a:	bf00      	nop
 800690c:	e00a      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 800690e:	bf00      	nop
 8006910:	e008      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 8006912:	bf00      	nop
 8006914:	e006      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 8006916:	bf00      	nop
 8006918:	e004      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;   
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 8006922:	bf00      	nop
    }
  } 
  
  return status; 
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop

08006934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006934:	b480      	push	{r7}
 8006936:	b089      	sub	sp, #36	; 0x24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006942:	2300      	movs	r3, #0
 8006944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006946:	2300      	movs	r3, #0
 8006948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	e16b      	b.n	8006c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006950:	2201      	movs	r2, #1
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4013      	ands	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	429a      	cmp	r2, r3
 800696a:	f040 815a 	bne.w	8006c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b01      	cmp	r3, #1
 8006978:	d005      	beq.n	8006986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006982:	2b02      	cmp	r3, #2
 8006984:	d130      	bne.n	80069e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	2203      	movs	r2, #3
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	43db      	mvns	r3, r3
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4013      	ands	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069bc:	2201      	movs	r2, #1
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	43db      	mvns	r3, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	091b      	lsrs	r3, r3, #4
 80069d2:	f003 0201 	and.w	r2, r3, #1
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4313      	orrs	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d017      	beq.n	8006a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	2203      	movs	r2, #3
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d123      	bne.n	8006a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	08da      	lsrs	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3208      	adds	r2, #8
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	220f      	movs	r2, #15
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	08da      	lsrs	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3208      	adds	r2, #8
 8006a72:	69b9      	ldr	r1, [r7, #24]
 8006a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	2203      	movs	r2, #3
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 0203 	and.w	r2, r3, #3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80b4 	beq.w	8006c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	4b60      	ldr	r3, [pc, #384]	; (8006c40 <HAL_GPIO_Init+0x30c>)
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	4a5f      	ldr	r2, [pc, #380]	; (8006c40 <HAL_GPIO_Init+0x30c>)
 8006ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8006aca:	4b5d      	ldr	r3, [pc, #372]	; (8006c40 <HAL_GPIO_Init+0x30c>)
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ad6:	4a5b      	ldr	r2, [pc, #364]	; (8006c44 <HAL_GPIO_Init+0x310>)
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	3302      	adds	r3, #2
 8006ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	220f      	movs	r2, #15
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a52      	ldr	r2, [pc, #328]	; (8006c48 <HAL_GPIO_Init+0x314>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d02b      	beq.n	8006b5a <HAL_GPIO_Init+0x226>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a51      	ldr	r2, [pc, #324]	; (8006c4c <HAL_GPIO_Init+0x318>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d025      	beq.n	8006b56 <HAL_GPIO_Init+0x222>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a50      	ldr	r2, [pc, #320]	; (8006c50 <HAL_GPIO_Init+0x31c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01f      	beq.n	8006b52 <HAL_GPIO_Init+0x21e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a4f      	ldr	r2, [pc, #316]	; (8006c54 <HAL_GPIO_Init+0x320>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d019      	beq.n	8006b4e <HAL_GPIO_Init+0x21a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a4e      	ldr	r2, [pc, #312]	; (8006c58 <HAL_GPIO_Init+0x324>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_GPIO_Init+0x216>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a4d      	ldr	r2, [pc, #308]	; (8006c5c <HAL_GPIO_Init+0x328>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00d      	beq.n	8006b46 <HAL_GPIO_Init+0x212>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a4c      	ldr	r2, [pc, #304]	; (8006c60 <HAL_GPIO_Init+0x32c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <HAL_GPIO_Init+0x20e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a4b      	ldr	r2, [pc, #300]	; (8006c64 <HAL_GPIO_Init+0x330>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d101      	bne.n	8006b3e <HAL_GPIO_Init+0x20a>
 8006b3a:	2307      	movs	r3, #7
 8006b3c:	e00e      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	e00c      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b42:	2306      	movs	r3, #6
 8006b44:	e00a      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b46:	2305      	movs	r3, #5
 8006b48:	e008      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b4a:	2304      	movs	r3, #4
 8006b4c:	e006      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e004      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e002      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <HAL_GPIO_Init+0x228>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	f002 0203 	and.w	r2, r2, #3
 8006b62:	0092      	lsls	r2, r2, #2
 8006b64:	4093      	lsls	r3, r2
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b6c:	4935      	ldr	r1, [pc, #212]	; (8006c44 <HAL_GPIO_Init+0x310>)
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	089b      	lsrs	r3, r3, #2
 8006b72:	3302      	adds	r3, #2
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b7a:	4b3b      	ldr	r3, [pc, #236]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	43db      	mvns	r3, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	4013      	ands	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b9e:	4a32      	ldr	r2, [pc, #200]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ba4:	4b30      	ldr	r3, [pc, #192]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bc8:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bce:	4b26      	ldr	r3, [pc, #152]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bf2:	4a1d      	ldr	r2, [pc, #116]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	43db      	mvns	r3, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4013      	ands	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c1c:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	f67f ae90 	bls.w	8006950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40013800 	.word	0x40013800
 8006c48:	40020000 	.word	0x40020000
 8006c4c:	40020400 	.word	0x40020400
 8006c50:	40020800 	.word	0x40020800
 8006c54:	40020c00 	.word	0x40020c00
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40021400 	.word	0x40021400
 8006c60:	40021800 	.word	0x40021800
 8006c64:	40021c00 	.word	0x40021c00
 8006c68:	40013c00 	.word	0x40013c00

08006c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	807b      	strh	r3, [r7, #2]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c7c:	787b      	ldrb	r3, [r7, #1]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c82:	887a      	ldrh	r2, [r7, #2]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c88:	e003      	b.n	8006c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	041a      	lsls	r2, r3, #16
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	619a      	str	r2, [r3, #24]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cb0:	887a      	ldrh	r2, [r7, #2]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	041a      	lsls	r2, r3, #16
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	43d9      	mvns	r1, r3
 8006cbc:	887b      	ldrh	r3, [r7, #2]
 8006cbe:	400b      	ands	r3, r1
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	619a      	str	r2, [r3, #24]
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e12b      	b.n	8006f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fc fdfc 	bl	80038f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2224      	movs	r2, #36	; 0x24
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0201 	bic.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d38:	f004 fac2 	bl	800b2c0 <HAL_RCC_GetPCLK1Freq>
 8006d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4a81      	ldr	r2, [pc, #516]	; (8006f48 <HAL_I2C_Init+0x274>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d807      	bhi.n	8006d58 <HAL_I2C_Init+0x84>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a80      	ldr	r2, [pc, #512]	; (8006f4c <HAL_I2C_Init+0x278>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bf94      	ite	ls
 8006d50:	2301      	movls	r3, #1
 8006d52:	2300      	movhi	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e006      	b.n	8006d66 <HAL_I2C_Init+0x92>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4a7d      	ldr	r2, [pc, #500]	; (8006f50 <HAL_I2C_Init+0x27c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	bf94      	ite	ls
 8006d60:	2301      	movls	r3, #1
 8006d62:	2300      	movhi	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e0e7      	b.n	8006f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a78      	ldr	r2, [pc, #480]	; (8006f54 <HAL_I2C_Init+0x280>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	0c9b      	lsrs	r3, r3, #18
 8006d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4a6a      	ldr	r2, [pc, #424]	; (8006f48 <HAL_I2C_Init+0x274>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d802      	bhi.n	8006da8 <HAL_I2C_Init+0xd4>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	3301      	adds	r3, #1
 8006da6:	e009      	b.n	8006dbc <HAL_I2C_Init+0xe8>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
 8006db2:	4a69      	ldr	r2, [pc, #420]	; (8006f58 <HAL_I2C_Init+0x284>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	099b      	lsrs	r3, r3, #6
 8006dba:	3301      	adds	r3, #1
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	495c      	ldr	r1, [pc, #368]	; (8006f48 <HAL_I2C_Init+0x274>)
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	d819      	bhi.n	8006e10 <HAL_I2C_Init+0x13c>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	1e59      	subs	r1, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006df0:	400b      	ands	r3, r1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <HAL_I2C_Init+0x138>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1e59      	subs	r1, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e04:	3301      	adds	r3, #1
 8006e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0a:	e051      	b.n	8006eb0 <HAL_I2C_Init+0x1dc>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	e04f      	b.n	8006eb0 <HAL_I2C_Init+0x1dc>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d111      	bne.n	8006e3c <HAL_I2C_Init+0x168>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	1e58      	subs	r0, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6859      	ldr	r1, [r3, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	440b      	add	r3, r1
 8006e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e012      	b.n	8006e62 <HAL_I2C_Init+0x18e>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	1e58      	subs	r0, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6859      	ldr	r1, [r3, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	0099      	lsls	r1, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e52:	3301      	adds	r3, #1
 8006e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_I2C_Init+0x196>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e022      	b.n	8006eb0 <HAL_I2C_Init+0x1dc>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10e      	bne.n	8006e90 <HAL_I2C_Init+0x1bc>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1e58      	subs	r0, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6859      	ldr	r1, [r3, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	440b      	add	r3, r1
 8006e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e84:	3301      	adds	r3, #1
 8006e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8e:	e00f      	b.n	8006eb0 <HAL_I2C_Init+0x1dc>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1e58      	subs	r0, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6859      	ldr	r1, [r3, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	0099      	lsls	r1, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	6809      	ldr	r1, [r1, #0]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6911      	ldr	r1, [r2, #16]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68d2      	ldr	r2, [r2, #12]
 8006eea:	4311      	orrs	r1, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	000186a0 	.word	0x000186a0
 8006f4c:	001e847f 	.word	0x001e847f
 8006f50:	003d08ff 	.word	0x003d08ff
 8006f54:	431bde83 	.word	0x431bde83
 8006f58:	10624dd3 	.word	0x10624dd3

08006f5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	461a      	mov	r2, r3
 8006f68:	460b      	mov	r3, r1
 8006f6a:	817b      	strh	r3, [r7, #10]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f70:	f7fe ff82 	bl	8005e78 <HAL_GetTick>
 8006f74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	f040 80e0 	bne.w	8007144 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2319      	movs	r3, #25
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4970      	ldr	r1, [pc, #448]	; (8007150 <HAL_I2C_Master_Transmit+0x1f4>)
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f002 f8be 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e0d3      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_I2C_Master_Transmit+0x50>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e0cc      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1ea>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d007      	beq.n	8006fd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2221      	movs	r2, #33	; 0x21
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2210      	movs	r2, #16
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	893a      	ldrh	r2, [r7, #8]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4a50      	ldr	r2, [pc, #320]	; (8007154 <HAL_I2C_Master_Transmit+0x1f8>)
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007014:	8979      	ldrh	r1, [r7, #10]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	6a3a      	ldr	r2, [r7, #32]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f001 fe80 	bl	8008d20 <I2C_MasterRequestWrite>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e08d      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007040:	e066      	b.n	8007110 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	6a39      	ldr	r1, [r7, #32]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f002 f938 	bl	80092bc <I2C_WaitOnTXEFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00d      	beq.n	800706e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	2b04      	cmp	r3, #4
 8007058:	d107      	bne.n	800706a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e06b      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11b      	bne.n	80070e4 <HAL_I2C_Master_Transmit+0x188>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d017      	beq.n	80070e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	6a39      	ldr	r1, [r7, #32]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f002 f928 	bl	800933e <I2C_WaitOnBTFFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d107      	bne.n	800710c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e01a      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d194      	bne.n	8007042 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	00100002 	.word	0x00100002
 8007154:	ffff0000 	.word	0xffff0000

08007158 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	461a      	mov	r2, r3
 8007164:	460b      	mov	r3, r1
 8007166:	817b      	strh	r3, [r7, #10]
 8007168:	4613      	mov	r3, r2
 800716a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800716c:	f7fe fe84 	bl	8005e78 <HAL_GetTick>
 8007170:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b20      	cmp	r3, #32
 800717c:	f040 820b 	bne.w	8007596 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2319      	movs	r3, #25
 8007186:	2201      	movs	r2, #1
 8007188:	497c      	ldr	r1, [pc, #496]	; (800737c <HAL_I2C_Master_Receive+0x224>)
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f001 ffc0 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
 8007198:	e1fe      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_I2C_Master_Receive+0x50>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e1f7      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d007      	beq.n	80071ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0201 	orr.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2222      	movs	r2, #34	; 0x22
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2210      	movs	r2, #16
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	893a      	ldrh	r2, [r7, #8]
 80071fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a5c      	ldr	r2, [pc, #368]	; (8007380 <HAL_I2C_Master_Receive+0x228>)
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007210:	8979      	ldrh	r1, [r7, #10]
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f001 fe04 	bl	8008e24 <I2C_MasterRequestRead>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e1b8      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	d113      	bne.n	8007256 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722e:	2300      	movs	r3, #0
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	623b      	str	r3, [r7, #32]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	623b      	str	r3, [r7, #32]
 8007242:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e18c      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725a:	2b01      	cmp	r3, #1
 800725c:	d11b      	bne.n	8007296 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	61fb      	str	r3, [r7, #28]
 8007282:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e16c      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729a:	2b02      	cmp	r3, #2
 800729c:	d11b      	bne.n	80072d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	e14c      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072fc:	e138      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007302:	2b03      	cmp	r3, #3
 8007304:	f200 80f1 	bhi.w	80074ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730c:	2b01      	cmp	r3, #1
 800730e:	d123      	bne.n	8007358 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f002 f885 	bl	8009424 <I2C_WaitOnRXNEFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e139      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007356:	e10b      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735c:	2b02      	cmp	r3, #2
 800735e:	d14e      	bne.n	80073fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	2200      	movs	r2, #0
 8007368:	4906      	ldr	r1, [pc, #24]	; (8007384 <HAL_I2C_Master_Receive+0x22c>)
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f001 fed0 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e10e      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
 800737a:	bf00      	nop
 800737c:	00100002 	.word	0x00100002
 8007380:	ffff0000 	.word	0xffff0000
 8007384:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691a      	ldr	r2, [r3, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073fc:	e0b8      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	2200      	movs	r2, #0
 8007406:	4966      	ldr	r1, [pc, #408]	; (80075a0 <HAL_I2C_Master_Receive+0x448>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 fe81 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0bf      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2200      	movs	r2, #0
 8007462:	494f      	ldr	r1, [pc, #316]	; (80075a0 <HAL_I2C_Master_Receive+0x448>)
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 fe53 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e091      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e8:	e042      	b.n	8007570 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f001 ff98 	bl	8009424 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e04c      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b04      	cmp	r3, #4
 800753c:	d118      	bne.n	8007570 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007574:	2b00      	cmp	r3, #0
 8007576:	f47f aec2 	bne.w	80072fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	; 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	00010004 	.word	0x00010004

080075a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d003      	beq.n	80075dc <HAL_I2C_EV_IRQHandler+0x38>
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	f040 80b1 	bne.w	800773e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <HAL_I2C_EV_IRQHandler+0x6e>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80075fc:	d003      	beq.n	8007606 <HAL_I2C_EV_IRQHandler+0x62>
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007604:	d101      	bne.n	800760a <HAL_I2C_EV_IRQHandler+0x66>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <HAL_I2C_EV_IRQHandler+0x68>
 800760a:	2300      	movs	r3, #0
 800760c:	2b01      	cmp	r3, #1
 800760e:	f000 8114 	beq.w	800783a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <HAL_I2C_EV_IRQHandler+0x90>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 ff81 	bl	800952e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fd5e 	bl	80080ee <I2C_Master_SB>
 8007632:	e083      	b.n	800773c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <HAL_I2C_EV_IRQHandler+0xac>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fdd6 	bl	80081fa <I2C_Master_ADD10>
 800764e:	e075      	b.n	800773c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <HAL_I2C_EV_IRQHandler+0xc8>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fdf2 	bl	800824e <I2C_Master_ADDR>
 800766a:	e067      	b.n	800773c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d036      	beq.n	80076e4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007684:	f000 80db 	beq.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <HAL_I2C_EV_IRQHandler+0x10a>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_I2C_EV_IRQHandler+0x10a>
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d103      	bne.n	80076ae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f9d6 	bl	8007a58 <I2C_MasterTransmit_TXE>
 80076ac:	e046      	b.n	800773c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80c2 	beq.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80bc 	beq.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b21      	cmp	r3, #33	; 0x21
 80076ca:	d103      	bne.n	80076d4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa5f 	bl	8007b90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076d2:	e0b4      	b.n	800783e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	f040 80b1 	bne.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 facd 	bl	8007c7c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076e2:	e0ac      	b.n	800783e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f2:	f000 80a4 	beq.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00d      	beq.n	800771c <HAL_I2C_EV_IRQHandler+0x178>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007706:	2b00      	cmp	r3, #0
 8007708:	d008      	beq.n	800771c <HAL_I2C_EV_IRQHandler+0x178>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fb45 	bl	8007da4 <I2C_MasterReceive_RXNE>
 800771a:	e00f      	b.n	800773c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 808b 	beq.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8085 	beq.w	800783e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fbf0 	bl	8007f1a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800773a:	e080      	b.n	800783e <HAL_I2C_EV_IRQHandler+0x29a>
 800773c:	e07f      	b.n	800783e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	e007      	b.n	8007760 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d011      	beq.n	800778e <HAL_I2C_EV_IRQHandler+0x1ea>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007784:	69b9      	ldr	r1, [r7, #24]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 ffb0 	bl	80086ec <I2C_Slave_ADDR>
 800778c:	e05a      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b00      	cmp	r3, #0
 8007796:	d008      	beq.n	80077aa <HAL_I2C_EV_IRQHandler+0x206>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 ffea 	bl	800877c <I2C_Slave_STOPF>
 80077a8:	e04c      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b21      	cmp	r3, #33	; 0x21
 80077ae:	d002      	beq.n	80077b6 <HAL_I2C_EV_IRQHandler+0x212>
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b29      	cmp	r3, #41	; 0x29
 80077b4:	d120      	bne.n	80077f8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00d      	beq.n	80077dc <HAL_I2C_EV_IRQHandler+0x238>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_I2C_EV_IRQHandler+0x238>
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fecb 	bl	8008570 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077da:	e032      	b.n	8007842 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d02d      	beq.n	8007842 <HAL_I2C_EV_IRQHandler+0x29e>
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d028      	beq.n	8007842 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fefa 	bl	80085ea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077f6:	e024      	b.n	8007842 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00d      	beq.n	800781e <HAL_I2C_EV_IRQHandler+0x27a>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_I2C_EV_IRQHandler+0x27a>
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 ff08 	bl	800862c <I2C_SlaveReceive_RXNE>
 800781c:	e012      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00d      	beq.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ff38 	bl	80086a8 <I2C_SlaveReceive_BTF>
 8007838:	e004      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007842:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b08a      	sub	sp, #40	; 0x28
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800786c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00d      	beq.n	8007894 <HAL_I2C_ER_IRQHandler+0x4a>
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	f043 0301 	orr.w	r3, r3, #1
 8007888:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007892:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00d      	beq.n	80078ba <HAL_I2C_ER_IRQHandler+0x70>
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	f043 0302 	orr.w	r3, r3, #2
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80078b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d03e      	beq.n	8007942 <HAL_I2C_ER_IRQHandler+0xf8>
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d039      	beq.n	8007942 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80078ce:	7efb      	ldrb	r3, [r7, #27]
 80078d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80078e8:	7ebb      	ldrb	r3, [r7, #26]
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d112      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xca>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10f      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xca>
 80078f4:	7cfb      	ldrb	r3, [r7, #19]
 80078f6:	2b21      	cmp	r3, #33	; 0x21
 80078f8:	d008      	beq.n	800790c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80078fa:	7cfb      	ldrb	r3, [r7, #19]
 80078fc:	2b29      	cmp	r3, #41	; 0x29
 80078fe:	d005      	beq.n	800790c <HAL_I2C_ER_IRQHandler+0xc2>
 8007900:	7cfb      	ldrb	r3, [r7, #19]
 8007902:	2b28      	cmp	r3, #40	; 0x28
 8007904:	d106      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b21      	cmp	r3, #33	; 0x21
 800790a:	d103      	bne.n	8007914 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f865 	bl	80089dc <I2C_Slave_AF>
 8007912:	e016      	b.n	8007942 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800791c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	f043 0304 	orr.w	r3, r3, #4
 8007924:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	2b10      	cmp	r3, #16
 800792a:	d002      	beq.n	8007932 <HAL_I2C_ER_IRQHandler+0xe8>
 800792c:	7efb      	ldrb	r3, [r7, #27]
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d107      	bne.n	8007942 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007940:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00d      	beq.n	8007968 <HAL_I2C_ER_IRQHandler+0x11e>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	f043 0308 	orr.w	r3, r3, #8
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007966:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f89e 	bl	8008abc <I2C_ITError>
  }
}
 8007980:	bf00      	nop
 8007982:	3728      	adds	r7, #40	; 0x28
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
 80079e4:	4613      	mov	r3, r2
 80079e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d150      	bne.n	8007b20 <I2C_MasterTransmit_TXE+0xc8>
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b21      	cmp	r3, #33	; 0x21
 8007a82:	d14d      	bne.n	8007b20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	d01d      	beq.n	8007ac6 <I2C_MasterTransmit_TXE+0x6e>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d01a      	beq.n	8007ac6 <I2C_MasterTransmit_TXE+0x6e>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a96:	d016      	beq.n	8007ac6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aa6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2211      	movs	r2, #17
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff ff62 	bl	8007988 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ac4:	e060      	b.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ad4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b40      	cmp	r3, #64	; 0x40
 8007afe:	d107      	bne.n	8007b10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ff7d 	bl	8007a08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b0e:	e03b      	b.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff ff35 	bl	8007988 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b1e:	e033      	b.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b21      	cmp	r3, #33	; 0x21
 8007b24:	d005      	beq.n	8007b32 <I2C_MasterTransmit_TXE+0xda>
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d12d      	bne.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b22      	cmp	r3, #34	; 0x22
 8007b30:	d12a      	bne.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d108      	bne.n	8007b4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007b4c:	e01c      	b.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d103      	bne.n	8007b62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f88e 	bl	8007c7c <I2C_MemoryTransmit_TXE_BTF>
}
 8007b60:	e012      	b.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b86:	e7ff      	b.n	8007b88 <I2C_MasterTransmit_TXE+0x130>
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b21      	cmp	r3, #33	; 0x21
 8007ba8:	d164      	bne.n	8007c74 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d012      	beq.n	8007bda <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	781a      	ldrb	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007bd8:	e04c      	b.n	8007c74 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d01d      	beq.n	8007c1c <I2C_MasterTransmit_BTF+0x8c>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d01a      	beq.n	8007c1c <I2C_MasterTransmit_BTF+0x8c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bec:	d016      	beq.n	8007c1c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bfc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2211      	movs	r2, #17
 8007c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff feb7 	bl	8007988 <HAL_I2C_MasterTxCpltCallback>
}
 8007c1a:	e02b      	b.n	8007c74 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c2a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d107      	bne.n	8007c66 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fed2 	bl	8007a08 <HAL_I2C_MemTxCpltCallback>
}
 8007c64:	e006      	b.n	8007c74 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fe8a 	bl	8007988 <HAL_I2C_MasterTxCpltCallback>
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11d      	bne.n	8007cd0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d10b      	bne.n	8007cb4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007cb2:	e073      	b.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	121b      	asrs	r3, r3, #8
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007cce:	e065      	b.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d10b      	bne.n	8007cf0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007cee:	e055      	b.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d151      	bne.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2b22      	cmp	r3, #34	; 0x22
 8007cfc:	d10d      	bne.n	8007d1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007d18:	e040      	b.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d015      	beq.n	8007d50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b21      	cmp	r3, #33	; 0x21
 8007d28:	d112      	bne.n	8007d50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d4e:	e025      	b.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d120      	bne.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b21      	cmp	r3, #33	; 0x21
 8007d5e:	d11d      	bne.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fe36 	bl	8007a08 <HAL_I2C_MemTxCpltCallback>
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b22      	cmp	r3, #34	; 0x22
 8007db6:	f040 80ac 	bne.w	8007f12 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d921      	bls.n	8007e0c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	f040 808c 	bne.w	8007f12 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e08:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007e0a:	e082      	b.n	8007f12 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d075      	beq.n	8007f00 <I2C_MasterReceive_RXNE+0x15c>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d002      	beq.n	8007e20 <I2C_MasterReceive_RXNE+0x7c>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d16f      	bne.n	8007f00 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 facd 	bl	80093c0 <I2C_WaitOnSTOPRequestThroughIT>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d142      	bne.n	8007eb2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e3a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d10a      	bne.n	8007e9c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff fdc1 	bl	8007a1c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e9a:	e03a      	b.n	8007f12 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2212      	movs	r2, #18
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fd76 	bl	800799c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007eb0:	e02f      	b.n	8007f12 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ec0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fd99 	bl	8007a30 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007efe:	e008      	b.n	8007f12 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0e:	605a      	str	r2, [r3, #4]
}
 8007f10:	e7ff      	b.n	8007f12 <I2C_MasterReceive_RXNE+0x16e>
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d11b      	bne.n	8007f6a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f40:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007f68:	e0bd      	b.n	80080e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d129      	bne.n	8007fc8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f82:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d00a      	beq.n	8007fa0 <I2C_MasterReceive_BTF+0x86>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d007      	beq.n	8007fa0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007fc6:	e08e      	b.n	80080e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d176      	bne.n	80080c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d002      	beq.n	8007fde <I2C_MasterReceive_BTF+0xc4>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b10      	cmp	r3, #16
 8007fdc:	d108      	bne.n	8007ff0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e019      	b.n	8008024 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d002      	beq.n	8007ffc <I2C_MasterReceive_BTF+0xe2>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d108      	bne.n	800800e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e00a      	b.n	8008024 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b10      	cmp	r3, #16
 8008012:	d007      	beq.n	8008024 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008022:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800807e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d10a      	bne.n	80080aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fcba 	bl	8007a1c <HAL_I2C_MemRxCpltCallback>
}
 80080a8:	e01d      	b.n	80080e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2212      	movs	r2, #18
 80080b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff fc6f 	bl	800799c <HAL_I2C_MasterRxCpltCallback>
}
 80080be:	e012      	b.n	80080e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d117      	bne.n	8008132 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008106:	2b00      	cmp	r3, #0
 8008108:	d109      	bne.n	800811e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	b2db      	uxtb	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800811a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800811c:	e067      	b.n	80081ee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f043 0301 	orr.w	r3, r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	611a      	str	r2, [r3, #16]
}
 8008130:	e05d      	b.n	80081ee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800813a:	d133      	bne.n	80081a4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b21      	cmp	r3, #33	; 0x21
 8008146:	d109      	bne.n	800815c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814c:	b2db      	uxtb	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008158:	611a      	str	r2, [r3, #16]
 800815a:	e008      	b.n	800816e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <I2C_Master_SB+0x92>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d108      	bne.n	8008192 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d032      	beq.n	80081ee <I2C_Master_SB+0x100>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d02d      	beq.n	80081ee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a0:	605a      	str	r2, [r3, #4]
}
 80081a2:	e024      	b.n	80081ee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10e      	bne.n	80081ca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	11db      	asrs	r3, r3, #7
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f063 030f 	orn	r3, r3, #15
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	611a      	str	r2, [r3, #16]
}
 80081c8:	e011      	b.n	80081ee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d10d      	bne.n	80081ee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	11db      	asrs	r3, r3, #7
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0306 	and.w	r3, r3, #6
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f063 030e 	orn	r3, r3, #14
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	611a      	str	r2, [r3, #16]
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008206:	b2da      	uxtb	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <I2C_Master_ADD10+0x26>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d108      	bne.n	8008232 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00c      	beq.n	8008242 <I2C_Master_ADD10+0x48>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008240:	605a      	str	r2, [r3, #4]
  }
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800824e:	b480      	push	{r7}
 8008250:	b091      	sub	sp, #68	; 0x44
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800825c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b22      	cmp	r3, #34	; 0x22
 8008276:	f040 8169 	bne.w	800854c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10f      	bne.n	80082a2 <I2C_Master_ADDR+0x54>
 8008282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d10b      	bne.n	80082a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828a:	2300      	movs	r3, #0
 800828c:	633b      	str	r3, [r7, #48]	; 0x30
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	633b      	str	r3, [r7, #48]	; 0x30
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	633b      	str	r3, [r7, #48]	; 0x30
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	e160      	b.n	8008564 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d11d      	bne.n	80082e6 <I2C_Master_ADDR+0x98>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082b2:	d118      	bne.n	80082e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082b4:	2300      	movs	r3, #0
 80082b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	651a      	str	r2, [r3, #80]	; 0x50
 80082e4:	e13e      	b.n	8008564 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d113      	bne.n	8008318 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f0:	2300      	movs	r3, #0
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	e115      	b.n	8008544 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b01      	cmp	r3, #1
 8008320:	f040 808a 	bne.w	8008438 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800832a:	d137      	bne.n	800839c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800833a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800834a:	d113      	bne.n	8008374 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835c:	2300      	movs	r3, #0
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	e0e7      	b.n	8008544 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008374:	2300      	movs	r3, #0
 8008376:	623b      	str	r3, [r7, #32]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	623b      	str	r3, [r7, #32]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	623b      	str	r3, [r7, #32]
 8008388:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e0d3      	b.n	8008544 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	2b08      	cmp	r3, #8
 80083a0:	d02e      	beq.n	8008400 <I2C_Master_ADDR+0x1b2>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	d02b      	beq.n	8008400 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	2b12      	cmp	r3, #18
 80083ac:	d102      	bne.n	80083b4 <I2C_Master_ADDR+0x166>
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d125      	bne.n	8008400 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d00e      	beq.n	80083d8 <I2C_Master_ADDR+0x18a>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d00b      	beq.n	80083d8 <I2C_Master_ADDR+0x18a>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d008      	beq.n	80083d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	e007      	b.n	80083e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e8:	2300      	movs	r3, #0
 80083ea:	61fb      	str	r3, [r7, #28]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	e0a1      	b.n	8008544 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008410:	2300      	movs	r3, #0
 8008412:	61bb      	str	r3, [r7, #24]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	61bb      	str	r3, [r7, #24]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	61bb      	str	r3, [r7, #24]
 8008424:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	e085      	b.n	8008544 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d14d      	bne.n	80084de <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	2b04      	cmp	r3, #4
 8008446:	d016      	beq.n	8008476 <I2C_Master_ADDR+0x228>
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	2b02      	cmp	r3, #2
 800844c:	d013      	beq.n	8008476 <I2C_Master_ADDR+0x228>
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	2b10      	cmp	r3, #16
 8008452:	d010      	beq.n	8008476 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008462:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e007      	b.n	8008486 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008484:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008494:	d117      	bne.n	80084c6 <I2C_Master_ADDR+0x278>
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800849c:	d00b      	beq.n	80084b6 <I2C_Master_ADDR+0x268>
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d008      	beq.n	80084b6 <I2C_Master_ADDR+0x268>
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d005      	beq.n	80084b6 <I2C_Master_ADDR+0x268>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	2b10      	cmp	r3, #16
 80084ae:	d002      	beq.n	80084b6 <I2C_Master_ADDR+0x268>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d107      	bne.n	80084c6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	e032      	b.n	8008544 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084ec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084fc:	d117      	bne.n	800852e <I2C_Master_ADDR+0x2e0>
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008504:	d00b      	beq.n	800851e <I2C_Master_ADDR+0x2d0>
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	2b01      	cmp	r3, #1
 800850a:	d008      	beq.n	800851e <I2C_Master_ADDR+0x2d0>
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	2b08      	cmp	r3, #8
 8008510:	d005      	beq.n	800851e <I2C_Master_ADDR+0x2d0>
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	2b10      	cmp	r3, #16
 8008516:	d002      	beq.n	800851e <I2C_Master_ADDR+0x2d0>
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	2b20      	cmp	r3, #32
 800851c:	d107      	bne.n	800852e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800852c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	613b      	str	r3, [r7, #16]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800854a:	e00b      	b.n	8008564 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
}
 8008562:	e7ff      	b.n	8008564 <I2C_Master_ADDR+0x316>
 8008564:	bf00      	nop
 8008566:	3744      	adds	r7, #68	; 0x44
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d02b      	beq.n	80085e2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d114      	bne.n	80085e2 <I2C_SlaveTransmit_TXE+0x72>
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b29      	cmp	r3, #41	; 0x29
 80085bc:	d111      	bne.n	80085e2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2221      	movs	r2, #33	; 0x21
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2228      	movs	r2, #40	; 0x28
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff f9e7 	bl	80079b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d011      	beq.n	8008620 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800863a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d02c      	beq.n	80086a0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d114      	bne.n	80086a0 <I2C_SlaveReceive_RXNE+0x74>
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b2a      	cmp	r3, #42	; 0x2a
 800867a:	d111      	bne.n	80086a0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800868a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2222      	movs	r2, #34	; 0x22
 8008690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2228      	movs	r2, #40	; 0x28
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff f992 	bl	80079c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d012      	beq.n	80086e0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	3b01      	subs	r3, #1
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008706:	2b28      	cmp	r3, #40	; 0x28
 8008708:	d125      	bne.n	8008756 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008718:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872e:	2b00      	cmp	r3, #0
 8008730:	d103      	bne.n	800873a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	81bb      	strh	r3, [r7, #12]
 8008738:	e002      	b.n	8008740 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008748:	89ba      	ldrh	r2, [r7, #12]
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff f942 	bl	80079d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008754:	e00e      	b.n	8008774 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	60bb      	str	r3, [r7, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	60bb      	str	r3, [r7, #8]
 800876a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800878a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800879a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800879c:	2300      	movs	r3, #0
 800879e:	60bb      	str	r3, [r7, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d8:	d172      	bne.n	80088c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	2b22      	cmp	r3, #34	; 0x22
 80087de:	d002      	beq.n	80087e6 <I2C_Slave_STOPF+0x6a>
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	2b2a      	cmp	r3, #42	; 0x2a
 80087e4:	d135      	bne.n	8008852 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f043 0204 	orr.w	r2, r3, #4
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008818:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	4618      	mov	r0, r3
 8008820:	f7fd ff8e 	bl	8006740 <HAL_DMA_GetState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b01      	cmp	r3, #1
 8008828:	d049      	beq.n	80088be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	4a69      	ldr	r2, [pc, #420]	; (80089d4 <I2C_Slave_STOPF+0x258>)
 8008830:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd fdd6 	bl	80063e8 <HAL_DMA_Abort_IT>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d03d      	beq.n	80088be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008850:	e035      	b.n	80088be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f043 0204 	orr.w	r2, r3, #4
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008884:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888a:	4618      	mov	r0, r3
 800888c:	f7fd ff58 	bl	8006740 <HAL_DMA_GetState>
 8008890:	4603      	mov	r3, r0
 8008892:	2b01      	cmp	r3, #1
 8008894:	d014      	beq.n	80088c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	4a4e      	ldr	r2, [pc, #312]	; (80089d4 <I2C_Slave_STOPF+0x258>)
 800889c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fd fda0 	bl	80063e8 <HAL_DMA_Abort_IT>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	e000      	b.n	80088c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03e      	beq.n	8008948 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d112      	bne.n	80088fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691a      	ldr	r2, [r3, #16]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	d112      	bne.n	8008932 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691a      	ldr	r2, [r3, #16]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	f043 0204 	orr.w	r2, r3, #4
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8b3 	bl	8008abc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008956:	e039      	b.n	80089cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b2a      	cmp	r3, #42	; 0x2a
 800895c:	d109      	bne.n	8008972 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2228      	movs	r2, #40	; 0x28
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff f829 	bl	80079c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b28      	cmp	r3, #40	; 0x28
 800897c:	d111      	bne.n	80089a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a15      	ldr	r2, [pc, #84]	; (80089d8 <I2C_Slave_STOPF+0x25c>)
 8008982:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff f82a 	bl	80079f4 <HAL_I2C_ListenCpltCallback>
}
 80089a0:	e014      	b.n	80089cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	2b22      	cmp	r3, #34	; 0x22
 80089a8:	d002      	beq.n	80089b0 <I2C_Slave_STOPF+0x234>
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	2b22      	cmp	r3, #34	; 0x22
 80089ae:	d10d      	bne.n	80089cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fe fffc 	bl	80079c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	08008fc1 	.word	0x08008fc1
 80089d8:	ffff0000 	.word	0xffff0000

080089dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d002      	beq.n	80089fe <I2C_Slave_AF+0x22>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d129      	bne.n	8008a52 <I2C_Slave_AF+0x76>
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b28      	cmp	r3, #40	; 0x28
 8008a02:	d126      	bne.n	8008a52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a2c      	ldr	r2, [pc, #176]	; (8008ab8 <I2C_Slave_AF+0xdc>)
 8008a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fe ffd2 	bl	80079f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008a50:	e02e      	b.n	8008ab0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	2b21      	cmp	r3, #33	; 0x21
 8008a56:	d126      	bne.n	8008aa6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <I2C_Slave_AF+0xdc>)
 8008a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2221      	movs	r2, #33	; 0x21
 8008a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fe ff86 	bl	80079b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8008aa4:	e004      	b.n	8008ab0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008aae:	615a      	str	r2, [r3, #20]
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	ffff0000 	.word	0xffff0000

08008abc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ad2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d002      	beq.n	8008ae0 <I2C_ITError+0x24>
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d10a      	bne.n	8008af6 <I2C_ITError+0x3a>
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	2b22      	cmp	r3, #34	; 0x22
 8008ae4:	d107      	bne.n	8008af6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008af4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008afc:	2b28      	cmp	r3, #40	; 0x28
 8008afe:	d107      	bne.n	8008b10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2228      	movs	r2, #40	; 0x28
 8008b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b0e:	e015      	b.n	8008b3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1e:	d00a      	beq.n	8008b36 <I2C_ITError+0x7a>
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	2b60      	cmp	r3, #96	; 0x60
 8008b24:	d007      	beq.n	8008b36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4a:	d162      	bne.n	8008c12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d020      	beq.n	8008bac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6e:	4a6a      	ldr	r2, [pc, #424]	; (8008d18 <I2C_ITError+0x25c>)
 8008b70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fd fc36 	bl	80063e8 <HAL_DMA_Abort_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8089 	beq.w	8008c96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0201 	bic.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4798      	blx	r3
 8008baa:	e074      	b.n	8008c96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	4a59      	ldr	r2, [pc, #356]	; (8008d18 <I2C_ITError+0x25c>)
 8008bb2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd fc15 	bl	80063e8 <HAL_DMA_Abort_IT>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d068      	beq.n	8008c96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d10b      	bne.n	8008bea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0201 	bic.w	r2, r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	e041      	b.n	8008c96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b60      	cmp	r3, #96	; 0x60
 8008c1c:	d125      	bne.n	8008c6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d10b      	bne.n	8008c52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fe feee 	bl	8007a44 <HAL_I2C_AbortCpltCallback>
 8008c68:	e015      	b.n	8008c96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d10b      	bne.n	8008c90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe fecd 	bl	8007a30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10e      	bne.n	8008cc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d109      	bne.n	8008cc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cd2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d113      	bne.n	8008d10 <I2C_ITError+0x254>
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b28      	cmp	r3, #40	; 0x28
 8008cec:	d110      	bne.n	8008d10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <I2C_ITError+0x260>)
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fe fe72 	bl	80079f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	08008fc1 	.word	0x08008fc1
 8008d1c:	ffff0000 	.word	0xffff0000

08008d20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d006      	beq.n	8008d4a <I2C_MasterRequestWrite+0x2a>
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d003      	beq.n	8008d4a <I2C_MasterRequestWrite+0x2a>
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d48:	d108      	bne.n	8008d5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	e00b      	b.n	8008d74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d60:	2b12      	cmp	r3, #18
 8008d62:	d107      	bne.n	8008d74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 f9c5 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00d      	beq.n	8008da8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d9a:	d103      	bne.n	8008da4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e035      	b.n	8008e14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db0:	d108      	bne.n	8008dc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008db2:	897b      	ldrh	r3, [r7, #10]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008dc0:	611a      	str	r2, [r3, #16]
 8008dc2:	e01b      	b.n	8008dfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008dc4:	897b      	ldrh	r3, [r7, #10]
 8008dc6:	11db      	asrs	r3, r3, #7
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 0306 	and.w	r3, r3, #6
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f063 030f 	orn	r3, r3, #15
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	490e      	ldr	r1, [pc, #56]	; (8008e1c <I2C_MasterRequestWrite+0xfc>)
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 f9eb 	bl	80091be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e010      	b.n	8008e14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008df2:	897b      	ldrh	r3, [r7, #10]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	4907      	ldr	r1, [pc, #28]	; (8008e20 <I2C_MasterRequestWrite+0x100>)
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f9db 	bl	80091be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e000      	b.n	8008e14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	00010008 	.word	0x00010008
 8008e20:	00010002 	.word	0x00010002

08008e24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af02      	add	r7, sp, #8
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	460b      	mov	r3, r1
 8008e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d006      	beq.n	8008e5e <I2C_MasterRequestRead+0x3a>
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d003      	beq.n	8008e5e <I2C_MasterRequestRead+0x3a>
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e5c:	d108      	bne.n	8008e70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e00b      	b.n	8008e88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e74:	2b11      	cmp	r3, #17
 8008e76:	d107      	bne.n	8008e88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f93b 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00d      	beq.n	8008ebc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eae:	d103      	bne.n	8008eb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e079      	b.n	8008fb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ec4:	d108      	bne.n	8008ed8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ec6:	897b      	ldrh	r3, [r7, #10]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	611a      	str	r2, [r3, #16]
 8008ed6:	e05f      	b.n	8008f98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008ed8:	897b      	ldrh	r3, [r7, #10]
 8008eda:	11db      	asrs	r3, r3, #7
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	f003 0306 	and.w	r3, r3, #6
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f063 030f 	orn	r3, r3, #15
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	4930      	ldr	r1, [pc, #192]	; (8008fb8 <I2C_MasterRequestRead+0x194>)
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f961 	bl	80091be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e054      	b.n	8008fb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f06:	897b      	ldrh	r3, [r7, #10]
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	4929      	ldr	r1, [pc, #164]	; (8008fbc <I2C_MasterRequestRead+0x198>)
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f951 	bl	80091be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e044      	b.n	8008fb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	613b      	str	r3, [r7, #16]
 8008f3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f8d9 	bl	8009110 <I2C_WaitOnFlagUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00d      	beq.n	8008f80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f72:	d103      	bne.n	8008f7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e017      	b.n	8008fb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008f80:	897b      	ldrh	r3, [r7, #10]
 8008f82:	11db      	asrs	r3, r3, #7
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	f003 0306 	and.w	r3, r3, #6
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f063 030e 	orn	r3, r3, #14
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4907      	ldr	r1, [pc, #28]	; (8008fbc <I2C_MasterRequestRead+0x198>)
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f90d 	bl	80091be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	00010008 	.word	0x00010008
 8008fbc:	00010002 	.word	0x00010002

08008fc0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fda:	4b4b      	ldr	r3, [pc, #300]	; (8009108 <I2C_DMAAbort+0x148>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	08db      	lsrs	r3, r3, #3
 8008fe0:	4a4a      	ldr	r2, [pc, #296]	; (800910c <I2C_DMAAbort+0x14c>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	0a1a      	lsrs	r2, r3, #8
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	00da      	lsls	r2, r3, #3
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	f043 0220 	orr.w	r2, r3, #32
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009006:	e00a      	b.n	800901e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3b01      	subs	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901c:	d0ea      	beq.n	8008ff4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	2200      	movs	r2, #0
 800902c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	2200      	movs	r2, #0
 800903c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2200      	movs	r2, #0
 8009052:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009060:	2200      	movs	r2, #0
 8009062:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	2200      	movs	r2, #0
 8009072:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b60      	cmp	r3, #96	; 0x60
 800908e:	d10e      	bne.n	80090ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80090a6:	6978      	ldr	r0, [r7, #20]
 80090a8:	f7fe fccc 	bl	8007a44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090ac:	e027      	b.n	80090fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80090ae:	7cfb      	ldrb	r3, [r7, #19]
 80090b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090b4:	2b28      	cmp	r3, #40	; 0x28
 80090b6:	d117      	bne.n	80090e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2200      	movs	r2, #0
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2228      	movs	r2, #40	; 0x28
 80090e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80090e6:	e007      	b.n	80090f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80090f8:	6978      	ldr	r0, [r7, #20]
 80090fa:	f7fe fc99 	bl	8007a30 <HAL_I2C_ErrorCallback>
}
 80090fe:	bf00      	nop
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000054 	.word	0x20000054
 800910c:	14f8b589 	.word	0x14f8b589

08009110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009120:	e025      	b.n	800916e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d021      	beq.n	800916e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912a:	f7fc fea5 	bl	8005e78 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d116      	bne.n	800916e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e023      	b.n	80091b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	0c1b      	lsrs	r3, r3, #16
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	d10d      	bne.n	8009194 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	43da      	mvns	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4013      	ands	r3, r2
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	bf0c      	ite	eq
 800918a:	2301      	moveq	r3, #1
 800918c:	2300      	movne	r3, #0
 800918e:	b2db      	uxtb	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	e00c      	b.n	80091ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	43da      	mvns	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2300      	movne	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d0b6      	beq.n	8009122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091cc:	e051      	b.n	8009272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091dc:	d123      	bne.n	8009226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2220      	movs	r2, #32
 8009202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	f043 0204 	orr.w	r2, r3, #4
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e046      	b.n	80092b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d021      	beq.n	8009272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800922e:	f7fc fe23 	bl	8005e78 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	429a      	cmp	r2, r3
 800923c:	d302      	bcc.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d116      	bne.n	8009272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	f043 0220 	orr.w	r2, r3, #32
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e020      	b.n	80092b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	0c1b      	lsrs	r3, r3, #16
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10c      	bne.n	8009296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	43da      	mvns	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4013      	ands	r3, r2
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf14      	ite	ne
 800928e:	2301      	movne	r3, #1
 8009290:	2300      	moveq	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	e00b      	b.n	80092ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	43da      	mvns	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4013      	ands	r3, r2
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bf14      	ite	ne
 80092a8:	2301      	movne	r3, #1
 80092aa:	2300      	moveq	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d18d      	bne.n	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092c8:	e02d      	b.n	8009326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f900 	bl	80094d0 <I2C_IsAcknowledgeFailed>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e02d      	b.n	8009336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d021      	beq.n	8009326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092e2:	f7fc fdc9 	bl	8005e78 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d302      	bcc.n	80092f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d116      	bne.n	8009326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2220      	movs	r2, #32
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009312:	f043 0220 	orr.w	r2, r3, #32
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e007      	b.n	8009336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	2b80      	cmp	r3, #128	; 0x80
 8009332:	d1ca      	bne.n	80092ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800934a:	e02d      	b.n	80093a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f8bf 	bl	80094d0 <I2C_IsAcknowledgeFailed>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e02d      	b.n	80093b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d021      	beq.n	80093a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009364:	f7fc fd88 	bl	8005e78 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	429a      	cmp	r2, r3
 8009372:	d302      	bcc.n	800937a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d116      	bne.n	80093a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	f043 0220 	orr.w	r2, r3, #32
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e007      	b.n	80093b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d1ca      	bne.n	800934c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80093cc:	4b13      	ldr	r3, [pc, #76]	; (800941c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	08db      	lsrs	r3, r3, #3
 80093d2:	4a13      	ldr	r2, [pc, #76]	; (8009420 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80093d4:	fba2 2303 	umull	r2, r3, r2, r3
 80093d8:	0a1a      	lsrs	r2, r3, #8
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d107      	bne.n	80093fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f043 0220 	orr.w	r2, r3, #32
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e008      	b.n	8009410 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940c:	d0e9      	beq.n	80093e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	20000054 	.word	0x20000054
 8009420:	14f8b589 	.word	0x14f8b589

08009424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009430:	e042      	b.n	80094b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f003 0310 	and.w	r3, r3, #16
 800943c:	2b10      	cmp	r3, #16
 800943e:	d119      	bne.n	8009474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0210 	mvn.w	r2, #16
 8009448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2220      	movs	r2, #32
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e029      	b.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009474:	f7fc fd00 	bl	8005e78 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	429a      	cmp	r2, r3
 8009482:	d302      	bcc.n	800948a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d116      	bne.n	80094b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	f043 0220 	orr.w	r2, r3, #32
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e007      	b.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d1b5      	bne.n	8009432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e6:	d11b      	bne.n	8009520 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	f043 0204 	orr.w	r2, r3, #4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e000      	b.n	8009522 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800953e:	d103      	bne.n	8009548 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009546:	e007      	b.n	8009558 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009550:	d102      	bne.n	8009558 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2208      	movs	r2, #8
 8009556:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009566:	b08f      	sub	sp, #60	; 0x3c
 8009568:	af0a      	add	r7, sp, #40	; 0x28
 800956a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e10f      	b.n	8009796 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f00c fdff 	bl	8016194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2203      	movs	r2, #3
 800959a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f005 ffde 	bl	800f576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	687e      	ldr	r6, [r7, #4]
 80095c2:	466d      	mov	r5, sp
 80095c4:	f106 0410 	add.w	r4, r6, #16
 80095c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80095d8:	1d33      	adds	r3, r6, #4
 80095da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095dc:	6838      	ldr	r0, [r7, #0]
 80095de:	f005 feb5 	bl	800f34c <USB_CoreInit>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0d0      	b.n	8009796 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f005 ffcc 	bl	800f598 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]
 8009604:	e04a      	b.n	800969c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009606:	7bfa      	ldrb	r2, [r7, #15]
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	440b      	add	r3, r1
 8009614:	333d      	adds	r3, #61	; 0x3d
 8009616:	2201      	movs	r2, #1
 8009618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800961a:	7bfa      	ldrb	r2, [r7, #15]
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	333c      	adds	r3, #60	; 0x3c
 800962a:	7bfa      	ldrb	r2, [r7, #15]
 800962c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800962e:	7bfa      	ldrb	r2, [r7, #15]
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	b298      	uxth	r0, r3
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	3344      	adds	r3, #68	; 0x44
 8009642:	4602      	mov	r2, r0
 8009644:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009646:	7bfa      	ldrb	r2, [r7, #15]
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	3340      	adds	r3, #64	; 0x40
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800965a:	7bfa      	ldrb	r2, [r7, #15]
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	00db      	lsls	r3, r3, #3
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	3348      	adds	r3, #72	; 0x48
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800966e:	7bfa      	ldrb	r2, [r7, #15]
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	334c      	adds	r3, #76	; 0x4c
 800967e:	2200      	movs	r2, #0
 8009680:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009682:	7bfa      	ldrb	r2, [r7, #15]
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	4613      	mov	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	3354      	adds	r3, #84	; 0x54
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	3301      	adds	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
 800969c:	7bfa      	ldrb	r2, [r7, #15]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d3af      	bcc.n	8009606 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e044      	b.n	8009736 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80096ac:	7bfa      	ldrb	r2, [r7, #15]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4613      	mov	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	440b      	add	r3, r1
 80096ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096c2:	7bfa      	ldrb	r2, [r7, #15]
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	4613      	mov	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80096d4:	7bfa      	ldrb	r2, [r7, #15]
 80096d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096d8:	7bfa      	ldrb	r2, [r7, #15]
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4613      	mov	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096ee:	7bfa      	ldrb	r2, [r7, #15]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	00db      	lsls	r3, r3, #3
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009704:	7bfa      	ldrb	r2, [r7, #15]
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4613      	mov	r3, r2
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	440b      	add	r3, r1
 8009712:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800971a:	7bfa      	ldrb	r2, [r7, #15]
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	00db      	lsls	r3, r3, #3
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800972c:	2200      	movs	r2, #0
 800972e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	3301      	adds	r3, #1
 8009734:	73fb      	strb	r3, [r7, #15]
 8009736:	7bfa      	ldrb	r2, [r7, #15]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	429a      	cmp	r2, r3
 800973e:	d3b5      	bcc.n	80096ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	687e      	ldr	r6, [r7, #4]
 8009748:	466d      	mov	r5, sp
 800974a:	f106 0410 	add.w	r4, r6, #16
 800974e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009756:	e894 0003 	ldmia.w	r4, {r0, r1}
 800975a:	e885 0003 	stmia.w	r5, {r0, r1}
 800975e:	1d33      	adds	r3, r6, #4
 8009760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009762:	6838      	ldr	r0, [r7, #0]
 8009764:	f005 ff64 	bl	800f630 <USB_DevInit>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e00d      	b.n	8009796 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f007 f8b3 	bl	80108fa <USB_DevDisconnect>

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800979e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_PCD_Start+0x1c>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e020      	b.n	80097fc <HAL_PCD_Start+0x5e>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d109      	bne.n	80097de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d005      	beq.n	80097de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f005 feb6 	bl	800f554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f007 f863 	bl	80108b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b08d      	sub	sp, #52	; 0x34
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f007 f921 	bl	8010a62 <USB_GetMode>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	f040 848a 	bne.w	800a13c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4618      	mov	r0, r3
 800982e:	f007 f885 	bl	801093c <USB_ReadInterrupts>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8480 	beq.w	800a13a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f007 f872 	bl	801093c <USB_ReadInterrupts>
 8009858:	4603      	mov	r3, r0
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b02      	cmp	r3, #2
 8009860:	d107      	bne.n	8009872 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695a      	ldr	r2, [r3, #20]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f002 0202 	and.w	r2, r2, #2
 8009870:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f007 f860 	bl	801093c <USB_ReadInterrupts>
 800987c:	4603      	mov	r3, r0
 800987e:	f003 0310 	and.w	r3, r3, #16
 8009882:	2b10      	cmp	r3, #16
 8009884:	d161      	bne.n	800994a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0210 	bic.w	r2, r2, #16
 8009894:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f003 020f 	and.w	r2, r3, #15
 80098a2:	4613      	mov	r3, r2
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	4413      	add	r3, r2
 80098b2:	3304      	adds	r3, #4
 80098b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	0c5b      	lsrs	r3, r3, #17
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d124      	bne.n	800990c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80098c8:	4013      	ands	r3, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d035      	beq.n	800993a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	091b      	lsrs	r3, r3, #4
 80098d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098dc:	b29b      	uxth	r3, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	6a38      	ldr	r0, [r7, #32]
 80098e2:	f006 fe97 	bl	8010614 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	091b      	lsrs	r3, r3, #4
 80098ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098f2:	441a      	add	r2, r3
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	6a1a      	ldr	r2, [r3, #32]
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	091b      	lsrs	r3, r3, #4
 8009900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009904:	441a      	add	r2, r3
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
 800990a:	e016      	b.n	800993a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	0c5b      	lsrs	r3, r3, #17
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	2b06      	cmp	r3, #6
 8009916:	d110      	bne.n	800993a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800991e:	2208      	movs	r2, #8
 8009920:	4619      	mov	r1, r3
 8009922:	6a38      	ldr	r0, [r7, #32]
 8009924:	f006 fe76 	bl	8010614 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	6a1a      	ldr	r2, [r3, #32]
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	091b      	lsrs	r3, r3, #4
 8009930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009934:	441a      	add	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0210 	orr.w	r2, r2, #16
 8009948:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f006 fff4 	bl	801093c <USB_ReadInterrupts>
 8009954:	4603      	mov	r3, r0
 8009956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800995a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800995e:	f040 80a7 	bne.w	8009ab0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f006 fff9 	bl	8010962 <USB_ReadDevAllOutEpInterrupt>
 8009970:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009972:	e099      	b.n	8009aa8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 808e 	beq.w	8009a9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009986:	b2d2      	uxtb	r2, r2
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f007 f81d 	bl	80109ca <USB_ReadDevOutEPInterrupt>
 8009990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00c      	beq.n	80099b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a8:	461a      	mov	r2, r3
 80099aa:	2301      	movs	r3, #1
 80099ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80099ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fec3 	bl	800a73c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00c      	beq.n	80099da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	461a      	mov	r2, r3
 80099ce:	2308      	movs	r3, #8
 80099d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80099d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ff99 	bl	800a90c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d008      	beq.n	80099f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f0:	461a      	mov	r2, r3
 80099f2:	2310      	movs	r3, #16
 80099f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d030      	beq.n	8009a62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a08:	2b80      	cmp	r3, #128	; 0x80
 8009a0a:	d109      	bne.n	8009a20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a22:	4613      	mov	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4413      	add	r3, r2
 8009a32:	3304      	adds	r3, #4
 8009a34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	78db      	ldrb	r3, [r3, #3]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d108      	bne.n	8009a50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2200      	movs	r2, #0
 8009a42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f00c fca8 	bl	80163a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	2302      	movs	r3, #2
 8009a60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a78:	461a      	mov	r2, r3
 8009a7a:	2320      	movs	r3, #32
 8009a7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a94:	461a      	mov	r2, r3
 8009a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	085b      	lsrs	r3, r3, #1
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f47f af62 	bne.w	8009974 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f006 ff41 	bl	801093c <USB_ReadInterrupts>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac4:	f040 80db 	bne.w	8009c7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f006 ff62 	bl	8010996 <USB_ReadDevAllInEpInterrupt>
 8009ad2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009ad8:	e0cd      	b.n	8009c76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 80c2 	beq.w	8009c6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aec:	b2d2      	uxtb	r2, r2
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f006 ff88 	bl	8010a06 <USB_ReadDevInEPInterrupt>
 8009af6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d057      	beq.n	8009bb2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	2201      	movs	r2, #1
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	43db      	mvns	r3, r3
 8009b1c:	69f9      	ldr	r1, [r7, #28]
 8009b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b22:	4013      	ands	r3, r2
 8009b24:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	461a      	mov	r2, r3
 8009b34:	2301      	movs	r3, #1
 8009b36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d132      	bne.n	8009ba6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b44:	4613      	mov	r3, r2
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	440b      	add	r3, r1
 8009b4e:	334c      	adds	r3, #76	; 0x4c
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b56:	4613      	mov	r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4403      	add	r3, r0
 8009b60:	3348      	adds	r3, #72	; 0x48
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4419      	add	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4403      	add	r3, r0
 8009b74:	334c      	adds	r3, #76	; 0x4c
 8009b76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d113      	bne.n	8009ba6 <HAL_PCD_IRQHandler+0x3a2>
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b82:	4613      	mov	r3, r2
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	440b      	add	r3, r1
 8009b8c:	3354      	adds	r3, #84	; 0x54
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d108      	bne.n	8009ba6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	f006 ff8f 	bl	8010ac4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f00c fb72 	bl	8016296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	461a      	mov	r2, r3
 8009bca:	2308      	movs	r3, #8
 8009bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f003 0310 	and.w	r3, r3, #16
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d008      	beq.n	8009bea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	461a      	mov	r2, r3
 8009be6:	2310      	movs	r3, #16
 8009be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d008      	beq.n	8009c06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c00:	461a      	mov	r2, r3
 8009c02:	2340      	movs	r3, #64	; 0x40
 8009c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d023      	beq.n	8009c58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c12:	6a38      	ldr	r0, [r7, #32]
 8009c14:	f005 fe70 	bl	800f8f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	3338      	adds	r3, #56	; 0x38
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4413      	add	r3, r2
 8009c28:	3304      	adds	r3, #4
 8009c2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	78db      	ldrb	r3, [r3, #3]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d108      	bne.n	8009c46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2200      	movs	r2, #0
 8009c38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f00c fbbf 	bl	80163c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c52:	461a      	mov	r2, r3
 8009c54:	2302      	movs	r3, #2
 8009c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fcdb 	bl	800a620 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	085b      	lsrs	r3, r3, #1
 8009c74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f47f af2e 	bne.w	8009ada <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f006 fe5a 	bl	801093c <USB_ReadInterrupts>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c92:	d122      	bne.n	8009cda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	69fa      	ldr	r2, [r7, #28]
 8009c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ca2:	f023 0301 	bic.w	r3, r3, #1
 8009ca6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d108      	bne.n	8009cc4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009cba:	2100      	movs	r1, #0
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fec3 	bl	800aa48 <HAL_PCDEx_LPM_Callback>
 8009cc2:	e002      	b.n	8009cca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f00c fb5d 	bl	8016384 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695a      	ldr	r2, [r3, #20]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f006 fe2c 	bl	801093c <USB_ReadInterrupts>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cee:	d112      	bne.n	8009d16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d102      	bne.n	8009d06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f00c fb19 	bl	8016338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695a      	ldr	r2, [r3, #20]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009d14:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f006 fe0e 	bl	801093c <USB_ReadInterrupts>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2a:	f040 80b7 	bne.w	8009e9c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d3c:	f023 0301 	bic.w	r3, r3, #1
 8009d40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2110      	movs	r1, #16
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f005 fdd5 	bl	800f8f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d4e:	2300      	movs	r3, #0
 8009d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d52:	e046      	b.n	8009de2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d60:	461a      	mov	r2, r3
 8009d62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d94:	461a      	mov	r2, r3
 8009d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dac:	0151      	lsls	r1, r2, #5
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	440a      	add	r2, r1
 8009db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dcc:	0151      	lsls	r1, r2, #5
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	3301      	adds	r3, #1
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d3b3      	bcc.n	8009d54 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	69fa      	ldr	r2, [r7, #28]
 8009df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009dfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d016      	beq.n	8009e36 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e18:	f043 030b 	orr.w	r3, r3, #11
 8009e1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e28:	69fa      	ldr	r2, [r7, #28]
 8009e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e2e:	f043 030b 	orr.w	r3, r3, #11
 8009e32:	6453      	str	r3, [r2, #68]	; 0x44
 8009e34:	e015      	b.n	8009e62 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009e4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e5c:	f043 030b 	orr.w	r3, r3, #11
 8009e60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e86:	461a      	mov	r2, r3
 8009e88:	f006 fe1c 	bl	8010ac4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695a      	ldr	r2, [r3, #20]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f006 fd4b 	bl	801093c <USB_ReadInterrupts>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb0:	d124      	bne.n	8009efc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f006 fde1 	bl	8010a7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f005 fd96 	bl	800f9f2 <USB_GetDevSpeed>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	461a      	mov	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681c      	ldr	r4, [r3, #0]
 8009ed2:	f001 f9e9 	bl	800b2a8 <HAL_RCC_GetHCLKFreq>
 8009ed6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f005 fa95 	bl	800f410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f00c f9fd 	bl	80162e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695a      	ldr	r2, [r3, #20]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f006 fd1b 	bl	801093c <USB_ReadInterrupts>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d10a      	bne.n	8009f26 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f00c f9da 	bl	80162ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	695a      	ldr	r2, [r3, #20]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f002 0208 	and.w	r2, r2, #8
 8009f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f006 fd06 	bl	801093c <USB_ReadInterrupts>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f36:	2b80      	cmp	r3, #128	; 0x80
 8009f38:	d122      	bne.n	8009f80 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f46:	2301      	movs	r3, #1
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
 8009f4a:	e014      	b.n	8009f76 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f50:	4613      	mov	r3, r2
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	440b      	add	r3, r1
 8009f5a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d105      	bne.n	8009f70 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fb27 	bl	800a5be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	3301      	adds	r3, #1
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d3e5      	bcc.n	8009f4c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f006 fcd9 	bl	801093c <USB_ReadInterrupts>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f94:	d13b      	bne.n	800a00e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f96:	2301      	movs	r3, #1
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
 8009f9a:	e02b      	b.n	8009ff4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	4413      	add	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	440b      	add	r3, r1
 8009fba:	3340      	adds	r3, #64	; 0x40
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d115      	bne.n	8009fee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009fc2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	da12      	bge.n	8009fee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fcc:	4613      	mov	r3, r2
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	333f      	adds	r3, #63	; 0x3f
 8009fd8:	2201      	movs	r2, #1
 8009fda:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fae8 	bl	800a5be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d3ce      	bcc.n	8009f9c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695a      	ldr	r2, [r3, #20]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a00c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4618      	mov	r0, r3
 800a014:	f006 fc92 	bl	801093c <USB_ReadInterrupts>
 800a018:	4603      	mov	r3, r0
 800a01a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a01e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a022:	d155      	bne.n	800a0d0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a024:	2301      	movs	r3, #1
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
 800a028:	e045      	b.n	800a0b6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03e:	4613      	mov	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d12e      	bne.n	800a0b0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a052:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a054:	2b00      	cmp	r3, #0
 800a056:	da2b      	bge.n	800a0b0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a064:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a068:	429a      	cmp	r2, r3
 800a06a:	d121      	bne.n	800a0b0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a070:	4613      	mov	r3, r2
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a07e:	2201      	movs	r2, #1
 800a080:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10a      	bne.n	800a0b0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0ac:	6053      	str	r3, [r2, #4]
            break;
 800a0ae:	e007      	b.n	800a0c0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d3b4      	bcc.n	800a02a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	695a      	ldr	r2, [r3, #20]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a0ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f006 fc31 	bl	801093c <USB_ReadInterrupts>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e4:	d10a      	bne.n	800a0fc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f00c f97e 	bl	80163e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a0fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4618      	mov	r0, r3
 800a102:	f006 fc1b 	bl	801093c <USB_ReadInterrupts>
 800a106:	4603      	mov	r3, r0
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b04      	cmp	r3, #4
 800a10e:	d115      	bne.n	800a13c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f003 0304 	and.w	r3, r3, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f00c f96e 	bl	8016404 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6859      	ldr	r1, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	430a      	orrs	r2, r1
 800a136:	605a      	str	r2, [r3, #4]
 800a138:	e000      	b.n	800a13c <HAL_PCD_IRQHandler+0x938>
      return;
 800a13a:	bf00      	nop
    }
  }
}
 800a13c:	3734      	adds	r7, #52	; 0x34
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd90      	pop	{r4, r7, pc}

0800a142 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a154:	2b01      	cmp	r3, #1
 800a156:	d101      	bne.n	800a15c <HAL_PCD_SetAddress+0x1a>
 800a158:	2302      	movs	r3, #2
 800a15a:	e013      	b.n	800a184 <HAL_PCD_SetAddress+0x42>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	4611      	mov	r1, r2
 800a174:	4618      	mov	r0, r3
 800a176:	f006 fb79 	bl	801086c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	70fb      	strb	r3, [r7, #3]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	803b      	strh	r3, [r7, #0]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	da0f      	bge.n	800a1d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	3338      	adds	r3, #56	; 0x38
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	705a      	strb	r2, [r3, #1]
 800a1d0:	e00f      	b.n	800a1f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	f003 020f 	and.w	r2, r3, #15
 800a1d8:	4613      	mov	r3, r2
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a1fe:	883a      	ldrh	r2, [r7, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	78ba      	ldrb	r2, [r7, #2]
 800a208:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a21c:	78bb      	ldrb	r3, [r7, #2]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d102      	bne.n	800a228 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <HAL_PCD_EP_Open+0xaa>
 800a232:	2302      	movs	r3, #2
 800a234:	e00e      	b.n	800a254 <HAL_PCD_EP_Open+0xc8>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	4618      	mov	r0, r3
 800a246:	f005 fbf9 	bl	800fa3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a252:	7afb      	ldrb	r3, [r7, #11]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da0f      	bge.n	800a290 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	f003 020f 	and.w	r2, r3, #15
 800a276:	4613      	mov	r3, r2
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	3338      	adds	r3, #56	; 0x38
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	4413      	add	r3, r2
 800a284:	3304      	adds	r3, #4
 800a286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	705a      	strb	r2, [r3, #1]
 800a28e:	e00f      	b.n	800a2b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	f003 020f 	and.w	r2, r3, #15
 800a296:	4613      	mov	r3, r2
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_PCD_EP_Close+0x6e>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e00e      	b.n	800a2e8 <HAL_PCD_EP_Close+0x8c>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68f9      	ldr	r1, [r7, #12]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f005 fc37 	bl	800fb4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	f003 020f 	and.w	r2, r3, #15
 800a306:	4613      	mov	r3, r2
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	3304      	adds	r3, #4
 800a318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2200      	movs	r2, #0
 800a32a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2200      	movs	r2, #0
 800a330:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d102      	bne.n	800a34c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a34c:	7afb      	ldrb	r3, [r7, #11]
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	6979      	ldr	r1, [r7, #20]
 800a364:	f005 ff16 	bl	8010194 <USB_EP0StartXfer>
 800a368:	e008      	b.n	800a37c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	461a      	mov	r2, r3
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	f005 fcc4 	bl	800fd04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	f003 020f 	and.w	r2, r3, #15
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a3a8:	681b      	ldr	r3, [r3, #0]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b086      	sub	sp, #24
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3c6:	7afb      	ldrb	r3, [r7, #11]
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	3338      	adds	r3, #56	; 0x38
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4413      	add	r3, r2
 800a3da:	3304      	adds	r3, #4
 800a3dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d102      	bne.n	800a410 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a410:	7afb      	ldrb	r3, [r7, #11]
 800a412:	f003 030f 	and.w	r3, r3, #15
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	461a      	mov	r2, r3
 800a426:	6979      	ldr	r1, [r7, #20]
 800a428:	f005 feb4 	bl	8010194 <USB_EP0StartXfer>
 800a42c:	e008      	b.n	800a440 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6818      	ldr	r0, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	6979      	ldr	r1, [r7, #20]
 800a43c:	f005 fc62 	bl	800fd04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	f003 020f 	and.w	r2, r3, #15
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d901      	bls.n	800a468 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e050      	b.n	800a50a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	da0f      	bge.n	800a490 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	f003 020f 	and.w	r2, r3, #15
 800a476:	4613      	mov	r3, r2
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	4413      	add	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	3338      	adds	r3, #56	; 0x38
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	4413      	add	r3, r2
 800a484:	3304      	adds	r3, #4
 800a486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	705a      	strb	r2, [r3, #1]
 800a48e:	e00d      	b.n	800a4ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4613      	mov	r3, r2
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	f003 030f 	and.w	r3, r3, #15
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d101      	bne.n	800a4cc <HAL_PCD_EP_SetStall+0x82>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e01e      	b.n	800a50a <HAL_PCD_EP_SetStall+0xc0>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68f9      	ldr	r1, [r7, #12]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f006 f8f2 	bl	80106c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	f003 030f 	and.w	r3, r3, #15
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	b2d9      	uxtb	r1, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f006 fae2 	bl	8010ac4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	f003 020f 	and.w	r2, r3, #15
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d901      	bls.n	800a530 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e042      	b.n	800a5b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a534:	2b00      	cmp	r3, #0
 800a536:	da0f      	bge.n	800a558 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	f003 020f 	and.w	r2, r3, #15
 800a53e:	4613      	mov	r3, r2
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	3338      	adds	r3, #56	; 0x38
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	4413      	add	r3, r2
 800a54c:	3304      	adds	r3, #4
 800a54e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2201      	movs	r2, #1
 800a554:	705a      	strb	r2, [r3, #1]
 800a556:	e00f      	b.n	800a578 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	f003 020f 	and.w	r2, r3, #15
 800a55e:	4613      	mov	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	3304      	adds	r3, #4
 800a570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	b2da      	uxtb	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a590:	2b01      	cmp	r3, #1
 800a592:	d101      	bne.n	800a598 <HAL_PCD_EP_ClrStall+0x86>
 800a594:	2302      	movs	r3, #2
 800a596:	e00e      	b.n	800a5b6 <HAL_PCD_EP_ClrStall+0xa4>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f006 f8fa 	bl	80107a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a5ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	da0c      	bge.n	800a5ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	f003 020f 	and.w	r2, r3, #15
 800a5d8:	4613      	mov	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	3338      	adds	r3, #56	; 0x38
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	e00c      	b.n	800a606 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5ec:	78fb      	ldrb	r3, [r7, #3]
 800a5ee:	f003 020f 	and.w	r2, r3, #15
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	3304      	adds	r3, #4
 800a604:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f005 ff19 	bl	8010444 <USB_EPStopXfer>
 800a612:	4603      	mov	r3, r0
 800a614:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a616:	7afb      	ldrb	r3, [r7, #11]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	; 0x28
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	4613      	mov	r3, r2
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	4413      	add	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	3338      	adds	r3, #56	; 0x38
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	4413      	add	r3, r2
 800a644:	3304      	adds	r3, #4
 800a646:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a1a      	ldr	r2, [r3, #32]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	429a      	cmp	r2, r3
 800a652:	d901      	bls.n	800a658 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e06c      	b.n	800a732 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d902      	bls.n	800a674 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	3303      	adds	r3, #3
 800a678:	089b      	lsrs	r3, r3, #2
 800a67a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a67c:	e02b      	b.n	800a6d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	699a      	ldr	r2, [r3, #24]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	429a      	cmp	r2, r3
 800a692:	d902      	bls.n	800a69a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	3303      	adds	r3, #3
 800a69e:	089b      	lsrs	r3, r3, #2
 800a6a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6919      	ldr	r1, [r3, #16]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	6978      	ldr	r0, [r7, #20]
 800a6ba:	f005 ff6d 	bl	8010598 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	691a      	ldr	r2, [r3, #16]
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d809      	bhi.n	800a700 <PCD_WriteEmptyTxFifo+0xe0>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6a1a      	ldr	r2, [r3, #32]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d203      	bcs.n	800a700 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1be      	bne.n	800a67e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d811      	bhi.n	800a730 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f003 030f 	and.w	r3, r3, #15
 800a712:	2201      	movs	r2, #1
 800a714:	fa02 f303 	lsl.w	r3, r2, r3
 800a718:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	43db      	mvns	r3, r3
 800a726:	6939      	ldr	r1, [r7, #16]
 800a728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a72c:	4013      	ands	r3, r2
 800a72e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	333c      	adds	r3, #60	; 0x3c
 800a754:	3304      	adds	r3, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d17b      	bne.n	800a86a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f003 0308 	and.w	r3, r3, #8
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d015      	beq.n	800a7a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	4a61      	ldr	r2, [pc, #388]	; (800a904 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	f240 80b9 	bls.w	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 80b3 	beq.w	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a4:	6093      	str	r3, [r2, #8]
 800a7a6:	e0a7      	b.n	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	461a      	mov	r2, r3
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	6093      	str	r3, [r2, #8]
 800a7c4:	e098      	b.n	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f040 8093 	bne.w	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	4a4b      	ldr	r2, [pc, #300]	; (800a904 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d90f      	bls.n	800a7fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00a      	beq.n	800a7fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7f6:	6093      	str	r3, [r2, #8]
 800a7f8:	e07e      	b.n	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	4413      	add	r3, r2
 800a80c:	3304      	adds	r3, #4
 800a80e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	69da      	ldr	r2, [r3, #28]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	0159      	lsls	r1, r3, #5
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	440b      	add	r3, r1
 800a81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a826:	1ad2      	subs	r2, r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d114      	bne.n	800a85c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d109      	bne.n	800a84e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a844:	461a      	mov	r2, r3
 800a846:	2101      	movs	r1, #1
 800a848:	f006 f93c 	bl	8010ac4 <USB_EP0_OutStart>
 800a84c:	e006      	b.n	800a85c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	691a      	ldr	r2, [r3, #16]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	441a      	add	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f00b fcfc 	bl	8016260 <HAL_PCD_DataOutStageCallback>
 800a868:	e046      	b.n	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	4a26      	ldr	r2, [pc, #152]	; (800a908 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d124      	bne.n	800a8bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00a      	beq.n	800a892 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a888:	461a      	mov	r2, r3
 800a88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a88e:	6093      	str	r3, [r2, #8]
 800a890:	e032      	b.n	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d008      	beq.n	800a8ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	2320      	movs	r3, #32
 800a8ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f00b fcd3 	bl	8016260 <HAL_PCD_DataOutStageCallback>
 800a8ba:	e01d      	b.n	800a8f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d114      	bne.n	800a8ec <PCD_EP_OutXfrComplete_int+0x1b0>
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d108      	bne.n	800a8ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6818      	ldr	r0, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	f006 f8ec 	bl	8010ac4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f00b fcb4 	bl	8016260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	4f54300a 	.word	0x4f54300a
 800a908:	4f54310a 	.word	0x4f54310a

0800a90c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	333c      	adds	r3, #60	; 0x3c
 800a924:	3304      	adds	r3, #4
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4a15      	ldr	r2, [pc, #84]	; (800a994 <PCD_EP_OutSetupPacket_int+0x88>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d90e      	bls.n	800a960 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d009      	beq.n	800a960 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a958:	461a      	mov	r2, r3
 800a95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a95e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f00b fc6b 	bl	801623c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <PCD_EP_OutSetupPacket_int+0x88>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d90c      	bls.n	800a988 <PCD_EP_OutSetupPacket_int+0x7c>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d108      	bne.n	800a988 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a980:	461a      	mov	r2, r3
 800a982:	2101      	movs	r1, #1
 800a984:	f006 f89e 	bl	8010ac4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	4f54300a 	.word	0x4f54300a

0800a998 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a9b0:	78fb      	ldrb	r3, [r7, #3]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d107      	bne.n	800a9c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a9b6:	883b      	ldrh	r3, [r7, #0]
 800a9b8:	0419      	lsls	r1, r3, #16
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	629a      	str	r2, [r3, #40]	; 0x28
 800a9c4:	e028      	b.n	800aa18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9cc:	0c1b      	lsrs	r3, r3, #16
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
 800a9d8:	e00d      	b.n	800a9f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	3340      	adds	r3, #64	; 0x40
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	0c1b      	lsrs	r3, r3, #16
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	73fb      	strb	r3, [r7, #15]
 800a9f6:	7bfa      	ldrb	r2, [r7, #15]
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d3ec      	bcc.n	800a9da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aa00:	883b      	ldrh	r3, [r7, #0]
 800aa02:	0418      	lsls	r0, r3, #16
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6819      	ldr	r1, [r3, #0]
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	4302      	orrs	r2, r0
 800aa10:	3340      	adds	r3, #64	; 0x40
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	887a      	ldrh	r2, [r7, #2]
 800aa38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e267      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d075      	beq.n	800ab6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa7e:	4b88      	ldr	r3, [pc, #544]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f003 030c 	and.w	r3, r3, #12
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d00c      	beq.n	800aaa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa8a:	4b85      	ldr	r3, [pc, #532]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa92:	2b08      	cmp	r3, #8
 800aa94:	d112      	bne.n	800aabc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa96:	4b82      	ldr	r3, [pc, #520]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaa2:	d10b      	bne.n	800aabc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaa4:	4b7e      	ldr	r3, [pc, #504]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d05b      	beq.n	800ab68 <HAL_RCC_OscConfig+0x108>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d157      	bne.n	800ab68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e242      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac4:	d106      	bne.n	800aad4 <HAL_RCC_OscConfig+0x74>
 800aac6:	4b76      	ldr	r3, [pc, #472]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a75      	ldr	r2, [pc, #468]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aacc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	e01d      	b.n	800ab10 <HAL_RCC_OscConfig+0xb0>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aadc:	d10c      	bne.n	800aaf8 <HAL_RCC_OscConfig+0x98>
 800aade:	4b70      	ldr	r3, [pc, #448]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a6f      	ldr	r2, [pc, #444]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	4b6d      	ldr	r3, [pc, #436]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a6c      	ldr	r2, [pc, #432]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aaf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	e00b      	b.n	800ab10 <HAL_RCC_OscConfig+0xb0>
 800aaf8:	4b69      	ldr	r3, [pc, #420]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a68      	ldr	r2, [pc, #416]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800aafe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	4b66      	ldr	r3, [pc, #408]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a65      	ldr	r2, [pc, #404]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d013      	beq.n	800ab40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab18:	f7fb f9ae 	bl	8005e78 <HAL_GetTick>
 800ab1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab1e:	e008      	b.n	800ab32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab20:	f7fb f9aa 	bl	8005e78 <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b64      	cmp	r3, #100	; 0x64
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e207      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab32:	4b5b      	ldr	r3, [pc, #364]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0f0      	beq.n	800ab20 <HAL_RCC_OscConfig+0xc0>
 800ab3e:	e014      	b.n	800ab6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab40:	f7fb f99a 	bl	8005e78 <HAL_GetTick>
 800ab44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab46:	e008      	b.n	800ab5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab48:	f7fb f996 	bl	8005e78 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b64      	cmp	r3, #100	; 0x64
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e1f3      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab5a:	4b51      	ldr	r3, [pc, #324]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1f0      	bne.n	800ab48 <HAL_RCC_OscConfig+0xe8>
 800ab66:	e000      	b.n	800ab6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d063      	beq.n	800ac3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab76:	4b4a      	ldr	r3, [pc, #296]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f003 030c 	and.w	r3, r3, #12
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab82:	4b47      	ldr	r3, [pc, #284]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab8a:	2b08      	cmp	r3, #8
 800ab8c:	d11c      	bne.n	800abc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab8e:	4b44      	ldr	r3, [pc, #272]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d116      	bne.n	800abc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab9a:	4b41      	ldr	r3, [pc, #260]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d005      	beq.n	800abb2 <HAL_RCC_OscConfig+0x152>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d001      	beq.n	800abb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e1c7      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abb2:	4b3b      	ldr	r3, [pc, #236]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	4937      	ldr	r1, [pc, #220]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abc6:	e03a      	b.n	800ac3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d020      	beq.n	800ac12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800abd0:	4b34      	ldr	r3, [pc, #208]	; (800aca4 <HAL_RCC_OscConfig+0x244>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd6:	f7fb f94f 	bl	8005e78 <HAL_GetTick>
 800abda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abdc:	e008      	b.n	800abf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abde:	f7fb f94b 	bl	8005e78 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d901      	bls.n	800abf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	e1a8      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abf0:	4b2b      	ldr	r3, [pc, #172]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d0f0      	beq.n	800abde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abfc:	4b28      	ldr	r3, [pc, #160]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	00db      	lsls	r3, r3, #3
 800ac0a:	4925      	ldr	r1, [pc, #148]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	600b      	str	r3, [r1, #0]
 800ac10:	e015      	b.n	800ac3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac12:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac18:	f7fb f92e 	bl	8005e78 <HAL_GetTick>
 800ac1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac1e:	e008      	b.n	800ac32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac20:	f7fb f92a 	bl	8005e78 <HAL_GetTick>
 800ac24:	4602      	mov	r2, r0
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d901      	bls.n	800ac32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e187      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac32:	4b1b      	ldr	r3, [pc, #108]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f0      	bne.n	800ac20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0308 	and.w	r3, r3, #8
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d036      	beq.n	800acb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d016      	beq.n	800ac80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac52:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <HAL_RCC_OscConfig+0x248>)
 800ac54:	2201      	movs	r2, #1
 800ac56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac58:	f7fb f90e 	bl	8005e78 <HAL_GetTick>
 800ac5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac5e:	e008      	b.n	800ac72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac60:	f7fb f90a 	bl	8005e78 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d901      	bls.n	800ac72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e167      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac72:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <HAL_RCC_OscConfig+0x240>)
 800ac74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0f0      	beq.n	800ac60 <HAL_RCC_OscConfig+0x200>
 800ac7e:	e01b      	b.n	800acb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac80:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <HAL_RCC_OscConfig+0x248>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac86:	f7fb f8f7 	bl	8005e78 <HAL_GetTick>
 800ac8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac8c:	e00e      	b.n	800acac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac8e:	f7fb f8f3 	bl	8005e78 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d907      	bls.n	800acac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e150      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
 800aca0:	40023800 	.word	0x40023800
 800aca4:	42470000 	.word	0x42470000
 800aca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acac:	4b88      	ldr	r3, [pc, #544]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800acae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb0:	f003 0302 	and.w	r3, r3, #2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1ea      	bne.n	800ac8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 8097 	beq.w	800adf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acca:	4b81      	ldr	r3, [pc, #516]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10f      	bne.n	800acf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acd6:	2300      	movs	r3, #0
 800acd8:	60bb      	str	r3, [r7, #8]
 800acda:	4b7d      	ldr	r3, [pc, #500]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	4a7c      	ldr	r2, [pc, #496]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ace0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ace4:	6413      	str	r3, [r2, #64]	; 0x40
 800ace6:	4b7a      	ldr	r3, [pc, #488]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acee:	60bb      	str	r3, [r7, #8]
 800acf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800acf2:	2301      	movs	r3, #1
 800acf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acf6:	4b77      	ldr	r3, [pc, #476]	; (800aed4 <HAL_RCC_OscConfig+0x474>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d118      	bne.n	800ad34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad02:	4b74      	ldr	r3, [pc, #464]	; (800aed4 <HAL_RCC_OscConfig+0x474>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a73      	ldr	r2, [pc, #460]	; (800aed4 <HAL_RCC_OscConfig+0x474>)
 800ad08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad0e:	f7fb f8b3 	bl	8005e78 <HAL_GetTick>
 800ad12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad14:	e008      	b.n	800ad28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad16:	f7fb f8af 	bl	8005e78 <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d901      	bls.n	800ad28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e10c      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad28:	4b6a      	ldr	r3, [pc, #424]	; (800aed4 <HAL_RCC_OscConfig+0x474>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0f0      	beq.n	800ad16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d106      	bne.n	800ad4a <HAL_RCC_OscConfig+0x2ea>
 800ad3c:	4b64      	ldr	r3, [pc, #400]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad40:	4a63      	ldr	r2, [pc, #396]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	6713      	str	r3, [r2, #112]	; 0x70
 800ad48:	e01c      	b.n	800ad84 <HAL_RCC_OscConfig+0x324>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d10c      	bne.n	800ad6c <HAL_RCC_OscConfig+0x30c>
 800ad52:	4b5f      	ldr	r3, [pc, #380]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad56:	4a5e      	ldr	r2, [pc, #376]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad58:	f043 0304 	orr.w	r3, r3, #4
 800ad5c:	6713      	str	r3, [r2, #112]	; 0x70
 800ad5e:	4b5c      	ldr	r3, [pc, #368]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad62:	4a5b      	ldr	r2, [pc, #364]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad64:	f043 0301 	orr.w	r3, r3, #1
 800ad68:	6713      	str	r3, [r2, #112]	; 0x70
 800ad6a:	e00b      	b.n	800ad84 <HAL_RCC_OscConfig+0x324>
 800ad6c:	4b58      	ldr	r3, [pc, #352]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad70:	4a57      	ldr	r2, [pc, #348]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad72:	f023 0301 	bic.w	r3, r3, #1
 800ad76:	6713      	str	r3, [r2, #112]	; 0x70
 800ad78:	4b55      	ldr	r3, [pc, #340]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7c:	4a54      	ldr	r2, [pc, #336]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ad7e:	f023 0304 	bic.w	r3, r3, #4
 800ad82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d015      	beq.n	800adb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8c:	f7fb f874 	bl	8005e78 <HAL_GetTick>
 800ad90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad92:	e00a      	b.n	800adaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad94:	f7fb f870 	bl	8005e78 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d901      	bls.n	800adaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e0cb      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adaa:	4b49      	ldr	r3, [pc, #292]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800adac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0ee      	beq.n	800ad94 <HAL_RCC_OscConfig+0x334>
 800adb6:	e014      	b.n	800ade2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adb8:	f7fb f85e 	bl	8005e78 <HAL_GetTick>
 800adbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adbe:	e00a      	b.n	800add6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800adc0:	f7fb f85a 	bl	8005e78 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	f241 3288 	movw	r2, #5000	; 0x1388
 800adce:	4293      	cmp	r3, r2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e0b5      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800add6:	4b3e      	ldr	r3, [pc, #248]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1ee      	bne.n	800adc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d105      	bne.n	800adf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ade8:	4b39      	ldr	r3, [pc, #228]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	4a38      	ldr	r2, [pc, #224]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800adee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 80a1 	beq.w	800af40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800adfe:	4b34      	ldr	r3, [pc, #208]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 030c 	and.w	r3, r3, #12
 800ae06:	2b08      	cmp	r3, #8
 800ae08:	d05c      	beq.n	800aec4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d141      	bne.n	800ae96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae12:	4b31      	ldr	r3, [pc, #196]	; (800aed8 <HAL_RCC_OscConfig+0x478>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae18:	f7fb f82e 	bl	8005e78 <HAL_GetTick>
 800ae1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae1e:	e008      	b.n	800ae32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae20:	f7fb f82a 	bl	8005e78 <HAL_GetTick>
 800ae24:	4602      	mov	r2, r0
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d901      	bls.n	800ae32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e087      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae32:	4b27      	ldr	r3, [pc, #156]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1f0      	bne.n	800ae20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	69da      	ldr	r2, [r3, #28]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	431a      	orrs	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	019b      	lsls	r3, r3, #6
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae54:	085b      	lsrs	r3, r3, #1
 800ae56:	3b01      	subs	r3, #1
 800ae58:	041b      	lsls	r3, r3, #16
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	061b      	lsls	r3, r3, #24
 800ae62:	491b      	ldr	r1, [pc, #108]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae68:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <HAL_RCC_OscConfig+0x478>)
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae6e:	f7fb f803 	bl	8005e78 <HAL_GetTick>
 800ae72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae74:	e008      	b.n	800ae88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae76:	f7fa ffff 	bl	8005e78 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d901      	bls.n	800ae88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e05c      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0f0      	beq.n	800ae76 <HAL_RCC_OscConfig+0x416>
 800ae94:	e054      	b.n	800af40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae96:	4b10      	ldr	r3, [pc, #64]	; (800aed8 <HAL_RCC_OscConfig+0x478>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae9c:	f7fa ffec 	bl	8005e78 <HAL_GetTick>
 800aea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aea2:	e008      	b.n	800aeb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aea4:	f7fa ffe8 	bl	8005e78 <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d901      	bls.n	800aeb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e045      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <HAL_RCC_OscConfig+0x470>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f0      	bne.n	800aea4 <HAL_RCC_OscConfig+0x444>
 800aec2:	e03d      	b.n	800af40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d107      	bne.n	800aedc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e038      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
 800aed0:	40023800 	.word	0x40023800
 800aed4:	40007000 	.word	0x40007000
 800aed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aedc:	4b1b      	ldr	r3, [pc, #108]	; (800af4c <HAL_RCC_OscConfig+0x4ec>)
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d028      	beq.n	800af3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d121      	bne.n	800af3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af02:	429a      	cmp	r2, r3
 800af04:	d11a      	bne.n	800af3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800af0c:	4013      	ands	r3, r2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af14:	4293      	cmp	r3, r2
 800af16:	d111      	bne.n	800af3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	3b01      	subs	r3, #1
 800af26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af28:	429a      	cmp	r2, r3
 800af2a:	d107      	bne.n	800af3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af38:	429a      	cmp	r2, r3
 800af3a:	d001      	beq.n	800af40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e000      	b.n	800af42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	40023800 	.word	0x40023800

0800af50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e0cc      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af64:	4b68      	ldr	r3, [pc, #416]	; (800b108 <HAL_RCC_ClockConfig+0x1b8>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0307 	and.w	r3, r3, #7
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d90c      	bls.n	800af8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af72:	4b65      	ldr	r3, [pc, #404]	; (800b108 <HAL_RCC_ClockConfig+0x1b8>)
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	b2d2      	uxtb	r2, r2
 800af78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af7a:	4b63      	ldr	r3, [pc, #396]	; (800b108 <HAL_RCC_ClockConfig+0x1b8>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0307 	and.w	r3, r3, #7
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d001      	beq.n	800af8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e0b8      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 0302 	and.w	r3, r3, #2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d020      	beq.n	800afda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800afa4:	4b59      	ldr	r3, [pc, #356]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	4a58      	ldr	r2, [pc, #352]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800afaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800afae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0308 	and.w	r3, r3, #8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d005      	beq.n	800afc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800afbc:	4b53      	ldr	r3, [pc, #332]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	4a52      	ldr	r2, [pc, #328]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800afc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800afc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afc8:	4b50      	ldr	r3, [pc, #320]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	494d      	ldr	r1, [pc, #308]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d044      	beq.n	800b070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d107      	bne.n	800affe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afee:	4b47      	ldr	r3, [pc, #284]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d119      	bne.n	800b02e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e07f      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d003      	beq.n	800b00e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d107      	bne.n	800b01e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b00e:	4b3f      	ldr	r3, [pc, #252]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e06f      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b01e:	4b3b      	ldr	r3, [pc, #236]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e067      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b02e:	4b37      	ldr	r3, [pc, #220]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f023 0203 	bic.w	r2, r3, #3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	4934      	ldr	r1, [pc, #208]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b040:	f7fa ff1a 	bl	8005e78 <HAL_GetTick>
 800b044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b046:	e00a      	b.n	800b05e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b048:	f7fa ff16 	bl	8005e78 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	f241 3288 	movw	r2, #5000	; 0x1388
 800b056:	4293      	cmp	r3, r2
 800b058:	d901      	bls.n	800b05e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e04f      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b05e:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f003 020c 	and.w	r2, r3, #12
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d1eb      	bne.n	800b048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b070:	4b25      	ldr	r3, [pc, #148]	; (800b108 <HAL_RCC_ClockConfig+0x1b8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d20c      	bcs.n	800b098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b07e:	4b22      	ldr	r3, [pc, #136]	; (800b108 <HAL_RCC_ClockConfig+0x1b8>)
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b086:	4b20      	ldr	r3, [pc, #128]	; (800b108 <HAL_RCC_ClockConfig+0x1b8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d001      	beq.n	800b098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e032      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d008      	beq.n	800b0b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b0a4:	4b19      	ldr	r3, [pc, #100]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	4916      	ldr	r1, [pc, #88]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0308 	and.w	r3, r3, #8
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d009      	beq.n	800b0d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b0c2:	4b12      	ldr	r3, [pc, #72]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	490e      	ldr	r1, [pc, #56]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b0d6:	f000 f821 	bl	800b11c <HAL_RCC_GetSysClockFreq>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <HAL_RCC_ClockConfig+0x1bc>)
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	091b      	lsrs	r3, r3, #4
 800b0e2:	f003 030f 	and.w	r3, r3, #15
 800b0e6:	490a      	ldr	r1, [pc, #40]	; (800b110 <HAL_RCC_ClockConfig+0x1c0>)
 800b0e8:	5ccb      	ldrb	r3, [r1, r3]
 800b0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ee:	4a09      	ldr	r2, [pc, #36]	; (800b114 <HAL_RCC_ClockConfig+0x1c4>)
 800b0f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b0f2:	4b09      	ldr	r3, [pc, #36]	; (800b118 <HAL_RCC_ClockConfig+0x1c8>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fa fe7a 	bl	8005df0 <HAL_InitTick>

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	40023c00 	.word	0x40023c00
 800b10c:	40023800 	.word	0x40023800
 800b110:	0801c7dc 	.word	0x0801c7dc
 800b114:	20000054 	.word	0x20000054
 800b118:	2000005c 	.word	0x2000005c

0800b11c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b120:	b090      	sub	sp, #64	; 0x40
 800b122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	637b      	str	r3, [r7, #52]	; 0x34
 800b128:	2300      	movs	r3, #0
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12c:	2300      	movs	r3, #0
 800b12e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b134:	4b59      	ldr	r3, [pc, #356]	; (800b29c <HAL_RCC_GetSysClockFreq+0x180>)
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f003 030c 	and.w	r3, r3, #12
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d00d      	beq.n	800b15c <HAL_RCC_GetSysClockFreq+0x40>
 800b140:	2b08      	cmp	r3, #8
 800b142:	f200 80a1 	bhi.w	800b288 <HAL_RCC_GetSysClockFreq+0x16c>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <HAL_RCC_GetSysClockFreq+0x34>
 800b14a:	2b04      	cmp	r3, #4
 800b14c:	d003      	beq.n	800b156 <HAL_RCC_GetSysClockFreq+0x3a>
 800b14e:	e09b      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b150:	4b53      	ldr	r3, [pc, #332]	; (800b2a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800b152:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b154:	e09b      	b.n	800b28e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b156:	4b53      	ldr	r3, [pc, #332]	; (800b2a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b158:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b15a:	e098      	b.n	800b28e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b15c:	4b4f      	ldr	r3, [pc, #316]	; (800b29c <HAL_RCC_GetSysClockFreq+0x180>)
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b164:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b166:	4b4d      	ldr	r3, [pc, #308]	; (800b29c <HAL_RCC_GetSysClockFreq+0x180>)
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d028      	beq.n	800b1c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b172:	4b4a      	ldr	r3, [pc, #296]	; (800b29c <HAL_RCC_GetSysClockFreq+0x180>)
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	099b      	lsrs	r3, r3, #6
 800b178:	2200      	movs	r2, #0
 800b17a:	623b      	str	r3, [r7, #32]
 800b17c:	627a      	str	r2, [r7, #36]	; 0x24
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b184:	2100      	movs	r1, #0
 800b186:	4b47      	ldr	r3, [pc, #284]	; (800b2a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b188:	fb03 f201 	mul.w	r2, r3, r1
 800b18c:	2300      	movs	r3, #0
 800b18e:	fb00 f303 	mul.w	r3, r0, r3
 800b192:	4413      	add	r3, r2
 800b194:	4a43      	ldr	r2, [pc, #268]	; (800b2a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800b196:	fba0 1202 	umull	r1, r2, r0, r2
 800b19a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b19c:	460a      	mov	r2, r1
 800b19e:	62ba      	str	r2, [r7, #40]	; 0x28
 800b1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a2:	4413      	add	r3, r2
 800b1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	61bb      	str	r3, [r7, #24]
 800b1ac:	61fa      	str	r2, [r7, #28]
 800b1ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b1b6:	f7f5 fd67 	bl	8000c88 <__aeabi_uldivmod>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4613      	mov	r3, r2
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c2:	e053      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1c4:	4b35      	ldr	r3, [pc, #212]	; (800b29c <HAL_RCC_GetSysClockFreq+0x180>)
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	099b      	lsrs	r3, r3, #6
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	613b      	str	r3, [r7, #16]
 800b1ce:	617a      	str	r2, [r7, #20]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b1d6:	f04f 0b00 	mov.w	fp, #0
 800b1da:	4652      	mov	r2, sl
 800b1dc:	465b      	mov	r3, fp
 800b1de:	f04f 0000 	mov.w	r0, #0
 800b1e2:	f04f 0100 	mov.w	r1, #0
 800b1e6:	0159      	lsls	r1, r3, #5
 800b1e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b1ec:	0150      	lsls	r0, r2, #5
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	ebb2 080a 	subs.w	r8, r2, sl
 800b1f6:	eb63 090b 	sbc.w	r9, r3, fp
 800b1fa:	f04f 0200 	mov.w	r2, #0
 800b1fe:	f04f 0300 	mov.w	r3, #0
 800b202:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b206:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b20a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b20e:	ebb2 0408 	subs.w	r4, r2, r8
 800b212:	eb63 0509 	sbc.w	r5, r3, r9
 800b216:	f04f 0200 	mov.w	r2, #0
 800b21a:	f04f 0300 	mov.w	r3, #0
 800b21e:	00eb      	lsls	r3, r5, #3
 800b220:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b224:	00e2      	lsls	r2, r4, #3
 800b226:	4614      	mov	r4, r2
 800b228:	461d      	mov	r5, r3
 800b22a:	eb14 030a 	adds.w	r3, r4, sl
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	eb45 030b 	adc.w	r3, r5, fp
 800b234:	607b      	str	r3, [r7, #4]
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	f04f 0300 	mov.w	r3, #0
 800b23e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b242:	4629      	mov	r1, r5
 800b244:	028b      	lsls	r3, r1, #10
 800b246:	4621      	mov	r1, r4
 800b248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b24c:	4621      	mov	r1, r4
 800b24e:	028a      	lsls	r2, r1, #10
 800b250:	4610      	mov	r0, r2
 800b252:	4619      	mov	r1, r3
 800b254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b256:	2200      	movs	r2, #0
 800b258:	60bb      	str	r3, [r7, #8]
 800b25a:	60fa      	str	r2, [r7, #12]
 800b25c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b260:	f7f5 fd12 	bl	8000c88 <__aeabi_uldivmod>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4613      	mov	r3, r2
 800b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b26c:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <HAL_RCC_GetSysClockFreq+0x180>)
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	0c1b      	lsrs	r3, r3, #16
 800b272:	f003 0303 	and.w	r3, r3, #3
 800b276:	3301      	adds	r3, #1
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b27c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	fbb2 f3f3 	udiv	r3, r2, r3
 800b284:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b286:	e002      	b.n	800b28e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800b28a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b28c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b290:	4618      	mov	r0, r3
 800b292:	3740      	adds	r7, #64	; 0x40
 800b294:	46bd      	mov	sp, r7
 800b296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b29a:	bf00      	nop
 800b29c:	40023800 	.word	0x40023800
 800b2a0:	00f42400 	.word	0x00f42400
 800b2a4:	017d7840 	.word	0x017d7840

0800b2a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2ac:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <HAL_RCC_GetHCLKFreq+0x14>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20000054 	.word	0x20000054

0800b2c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b2c4:	f7ff fff0 	bl	800b2a8 <HAL_RCC_GetHCLKFreq>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	0a9b      	lsrs	r3, r3, #10
 800b2d0:	f003 0307 	and.w	r3, r3, #7
 800b2d4:	4903      	ldr	r1, [pc, #12]	; (800b2e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2d6:	5ccb      	ldrb	r3, [r1, r3]
 800b2d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	40023800 	.word	0x40023800
 800b2e4:	0801c7ec 	.word	0x0801c7ec

0800b2e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b2ec:	f7ff ffdc 	bl	800b2a8 <HAL_RCC_GetHCLKFreq>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	0b5b      	lsrs	r3, r3, #13
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	4903      	ldr	r1, [pc, #12]	; (800b30c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2fe:	5ccb      	ldrb	r3, [r1, r3]
 800b300:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b304:	4618      	mov	r0, r3
 800b306:	bd80      	pop	{r7, pc}
 800b308:	40023800 	.word	0x40023800
 800b30c:	0801c7ec 	.word	0x0801c7ec

0800b310 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e022      	b.n	800b368 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d105      	bne.n	800b33a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7f8 fb6b 	bl	8003a10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2203      	movs	r2, #3
 800b33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f814 	bl	800b370 <HAL_SD_InitCard>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e00a      	b.n	800b368 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b370:	b5b0      	push	{r4, r5, r7, lr}
 800b372:	b08e      	sub	sp, #56	; 0x38
 800b374:	af04      	add	r7, sp, #16
 800b376:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b378:	2300      	movs	r3, #0
 800b37a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b380:	2300      	movs	r3, #0
 800b382:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b384:	2300      	movs	r3, #0
 800b386:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b388:	2300      	movs	r3, #0
 800b38a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b38c:	2376      	movs	r3, #118	; 0x76
 800b38e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681d      	ldr	r5, [r3, #0]
 800b394:	466c      	mov	r4, sp
 800b396:	f107 0314 	add.w	r3, r7, #20
 800b39a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b39e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3a2:	f107 0308 	add.w	r3, r7, #8
 800b3a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f003 fa5b 	bl	800e864 <SDIO_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e04f      	b.n	800b460 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b3c0:	4b29      	ldr	r3, [pc, #164]	; (800b468 <HAL_SD_InitCard+0xf8>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f003 fa93 	bl	800e8f6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b3d0:	4b25      	ldr	r3, [pc, #148]	; (800b468 <HAL_SD_InitCard+0xf8>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b3d6:	2002      	movs	r0, #2
 800b3d8:	f7fa fd5a 	bl	8005e90 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f001 f805 	bl	800c3ec <SD_PowerON>
 800b3e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00b      	beq.n	800b402 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e02e      	b.n	800b460 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 ff24 	bl	800c250 <SD_InitCard>
 800b408:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00b      	beq.n	800b428 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	431a      	orrs	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e01b      	b.n	800b460 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b430:	4618      	mov	r0, r3
 800b432:	f003 faf2 	bl	800ea1a <SDMMC_CmdBlockLength>
 800b436:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00f      	beq.n	800b45e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <HAL_SD_InitCard+0xfc>)
 800b444:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e000      	b.n	800b460 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3728      	adds	r7, #40	; 0x28
 800b464:	46bd      	mov	sp, r7
 800b466:	bdb0      	pop	{r4, r5, r7, pc}
 800b468:	422580a0 	.word	0x422580a0
 800b46c:	004005ff 	.word	0x004005ff

0800b470 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08c      	sub	sp, #48	; 0x30
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d107      	bne.n	800b498 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e0c0      	b.n	800b61a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	f040 80b9 	bne.w	800b618 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	441a      	add	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d907      	bls.n	800b4ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e0a7      	b.n	800b61a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	6812      	ldr	r2, [r2, #0]
 800b4e4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800b4e8:	f043 0302 	orr.w	r3, r3, #2
 800b4ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f2:	4a4c      	ldr	r2, [pc, #304]	; (800b624 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800b4f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	4a4b      	ldr	r2, [pc, #300]	; (800b628 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b4fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b502:	2200      	movs	r2, #0
 800b504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50a:	2200      	movs	r2, #0
 800b50c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51e:	689a      	ldr	r2, [r3, #8]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3380      	adds	r3, #128	; 0x80
 800b534:	4619      	mov	r1, r3
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	025b      	lsls	r3, r3, #9
 800b53c:	089b      	lsrs	r3, r3, #2
 800b53e:	f7fa fefb 	bl	8006338 <HAL_DMA_Start_IT>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d017      	beq.n	800b578 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b556:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a33      	ldr	r2, [pc, #204]	; (800b62c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b55e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	e050      	b.n	800b61a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b578:	4b2d      	ldr	r3, [pc, #180]	; (800b630 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b582:	2b01      	cmp	r3, #1
 800b584:	d002      	beq.n	800b58c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	025b      	lsls	r3, r3, #9
 800b58a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b58c:	f04f 33ff 	mov.w	r3, #4294967295
 800b590:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	025b      	lsls	r3, r3, #9
 800b596:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b598:	2390      	movs	r3, #144	; 0x90
 800b59a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b59c:	2302      	movs	r3, #2
 800b59e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f107 0210 	add.w	r2, r7, #16
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f003 fa05 	bl	800e9c2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d90a      	bls.n	800b5d4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2282      	movs	r2, #130	; 0x82
 800b5c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f003 fa69 	bl	800eaa2 <SDMMC_CmdReadMultiBlock>
 800b5d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b5d2:	e009      	b.n	800b5e8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2281      	movs	r2, #129	; 0x81
 800b5d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f003 fa3c 	bl	800ea5e <SDMMC_CmdReadSingleBlock>
 800b5e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d012      	beq.n	800b614 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a0e      	ldr	r2, [pc, #56]	; (800b62c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	e002      	b.n	800b61a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	e000      	b.n	800b61a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800b618:	2302      	movs	r3, #2
  }
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3730      	adds	r7, #48	; 0x30
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	0800c05f 	.word	0x0800c05f
 800b628:	0800c0d1 	.word	0x0800c0d1
 800b62c:	004005ff 	.word	0x004005ff
 800b630:	4225858c 	.word	0x4225858c

0800b634 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08c      	sub	sp, #48	; 0x30
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d107      	bne.n	800b65c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b650:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e0c5      	b.n	800b7e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b01      	cmp	r3, #1
 800b666:	f040 80be 	bne.w	800b7e6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	441a      	add	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d907      	bls.n	800b68e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b682:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e0ac      	b.n	800b7e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2203      	movs	r2, #3
 800b692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2200      	movs	r2, #0
 800b69c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800b6ac:	f043 0302 	orr.w	r3, r3, #2
 800b6b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b6:	4a4e      	ldr	r2, [pc, #312]	; (800b7f0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800b6b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6be:	4a4d      	ldr	r2, [pc, #308]	; (800b7f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b6c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d002      	beq.n	800b6d8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	025b      	lsls	r3, r3, #9
 800b6d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d90a      	bls.n	800b6f4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	22a0      	movs	r2, #160	; 0xa0
 800b6e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f003 fa1d 	bl	800eb2a <SDMMC_CmdWriteMultiBlock>
 800b6f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b6f2:	e009      	b.n	800b708 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2290      	movs	r2, #144	; 0x90
 800b6f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b700:	4618      	mov	r0, r3
 800b702:	f003 f9f0 	bl	800eae6 <SDMMC_CmdWriteSingleBlock>
 800b706:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d012      	beq.n	800b734 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a39      	ldr	r2, [pc, #228]	; (800b7f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	431a      	orrs	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e059      	b.n	800b7e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b734:	4b31      	ldr	r3, [pc, #196]	; (800b7fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b736:	2201      	movs	r2, #1
 800b738:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73e:	2240      	movs	r2, #64	; 0x40
 800b740:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b752:	689a      	ldr	r2, [r3, #8]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	430a      	orrs	r2, r1
 800b75c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3380      	adds	r3, #128	; 0x80
 800b76a:	461a      	mov	r2, r3
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	025b      	lsls	r3, r3, #9
 800b770:	089b      	lsrs	r3, r3, #2
 800b772:	f7fa fde1 	bl	8006338 <HAL_DMA_Start_IT>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d01c      	beq.n	800b7b6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	6812      	ldr	r2, [r2, #0]
 800b786:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800b78a:	f023 0302 	bic.w	r3, r3, #2
 800b78e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a18      	ldr	r2, [pc, #96]	; (800b7f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e018      	b.n	800b7e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	025b      	lsls	r3, r3, #9
 800b7c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b7c2:	2390      	movs	r3, #144	; 0x90
 800b7c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f107 0210 	add.w	r2, r7, #16
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f003 f8f0 	bl	800e9c2 <SDIO_ConfigData>

      return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e000      	b.n	800b7e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800b7e6:	2302      	movs	r3, #2
  }
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3730      	adds	r7, #48	; 0x30
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	0800c035 	.word	0x0800c035
 800b7f4:	0800c0d1 	.word	0x0800c0d1
 800b7f8:	004005ff 	.word	0x004005ff
 800b7fc:	4225858c 	.word	0x4225858c

0800b800 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d008      	beq.n	800b82e <HAL_SD_IRQHandler+0x2e>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f003 0308 	and.w	r3, r3, #8
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 ffff 	bl	800c82a <SD_Read_IT>
 800b82c:	e165      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 808f 	beq.w	800b95c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b846:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	6812      	ldr	r2, [r2, #0]
 800b852:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800b856:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b85a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f022 0201 	bic.w	r2, r2, #1
 800b86a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f003 0308 	and.w	r3, r3, #8
 800b872:	2b00      	cmp	r3, #0
 800b874:	d039      	beq.n	800b8ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f003 0302 	and.w	r3, r3, #2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <HAL_SD_IRQHandler+0x8a>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	d011      	beq.n	800b8ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f003 f96e 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800b894:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d008      	beq.n	800b8ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f92f 	bl	800bb0c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d104      	bne.n	800b8da <HAL_SD_IRQHandler+0xda>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f003 0302 	and.w	r3, r3, #2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d003      	beq.n	800b8e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f005 fa2a 	bl	8010d34 <HAL_SD_RxCpltCallback>
 800b8e0:	e10b      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f005 fa1c 	bl	8010d20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b8e8:	e107      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8102 	beq.w	800bafa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d011      	beq.n	800b924 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f003 f933 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800b90a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d008      	beq.n	800b924 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	431a      	orrs	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f8f4 	bl	800bb0c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f040 80e5 	bne.w	800bafa <HAL_SD_IRQHandler+0x2fa>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 80df 	bne.w	800bafa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0208 	bic.w	r2, r2, #8
 800b94a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f005 f9e3 	bl	8010d20 <HAL_SD_TxCpltCallback>
}
 800b95a:	e0ce      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d008      	beq.n	800b97c <HAL_SD_IRQHandler+0x17c>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 ffa9 	bl	800c8cc <SD_Write_IT>
 800b97a:	e0be      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b982:	f240 233a 	movw	r3, #570	; 0x23a
 800b986:	4013      	ands	r3, r2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 80b6 	beq.w	800bafa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b994:	f003 0302 	and.w	r3, r3, #2
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d005      	beq.n	800b9a8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	f043 0202 	orr.w	r2, r3, #2
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d005      	beq.n	800b9c2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	f043 0208 	orr.w	r2, r3, #8
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d005      	beq.n	800b9dc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d4:	f043 0220 	orr.w	r2, r3, #32
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e2:	f003 0310 	and.w	r3, r3, #16
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ee:	f043 0210 	orr.w	r2, r3, #16
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d005      	beq.n	800ba10 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba08:	f043 0208 	orr.w	r2, r3, #8
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f240 723a 	movw	r2, #1850	; 0x73a
 800ba18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	6812      	ldr	r2, [r2, #0]
 800ba24:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ba28:	f023 0302 	bic.w	r3, r3, #2
 800ba2c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f003 f89c 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f855 	bl	800bb0c <HAL_SD_ErrorCallback>
}
 800ba62:	e04a      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d045      	beq.n	800bafa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d104      	bne.n	800ba82 <HAL_SD_IRQHandler+0x282>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f003 0320 	and.w	r3, r3, #32
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d011      	beq.n	800baa6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba86:	4a1f      	ldr	r2, [pc, #124]	; (800bb04 <HAL_SD_IRQHandler+0x304>)
 800ba88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fa fcaa 	bl	80063e8 <HAL_DMA_Abort_IT>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d02f      	beq.n	800bafa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 fb68 	bl	800c174 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800baa4:	e029      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <HAL_SD_IRQHandler+0x2ba>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d011      	beq.n	800bade <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	4a12      	ldr	r2, [pc, #72]	; (800bb08 <HAL_SD_IRQHandler+0x308>)
 800bac0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fa fc8e 	bl	80063e8 <HAL_DMA_Abort_IT>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d013      	beq.n	800bafa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad6:	4618      	mov	r0, r3
 800bad8:	f000 fb83 	bl	800c1e2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800badc:	e00d      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f005 f90a 	bl	8010d0c <HAL_SD_AbortCallback>
}
 800baf8:	e7ff      	b.n	800bafa <HAL_SD_IRQHandler+0x2fa>
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	0800c175 	.word	0x0800c175
 800bb08:	0800c1e3 	.word	0x0800c1e3

0800bb0c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb2e:	0f9b      	lsrs	r3, r3, #30
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb3a:	0e9b      	lsrs	r3, r3, #26
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb4c:	0e1b      	lsrs	r3, r3, #24
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	f003 0303 	and.w	r3, r3, #3
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb5e:	0c1b      	lsrs	r3, r3, #16
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb6a:	0a1b      	lsrs	r3, r3, #8
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb80:	0d1b      	lsrs	r3, r3, #20
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb8c:	0c1b      	lsrs	r3, r3, #16
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb9e:	0bdb      	lsrs	r3, r3, #15
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbb0:	0b9b      	lsrs	r3, r3, #14
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbc2:	0b5b      	lsrs	r3, r3, #13
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	f003 0301 	and.w	r3, r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbd4:	0b1b      	lsrs	r3, r3, #12
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d163      	bne.n	800bcb8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbf4:	009a      	lsls	r2, r3, #2
 800bbf6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bc00:	0f92      	lsrs	r2, r2, #30
 800bc02:	431a      	orrs	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0c:	0edb      	lsrs	r3, r3, #27
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0307 	and.w	r3, r3, #7
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc1e:	0e1b      	lsrs	r3, r3, #24
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc30:	0d5b      	lsrs	r3, r3, #21
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	f003 0307 	and.w	r3, r3, #7
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc42:	0c9b      	lsrs	r3, r3, #18
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	f003 0307 	and.w	r3, r3, #7
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc54:	0bdb      	lsrs	r3, r3, #15
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	f003 0307 	and.w	r3, r3, #7
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	7e1b      	ldrb	r3, [r3, #24]
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	f003 0307 	and.w	r3, r3, #7
 800bc76:	3302      	adds	r3, #2
 800bc78:	2201      	movs	r2, #1
 800bc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bc82:	fb03 f202 	mul.w	r2, r3, r2
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	7a1b      	ldrb	r3, [r3, #8]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	2201      	movs	r2, #1
 800bc96:	409a      	lsls	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bca4:	0a52      	lsrs	r2, r2, #9
 800bca6:	fb03 f202 	mul.w	r2, r3, r2
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcb4:	661a      	str	r2, [r3, #96]	; 0x60
 800bcb6:	e031      	b.n	800bd1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d11d      	bne.n	800bcfc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcc4:	041b      	lsls	r3, r3, #16
 800bcc6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	029a      	lsls	r2, r3, #10
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcf0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	661a      	str	r2, [r3, #96]	; 0x60
 800bcfa:	e00f      	b.n	800bd1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a58      	ldr	r2, [pc, #352]	; (800be64 <HAL_SD_GetCardCSD+0x344>)
 800bd02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e09d      	b.n	800be58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd20:	0b9b      	lsrs	r3, r3, #14
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd32:	09db      	lsrs	r3, r3, #7
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd54:	0fdb      	lsrs	r3, r3, #31
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd60:	0f5b      	lsrs	r3, r3, #29
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	f003 0303 	and.w	r3, r3, #3
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd72:	0e9b      	lsrs	r3, r3, #26
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd84:	0d9b      	lsrs	r3, r3, #22
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	f003 030f 	and.w	r3, r3, #15
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd96:	0d5b      	lsrs	r3, r3, #21
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb2:	0c1b      	lsrs	r3, r3, #16
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc6:	0bdb      	lsrs	r3, r3, #15
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdda:	0b9b      	lsrs	r3, r3, #14
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdee:	0b5b      	lsrs	r3, r3, #13
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be02:	0b1b      	lsrs	r3, r3, #12
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be16:	0a9b      	lsrs	r3, r3, #10
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2a:	0a1b      	lsrs	r3, r3, #8
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	b2da      	uxtb	r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be46:	b2da      	uxtb	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2201      	movs	r2, #1
 800be52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	004005ff 	.word	0x004005ff

0800be68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bec0:	b5b0      	push	{r4, r5, r7, lr}
 800bec2:	b08e      	sub	sp, #56	; 0x38
 800bec4:	af04      	add	r7, sp, #16
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2203      	movs	r2, #3
 800bed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bedc:	2b03      	cmp	r3, #3
 800bede:	d02e      	beq.n	800bf3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee6:	d106      	bne.n	800bef6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38
 800bef4:	e029      	b.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800befc:	d10a      	bne.n	800bf14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fb2a 	bl	800c558 <SD_WideBus_Enable>
 800bf04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	639a      	str	r2, [r3, #56]	; 0x38
 800bf12:	e01a      	b.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10a      	bne.n	800bf30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fb67 	bl	800c5ee <SD_WideBus_Disable>
 800bf20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	431a      	orrs	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	639a      	str	r2, [r3, #56]	; 0x38
 800bf2e:	e00c      	b.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	639a      	str	r2, [r3, #56]	; 0x38
 800bf3c:	e005      	b.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00b      	beq.n	800bf6a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a26      	ldr	r2, [pc, #152]	; (800bff0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf68:	e01f      	b.n	800bfaa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681d      	ldr	r5, [r3, #0]
 800bf90:	466c      	mov	r4, sp
 800bf92:	f107 0314 	add.w	r3, r7, #20
 800bf96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf9e:	f107 0308 	add.w	r3, r7, #8
 800bfa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f002 fc5d 	bl	800e864 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f002 fd31 	bl	800ea1a <SDMMC_CmdBlockLength>
 800bfb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00c      	beq.n	800bfda <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a0a      	ldr	r2, [pc, #40]	; (800bff0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800bfe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3728      	adds	r7, #40	; 0x28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bdb0      	pop	{r4, r5, r7, pc}
 800bfee:	bf00      	nop
 800bff0:	004005ff 	.word	0x004005ff

0800bff4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c000:	f107 030c 	add.w	r3, r7, #12
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fa7e 	bl	800c508 <SD_SendStatus>
 800c00c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d005      	beq.n	800c020 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	431a      	orrs	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	0a5b      	lsrs	r3, r3, #9
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c02a:	693b      	ldr	r3, [r7, #16]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c050:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c052:	bf00      	nop
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b084      	sub	sp, #16
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c070:	2b82      	cmp	r3, #130	; 0x82
 800c072:	d111      	bne.n	800c098 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4618      	mov	r0, r3
 800c07a:	f002 fd79 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800c07e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d008      	beq.n	800c098 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	431a      	orrs	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f7ff fd3a 	bl	800bb0c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f022 0208 	bic.w	r2, r2, #8
 800c0a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f240 523a 	movw	r2, #1338	; 0x53a
 800c0b0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f004 fe37 	bl	8010d34 <HAL_SD_RxCpltCallback>
#endif
}
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
	...

0800c0d0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0dc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7fa fb3c 	bl	800675c <HAL_DMA_GetError>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d03e      	beq.n	800c168 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d002      	beq.n	800c106 <SD_DMAError+0x36>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d12d      	bne.n	800c162 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a19      	ldr	r2, [pc, #100]	; (800c170 <SD_DMAError+0xa0>)
 800c10c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c11c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c12a:	6978      	ldr	r0, [r7, #20]
 800c12c:	f7ff ff62 	bl	800bff4 <HAL_SD_GetCardState>
 800c130:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b06      	cmp	r3, #6
 800c136:	d002      	beq.n	800c13e <SD_DMAError+0x6e>
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b05      	cmp	r3, #5
 800c13c:	d10a      	bne.n	800c154 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4618      	mov	r0, r3
 800c144:	f002 fd14 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800c148:	4602      	mov	r2, r0
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14e:	431a      	orrs	r2, r3
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	2200      	movs	r2, #0
 800c160:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c162:	6978      	ldr	r0, [r7, #20]
 800c164:	f7ff fcd2 	bl	800bb0c <HAL_SD_ErrorCallback>
#endif
  }
}
 800c168:	bf00      	nop
 800c16a:	3718      	adds	r7, #24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	004005ff 	.word	0x004005ff

0800c174 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f240 523a 	movw	r2, #1338	; 0x53a
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7ff ff31 	bl	800bff4 <HAL_SD_GetCardState>
 800c192:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b06      	cmp	r3, #6
 800c1a6:	d002      	beq.n	800c1ae <SD_DMATxAbort+0x3a>
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b05      	cmp	r3, #5
 800c1ac:	d10a      	bne.n	800c1c4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 fcdc 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f004 fd9d 	bl	8010d0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c1d2:	e002      	b.n	800c1da <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7ff fc99 	bl	800bb0c <HAL_SD_ErrorCallback>
}
 800c1da:	bf00      	nop
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f240 523a 	movw	r2, #1338	; 0x53a
 800c1f8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff fefa 	bl	800bff4 <HAL_SD_GetCardState>
 800c200:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b06      	cmp	r3, #6
 800c214:	d002      	beq.n	800c21c <SD_DMARxAbort+0x3a>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b05      	cmp	r3, #5
 800c21a:	d10a      	bne.n	800c232 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4618      	mov	r0, r3
 800c222:	f002 fca5 	bl	800eb70 <SDMMC_CmdStopTransfer>
 800c226:	4602      	mov	r2, r0
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22c:	431a      	orrs	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c236:	2b00      	cmp	r3, #0
 800c238:	d103      	bne.n	800c242 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f004 fd66 	bl	8010d0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c240:	e002      	b.n	800c248 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7ff fc62 	bl	800bb0c <HAL_SD_ErrorCallback>
}
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c250:	b5b0      	push	{r4, r5, r7, lr}
 800c252:	b094      	sub	sp, #80	; 0x50
 800c254:	af04      	add	r7, sp, #16
 800c256:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c258:	2301      	movs	r3, #1
 800c25a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f002 fb56 	bl	800e912 <SDIO_GetPowerState>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c26c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c270:	e0b8      	b.n	800c3e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c276:	2b03      	cmp	r3, #3
 800c278:	d02f      	beq.n	800c2da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4618      	mov	r0, r3
 800c280:	f002 fd80 	bl	800ed84 <SDMMC_CmdSendCID>
 800c284:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <SD_InitCard+0x40>
    {
      return errorstate;
 800c28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28e:	e0a9      	b.n	800c3e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2100      	movs	r1, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f002 fb80 	bl	800e99c <SDIO_GetResponse>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2104      	movs	r1, #4
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f002 fb77 	bl	800e99c <SDIO_GetResponse>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2108      	movs	r1, #8
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f002 fb6e 	bl	800e99c <SDIO_GetResponse>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	210c      	movs	r1, #12
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f002 fb65 	bl	800e99c <SDIO_GetResponse>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d00d      	beq.n	800c2fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f107 020e 	add.w	r2, r7, #14
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f002 fd86 	bl	800edfe <SDMMC_CmdSetRelAdd>
 800c2f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <SD_InitCard+0xae>
    {
      return errorstate;
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fc:	e072      	b.n	800c3e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c302:	2b03      	cmp	r3, #3
 800c304:	d036      	beq.n	800c374 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c306:	89fb      	ldrh	r3, [r7, #14]
 800c308:	461a      	mov	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c316:	041b      	lsls	r3, r3, #16
 800c318:	4619      	mov	r1, r3
 800c31a:	4610      	mov	r0, r2
 800c31c:	f002 fd50 	bl	800edc0 <SDMMC_CmdSendCSD>
 800c320:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <SD_InitCard+0xdc>
    {
      return errorstate;
 800c328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32a:	e05b      	b.n	800c3e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2100      	movs	r1, #0
 800c332:	4618      	mov	r0, r3
 800c334:	f002 fb32 	bl	800e99c <SDIO_GetResponse>
 800c338:	4602      	mov	r2, r0
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2104      	movs	r1, #4
 800c344:	4618      	mov	r0, r3
 800c346:	f002 fb29 	bl	800e99c <SDIO_GetResponse>
 800c34a:	4602      	mov	r2, r0
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2108      	movs	r1, #8
 800c356:	4618      	mov	r0, r3
 800c358:	f002 fb20 	bl	800e99c <SDIO_GetResponse>
 800c35c:	4602      	mov	r2, r0
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	210c      	movs	r1, #12
 800c368:	4618      	mov	r0, r3
 800c36a:	f002 fb17 	bl	800e99c <SDIO_GetResponse>
 800c36e:	4602      	mov	r2, r0
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2104      	movs	r1, #4
 800c37a:	4618      	mov	r0, r3
 800c37c:	f002 fb0e 	bl	800e99c <SDIO_GetResponse>
 800c380:	4603      	mov	r3, r0
 800c382:	0d1a      	lsrs	r2, r3, #20
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c388:	f107 0310 	add.w	r3, r7, #16
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7ff fbc6 	bl	800bb20 <HAL_SD_GetCardCSD>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c39a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c39e:	e021      	b.n	800c3e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a8:	041b      	lsls	r3, r3, #16
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	461c      	mov	r4, r3
 800c3ae:	4615      	mov	r5, r2
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	462b      	mov	r3, r5
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	f002 fbfd 	bl	800ebb4 <SDMMC_CmdSelDesel>
 800c3ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <SD_InitCard+0x176>
  {
    return errorstate;
 800c3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c4:	e00e      	b.n	800c3e4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681d      	ldr	r5, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	466c      	mov	r4, sp
 800c3ce:	f103 0210 	add.w	r2, r3, #16
 800c3d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c3d8:	3304      	adds	r3, #4
 800c3da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f002 fa41 	bl	800e864 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3740      	adds	r7, #64	; 0x40
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c3ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4618      	mov	r0, r3
 800c406:	f002 fbf8 	bl	800ebfa <SDMMC_CmdGoIdleState>
 800c40a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	e072      	b.n	800c4fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f002 fc0b 	bl	800ec36 <SDMMC_CmdOperCond>
 800c420:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00d      	beq.n	800c444 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f002 fbe1 	bl	800ebfa <SDMMC_CmdGoIdleState>
 800c438:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d004      	beq.n	800c44a <SD_PowerON+0x5e>
    {
      return errorstate;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	e05b      	b.n	800c4fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d137      	bne.n	800c4c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2100      	movs	r1, #0
 800c458:	4618      	mov	r0, r3
 800c45a:	f002 fc0b 	bl	800ec74 <SDMMC_CmdAppCommand>
 800c45e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d02d      	beq.n	800c4c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c466:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c46a:	e047      	b.n	800c4fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2100      	movs	r1, #0
 800c472:	4618      	mov	r0, r3
 800c474:	f002 fbfe 	bl	800ec74 <SDMMC_CmdAppCommand>
 800c478:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <SD_PowerON+0x98>
    {
      return errorstate;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	e03b      	b.n	800c4fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	491e      	ldr	r1, [pc, #120]	; (800c504 <SD_PowerON+0x118>)
 800c48a:	4618      	mov	r0, r3
 800c48c:	f002 fc14 	bl	800ecb8 <SDMMC_CmdAppOperCommand>
 800c490:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c49c:	e02e      	b.n	800c4fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f002 fa79 	bl	800e99c <SDIO_GetResponse>
 800c4aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	0fdb      	lsrs	r3, r3, #31
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d101      	bne.n	800c4b8 <SD_PowerON+0xcc>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e000      	b.n	800c4ba <SD_PowerON+0xce>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	613b      	str	r3, [r7, #16]

    count++;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d802      	bhi.n	800c4d2 <SD_PowerON+0xe6>
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0cc      	beq.n	800c46c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d902      	bls.n	800c4e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c4dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c4e0:	e00c      	b.n	800c4fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	645a      	str	r2, [r3, #68]	; 0x44
 800c4f2:	e002      	b.n	800c4fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	c1100000 	.word	0xc1100000

0800c508 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d102      	bne.n	800c51e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c51c:	e018      	b.n	800c550 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c526:	041b      	lsls	r3, r3, #16
 800c528:	4619      	mov	r1, r3
 800c52a:	4610      	mov	r0, r2
 800c52c:	f002 fc88 	bl	800ee40 <SDMMC_CmdSendStatus>
 800c530:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <SD_SendStatus+0x34>
  {
    return errorstate;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	e009      	b.n	800c550 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2100      	movs	r1, #0
 800c542:	4618      	mov	r0, r3
 800c544:	f002 fa2a 	bl	800e99c <SDIO_GetResponse>
 800c548:	4602      	mov	r2, r0
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c560:	2300      	movs	r3, #0
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	2300      	movs	r3, #0
 800c566:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f002 fa14 	bl	800e99c <SDIO_GetResponse>
 800c574:	4603      	mov	r3, r0
 800c576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c57a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c57e:	d102      	bne.n	800c586 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c584:	e02f      	b.n	800c5e6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c586:	f107 030c 	add.w	r3, r7, #12
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f879 	bl	800c684 <SD_FindSCR>
 800c592:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	e023      	b.n	800c5e6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01c      	beq.n	800c5e2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5b0:	041b      	lsls	r3, r3, #16
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f002 fb5d 	bl	800ec74 <SDMMC_CmdAppCommand>
 800c5ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	e00f      	b.n	800c5e6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2102      	movs	r1, #2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f002 fb96 	bl	800ecfe <SDMMC_CmdBusWidth>
 800c5d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	e003      	b.n	800c5e6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	e001      	b.n	800c5e6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c5e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b086      	sub	sp, #24
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f002 f9c9 	bl	800e99c <SDIO_GetResponse>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c614:	d102      	bne.n	800c61c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c61a:	e02f      	b.n	800c67c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c61c:	f107 030c 	add.w	r3, r7, #12
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f82e 	bl	800c684 <SD_FindSCR>
 800c628:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	e023      	b.n	800c67c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d01c      	beq.n	800c678 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c646:	041b      	lsls	r3, r3, #16
 800c648:	4619      	mov	r1, r3
 800c64a:	4610      	mov	r0, r2
 800c64c:	f002 fb12 	bl	800ec74 <SDMMC_CmdAppCommand>
 800c650:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	e00f      	b.n	800c67c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2100      	movs	r1, #0
 800c662:	4618      	mov	r0, r3
 800c664:	f002 fb4b 	bl	800ecfe <SDMMC_CmdBusWidth>
 800c668:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	e003      	b.n	800c67c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c674:	2300      	movs	r3, #0
 800c676:	e001      	b.n	800c67c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c678:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b08f      	sub	sp, #60	; 0x3c
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c68e:	f7f9 fbf3 	bl	8005e78 <HAL_GetTick>
 800c692:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c694:	2300      	movs	r3, #0
 800c696:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c698:	2300      	movs	r3, #0
 800c69a:	60bb      	str	r3, [r7, #8]
 800c69c:	2300      	movs	r3, #0
 800c69e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2108      	movs	r1, #8
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f002 f9b5 	bl	800ea1a <SDMMC_CmdBlockLength>
 800c6b0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <SD_FindSCR+0x38>
  {
    return errorstate;
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	e0b2      	b.n	800c822 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c4:	041b      	lsls	r3, r3, #16
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	f002 fad3 	bl	800ec74 <SDMMC_CmdAppCommand>
 800c6ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <SD_FindSCR+0x56>
  {
    return errorstate;
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	e0a3      	b.n	800c822 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c6da:	f04f 33ff 	mov.w	r3, #4294967295
 800c6de:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c6e4:	2330      	movs	r3, #48	; 0x30
 800c6e6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f107 0210 	add.w	r2, r7, #16
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	4618      	mov	r0, r3
 800c700:	f002 f95f 	bl	800e9c2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4618      	mov	r0, r3
 800c70a:	f002 fb1a 	bl	800ed42 <SDMMC_CmdSendSCR>
 800c70e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02a      	beq.n	800c76c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c718:	e083      	b.n	800c822 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00f      	beq.n	800c748 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6819      	ldr	r1, [r3, #0]
 800c72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	f107 0208 	add.w	r2, r7, #8
 800c734:	18d4      	adds	r4, r2, r3
 800c736:	4608      	mov	r0, r1
 800c738:	f002 f8bf 	bl	800e8ba <SDIO_ReadFIFO>
 800c73c:	4603      	mov	r3, r0
 800c73e:	6023      	str	r3, [r4, #0]
      index++;
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	3301      	adds	r3, #1
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
 800c746:	e006      	b.n	800c756 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d012      	beq.n	800c77c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c756:	f7f9 fb8f 	bl	8005e78 <HAL_GetTick>
 800c75a:	4602      	mov	r2, r0
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c764:	d102      	bne.n	800c76c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c766:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c76a:	e05a      	b.n	800c822 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c772:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c776:	2b00      	cmp	r3, #0
 800c778:	d0cf      	beq.n	800c71a <SD_FindSCR+0x96>
 800c77a:	e000      	b.n	800c77e <SD_FindSCR+0xfa>
      break;
 800c77c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c784:	f003 0308 	and.w	r3, r3, #8
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2208      	movs	r2, #8
 800c792:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c794:	2308      	movs	r3, #8
 800c796:	e044      	b.n	800c822 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79e:	f003 0302 	and.w	r3, r3, #2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e037      	b.n	800c822 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b8:	f003 0320 	and.w	r3, r3, #32
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d005      	beq.n	800c7cc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c7c8:	2320      	movs	r3, #32
 800c7ca:	e02a      	b.n	800c822 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f240 523a 	movw	r2, #1338	; 0x53a
 800c7d4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	061a      	lsls	r2, r3, #24
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c7e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	0a1b      	lsrs	r3, r3, #8
 800c7e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c7ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	0e1b      	lsrs	r3, r3, #24
 800c7f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	601a      	str	r2, [r3, #0]
    scr++;
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	061a      	lsls	r2, r3, #24
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c80a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	0a1b      	lsrs	r3, r3, #8
 800c810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c814:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	0e1b      	lsrs	r3, r3, #24
 800c81a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	373c      	adds	r7, #60	; 0x3c
 800c826:	46bd      	mov	sp, r7
 800c828:	bd90      	pop	{r4, r7, pc}

0800c82a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b086      	sub	sp, #24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c836:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d03f      	beq.n	800c8c4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
 800c848:	e033      	b.n	800c8b2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4618      	mov	r0, r3
 800c850:	f002 f833 	bl	800e8ba <SDIO_ReadFIFO>
 800c854:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3301      	adds	r3, #1
 800c862:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3b01      	subs	r3, #1
 800c868:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	0a1b      	lsrs	r3, r3, #8
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	3301      	adds	r3, #1
 800c878:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	0c1b      	lsrs	r3, r3, #16
 800c884:	b2da      	uxtb	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3b01      	subs	r3, #1
 800c894:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	0e1b      	lsrs	r3, r3, #24
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b07      	cmp	r3, #7
 800c8b6:	d9c8      	bls.n	800c84a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c8c4:	bf00      	nop
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8de:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d043      	beq.n	800c96e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	e037      	b.n	800c95c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	021a      	lsls	r2, r3, #8
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	4313      	orrs	r3, r2
 800c908:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	3b01      	subs	r3, #1
 800c914:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	041a      	lsls	r2, r3, #16
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	4313      	orrs	r3, r2
 800c920:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3301      	adds	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	061a      	lsls	r2, r3, #24
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	4313      	orrs	r3, r2
 800c938:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3301      	adds	r3, #1
 800c93e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	3b01      	subs	r3, #1
 800c944:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f107 0208 	add.w	r2, r7, #8
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f001 ffbf 	bl	800e8d4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	3301      	adds	r3, #1
 800c95a:	617b      	str	r3, [r7, #20]
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2b07      	cmp	r3, #7
 800c960:	d9c4      	bls.n	800c8ec <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c96e:	bf00      	nop
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	e07b      	b.n	800ca80 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d108      	bne.n	800c9a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c998:	d009      	beq.n	800c9ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	61da      	str	r2, [r3, #28]
 800c9a0:	e005      	b.n	800c9ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f7 f8d7 	bl	8003b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2202      	movs	r2, #2
 800c9d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca00:	431a      	orrs	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	431a      	orrs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca1e:	431a      	orrs	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca32:	ea42 0103 	orr.w	r1, r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	430a      	orrs	r2, r1
 800ca44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	0c1b      	lsrs	r3, r3, #16
 800ca4c:	f003 0104 	and.w	r1, r3, #4
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca54:	f003 0210 	and.w	r2, r3, #16
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	430a      	orrs	r2, r1
 800ca5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	69da      	ldr	r2, [r3, #28]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	603b      	str	r3, [r7, #0]
 800ca94:	4613      	mov	r3, r2
 800ca96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <HAL_SPI_Transmit+0x22>
 800caa6:	2302      	movs	r3, #2
 800caa8:	e126      	b.n	800ccf8 <HAL_SPI_Transmit+0x270>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cab2:	f7f9 f9e1 	bl	8005e78 <HAL_GetTick>
 800cab6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cab8:	88fb      	ldrh	r3, [r7, #6]
 800caba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d002      	beq.n	800cace <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cac8:	2302      	movs	r3, #2
 800caca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cacc:	e10b      	b.n	800cce6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <HAL_SPI_Transmit+0x52>
 800cad4:	88fb      	ldrh	r3, [r7, #6]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d102      	bne.n	800cae0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cade:	e102      	b.n	800cce6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2203      	movs	r2, #3
 800cae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	88fa      	ldrh	r2, [r7, #6]
 800caf8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	88fa      	ldrh	r2, [r7, #6]
 800cafe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb26:	d10f      	bne.n	800cb48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb52:	2b40      	cmp	r3, #64	; 0x40
 800cb54:	d007      	beq.n	800cb66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb6e:	d14b      	bne.n	800cc08 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <HAL_SPI_Transmit+0xf6>
 800cb78:	8afb      	ldrh	r3, [r7, #22]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d13e      	bne.n	800cbfc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	881a      	ldrh	r2, [r3, #0]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8e:	1c9a      	adds	r2, r3, #2
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cba2:	e02b      	b.n	800cbfc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f003 0302 	and.w	r3, r3, #2
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d112      	bne.n	800cbd8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb6:	881a      	ldrh	r2, [r3, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc2:	1c9a      	adds	r2, r3, #2
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	86da      	strh	r2, [r3, #54]	; 0x36
 800cbd6:	e011      	b.n	800cbfc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbd8:	f7f9 f94e 	bl	8005e78 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d803      	bhi.n	800cbf0 <HAL_SPI_Transmit+0x168>
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbee:	d102      	bne.n	800cbf6 <HAL_SPI_Transmit+0x16e>
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cbfa:	e074      	b.n	800cce6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1ce      	bne.n	800cba4 <HAL_SPI_Transmit+0x11c>
 800cc06:	e04c      	b.n	800cca2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <HAL_SPI_Transmit+0x18e>
 800cc10:	8afb      	ldrh	r3, [r7, #22]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d140      	bne.n	800cc98 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	330c      	adds	r3, #12
 800cc20:	7812      	ldrb	r2, [r2, #0]
 800cc22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3b01      	subs	r3, #1
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cc3c:	e02c      	b.n	800cc98 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d113      	bne.n	800cc74 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	330c      	adds	r3, #12
 800cc56:	7812      	ldrb	r2, [r2, #0]
 800cc58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	86da      	strh	r2, [r3, #54]	; 0x36
 800cc72:	e011      	b.n	800cc98 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc74:	f7f9 f900 	bl	8005e78 <HAL_GetTick>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d803      	bhi.n	800cc8c <HAL_SPI_Transmit+0x204>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d102      	bne.n	800cc92 <HAL_SPI_Transmit+0x20a>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d102      	bne.n	800cc98 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cc92:	2303      	movs	r3, #3
 800cc94:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cc96:	e026      	b.n	800cce6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1cd      	bne.n	800cc3e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f000 fe1c 	bl	800d8e4 <SPI_EndRxTxTransaction>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10a      	bne.n	800ccd6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	613b      	str	r3, [r7, #16]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	613b      	str	r3, [r7, #16]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	613b      	str	r3, [r7, #16]
 800ccd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	77fb      	strb	r3, [r7, #31]
 800cce2:	e000      	b.n	800cce6 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cce4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ccf6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3720      	adds	r7, #32
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b088      	sub	sp, #32
 800cd04:	af02      	add	r7, sp, #8
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd1c:	d112      	bne.n	800cd44 <HAL_SPI_Receive+0x44>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d10e      	bne.n	800cd44 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2204      	movs	r2, #4
 800cd2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cd2e:	88fa      	ldrh	r2, [r7, #6]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	68b9      	ldr	r1, [r7, #8]
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f000 f8f1 	bl	800cf22 <HAL_SPI_TransmitReceive>
 800cd40:	4603      	mov	r3, r0
 800cd42:	e0ea      	b.n	800cf1a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d101      	bne.n	800cd52 <HAL_SPI_Receive+0x52>
 800cd4e:	2302      	movs	r3, #2
 800cd50:	e0e3      	b.n	800cf1a <HAL_SPI_Receive+0x21a>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd5a:	f7f9 f88d 	bl	8005e78 <HAL_GetTick>
 800cd5e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d002      	beq.n	800cd72 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd70:	e0ca      	b.n	800cf08 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <HAL_SPI_Receive+0x7e>
 800cd78:	88fb      	ldrh	r3, [r7, #6]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d102      	bne.n	800cd84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd82:	e0c1      	b.n	800cf08 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2204      	movs	r2, #4
 800cd88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	88fa      	ldrh	r2, [r7, #6]
 800cd9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	88fa      	ldrh	r2, [r7, #6]
 800cda2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdca:	d10f      	bne.n	800cdec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cdea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf6:	2b40      	cmp	r3, #64	; 0x40
 800cdf8:	d007      	beq.n	800ce0a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d162      	bne.n	800ced8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ce12:	e02e      	b.n	800ce72 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f003 0301 	and.w	r3, r3, #1
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d115      	bne.n	800ce4e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f103 020c 	add.w	r2, r3, #12
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2e:	7812      	ldrb	r2, [r2, #0]
 800ce30:	b2d2      	uxtb	r2, r2
 800ce32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	3b01      	subs	r3, #1
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce4c:	e011      	b.n	800ce72 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce4e:	f7f9 f813 	bl	8005e78 <HAL_GetTick>
 800ce52:	4602      	mov	r2, r0
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	1ad3      	subs	r3, r2, r3
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d803      	bhi.n	800ce66 <HAL_SPI_Receive+0x166>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce64:	d102      	bne.n	800ce6c <HAL_SPI_Receive+0x16c>
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ce70:	e04a      	b.n	800cf08 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1cb      	bne.n	800ce14 <HAL_SPI_Receive+0x114>
 800ce7c:	e031      	b.n	800cee2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d113      	bne.n	800ceb4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68da      	ldr	r2, [r3, #12]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce96:	b292      	uxth	r2, r2
 800ce98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9e:	1c9a      	adds	r2, r3, #2
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ceb2:	e011      	b.n	800ced8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ceb4:	f7f8 ffe0 	bl	8005e78 <HAL_GetTick>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d803      	bhi.n	800cecc <HAL_SPI_Receive+0x1cc>
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceca:	d102      	bne.n	800ced2 <HAL_SPI_Receive+0x1d2>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ced2:	2303      	movs	r3, #3
 800ced4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ced6:	e017      	b.n	800cf08 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cedc:	b29b      	uxth	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1cd      	bne.n	800ce7e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f000 fc96 	bl	800d818 <SPI_EndRxTransaction>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2220      	movs	r2, #32
 800cef6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	75fb      	strb	r3, [r7, #23]
 800cf04:	e000      	b.n	800cf08 <HAL_SPI_Receive+0x208>
  }

error :
 800cf06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b08c      	sub	sp, #48	; 0x30
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	60f8      	str	r0, [r7, #12]
 800cf2a:	60b9      	str	r1, [r7, #8]
 800cf2c:	607a      	str	r2, [r7, #4]
 800cf2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cf30:	2301      	movs	r3, #1
 800cf32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d101      	bne.n	800cf48 <HAL_SPI_TransmitReceive+0x26>
 800cf44:	2302      	movs	r3, #2
 800cf46:	e18a      	b.n	800d25e <HAL_SPI_TransmitReceive+0x33c>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf50:	f7f8 ff92 	bl	8005e78 <HAL_GetTick>
 800cf54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cf66:	887b      	ldrh	r3, [r7, #2]
 800cf68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cf6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d00f      	beq.n	800cf92 <HAL_SPI_TransmitReceive+0x70>
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf78:	d107      	bne.n	800cf8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d103      	bne.n	800cf8a <HAL_SPI_TransmitReceive+0x68>
 800cf82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf86:	2b04      	cmp	r3, #4
 800cf88:	d003      	beq.n	800cf92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cf90:	e15b      	b.n	800d24a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d005      	beq.n	800cfa4 <HAL_SPI_TransmitReceive+0x82>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <HAL_SPI_TransmitReceive+0x82>
 800cf9e:	887b      	ldrh	r3, [r7, #2]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cfaa:	e14e      	b.n	800d24a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d003      	beq.n	800cfc0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2205      	movs	r2, #5
 800cfbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	887a      	ldrh	r2, [r7, #2]
 800cfd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	887a      	ldrh	r2, [r7, #2]
 800cfd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	887a      	ldrh	r2, [r7, #2]
 800cfe2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	887a      	ldrh	r2, [r7, #2]
 800cfe8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d000:	2b40      	cmp	r3, #64	; 0x40
 800d002:	d007      	beq.n	800d014 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d01c:	d178      	bne.n	800d110 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <HAL_SPI_TransmitReceive+0x10a>
 800d026:	8b7b      	ldrh	r3, [r7, #26]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d166      	bne.n	800d0fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d030:	881a      	ldrh	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	1c9a      	adds	r2, r3, #2
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d046:	b29b      	uxth	r3, r3
 800d048:	3b01      	subs	r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d050:	e053      	b.n	800d0fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f003 0302 	and.w	r3, r3, #2
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d11b      	bne.n	800d098 <HAL_SPI_TransmitReceive+0x176>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d064:	b29b      	uxth	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d016      	beq.n	800d098 <HAL_SPI_TransmitReceive+0x176>
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d113      	bne.n	800d098 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d074:	881a      	ldrh	r2, [r3, #0]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d080:	1c9a      	adds	r2, r3, #2
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	3b01      	subs	r3, #1
 800d08e:	b29a      	uxth	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d094:	2300      	movs	r3, #0
 800d096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d119      	bne.n	800d0da <HAL_SPI_TransmitReceive+0x1b8>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d014      	beq.n	800d0da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68da      	ldr	r2, [r3, #12]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	b292      	uxth	r2, r2
 800d0bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c2:	1c9a      	adds	r2, r3, #2
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d0da:	f7f8 fecd 	bl	8005e78 <HAL_GetTick>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d807      	bhi.n	800d0fa <HAL_SPI_TransmitReceive+0x1d8>
 800d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f0:	d003      	beq.n	800d0fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d0f2:	2303      	movs	r3, #3
 800d0f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d0f8:	e0a7      	b.n	800d24a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1a6      	bne.n	800d052 <HAL_SPI_TransmitReceive+0x130>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d108:	b29b      	uxth	r3, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1a1      	bne.n	800d052 <HAL_SPI_TransmitReceive+0x130>
 800d10e:	e07c      	b.n	800d20a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <HAL_SPI_TransmitReceive+0x1fc>
 800d118:	8b7b      	ldrh	r3, [r7, #26]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d16b      	bne.n	800d1f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	330c      	adds	r3, #12
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	3b01      	subs	r3, #1
 800d13e:	b29a      	uxth	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d144:	e057      	b.n	800d1f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b02      	cmp	r3, #2
 800d152:	d11c      	bne.n	800d18e <HAL_SPI_TransmitReceive+0x26c>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d158:	b29b      	uxth	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d017      	beq.n	800d18e <HAL_SPI_TransmitReceive+0x26c>
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	2b01      	cmp	r3, #1
 800d162:	d114      	bne.n	800d18e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	330c      	adds	r3, #12
 800d16e:	7812      	ldrb	r2, [r2, #0]
 800d170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d180:	b29b      	uxth	r3, r3
 800d182:	3b01      	subs	r3, #1
 800d184:	b29a      	uxth	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d18a:	2300      	movs	r3, #0
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d119      	bne.n	800d1d0 <HAL_SPI_TransmitReceive+0x2ae>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d014      	beq.n	800d1d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68da      	ldr	r2, [r3, #12]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d1d0:	f7f8 fe52 	bl	8005e78 <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d803      	bhi.n	800d1e8 <HAL_SPI_TransmitReceive+0x2c6>
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e6:	d102      	bne.n	800d1ee <HAL_SPI_TransmitReceive+0x2cc>
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d103      	bne.n	800d1f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d1f4:	e029      	b.n	800d24a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1a2      	bne.n	800d146 <HAL_SPI_TransmitReceive+0x224>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d204:	b29b      	uxth	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d19d      	bne.n	800d146 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d20c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f000 fb68 	bl	800d8e4 <SPI_EndRxTxTransaction>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d006      	beq.n	800d228 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2220      	movs	r2, #32
 800d224:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d226:	e010      	b.n	800d24a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10b      	bne.n	800d248 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d230:	2300      	movs	r3, #0
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	e000      	b.n	800d24a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d248:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d25a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3730      	adds	r7, #48	; 0x30
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	4613      	mov	r3, r2
 800d274:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d110      	bne.n	800d2a4 <HAL_SPI_Receive_IT+0x3c>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d28a:	d10b      	bne.n	800d2a4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2204      	movs	r2, #4
 800d290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800d294:	88fb      	ldrh	r3, [r7, #6]
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f000 f882 	bl	800d3a4 <HAL_SPI_TransmitReceive_IT>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	e076      	b.n	800d392 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d101      	bne.n	800d2b2 <HAL_SPI_Receive_IT+0x4a>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	e06f      	b.n	800d392 <HAL_SPI_Receive_IT+0x12a>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d002      	beq.n	800d2cc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d2ca:	e05d      	b.n	800d388 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d002      	beq.n	800d2d8 <HAL_SPI_Receive_IT+0x70>
 800d2d2:	88fb      	ldrh	r3, [r7, #6]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d102      	bne.n	800d2de <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d2dc:	e054      	b.n	800d388 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2204      	movs	r2, #4
 800d2e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	88fa      	ldrh	r2, [r7, #6]
 800d2f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	88fa      	ldrh	r2, [r7, #6]
 800d2fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4a1e      	ldr	r2, [pc, #120]	; (800d39c <HAL_SPI_Receive_IT+0x134>)
 800d322:	641a      	str	r2, [r3, #64]	; 0x40
 800d324:	e002      	b.n	800d32c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	4a1d      	ldr	r2, [pc, #116]	; (800d3a0 <HAL_SPI_Receive_IT+0x138>)
 800d32a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d334:	d10f      	bne.n	800d356 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d344:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d354:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d364:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d370:	2b40      	cmp	r3, #64	; 0x40
 800d372:	d008      	beq.n	800d386 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	e000      	b.n	800d388 <HAL_SPI_Receive_IT+0x120>
  }

error :
 800d386:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d390:	7dfb      	ldrb	r3, [r7, #23]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3718      	adds	r7, #24
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	0800d6c1 	.word	0x0800d6c1
 800d3a0:	0800d677 	.word	0x0800d677

0800d3a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d101      	bne.n	800d3c4 <HAL_SPI_TransmitReceive_IT+0x20>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e075      	b.n	800d4b0 <HAL_SPI_TransmitReceive_IT+0x10c>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d3d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d3da:	7dbb      	ldrb	r3, [r7, #22]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d00d      	beq.n	800d3fc <HAL_SPI_TransmitReceive_IT+0x58>
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3e6:	d106      	bne.n	800d3f6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <HAL_SPI_TransmitReceive_IT+0x52>
 800d3f0:	7dbb      	ldrb	r3, [r7, #22]
 800d3f2:	2b04      	cmp	r3, #4
 800d3f4:	d002      	beq.n	800d3fc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d3fa:	e054      	b.n	800d4a6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d005      	beq.n	800d40e <HAL_SPI_TransmitReceive_IT+0x6a>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <HAL_SPI_TransmitReceive_IT+0x6a>
 800d408:	887b      	ldrh	r3, [r7, #2]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d412:	e048      	b.n	800d4a6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b04      	cmp	r3, #4
 800d41e:	d003      	beq.n	800d428 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2205      	movs	r2, #5
 800d424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	887a      	ldrh	r2, [r7, #2]
 800d438:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	887a      	ldrh	r2, [r7, #2]
 800d43e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	887a      	ldrh	r2, [r7, #2]
 800d44a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	887a      	ldrh	r2, [r7, #2]
 800d450:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d006      	beq.n	800d468 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4a17      	ldr	r2, [pc, #92]	; (800d4bc <HAL_SPI_TransmitReceive_IT+0x118>)
 800d45e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	4a17      	ldr	r2, [pc, #92]	; (800d4c0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800d464:	645a      	str	r2, [r3, #68]	; 0x44
 800d466:	e005      	b.n	800d474 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	4a16      	ldr	r2, [pc, #88]	; (800d4c4 <HAL_SPI_TransmitReceive_IT+0x120>)
 800d46c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4a15      	ldr	r2, [pc, #84]	; (800d4c8 <HAL_SPI_TransmitReceive_IT+0x124>)
 800d472:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800d482:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48e:	2b40      	cmp	r3, #64	; 0x40
 800d490:	d008      	beq.n	800d4a4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	e000      	b.n	800d4a6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800d4a4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	371c      	adds	r7, #28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	0800d5b9 	.word	0x0800d5b9
 800d4c0:	0800d619 	.word	0x0800d619
 800d4c4:	0800d4f5 	.word	0x0800d4f5
 800d4c8:	0800d559 	.word	0x0800d559

0800d4cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f103 020c 	add.w	r2, r3, #12
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	7812      	ldrb	r2, [r2, #0]
 800d50a:	b2d2      	uxtb	r2, r2
 800d50c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	3b01      	subs	r3, #1
 800d520:	b29a      	uxth	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10f      	bne.n	800d550 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d53e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d544:	b29b      	uxth	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fa0c 	bl	800d968 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	330c      	adds	r3, #12
 800d56a:	7812      	ldrb	r2, [r2, #0]
 800d56c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d572:	1c5a      	adds	r2, r3, #1
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	3b01      	subs	r3, #1
 800d580:	b29a      	uxth	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10f      	bne.n	800d5b0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d59e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d102      	bne.n	800d5b0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f9dc 	bl	800d968 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d5b0:	bf00      	nop
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68da      	ldr	r2, [r3, #12]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ca:	b292      	uxth	r2, r2
 800d5cc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d2:	1c9a      	adds	r2, r3, #2
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10f      	bne.n	800d610 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5fe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d604:	b29b      	uxth	r3, r3
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f9ac 	bl	800d968 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d624:	881a      	ldrh	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d630:	1c9a      	adds	r2, r3, #2
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	3b01      	subs	r3, #1
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d648:	b29b      	uxth	r3, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10f      	bne.n	800d66e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d65c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d662:	b29b      	uxth	r3, r3
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 f97d 	bl	800d968 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f103 020c 	add.w	r2, r3, #12
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68a:	7812      	ldrb	r2, [r2, #0]
 800d68c:	b2d2      	uxtb	r2, r2
 800d68e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d102      	bne.n	800d6b8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f9cc 	bl	800da50 <SPI_CloseRx_ISR>
  }
}
 800d6b8:	bf00      	nop
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68da      	ldr	r2, [r3, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d2:	b292      	uxth	r2, r2
 800d6d4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	1c9a      	adds	r2, r3, #2
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d102      	bne.n	800d6fe <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f9a9 	bl	800da50 <SPI_CloseRx_ISR>
  }
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	603b      	str	r3, [r7, #0]
 800d714:	4613      	mov	r3, r2
 800d716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d718:	f7f8 fbae 	bl	8005e78 <HAL_GetTick>
 800d71c:	4602      	mov	r2, r0
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	1a9b      	subs	r3, r3, r2
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	4413      	add	r3, r2
 800d726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d728:	f7f8 fba6 	bl	8005e78 <HAL_GetTick>
 800d72c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d72e:	4b39      	ldr	r3, [pc, #228]	; (800d814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	015b      	lsls	r3, r3, #5
 800d734:	0d1b      	lsrs	r3, r3, #20
 800d736:	69fa      	ldr	r2, [r7, #28]
 800d738:	fb02 f303 	mul.w	r3, r2, r3
 800d73c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d73e:	e054      	b.n	800d7ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d746:	d050      	beq.n	800d7ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d748:	f7f8 fb96 	bl	8005e78 <HAL_GetTick>
 800d74c:	4602      	mov	r2, r0
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	429a      	cmp	r2, r3
 800d756:	d902      	bls.n	800d75e <SPI_WaitFlagStateUntilTimeout+0x56>
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d13d      	bne.n	800d7da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d76c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d776:	d111      	bne.n	800d79c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d780:	d004      	beq.n	800d78c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d78a:	d107      	bne.n	800d79c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d79a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7a4:	d10f      	bne.n	800d7c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e017      	b.n	800d80a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	bf0c      	ite	eq
 800d7fa:	2301      	moveq	r3, #1
 800d7fc:	2300      	movne	r3, #0
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	461a      	mov	r2, r3
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	429a      	cmp	r2, r3
 800d806:	d19b      	bne.n	800d740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	20000054 	.word	0x20000054

0800d818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af02      	add	r7, sp, #8
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d82c:	d111      	bne.n	800d852 <SPI_EndRxTransaction+0x3a>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d836:	d004      	beq.n	800d842 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d840:	d107      	bne.n	800d852 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d850:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d85a:	d12a      	bne.n	800d8b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d864:	d012      	beq.n	800d88c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2200      	movs	r2, #0
 800d86e:	2180      	movs	r1, #128	; 0x80
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7ff ff49 	bl	800d708 <SPI_WaitFlagStateUntilTimeout>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d02d      	beq.n	800d8d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d880:	f043 0220 	orr.w	r2, r3, #32
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d888:	2303      	movs	r3, #3
 800d88a:	e026      	b.n	800d8da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	2200      	movs	r2, #0
 800d894:	2101      	movs	r1, #1
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff ff36 	bl	800d708 <SPI_WaitFlagStateUntilTimeout>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d01a      	beq.n	800d8d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a6:	f043 0220 	orr.w	r2, r3, #32
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	e013      	b.n	800d8da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff ff23 	bl	800d708 <SPI_WaitFlagStateUntilTimeout>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d007      	beq.n	800d8d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8cc:	f043 0220 	orr.w	r2, r3, #32
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	e000      	b.n	800d8da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b088      	sub	sp, #32
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d8f0:	4b1b      	ldr	r3, [pc, #108]	; (800d960 <SPI_EndRxTxTransaction+0x7c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a1b      	ldr	r2, [pc, #108]	; (800d964 <SPI_EndRxTxTransaction+0x80>)
 800d8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8fa:	0d5b      	lsrs	r3, r3, #21
 800d8fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d900:	fb02 f303 	mul.w	r3, r2, r3
 800d904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d90e:	d112      	bne.n	800d936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	2200      	movs	r2, #0
 800d918:	2180      	movs	r1, #128	; 0x80
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f7ff fef4 	bl	800d708 <SPI_WaitFlagStateUntilTimeout>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d016      	beq.n	800d954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92a:	f043 0220 	orr.w	r2, r3, #32
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e00f      	b.n	800d956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00a      	beq.n	800d952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	3b01      	subs	r3, #1
 800d940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d94c:	2b80      	cmp	r3, #128	; 0x80
 800d94e:	d0f2      	beq.n	800d936 <SPI_EndRxTxTransaction+0x52>
 800d950:	e000      	b.n	800d954 <SPI_EndRxTxTransaction+0x70>
        break;
 800d952:	bf00      	nop
  }

  return HAL_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3718      	adds	r7, #24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000054 	.word	0x20000054
 800d964:	165e9f81 	.word	0x165e9f81

0800d968 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800d970:	4b35      	ldr	r3, [pc, #212]	; (800da48 <SPI_CloseRxTx_ISR+0xe0>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a35      	ldr	r2, [pc, #212]	; (800da4c <SPI_CloseRxTx_ISR+0xe4>)
 800d976:	fba2 2303 	umull	r2, r3, r2, r3
 800d97a:	0a5b      	lsrs	r3, r3, #9
 800d97c:	2264      	movs	r2, #100	; 0x64
 800d97e:	fb02 f303 	mul.w	r3, r2, r3
 800d982:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d984:	f7f8 fa78 	bl	8005e78 <HAL_GetTick>
 800d988:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 0220 	bic.w	r2, r2, #32
 800d998:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d106      	bne.n	800d9ae <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9a4:	f043 0220 	orr.w	r2, r3, #32
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9ac:	e009      	b.n	800d9c2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	f003 0302 	and.w	r3, r3, #2
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d0eb      	beq.n	800d99a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	2164      	movs	r1, #100	; 0x64
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7ff ff8c 	bl	800d8e4 <SPI_EndRxTxTransaction>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d005      	beq.n	800d9de <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d6:	f043 0220 	orr.w	r2, r3, #32
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10a      	bne.n	800d9fc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	60fb      	str	r3, [r7, #12]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	60fb      	str	r3, [r7, #12]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da00:	2b00      	cmp	r3, #0
 800da02:	d115      	bne.n	800da30 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	d107      	bne.n	800da20 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7f5 f95d 	bl	8002cd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800da1e:	e00e      	b.n	800da3e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff fd4f 	bl	800d4cc <HAL_SPI_TxRxCpltCallback>
}
 800da2e:	e006      	b.n	800da3e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7ff fd51 	bl	800d4e0 <HAL_SPI_ErrorCallback>
}
 800da3e:	bf00      	nop
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	20000054 	.word	0x20000054
 800da4c:	057619f1 	.word	0x057619f1

0800da50 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	685a      	ldr	r2, [r3, #4]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800da66:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800da68:	f7f8 fa06 	bl	8005e78 <HAL_GetTick>
 800da6c:	4603      	mov	r3, r0
 800da6e:	461a      	mov	r2, r3
 800da70:	2164      	movs	r1, #100	; 0x64
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fed0 	bl	800d818 <SPI_EndRxTransaction>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d005      	beq.n	800da8a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da82:	f043 0220 	orr.w	r2, r3, #32
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10a      	bne.n	800daa8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	60fb      	str	r3, [r7, #12]
 800daa6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7f5 f90d 	bl	8002cd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800dabe:	e002      	b.n	800dac6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7ff fd0d 	bl	800d4e0 <HAL_SPI_ErrorCallback>
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
	...

0800dad0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b085      	sub	sp, #20
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d001      	beq.n	800dae8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e046      	b.n	800db76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a23      	ldr	r2, [pc, #140]	; (800db84 <HAL_TIM_Base_Start+0xb4>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d022      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db02:	d01d      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a1f      	ldr	r2, [pc, #124]	; (800db88 <HAL_TIM_Base_Start+0xb8>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d018      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a1e      	ldr	r2, [pc, #120]	; (800db8c <HAL_TIM_Base_Start+0xbc>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d013      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a1c      	ldr	r2, [pc, #112]	; (800db90 <HAL_TIM_Base_Start+0xc0>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d00e      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a1b      	ldr	r2, [pc, #108]	; (800db94 <HAL_TIM_Base_Start+0xc4>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d009      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a19      	ldr	r2, [pc, #100]	; (800db98 <HAL_TIM_Base_Start+0xc8>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d004      	beq.n	800db40 <HAL_TIM_Base_Start+0x70>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a18      	ldr	r2, [pc, #96]	; (800db9c <HAL_TIM_Base_Start+0xcc>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d111      	bne.n	800db64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	f003 0307 	and.w	r3, r3, #7
 800db4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2b06      	cmp	r3, #6
 800db50:	d010      	beq.n	800db74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f042 0201 	orr.w	r2, r2, #1
 800db60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db62:	e007      	b.n	800db74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f042 0201 	orr.w	r2, r2, #1
 800db72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	40010000 	.word	0x40010000
 800db88:	40000400 	.word	0x40000400
 800db8c:	40000800 	.word	0x40000800
 800db90:	40000c00 	.word	0x40000c00
 800db94:	40010400 	.word	0x40010400
 800db98:	40014000 	.word	0x40014000
 800db9c:	40001800 	.word	0x40001800

0800dba0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e041      	b.n	800dc36 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7f6 f8aa 	bl	8003d20 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2202      	movs	r2, #2
 800dbd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	3304      	adds	r3, #4
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4610      	mov	r0, r2
 800dbe0:	f000 f8ca 	bl	800dd78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3708      	adds	r7, #8
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b086      	sub	sp, #24
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	60f8      	str	r0, [r7, #12]
 800dc46:	60b9      	str	r1, [r7, #8]
 800dc48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d101      	bne.n	800dc5c <HAL_TIM_IC_ConfigChannel+0x1e>
 800dc58:	2302      	movs	r3, #2
 800dc5a:	e088      	b.n	800dd6e <HAL_TIM_IC_ConfigChannel+0x130>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d11b      	bne.n	800dca2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6818      	ldr	r0, [r3, #0]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	6819      	ldr	r1, [r3, #0]
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	685a      	ldr	r2, [r3, #4]
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	f000 f91d 	bl	800deb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	699a      	ldr	r2, [r3, #24]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f022 020c 	bic.w	r2, r2, #12
 800dc8c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6999      	ldr	r1, [r3, #24]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	689a      	ldr	r2, [r3, #8]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	430a      	orrs	r2, r1
 800dc9e:	619a      	str	r2, [r3, #24]
 800dca0:	e060      	b.n	800dd64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b04      	cmp	r3, #4
 800dca6:	d11c      	bne.n	800dce2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	6819      	ldr	r1, [r3, #0]
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f000 f972 	bl	800dfa0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	699a      	ldr	r2, [r3, #24]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dcca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6999      	ldr	r1, [r3, #24]
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	021a      	lsls	r2, r3, #8
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	430a      	orrs	r2, r1
 800dcde:	619a      	str	r2, [r3, #24]
 800dce0:	e040      	b.n	800dd64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b08      	cmp	r3, #8
 800dce6:	d11b      	bne.n	800dd20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6818      	ldr	r0, [r3, #0]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	6819      	ldr	r1, [r3, #0]
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	f000 f98f 	bl	800e01a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	69da      	ldr	r2, [r3, #28]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f022 020c 	bic.w	r2, r2, #12
 800dd0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	69d9      	ldr	r1, [r3, #28]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	689a      	ldr	r2, [r3, #8]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	61da      	str	r2, [r3, #28]
 800dd1e:	e021      	b.n	800dd64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b0c      	cmp	r3, #12
 800dd24:	d11c      	bne.n	800dd60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	6819      	ldr	r1, [r3, #0]
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	f000 f9ac 	bl	800e092 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	69da      	ldr	r2, [r3, #28]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dd48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69d9      	ldr	r1, [r3, #28]
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	021a      	lsls	r2, r3, #8
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	430a      	orrs	r2, r1
 800dd5c:	61da      	str	r2, [r3, #28]
 800dd5e:	e001      	b.n	800dd64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800dd60:	2301      	movs	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a40      	ldr	r2, [pc, #256]	; (800de8c <TIM_Base_SetConfig+0x114>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d013      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd96:	d00f      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a3d      	ldr	r2, [pc, #244]	; (800de90 <TIM_Base_SetConfig+0x118>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00b      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a3c      	ldr	r2, [pc, #240]	; (800de94 <TIM_Base_SetConfig+0x11c>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d007      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a3b      	ldr	r2, [pc, #236]	; (800de98 <TIM_Base_SetConfig+0x120>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d003      	beq.n	800ddb8 <TIM_Base_SetConfig+0x40>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a3a      	ldr	r2, [pc, #232]	; (800de9c <TIM_Base_SetConfig+0x124>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d108      	bne.n	800ddca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a2f      	ldr	r2, [pc, #188]	; (800de8c <TIM_Base_SetConfig+0x114>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d02b      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddd8:	d027      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a2c      	ldr	r2, [pc, #176]	; (800de90 <TIM_Base_SetConfig+0x118>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d023      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4a2b      	ldr	r2, [pc, #172]	; (800de94 <TIM_Base_SetConfig+0x11c>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d01f      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4a2a      	ldr	r2, [pc, #168]	; (800de98 <TIM_Base_SetConfig+0x120>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d01b      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	4a29      	ldr	r2, [pc, #164]	; (800de9c <TIM_Base_SetConfig+0x124>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d017      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a28      	ldr	r2, [pc, #160]	; (800dea0 <TIM_Base_SetConfig+0x128>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d013      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a27      	ldr	r2, [pc, #156]	; (800dea4 <TIM_Base_SetConfig+0x12c>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d00f      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a26      	ldr	r2, [pc, #152]	; (800dea8 <TIM_Base_SetConfig+0x130>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d00b      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a25      	ldr	r2, [pc, #148]	; (800deac <TIM_Base_SetConfig+0x134>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d007      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a24      	ldr	r2, [pc, #144]	; (800deb0 <TIM_Base_SetConfig+0x138>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d003      	beq.n	800de2a <TIM_Base_SetConfig+0xb2>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a23      	ldr	r2, [pc, #140]	; (800deb4 <TIM_Base_SetConfig+0x13c>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d108      	bne.n	800de3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	4313      	orrs	r3, r2
 800de3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	4313      	orrs	r3, r2
 800de48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	689a      	ldr	r2, [r3, #8]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a0a      	ldr	r2, [pc, #40]	; (800de8c <TIM_Base_SetConfig+0x114>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d003      	beq.n	800de70 <TIM_Base_SetConfig+0xf8>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a0c      	ldr	r2, [pc, #48]	; (800de9c <TIM_Base_SetConfig+0x124>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d103      	bne.n	800de78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	691a      	ldr	r2, [r3, #16]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	615a      	str	r2, [r3, #20]
}
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	40010000 	.word	0x40010000
 800de90:	40000400 	.word	0x40000400
 800de94:	40000800 	.word	0x40000800
 800de98:	40000c00 	.word	0x40000c00
 800de9c:	40010400 	.word	0x40010400
 800dea0:	40014000 	.word	0x40014000
 800dea4:	40014400 	.word	0x40014400
 800dea8:	40014800 	.word	0x40014800
 800deac:	40001800 	.word	0x40001800
 800deb0:	40001c00 	.word	0x40001c00
 800deb4:	40002000 	.word	0x40002000

0800deb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800deb8:	b480      	push	{r7}
 800deba:	b087      	sub	sp, #28
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
 800dec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6a1b      	ldr	r3, [r3, #32]
 800deca:	f023 0201 	bic.w	r2, r3, #1
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	4a28      	ldr	r2, [pc, #160]	; (800df84 <TIM_TI1_SetConfig+0xcc>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d01b      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800deec:	d017      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4a25      	ldr	r2, [pc, #148]	; (800df88 <TIM_TI1_SetConfig+0xd0>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d013      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	4a24      	ldr	r2, [pc, #144]	; (800df8c <TIM_TI1_SetConfig+0xd4>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d00f      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4a23      	ldr	r2, [pc, #140]	; (800df90 <TIM_TI1_SetConfig+0xd8>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d00b      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	4a22      	ldr	r2, [pc, #136]	; (800df94 <TIM_TI1_SetConfig+0xdc>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d007      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	4a21      	ldr	r2, [pc, #132]	; (800df98 <TIM_TI1_SetConfig+0xe0>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d003      	beq.n	800df1e <TIM_TI1_SetConfig+0x66>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	4a20      	ldr	r2, [pc, #128]	; (800df9c <TIM_TI1_SetConfig+0xe4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d101      	bne.n	800df22 <TIM_TI1_SetConfig+0x6a>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <TIM_TI1_SetConfig+0x6c>
 800df22:	2300      	movs	r3, #0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d008      	beq.n	800df3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	f023 0303 	bic.w	r3, r3, #3
 800df2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800df30:	697a      	ldr	r2, [r7, #20]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4313      	orrs	r3, r2
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e003      	b.n	800df42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	f043 0301 	orr.w	r3, r3, #1
 800df40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	011b      	lsls	r3, r3, #4
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	4313      	orrs	r3, r2
 800df54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f023 030a 	bic.w	r3, r3, #10
 800df5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	f003 030a 	and.w	r3, r3, #10
 800df64:	693a      	ldr	r2, [r7, #16]
 800df66:	4313      	orrs	r3, r2
 800df68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	697a      	ldr	r2, [r7, #20]
 800df6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	621a      	str	r2, [r3, #32]
}
 800df76:	bf00      	nop
 800df78:	371c      	adds	r7, #28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	40010000 	.word	0x40010000
 800df88:	40000400 	.word	0x40000400
 800df8c:	40000800 	.word	0x40000800
 800df90:	40000c00 	.word	0x40000c00
 800df94:	40010400 	.word	0x40010400
 800df98:	40014000 	.word	0x40014000
 800df9c:	40001800 	.word	0x40001800

0800dfa0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b087      	sub	sp, #28
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6a1b      	ldr	r3, [r3, #32]
 800dfb2:	f023 0210 	bic.w	r2, r3, #16
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	021b      	lsls	r3, r3, #8
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dfde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	031b      	lsls	r3, r3, #12
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dff2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	011b      	lsls	r3, r3, #4
 800dff8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dffc:	693a      	ldr	r2, [r7, #16]
 800dffe:	4313      	orrs	r3, r2
 800e000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	697a      	ldr	r2, [r7, #20]
 800e006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	693a      	ldr	r2, [r7, #16]
 800e00c:	621a      	str	r2, [r3, #32]
}
 800e00e:	bf00      	nop
 800e010:	371c      	adds	r7, #28
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b087      	sub	sp, #28
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60f8      	str	r0, [r7, #12]
 800e022:	60b9      	str	r1, [r7, #8]
 800e024:	607a      	str	r2, [r7, #4]
 800e026:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6a1b      	ldr	r3, [r3, #32]
 800e02c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	69db      	ldr	r3, [r3, #28]
 800e038:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	f023 0303 	bic.w	r3, r3, #3
 800e046:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e048:	697a      	ldr	r2, [r7, #20]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e056:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	011b      	lsls	r3, r3, #4
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	697a      	ldr	r2, [r7, #20]
 800e060:	4313      	orrs	r3, r2
 800e062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e06a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	021b      	lsls	r3, r3, #8
 800e070:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	4313      	orrs	r3, r2
 800e078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	693a      	ldr	r2, [r7, #16]
 800e084:	621a      	str	r2, [r3, #32]
}
 800e086:	bf00      	nop
 800e088:	371c      	adds	r7, #28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e092:	b480      	push	{r7}
 800e094:	b087      	sub	sp, #28
 800e096:	af00      	add	r7, sp, #0
 800e098:	60f8      	str	r0, [r7, #12]
 800e09a:	60b9      	str	r1, [r7, #8]
 800e09c:	607a      	str	r2, [r7, #4]
 800e09e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	69db      	ldr	r3, [r3, #28]
 800e0b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	021b      	lsls	r3, r3, #8
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e0d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	031b      	lsls	r3, r3, #12
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e0e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	031b      	lsls	r3, r3, #12
 800e0ea:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e0ee:	693a      	ldr	r2, [r7, #16]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	693a      	ldr	r2, [r7, #16]
 800e0fe:	621a      	str	r2, [r3, #32]
}
 800e100:	bf00      	nop
 800e102:	371c      	adds	r7, #28
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d101      	bne.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e120:	2302      	movs	r3, #2
 800e122:	e05a      	b.n	800e1da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2202      	movs	r2, #2
 800e130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e14a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	4313      	orrs	r3, r2
 800e154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a21      	ldr	r2, [pc, #132]	; (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d022      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e170:	d01d      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a1d      	ldr	r2, [pc, #116]	; (800e1ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d018      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a1b      	ldr	r2, [pc, #108]	; (800e1f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d013      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a1a      	ldr	r2, [pc, #104]	; (800e1f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d00e      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a18      	ldr	r2, [pc, #96]	; (800e1f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d009      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a17      	ldr	r2, [pc, #92]	; (800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d004      	beq.n	800e1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a15      	ldr	r2, [pc, #84]	; (800e200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d10c      	bne.n	800e1c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	40010000 	.word	0x40010000
 800e1ec:	40000400 	.word	0x40000400
 800e1f0:	40000800 	.word	0x40000800
 800e1f4:	40000c00 	.word	0x40000c00
 800e1f8:	40010400 	.word	0x40010400
 800e1fc:	40014000 	.word	0x40014000
 800e200:	40001800 	.word	0x40001800

0800e204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d101      	bne.n	800e216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	e03f      	b.n	800e296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7f5 fdf4 	bl	8003e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2224      	movs	r2, #36	; 0x24
 800e234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68da      	ldr	r2, [r3, #12]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f897 	bl	800e37c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	691a      	ldr	r2, [r3, #16]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e25c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	695a      	ldr	r2, [r3, #20]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e26c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68da      	ldr	r2, [r3, #12]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e27c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2220      	movs	r2, #32
 800e288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2220      	movs	r2, #32
 800e290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	60b9      	str	r1, [r7, #8]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	d11d      	bne.n	800e2f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <HAL_UART_Receive_IT+0x26>
 800e2be:	88fb      	ldrh	r3, [r7, #6]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d101      	bne.n	800e2c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e016      	b.n	800e2f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d101      	bne.n	800e2d6 <HAL_UART_Receive_IT+0x38>
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	e00f      	b.n	800e2f6 <HAL_UART_Receive_IT+0x58>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e2e4:	88fb      	ldrh	r3, [r7, #6]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	68b9      	ldr	r1, [r7, #8]
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 f807 	bl	800e2fe <UART_Start_Receive_IT>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	e000      	b.n	800e2f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e2f4:	2302      	movs	r3, #2
  }
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2fe:	b480      	push	{r7}
 800e300:	b085      	sub	sp, #20
 800e302:	af00      	add	r7, sp, #0
 800e304:	60f8      	str	r0, [r7, #12]
 800e306:	60b9      	str	r1, [r7, #8]
 800e308:	4613      	mov	r3, r2
 800e30a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	88fa      	ldrh	r2, [r7, #6]
 800e316:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	88fa      	ldrh	r2, [r7, #6]
 800e31c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2222      	movs	r2, #34	; 0x22
 800e328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d007      	beq.n	800e34c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68da      	ldr	r2, [r3, #12]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e34a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	695a      	ldr	r2, [r3, #20]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f042 0201 	orr.w	r2, r2, #1
 800e35a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68da      	ldr	r2, [r3, #12]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f042 0220 	orr.w	r2, r2, #32
 800e36a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
	...

0800e37c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e37c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e380:	b0c0      	sub	sp, #256	; 0x100
 800e382:	af00      	add	r7, sp, #0
 800e384:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e398:	68d9      	ldr	r1, [r3, #12]
 800e39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	ea40 0301 	orr.w	r3, r0, r1
 800e3a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3aa:	689a      	ldr	r2, [r3, #8]
 800e3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	431a      	orrs	r2, r3
 800e3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	431a      	orrs	r2, r3
 800e3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e3c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e3d4:	f021 010c 	bic.w	r1, r1, #12
 800e3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e3e2:	430b      	orrs	r3, r1
 800e3e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3f6:	6999      	ldr	r1, [r3, #24]
 800e3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	ea40 0301 	orr.w	r3, r0, r1
 800e402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	4b8f      	ldr	r3, [pc, #572]	; (800e648 <UART_SetConfig+0x2cc>)
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d005      	beq.n	800e41c <UART_SetConfig+0xa0>
 800e410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	4b8d      	ldr	r3, [pc, #564]	; (800e64c <UART_SetConfig+0x2d0>)
 800e418:	429a      	cmp	r2, r3
 800e41a:	d104      	bne.n	800e426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e41c:	f7fc ff64 	bl	800b2e8 <HAL_RCC_GetPCLK2Freq>
 800e420:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e424:	e003      	b.n	800e42e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e426:	f7fc ff4b 	bl	800b2c0 <HAL_RCC_GetPCLK1Freq>
 800e42a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e432:	69db      	ldr	r3, [r3, #28]
 800e434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e438:	f040 810c 	bne.w	800e654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e43c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e440:	2200      	movs	r2, #0
 800e442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e446:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e44a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e44e:	4622      	mov	r2, r4
 800e450:	462b      	mov	r3, r5
 800e452:	1891      	adds	r1, r2, r2
 800e454:	65b9      	str	r1, [r7, #88]	; 0x58
 800e456:	415b      	adcs	r3, r3
 800e458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e45a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e45e:	4621      	mov	r1, r4
 800e460:	eb12 0801 	adds.w	r8, r2, r1
 800e464:	4629      	mov	r1, r5
 800e466:	eb43 0901 	adc.w	r9, r3, r1
 800e46a:	f04f 0200 	mov.w	r2, #0
 800e46e:	f04f 0300 	mov.w	r3, #0
 800e472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e47a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e47e:	4690      	mov	r8, r2
 800e480:	4699      	mov	r9, r3
 800e482:	4623      	mov	r3, r4
 800e484:	eb18 0303 	adds.w	r3, r8, r3
 800e488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e48c:	462b      	mov	r3, r5
 800e48e:	eb49 0303 	adc.w	r3, r9, r3
 800e492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e4a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e4a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	18db      	adds	r3, r3, r3
 800e4ae:	653b      	str	r3, [r7, #80]	; 0x50
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	eb42 0303 	adc.w	r3, r2, r3
 800e4b6:	657b      	str	r3, [r7, #84]	; 0x54
 800e4b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e4bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e4c0:	f7f2 fbe2 	bl	8000c88 <__aeabi_uldivmod>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	4b61      	ldr	r3, [pc, #388]	; (800e650 <UART_SetConfig+0x2d4>)
 800e4ca:	fba3 2302 	umull	r2, r3, r3, r2
 800e4ce:	095b      	lsrs	r3, r3, #5
 800e4d0:	011c      	lsls	r4, r3, #4
 800e4d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e4e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	1891      	adds	r1, r2, r2
 800e4ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800e4ec:	415b      	adcs	r3, r3
 800e4ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e4f4:	4641      	mov	r1, r8
 800e4f6:	eb12 0a01 	adds.w	sl, r2, r1
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	eb43 0b01 	adc.w	fp, r3, r1
 800e500:	f04f 0200 	mov.w	r2, #0
 800e504:	f04f 0300 	mov.w	r3, #0
 800e508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e50c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e514:	4692      	mov	sl, r2
 800e516:	469b      	mov	fp, r3
 800e518:	4643      	mov	r3, r8
 800e51a:	eb1a 0303 	adds.w	r3, sl, r3
 800e51e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e522:	464b      	mov	r3, r9
 800e524:	eb4b 0303 	adc.w	r3, fp, r3
 800e528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e52c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e538:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e53c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e540:	460b      	mov	r3, r1
 800e542:	18db      	adds	r3, r3, r3
 800e544:	643b      	str	r3, [r7, #64]	; 0x40
 800e546:	4613      	mov	r3, r2
 800e548:	eb42 0303 	adc.w	r3, r2, r3
 800e54c:	647b      	str	r3, [r7, #68]	; 0x44
 800e54e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e556:	f7f2 fb97 	bl	8000c88 <__aeabi_uldivmod>
 800e55a:	4602      	mov	r2, r0
 800e55c:	460b      	mov	r3, r1
 800e55e:	4611      	mov	r1, r2
 800e560:	4b3b      	ldr	r3, [pc, #236]	; (800e650 <UART_SetConfig+0x2d4>)
 800e562:	fba3 2301 	umull	r2, r3, r3, r1
 800e566:	095b      	lsrs	r3, r3, #5
 800e568:	2264      	movs	r2, #100	; 0x64
 800e56a:	fb02 f303 	mul.w	r3, r2, r3
 800e56e:	1acb      	subs	r3, r1, r3
 800e570:	00db      	lsls	r3, r3, #3
 800e572:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e576:	4b36      	ldr	r3, [pc, #216]	; (800e650 <UART_SetConfig+0x2d4>)
 800e578:	fba3 2302 	umull	r2, r3, r3, r2
 800e57c:	095b      	lsrs	r3, r3, #5
 800e57e:	005b      	lsls	r3, r3, #1
 800e580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e584:	441c      	add	r4, r3
 800e586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e58a:	2200      	movs	r2, #0
 800e58c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e590:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e598:	4642      	mov	r2, r8
 800e59a:	464b      	mov	r3, r9
 800e59c:	1891      	adds	r1, r2, r2
 800e59e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5a0:	415b      	adcs	r3, r3
 800e5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e5a8:	4641      	mov	r1, r8
 800e5aa:	1851      	adds	r1, r2, r1
 800e5ac:	6339      	str	r1, [r7, #48]	; 0x30
 800e5ae:	4649      	mov	r1, r9
 800e5b0:	414b      	adcs	r3, r1
 800e5b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e5b4:	f04f 0200 	mov.w	r2, #0
 800e5b8:	f04f 0300 	mov.w	r3, #0
 800e5bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e5c0:	4659      	mov	r1, fp
 800e5c2:	00cb      	lsls	r3, r1, #3
 800e5c4:	4651      	mov	r1, sl
 800e5c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e5ca:	4651      	mov	r1, sl
 800e5cc:	00ca      	lsls	r2, r1, #3
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	4642      	mov	r2, r8
 800e5d6:	189b      	adds	r3, r3, r2
 800e5d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e5dc:	464b      	mov	r3, r9
 800e5de:	460a      	mov	r2, r1
 800e5e0:	eb42 0303 	adc.w	r3, r2, r3
 800e5e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e5f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e5f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	18db      	adds	r3, r3, r3
 800e600:	62bb      	str	r3, [r7, #40]	; 0x28
 800e602:	4613      	mov	r3, r2
 800e604:	eb42 0303 	adc.w	r3, r2, r3
 800e608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e60a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e60e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e612:	f7f2 fb39 	bl	8000c88 <__aeabi_uldivmod>
 800e616:	4602      	mov	r2, r0
 800e618:	460b      	mov	r3, r1
 800e61a:	4b0d      	ldr	r3, [pc, #52]	; (800e650 <UART_SetConfig+0x2d4>)
 800e61c:	fba3 1302 	umull	r1, r3, r3, r2
 800e620:	095b      	lsrs	r3, r3, #5
 800e622:	2164      	movs	r1, #100	; 0x64
 800e624:	fb01 f303 	mul.w	r3, r1, r3
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	00db      	lsls	r3, r3, #3
 800e62c:	3332      	adds	r3, #50	; 0x32
 800e62e:	4a08      	ldr	r2, [pc, #32]	; (800e650 <UART_SetConfig+0x2d4>)
 800e630:	fba2 2303 	umull	r2, r3, r2, r3
 800e634:	095b      	lsrs	r3, r3, #5
 800e636:	f003 0207 	and.w	r2, r3, #7
 800e63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4422      	add	r2, r4
 800e642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e644:	e106      	b.n	800e854 <UART_SetConfig+0x4d8>
 800e646:	bf00      	nop
 800e648:	40011000 	.word	0x40011000
 800e64c:	40011400 	.word	0x40011400
 800e650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e658:	2200      	movs	r2, #0
 800e65a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e65e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e666:	4642      	mov	r2, r8
 800e668:	464b      	mov	r3, r9
 800e66a:	1891      	adds	r1, r2, r2
 800e66c:	6239      	str	r1, [r7, #32]
 800e66e:	415b      	adcs	r3, r3
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
 800e672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e676:	4641      	mov	r1, r8
 800e678:	1854      	adds	r4, r2, r1
 800e67a:	4649      	mov	r1, r9
 800e67c:	eb43 0501 	adc.w	r5, r3, r1
 800e680:	f04f 0200 	mov.w	r2, #0
 800e684:	f04f 0300 	mov.w	r3, #0
 800e688:	00eb      	lsls	r3, r5, #3
 800e68a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e68e:	00e2      	lsls	r2, r4, #3
 800e690:	4614      	mov	r4, r2
 800e692:	461d      	mov	r5, r3
 800e694:	4643      	mov	r3, r8
 800e696:	18e3      	adds	r3, r4, r3
 800e698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e69c:	464b      	mov	r3, r9
 800e69e:	eb45 0303 	adc.w	r3, r5, r3
 800e6a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e6a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e6b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e6b6:	f04f 0200 	mov.w	r2, #0
 800e6ba:	f04f 0300 	mov.w	r3, #0
 800e6be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	008b      	lsls	r3, r1, #2
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	008a      	lsls	r2, r1, #2
 800e6d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e6d4:	f7f2 fad8 	bl	8000c88 <__aeabi_uldivmod>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4b60      	ldr	r3, [pc, #384]	; (800e860 <UART_SetConfig+0x4e4>)
 800e6de:	fba3 2302 	umull	r2, r3, r3, r2
 800e6e2:	095b      	lsrs	r3, r3, #5
 800e6e4:	011c      	lsls	r4, r3, #4
 800e6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e6f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e6f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	1891      	adds	r1, r2, r2
 800e6fe:	61b9      	str	r1, [r7, #24]
 800e700:	415b      	adcs	r3, r3
 800e702:	61fb      	str	r3, [r7, #28]
 800e704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e708:	4641      	mov	r1, r8
 800e70a:	1851      	adds	r1, r2, r1
 800e70c:	6139      	str	r1, [r7, #16]
 800e70e:	4649      	mov	r1, r9
 800e710:	414b      	adcs	r3, r1
 800e712:	617b      	str	r3, [r7, #20]
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	f04f 0300 	mov.w	r3, #0
 800e71c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e720:	4659      	mov	r1, fp
 800e722:	00cb      	lsls	r3, r1, #3
 800e724:	4651      	mov	r1, sl
 800e726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e72a:	4651      	mov	r1, sl
 800e72c:	00ca      	lsls	r2, r1, #3
 800e72e:	4610      	mov	r0, r2
 800e730:	4619      	mov	r1, r3
 800e732:	4603      	mov	r3, r0
 800e734:	4642      	mov	r2, r8
 800e736:	189b      	adds	r3, r3, r2
 800e738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e73c:	464b      	mov	r3, r9
 800e73e:	460a      	mov	r2, r1
 800e740:	eb42 0303 	adc.w	r3, r2, r3
 800e744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	67bb      	str	r3, [r7, #120]	; 0x78
 800e752:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e754:	f04f 0200 	mov.w	r2, #0
 800e758:	f04f 0300 	mov.w	r3, #0
 800e75c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e760:	4649      	mov	r1, r9
 800e762:	008b      	lsls	r3, r1, #2
 800e764:	4641      	mov	r1, r8
 800e766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e76a:	4641      	mov	r1, r8
 800e76c:	008a      	lsls	r2, r1, #2
 800e76e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e772:	f7f2 fa89 	bl	8000c88 <__aeabi_uldivmod>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4611      	mov	r1, r2
 800e77c:	4b38      	ldr	r3, [pc, #224]	; (800e860 <UART_SetConfig+0x4e4>)
 800e77e:	fba3 2301 	umull	r2, r3, r3, r1
 800e782:	095b      	lsrs	r3, r3, #5
 800e784:	2264      	movs	r2, #100	; 0x64
 800e786:	fb02 f303 	mul.w	r3, r2, r3
 800e78a:	1acb      	subs	r3, r1, r3
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	3332      	adds	r3, #50	; 0x32
 800e790:	4a33      	ldr	r2, [pc, #204]	; (800e860 <UART_SetConfig+0x4e4>)
 800e792:	fba2 2303 	umull	r2, r3, r2, r3
 800e796:	095b      	lsrs	r3, r3, #5
 800e798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e79c:	441c      	add	r4, r3
 800e79e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	673b      	str	r3, [r7, #112]	; 0x70
 800e7a6:	677a      	str	r2, [r7, #116]	; 0x74
 800e7a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e7ac:	4642      	mov	r2, r8
 800e7ae:	464b      	mov	r3, r9
 800e7b0:	1891      	adds	r1, r2, r2
 800e7b2:	60b9      	str	r1, [r7, #8]
 800e7b4:	415b      	adcs	r3, r3
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e7bc:	4641      	mov	r1, r8
 800e7be:	1851      	adds	r1, r2, r1
 800e7c0:	6039      	str	r1, [r7, #0]
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	414b      	adcs	r3, r1
 800e7c6:	607b      	str	r3, [r7, #4]
 800e7c8:	f04f 0200 	mov.w	r2, #0
 800e7cc:	f04f 0300 	mov.w	r3, #0
 800e7d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e7d4:	4659      	mov	r1, fp
 800e7d6:	00cb      	lsls	r3, r1, #3
 800e7d8:	4651      	mov	r1, sl
 800e7da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e7de:	4651      	mov	r1, sl
 800e7e0:	00ca      	lsls	r2, r1, #3
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4642      	mov	r2, r8
 800e7ea:	189b      	adds	r3, r3, r2
 800e7ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7ee:	464b      	mov	r3, r9
 800e7f0:	460a      	mov	r2, r1
 800e7f2:	eb42 0303 	adc.w	r3, r2, r3
 800e7f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	663b      	str	r3, [r7, #96]	; 0x60
 800e802:	667a      	str	r2, [r7, #100]	; 0x64
 800e804:	f04f 0200 	mov.w	r2, #0
 800e808:	f04f 0300 	mov.w	r3, #0
 800e80c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e810:	4649      	mov	r1, r9
 800e812:	008b      	lsls	r3, r1, #2
 800e814:	4641      	mov	r1, r8
 800e816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e81a:	4641      	mov	r1, r8
 800e81c:	008a      	lsls	r2, r1, #2
 800e81e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e822:	f7f2 fa31 	bl	8000c88 <__aeabi_uldivmod>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4b0d      	ldr	r3, [pc, #52]	; (800e860 <UART_SetConfig+0x4e4>)
 800e82c:	fba3 1302 	umull	r1, r3, r3, r2
 800e830:	095b      	lsrs	r3, r3, #5
 800e832:	2164      	movs	r1, #100	; 0x64
 800e834:	fb01 f303 	mul.w	r3, r1, r3
 800e838:	1ad3      	subs	r3, r2, r3
 800e83a:	011b      	lsls	r3, r3, #4
 800e83c:	3332      	adds	r3, #50	; 0x32
 800e83e:	4a08      	ldr	r2, [pc, #32]	; (800e860 <UART_SetConfig+0x4e4>)
 800e840:	fba2 2303 	umull	r2, r3, r2, r3
 800e844:	095b      	lsrs	r3, r3, #5
 800e846:	f003 020f 	and.w	r2, r3, #15
 800e84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4422      	add	r2, r4
 800e852:	609a      	str	r2, [r3, #8]
}
 800e854:	bf00      	nop
 800e856:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e85a:	46bd      	mov	sp, r7
 800e85c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e860:	51eb851f 	.word	0x51eb851f

0800e864 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e864:	b084      	sub	sp, #16
 800e866:	b480      	push	{r7}
 800e868:	b085      	sub	sp, #20
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	f107 001c 	add.w	r0, r7, #28
 800e872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e87a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e87c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e87e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e882:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e886:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e88a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e88e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	4313      	orrs	r3, r2
 800e894:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e89e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	431a      	orrs	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	b004      	add	sp, #16
 800e8b8:	4770      	bx	lr

0800e8ba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	370c      	adds	r7, #12
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2203      	movs	r2, #3
 800e902:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	370c      	adds	r7, #12
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e912:	b480      	push	{r7}
 800e914:	b083      	sub	sp, #12
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 0303 	and.w	r3, r3, #3
}
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e92e:	b480      	push	{r7}
 800e930:	b085      	sub	sp, #20
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e94c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e952:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e958:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e968:	f023 030f 	bic.w	r3, r3, #15
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	431a      	orrs	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3714      	adds	r7, #20
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	b2db      	uxtb	r3, r3
}
 800e990:	4618      	mov	r0, r3
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	3314      	adds	r3, #20
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
}  
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3714      	adds	r7, #20
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	b085      	sub	sp, #20
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e9e8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e9ee:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e9f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea00:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	431a      	orrs	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ea0c:	2300      	movs	r3, #0

}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b088      	sub	sp, #32
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
 800ea22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ea28:	2310      	movs	r3, #16
 800ea2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea2c:	2340      	movs	r3, #64	; 0x40
 800ea2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea30:	2300      	movs	r3, #0
 800ea32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea3a:	f107 0308 	add.w	r3, r7, #8
 800ea3e:	4619      	mov	r1, r3
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7ff ff74 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ea46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea4a:	2110      	movs	r1, #16
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fa19 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ea52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea54:	69fb      	ldr	r3, [r7, #28]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3720      	adds	r7, #32
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b088      	sub	sp, #32
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ea6c:	2311      	movs	r3, #17
 800ea6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea70:	2340      	movs	r3, #64	; 0x40
 800ea72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea74:	2300      	movs	r3, #0
 800ea76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea7e:	f107 0308 	add.w	r3, r7, #8
 800ea82:	4619      	mov	r1, r3
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7ff ff52 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ea8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea8e:	2111      	movs	r1, #17
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f9f7 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ea96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea98:	69fb      	ldr	r3, [r7, #28]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3720      	adds	r7, #32
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b088      	sub	sp, #32
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800eab0:	2312      	movs	r3, #18
 800eab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eab4:	2340      	movs	r3, #64	; 0x40
 800eab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eab8:	2300      	movs	r3, #0
 800eaba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eabc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eac0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eac2:	f107 0308 	add.w	r3, r7, #8
 800eac6:	4619      	mov	r1, r3
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7ff ff30 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800eace:	f241 3288 	movw	r2, #5000	; 0x1388
 800ead2:	2112      	movs	r1, #18
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f9d5 	bl	800ee84 <SDMMC_GetCmdResp1>
 800eada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eadc:	69fb      	ldr	r3, [r7, #28]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3720      	adds	r7, #32
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b088      	sub	sp, #32
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eaf4:	2318      	movs	r3, #24
 800eaf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eaf8:	2340      	movs	r3, #64	; 0x40
 800eafa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eafc:	2300      	movs	r3, #0
 800eafe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb06:	f107 0308 	add.w	r3, r7, #8
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7ff ff0e 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800eb12:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb16:	2118      	movs	r1, #24
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 f9b3 	bl	800ee84 <SDMMC_GetCmdResp1>
 800eb1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb20:	69fb      	ldr	r3, [r7, #28]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3720      	adds	r7, #32
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b088      	sub	sp, #32
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800eb38:	2319      	movs	r3, #25
 800eb3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb3c:	2340      	movs	r3, #64	; 0x40
 800eb3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb40:	2300      	movs	r3, #0
 800eb42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb4a:	f107 0308 	add.w	r3, r7, #8
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff feec 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800eb56:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb5a:	2119      	movs	r1, #25
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 f991 	bl	800ee84 <SDMMC_GetCmdResp1>
 800eb62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb64:	69fb      	ldr	r3, [r7, #28]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3720      	adds	r7, #32
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
	...

0800eb70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800eb7c:	230c      	movs	r3, #12
 800eb7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb80:	2340      	movs	r3, #64	; 0x40
 800eb82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb84:	2300      	movs	r3, #0
 800eb86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb8e:	f107 0308 	add.w	r3, r7, #8
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7ff feca 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800eb9a:	4a05      	ldr	r2, [pc, #20]	; (800ebb0 <SDMMC_CmdStopTransfer+0x40>)
 800eb9c:	210c      	movs	r1, #12
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f970 	bl	800ee84 <SDMMC_GetCmdResp1>
 800eba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eba6:	69fb      	ldr	r3, [r7, #28]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3720      	adds	r7, #32
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	05f5e100 	.word	0x05f5e100

0800ebb4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08a      	sub	sp, #40	; 0x28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ebc4:	2307      	movs	r3, #7
 800ebc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebc8:	2340      	movs	r3, #64	; 0x40
 800ebca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebd4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebd6:	f107 0310 	add.w	r3, r7, #16
 800ebda:	4619      	mov	r1, r3
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f7ff fea6 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ebe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebe6:	2107      	movs	r1, #7
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f000 f94b 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ebee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3728      	adds	r7, #40	; 0x28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b088      	sub	sp, #32
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ec06:	2300      	movs	r3, #0
 800ec08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec18:	f107 0308 	add.w	r3, r7, #8
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff fe85 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fb65 	bl	800f2f4 <SDMMC_GetCmdError>
 800ec2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3720      	adds	r7, #32
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b088      	sub	sp, #32
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ec3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ec42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ec44:	2308      	movs	r3, #8
 800ec46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec48:	2340      	movs	r3, #64	; 0x40
 800ec4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec56:	f107 0308 	add.w	r3, r7, #8
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fe66 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 faf8 	bl	800f258 <SDMMC_GetCmdResp7>
 800ec68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec6a:	69fb      	ldr	r3, [r7, #28]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3720      	adds	r7, #32
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ec82:	2337      	movs	r3, #55	; 0x37
 800ec84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec86:	2340      	movs	r3, #64	; 0x40
 800ec88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec94:	f107 0308 	add.w	r3, r7, #8
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7ff fe47 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eca4:	2137      	movs	r1, #55	; 0x37
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 f8ec 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ecac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecae:	69fb      	ldr	r3, [r7, #28]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3720      	adds	r7, #32
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ecc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ecce:	2329      	movs	r3, #41	; 0x29
 800ecd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecd2:	2340      	movs	r3, #64	; 0x40
 800ecd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ece0:	f107 0308 	add.w	r3, r7, #8
 800ece4:	4619      	mov	r1, r3
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff fe21 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f9ff 	bl	800f0f0 <SDMMC_GetCmdResp3>
 800ecf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecf4:	69fb      	ldr	r3, [r7, #28]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3720      	adds	r7, #32
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b088      	sub	sp, #32
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ed0c:	2306      	movs	r3, #6
 800ed0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed10:	2340      	movs	r3, #64	; 0x40
 800ed12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed14:	2300      	movs	r3, #0
 800ed16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed1e:	f107 0308 	add.w	r3, r7, #8
 800ed22:	4619      	mov	r1, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f7ff fe02 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ed2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed2e:	2106      	movs	r1, #6
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f8a7 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ed36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed38:	69fb      	ldr	r3, [r7, #28]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3720      	adds	r7, #32
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b088      	sub	sp, #32
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ed4e:	2333      	movs	r3, #51	; 0x33
 800ed50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed52:	2340      	movs	r3, #64	; 0x40
 800ed54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed56:	2300      	movs	r3, #0
 800ed58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed60:	f107 0308 	add.w	r3, r7, #8
 800ed64:	4619      	mov	r1, r3
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f7ff fde1 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ed6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed70:	2133      	movs	r1, #51	; 0x33
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f886 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ed78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed7a:	69fb      	ldr	r3, [r7, #28]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3720      	adds	r7, #32
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ed90:	2302      	movs	r3, #2
 800ed92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ed94:	23c0      	movs	r3, #192	; 0xc0
 800ed96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eda0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eda2:	f107 0308 	add.w	r3, r7, #8
 800eda6:	4619      	mov	r1, r3
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f7ff fdc0 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f956 	bl	800f060 <SDMMC_GetCmdResp2>
 800edb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edb6:	69fb      	ldr	r3, [r7, #28]
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3720      	adds	r7, #32
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b088      	sub	sp, #32
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800edce:	2309      	movs	r3, #9
 800edd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800edd2:	23c0      	movs	r3, #192	; 0xc0
 800edd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edd6:	2300      	movs	r3, #0
 800edd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ede0:	f107 0308 	add.w	r3, r7, #8
 800ede4:	4619      	mov	r1, r3
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f7ff fda1 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f937 	bl	800f060 <SDMMC_GetCmdResp2>
 800edf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edf4:	69fb      	ldr	r3, [r7, #28]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3720      	adds	r7, #32
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b088      	sub	sp, #32
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee10:	2340      	movs	r3, #64	; 0x40
 800ee12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee14:	2300      	movs	r3, #0
 800ee16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee1e:	f107 0308 	add.w	r3, r7, #8
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff fd82 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ee2a:	683a      	ldr	r2, [r7, #0]
 800ee2c:	2103      	movs	r1, #3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f99c 	bl	800f16c <SDMMC_GetCmdResp6>
 800ee34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee36:	69fb      	ldr	r3, [r7, #28]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3720      	adds	r7, #32
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b088      	sub	sp, #32
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ee4e:	230d      	movs	r3, #13
 800ee50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee52:	2340      	movs	r3, #64	; 0x40
 800ee54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee60:	f107 0308 	add.w	r3, r7, #8
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff fd61 	bl	800e92e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ee6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee70:	210d      	movs	r1, #13
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f806 	bl	800ee84 <SDMMC_GetCmdResp1>
 800ee78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee7a:	69fb      	ldr	r3, [r7, #28]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3720      	adds	r7, #32
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ee92:	4b70      	ldr	r3, [pc, #448]	; (800f054 <SDMMC_GetCmdResp1+0x1d0>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a70      	ldr	r2, [pc, #448]	; (800f058 <SDMMC_GetCmdResp1+0x1d4>)
 800ee98:	fba2 2303 	umull	r2, r3, r2, r3
 800ee9c:	0a5a      	lsrs	r2, r3, #9
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	fb02 f303 	mul.w	r3, r2, r3
 800eea4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	1e5a      	subs	r2, r3, #1
 800eeaa:	61fa      	str	r2, [r7, #28]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d102      	bne.n	800eeb6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eeb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eeb4:	e0c9      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0ef      	beq.n	800eea6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1ea      	bne.n	800eea6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eed4:	f003 0304 	and.w	r3, r3, #4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d004      	beq.n	800eee6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2204      	movs	r2, #4
 800eee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eee2:	2304      	movs	r3, #4
 800eee4:	e0b1      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeea:	f003 0301 	and.w	r3, r3, #1
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d004      	beq.n	800eefc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eef8:	2301      	movs	r3, #1
 800eefa:	e0a6      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	22c5      	movs	r2, #197	; 0xc5
 800ef00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f7ff fd3d 	bl	800e982 <SDIO_GetCommandResponse>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	7afb      	ldrb	r3, [r7, #11]
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d001      	beq.n	800ef16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef12:	2301      	movs	r3, #1
 800ef14:	e099      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ef16:	2100      	movs	r1, #0
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f7ff fd3f 	bl	800e99c <SDIO_GetResponse>
 800ef1e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	4b4e      	ldr	r3, [pc, #312]	; (800f05c <SDMMC_GetCmdResp1+0x1d8>)
 800ef24:	4013      	ands	r3, r2
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d101      	bne.n	800ef2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e08d      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	da02      	bge.n	800ef3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ef34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ef38:	e087      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ef44:	2340      	movs	r3, #64	; 0x40
 800ef46:	e080      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d001      	beq.n	800ef56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ef52:	2380      	movs	r3, #128	; 0x80
 800ef54:	e079      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ef60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef64:	e071      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d002      	beq.n	800ef76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ef70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef74:	e069      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ef80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef84:	e061      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d002      	beq.n	800ef96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ef90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef94:	e059      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800efa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efa4:	e051      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800efac:	2b00      	cmp	r3, #0
 800efae:	d002      	beq.n	800efb6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800efb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800efb4:	e049      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d002      	beq.n	800efc6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800efc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800efc4:	e041      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800efd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efd4:	e039      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800efe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800efe4:	e031      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efec:	2b00      	cmp	r3, #0
 800efee:	d002      	beq.n	800eff6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eff4:	e029      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f004:	e021      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d002      	beq.n	800f016 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f010:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f014:	e019      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f024:	e011      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d002      	beq.n	800f036 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f030:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f034:	e009      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f003 0308 	and.w	r3, r3, #8
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d002      	beq.n	800f046 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f040:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f044:	e001      	b.n	800f04a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3720      	adds	r7, #32
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	20000054 	.word	0x20000054
 800f058:	10624dd3 	.word	0x10624dd3
 800f05c:	fdffe008 	.word	0xfdffe008

0800f060 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f068:	4b1f      	ldr	r3, [pc, #124]	; (800f0e8 <SDMMC_GetCmdResp2+0x88>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a1f      	ldr	r2, [pc, #124]	; (800f0ec <SDMMC_GetCmdResp2+0x8c>)
 800f06e:	fba2 2303 	umull	r2, r3, r2, r3
 800f072:	0a5b      	lsrs	r3, r3, #9
 800f074:	f241 3288 	movw	r2, #5000	; 0x1388
 800f078:	fb02 f303 	mul.w	r3, r2, r3
 800f07c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	1e5a      	subs	r2, r3, #1
 800f082:	60fa      	str	r2, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d102      	bne.n	800f08e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f08c:	e026      	b.n	800f0dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f092:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d0ef      	beq.n	800f07e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1ea      	bne.n	800f07e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ac:	f003 0304 	and.w	r3, r3, #4
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d004      	beq.n	800f0be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2204      	movs	r2, #4
 800f0b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0ba:	2304      	movs	r3, #4
 800f0bc:	e00e      	b.n	800f0dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d004      	beq.n	800f0d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e003      	b.n	800f0dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	22c5      	movs	r2, #197	; 0xc5
 800f0d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	20000054 	.word	0x20000054
 800f0ec:	10624dd3 	.word	0x10624dd3

0800f0f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0f8:	4b1a      	ldr	r3, [pc, #104]	; (800f164 <SDMMC_GetCmdResp3+0x74>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a1a      	ldr	r2, [pc, #104]	; (800f168 <SDMMC_GetCmdResp3+0x78>)
 800f0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f102:	0a5b      	lsrs	r3, r3, #9
 800f104:	f241 3288 	movw	r2, #5000	; 0x1388
 800f108:	fb02 f303 	mul.w	r3, r2, r3
 800f10c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	1e5a      	subs	r2, r3, #1
 800f112:	60fa      	str	r2, [r7, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d102      	bne.n	800f11e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f11c:	e01b      	b.n	800f156 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f122:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0ef      	beq.n	800f10e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1ea      	bne.n	800f10e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	2b00      	cmp	r3, #0
 800f142:	d004      	beq.n	800f14e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2204      	movs	r2, #4
 800f148:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f14a:	2304      	movs	r3, #4
 800f14c:	e003      	b.n	800f156 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	22c5      	movs	r2, #197	; 0xc5
 800f152:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	20000054 	.word	0x20000054
 800f168:	10624dd3 	.word	0x10624dd3

0800f16c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b088      	sub	sp, #32
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	460b      	mov	r3, r1
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f17a:	4b35      	ldr	r3, [pc, #212]	; (800f250 <SDMMC_GetCmdResp6+0xe4>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a35      	ldr	r2, [pc, #212]	; (800f254 <SDMMC_GetCmdResp6+0xe8>)
 800f180:	fba2 2303 	umull	r2, r3, r2, r3
 800f184:	0a5b      	lsrs	r3, r3, #9
 800f186:	f241 3288 	movw	r2, #5000	; 0x1388
 800f18a:	fb02 f303 	mul.w	r3, r2, r3
 800f18e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	1e5a      	subs	r2, r3, #1
 800f194:	61fa      	str	r2, [r7, #28]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d102      	bne.n	800f1a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f19a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f19e:	e052      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d0ef      	beq.n	800f190 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1ea      	bne.n	800f190 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1be:	f003 0304 	and.w	r3, r3, #4
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2204      	movs	r2, #4
 800f1ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1cc:	2304      	movs	r3, #4
 800f1ce:	e03a      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d4:	f003 0301 	and.w	r3, r3, #1
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d004      	beq.n	800f1e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e02f      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff fbcb 	bl	800e982 <SDIO_GetCommandResponse>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	7afb      	ldrb	r3, [r7, #11]
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d001      	beq.n	800f1fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e025      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	22c5      	movs	r2, #197	; 0xc5
 800f1fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f200:	2100      	movs	r1, #0
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff fbca 	bl	800e99c <SDIO_GetResponse>
 800f208:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f210:	2b00      	cmp	r3, #0
 800f212:	d106      	bne.n	800f222 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	0c1b      	lsrs	r3, r3, #16
 800f218:	b29a      	uxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f21e:	2300      	movs	r3, #0
 800f220:	e011      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f22c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f230:	e009      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f23c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f240:	e001      	b.n	800f246 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f246:	4618      	mov	r0, r3
 800f248:	3720      	adds	r7, #32
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	20000054 	.word	0x20000054
 800f254:	10624dd3 	.word	0x10624dd3

0800f258 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f260:	4b22      	ldr	r3, [pc, #136]	; (800f2ec <SDMMC_GetCmdResp7+0x94>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a22      	ldr	r2, [pc, #136]	; (800f2f0 <SDMMC_GetCmdResp7+0x98>)
 800f266:	fba2 2303 	umull	r2, r3, r2, r3
 800f26a:	0a5b      	lsrs	r3, r3, #9
 800f26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f270:	fb02 f303 	mul.w	r3, r2, r3
 800f274:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	1e5a      	subs	r2, r3, #1
 800f27a:	60fa      	str	r2, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d102      	bne.n	800f286 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f284:	e02c      	b.n	800f2e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f28a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f292:	2b00      	cmp	r3, #0
 800f294:	d0ef      	beq.n	800f276 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1ea      	bne.n	800f276 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a4:	f003 0304 	and.w	r3, r3, #4
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d004      	beq.n	800f2b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2204      	movs	r2, #4
 800f2b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2b2:	2304      	movs	r3, #4
 800f2b4:	e014      	b.n	800f2e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ba:	f003 0301 	and.w	r3, r3, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d004      	beq.n	800f2cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e009      	b.n	800f2e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2240      	movs	r2, #64	; 0x40
 800f2dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f2de:	2300      	movs	r3, #0
  
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3714      	adds	r7, #20
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	20000054 	.word	0x20000054
 800f2f0:	10624dd3 	.word	0x10624dd3

0800f2f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2fc:	4b11      	ldr	r3, [pc, #68]	; (800f344 <SDMMC_GetCmdError+0x50>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a11      	ldr	r2, [pc, #68]	; (800f348 <SDMMC_GetCmdError+0x54>)
 800f302:	fba2 2303 	umull	r2, r3, r2, r3
 800f306:	0a5b      	lsrs	r3, r3, #9
 800f308:	f241 3288 	movw	r2, #5000	; 0x1388
 800f30c:	fb02 f303 	mul.w	r3, r2, r3
 800f310:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	1e5a      	subs	r2, r3, #1
 800f316:	60fa      	str	r2, [r7, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d102      	bne.n	800f322 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f31c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f320:	e009      	b.n	800f336 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0f1      	beq.n	800f312 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	22c5      	movs	r2, #197	; 0xc5
 800f332:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	20000054 	.word	0x20000054
 800f348:	10624dd3 	.word	0x10624dd3

0800f34c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f34c:	b084      	sub	sp, #16
 800f34e:	b580      	push	{r7, lr}
 800f350:	b084      	sub	sp, #16
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	f107 001c 	add.w	r0, r7, #28
 800f35a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	2b01      	cmp	r3, #1
 800f362:	d122      	bne.n	800f3aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d105      	bne.n	800f39e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f001 fbee 	bl	8010b80 <USB_CoreReset>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	73fb      	strb	r3, [r7, #15]
 800f3a8:	e01a      	b.n	800f3e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f001 fbe2 	bl	8010b80 <USB_CoreReset>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d106      	bne.n	800f3d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	639a      	str	r2, [r3, #56]	; 0x38
 800f3d2:	e005      	b.n	800f3e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d10b      	bne.n	800f3fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f043 0206 	orr.w	r2, r3, #6
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	f043 0220 	orr.w	r2, r3, #32
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f40a:	b004      	add	sp, #16
 800f40c:	4770      	bx	lr
	...

0800f410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f410:	b480      	push	{r7}
 800f412:	b087      	sub	sp, #28
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	4613      	mov	r3, r2
 800f41c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	2b02      	cmp	r3, #2
 800f422:	d165      	bne.n	800f4f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	4a41      	ldr	r2, [pc, #260]	; (800f52c <USB_SetTurnaroundTime+0x11c>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d906      	bls.n	800f43a <USB_SetTurnaroundTime+0x2a>
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	4a40      	ldr	r2, [pc, #256]	; (800f530 <USB_SetTurnaroundTime+0x120>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d202      	bcs.n	800f43a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f434:	230f      	movs	r3, #15
 800f436:	617b      	str	r3, [r7, #20]
 800f438:	e062      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	4a3c      	ldr	r2, [pc, #240]	; (800f530 <USB_SetTurnaroundTime+0x120>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d306      	bcc.n	800f450 <USB_SetTurnaroundTime+0x40>
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	4a3b      	ldr	r2, [pc, #236]	; (800f534 <USB_SetTurnaroundTime+0x124>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d202      	bcs.n	800f450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f44a:	230e      	movs	r3, #14
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	e057      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	4a38      	ldr	r2, [pc, #224]	; (800f534 <USB_SetTurnaroundTime+0x124>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d306      	bcc.n	800f466 <USB_SetTurnaroundTime+0x56>
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	4a37      	ldr	r2, [pc, #220]	; (800f538 <USB_SetTurnaroundTime+0x128>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d202      	bcs.n	800f466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f460:	230d      	movs	r3, #13
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	e04c      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	4a33      	ldr	r2, [pc, #204]	; (800f538 <USB_SetTurnaroundTime+0x128>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d306      	bcc.n	800f47c <USB_SetTurnaroundTime+0x6c>
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	4a32      	ldr	r2, [pc, #200]	; (800f53c <USB_SetTurnaroundTime+0x12c>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d802      	bhi.n	800f47c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f476:	230c      	movs	r3, #12
 800f478:	617b      	str	r3, [r7, #20]
 800f47a:	e041      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	4a2f      	ldr	r2, [pc, #188]	; (800f53c <USB_SetTurnaroundTime+0x12c>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d906      	bls.n	800f492 <USB_SetTurnaroundTime+0x82>
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	4a2e      	ldr	r2, [pc, #184]	; (800f540 <USB_SetTurnaroundTime+0x130>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d802      	bhi.n	800f492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f48c:	230b      	movs	r3, #11
 800f48e:	617b      	str	r3, [r7, #20]
 800f490:	e036      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	4a2a      	ldr	r2, [pc, #168]	; (800f540 <USB_SetTurnaroundTime+0x130>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d906      	bls.n	800f4a8 <USB_SetTurnaroundTime+0x98>
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	4a29      	ldr	r2, [pc, #164]	; (800f544 <USB_SetTurnaroundTime+0x134>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d802      	bhi.n	800f4a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f4a2:	230a      	movs	r3, #10
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	e02b      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	4a26      	ldr	r2, [pc, #152]	; (800f544 <USB_SetTurnaroundTime+0x134>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d906      	bls.n	800f4be <USB_SetTurnaroundTime+0xae>
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	4a25      	ldr	r2, [pc, #148]	; (800f548 <USB_SetTurnaroundTime+0x138>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d202      	bcs.n	800f4be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f4b8:	2309      	movs	r3, #9
 800f4ba:	617b      	str	r3, [r7, #20]
 800f4bc:	e020      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	4a21      	ldr	r2, [pc, #132]	; (800f548 <USB_SetTurnaroundTime+0x138>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d306      	bcc.n	800f4d4 <USB_SetTurnaroundTime+0xc4>
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	4a20      	ldr	r2, [pc, #128]	; (800f54c <USB_SetTurnaroundTime+0x13c>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d802      	bhi.n	800f4d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f4ce:	2308      	movs	r3, #8
 800f4d0:	617b      	str	r3, [r7, #20]
 800f4d2:	e015      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	4a1d      	ldr	r2, [pc, #116]	; (800f54c <USB_SetTurnaroundTime+0x13c>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d906      	bls.n	800f4ea <USB_SetTurnaroundTime+0xda>
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	4a1c      	ldr	r2, [pc, #112]	; (800f550 <USB_SetTurnaroundTime+0x140>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d202      	bcs.n	800f4ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f4e4:	2307      	movs	r3, #7
 800f4e6:	617b      	str	r3, [r7, #20]
 800f4e8:	e00a      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f4ea:	2306      	movs	r3, #6
 800f4ec:	617b      	str	r3, [r7, #20]
 800f4ee:	e007      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d102      	bne.n	800f4fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f4f6:	2309      	movs	r3, #9
 800f4f8:	617b      	str	r3, [r7, #20]
 800f4fa:	e001      	b.n	800f500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f4fc:	2309      	movs	r3, #9
 800f4fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	68da      	ldr	r2, [r3, #12]
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	029b      	lsls	r3, r3, #10
 800f514:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f518:	431a      	orrs	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	371c      	adds	r7, #28
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr
 800f52c:	00d8acbf 	.word	0x00d8acbf
 800f530:	00e4e1c0 	.word	0x00e4e1c0
 800f534:	00f42400 	.word	0x00f42400
 800f538:	01067380 	.word	0x01067380
 800f53c:	011a499f 	.word	0x011a499f
 800f540:	01312cff 	.word	0x01312cff
 800f544:	014ca43f 	.word	0x014ca43f
 800f548:	016e3600 	.word	0x016e3600
 800f54c:	01a6ab1f 	.word	0x01a6ab1f
 800f550:	01e84800 	.word	0x01e84800

0800f554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	f043 0201 	orr.w	r2, r3, #1
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f576:	b480      	push	{r7}
 800f578:	b083      	sub	sp, #12
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f023 0201 	bic.w	r2, r3, #1
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f5b4:	78fb      	ldrb	r3, [r7, #3]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d115      	bne.n	800f5e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f5c6:	2001      	movs	r0, #1
 800f5c8:	f7f6 fc62 	bl	8005e90 <HAL_Delay>
      ms++;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f001 fa45 	bl	8010a62 <USB_GetMode>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d01e      	beq.n	800f61c <USB_SetCurrentMode+0x84>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b31      	cmp	r3, #49	; 0x31
 800f5e2:	d9f0      	bls.n	800f5c6 <USB_SetCurrentMode+0x2e>
 800f5e4:	e01a      	b.n	800f61c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f5e6:	78fb      	ldrb	r3, [r7, #3]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d115      	bne.n	800f618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f5f8:	2001      	movs	r0, #1
 800f5fa:	f7f6 fc49 	bl	8005e90 <HAL_Delay>
      ms++;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3301      	adds	r3, #1
 800f602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f001 fa2c 	bl	8010a62 <USB_GetMode>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d005      	beq.n	800f61c <USB_SetCurrentMode+0x84>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b31      	cmp	r3, #49	; 0x31
 800f614:	d9f0      	bls.n	800f5f8 <USB_SetCurrentMode+0x60>
 800f616:	e001      	b.n	800f61c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	e005      	b.n	800f628 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b32      	cmp	r3, #50	; 0x32
 800f620:	d101      	bne.n	800f626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	e000      	b.n	800f628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f630:	b084      	sub	sp, #16
 800f632:	b580      	push	{r7, lr}
 800f634:	b086      	sub	sp, #24
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f642:	2300      	movs	r3, #0
 800f644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f64a:	2300      	movs	r3, #0
 800f64c:	613b      	str	r3, [r7, #16]
 800f64e:	e009      	b.n	800f664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	3340      	adds	r3, #64	; 0x40
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4413      	add	r3, r2
 800f65a:	2200      	movs	r2, #0
 800f65c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	3301      	adds	r3, #1
 800f662:	613b      	str	r3, [r7, #16]
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	2b0e      	cmp	r3, #14
 800f668:	d9f2      	bls.n	800f650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d11c      	bne.n	800f6aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f67e:	f043 0302 	orr.w	r3, r3, #2
 800f682:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f694:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	639a      	str	r2, [r3, #56]	; 0x38
 800f6a8:	e00b      	b.n	800f6c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6dc:	461a      	mov	r2, r3
 800f6de:	680b      	ldr	r3, [r1, #0]
 800f6e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d10c      	bne.n	800f702 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d104      	bne.n	800f6f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 f965 	bl	800f9c0 <USB_SetDevSpeed>
 800f6f6:	e008      	b.n	800f70a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f6f8:	2101      	movs	r1, #1
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 f960 	bl	800f9c0 <USB_SetDevSpeed>
 800f700:	e003      	b.n	800f70a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f702:	2103      	movs	r1, #3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 f95b 	bl	800f9c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f70a:	2110      	movs	r1, #16
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 f8f3 	bl	800f8f8 <USB_FlushTxFifo>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d001      	beq.n	800f71c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f718:	2301      	movs	r3, #1
 800f71a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f91f 	bl	800f960 <USB_FlushRxFifo>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f732:	461a      	mov	r2, r3
 800f734:	2300      	movs	r3, #0
 800f736:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f73e:	461a      	mov	r2, r3
 800f740:	2300      	movs	r3, #0
 800f742:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f74a:	461a      	mov	r2, r3
 800f74c:	2300      	movs	r3, #0
 800f74e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f750:	2300      	movs	r3, #0
 800f752:	613b      	str	r3, [r7, #16]
 800f754:	e043      	b.n	800f7de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	015a      	lsls	r2, r3, #5
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	4413      	add	r3, r2
 800f75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f76c:	d118      	bne.n	800f7a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d10a      	bne.n	800f78a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	015a      	lsls	r2, r3, #5
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	4413      	add	r3, r2
 800f77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f780:	461a      	mov	r2, r3
 800f782:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	e013      	b.n	800f7b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	015a      	lsls	r2, r3, #5
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	4413      	add	r3, r2
 800f792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f796:	461a      	mov	r2, r3
 800f798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	e008      	b.n	800f7b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	015a      	lsls	r2, r3, #5
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	015a      	lsls	r2, r3, #5
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7be:	461a      	mov	r2, r3
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	015a      	lsls	r2, r3, #5
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f7d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	613b      	str	r3, [r7, #16]
 800f7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e0:	693a      	ldr	r2, [r7, #16]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d3b7      	bcc.n	800f756 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	613b      	str	r3, [r7, #16]
 800f7ea:	e043      	b.n	800f874 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	015a      	lsls	r2, r3, #5
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f802:	d118      	bne.n	800f836 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10a      	bne.n	800f820 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	015a      	lsls	r2, r3, #5
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	4413      	add	r3, r2
 800f812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f816:	461a      	mov	r2, r3
 800f818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f81c:	6013      	str	r3, [r2, #0]
 800f81e:	e013      	b.n	800f848 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82c:	461a      	mov	r2, r3
 800f82e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f832:	6013      	str	r3, [r2, #0]
 800f834:	e008      	b.n	800f848 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f842:	461a      	mov	r2, r3
 800f844:	2300      	movs	r3, #0
 800f846:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	015a      	lsls	r2, r3, #5
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4413      	add	r3, r2
 800f850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f854:	461a      	mov	r2, r3
 800f856:	2300      	movs	r3, #0
 800f858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f866:	461a      	mov	r2, r3
 800f868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f86c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	3301      	adds	r3, #1
 800f872:	613b      	str	r3, [r7, #16]
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	693a      	ldr	r2, [r7, #16]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d3b7      	bcc.n	800f7ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f88a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f88e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f89c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d105      	bne.n	800f8b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	699b      	ldr	r3, [r3, #24]
 800f8a8:	f043 0210 	orr.w	r2, r3, #16
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	699a      	ldr	r2, [r3, #24]
 800f8b4:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <USB_DevInit+0x2c4>)
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d005      	beq.n	800f8ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	699b      	ldr	r3, [r3, #24]
 800f8c6:	f043 0208 	orr.w	r2, r3, #8
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d107      	bne.n	800f8e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	699b      	ldr	r3, [r3, #24]
 800f8d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f8dc:	f043 0304 	orr.w	r3, r3, #4
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3718      	adds	r7, #24
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f8f0:	b004      	add	sp, #16
 800f8f2:	4770      	bx	lr
 800f8f4:	803c3800 	.word	0x803c3800

0800f8f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f902:	2300      	movs	r3, #0
 800f904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	3301      	adds	r3, #1
 800f90a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4a13      	ldr	r2, [pc, #76]	; (800f95c <USB_FlushTxFifo+0x64>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d901      	bls.n	800f918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f914:	2303      	movs	r3, #3
 800f916:	e01b      	b.n	800f950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	691b      	ldr	r3, [r3, #16]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	daf2      	bge.n	800f906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f920:	2300      	movs	r3, #0
 800f922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	019b      	lsls	r3, r3, #6
 800f928:	f043 0220 	orr.w	r2, r3, #32
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	3301      	adds	r3, #1
 800f934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	4a08      	ldr	r2, [pc, #32]	; (800f95c <USB_FlushTxFifo+0x64>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d901      	bls.n	800f942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f93e:	2303      	movs	r3, #3
 800f940:	e006      	b.n	800f950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	f003 0320 	and.w	r3, r3, #32
 800f94a:	2b20      	cmp	r3, #32
 800f94c:	d0f0      	beq.n	800f930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	00030d40 	.word	0x00030d40

0800f960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f968:	2300      	movs	r3, #0
 800f96a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	3301      	adds	r3, #1
 800f970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	4a11      	ldr	r2, [pc, #68]	; (800f9bc <USB_FlushRxFifo+0x5c>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d901      	bls.n	800f97e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f97a:	2303      	movs	r3, #3
 800f97c:	e018      	b.n	800f9b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	691b      	ldr	r3, [r3, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	daf2      	bge.n	800f96c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2210      	movs	r2, #16
 800f98e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	3301      	adds	r3, #1
 800f994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	4a08      	ldr	r2, [pc, #32]	; (800f9bc <USB_FlushRxFifo+0x5c>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d901      	bls.n	800f9a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f99e:	2303      	movs	r3, #3
 800f9a0:	e006      	b.n	800f9b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	f003 0310 	and.w	r3, r3, #16
 800f9aa:	2b10      	cmp	r3, #16
 800f9ac:	d0f0      	beq.n	800f990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	00030d40 	.word	0x00030d40

0800f9c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	68f9      	ldr	r1, [r7, #12]
 800f9dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3714      	adds	r7, #20
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f9f2:	b480      	push	{r7}
 800f9f4:	b087      	sub	sp, #28
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	f003 0306 	and.w	r3, r3, #6
 800fa0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa12:	2300      	movs	r3, #0
 800fa14:	75fb      	strb	r3, [r7, #23]
 800fa16:	e00a      	b.n	800fa2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d002      	beq.n	800fa24 <USB_GetDevSpeed+0x32>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2b06      	cmp	r3, #6
 800fa22:	d102      	bne.n	800fa2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa24:	2302      	movs	r3, #2
 800fa26:	75fb      	strb	r3, [r7, #23]
 800fa28:	e001      	b.n	800fa2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa2a:	230f      	movs	r3, #15
 800fa2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	371c      	adds	r7, #28
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	785b      	ldrb	r3, [r3, #1]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d13a      	bne.n	800face <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa5e:	69da      	ldr	r2, [r3, #28]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	f003 030f 	and.w	r3, r3, #15
 800fa68:	2101      	movs	r1, #1
 800fa6a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	68f9      	ldr	r1, [r7, #12]
 800fa72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa76:	4313      	orrs	r3, r2
 800fa78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d155      	bne.n	800fb3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	015a      	lsls	r2, r3, #5
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	4413      	add	r3, r2
 800fa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	791b      	ldrb	r3, [r3, #4]
 800faaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800faac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	059b      	lsls	r3, r3, #22
 800fab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fab4:	4313      	orrs	r3, r2
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	0151      	lsls	r1, r2, #5
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	440a      	add	r2, r1
 800fabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faca:	6013      	str	r3, [r2, #0]
 800facc:	e036      	b.n	800fb3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fad4:	69da      	ldr	r2, [r3, #28]
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	f003 030f 	and.w	r3, r3, #15
 800fade:	2101      	movs	r1, #1
 800fae0:	fa01 f303 	lsl.w	r3, r1, r3
 800fae4:	041b      	lsls	r3, r3, #16
 800fae6:	68f9      	ldr	r1, [r7, #12]
 800fae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faec:	4313      	orrs	r3, r2
 800faee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	015a      	lsls	r2, r3, #5
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	4413      	add	r3, r2
 800faf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d11a      	bne.n	800fb3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	015a      	lsls	r2, r3, #5
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	4413      	add	r3, r2
 800fb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	791b      	ldrb	r3, [r3, #4]
 800fb20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb22:	430b      	orrs	r3, r1
 800fb24:	4313      	orrs	r3, r2
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	0151      	lsls	r1, r2, #5
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	440a      	add	r2, r1
 800fb2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fb3c:	2300      	movs	r3, #0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
	...

0800fb4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	785b      	ldrb	r3, [r3, #1]
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d161      	bne.n	800fc2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	015a      	lsls	r2, r3, #5
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	4413      	add	r3, r2
 800fb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb7e:	d11f      	bne.n	800fbc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	0151      	lsls	r1, r2, #5
 800fb92:	68fa      	ldr	r2, [r7, #12]
 800fb94:	440a      	add	r2, r1
 800fb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fb9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	015a      	lsls	r2, r3, #5
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	4413      	add	r3, r2
 800fba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68ba      	ldr	r2, [r7, #8]
 800fbb0:	0151      	lsls	r1, r2, #5
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	440a      	add	r2, r1
 800fbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fbbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	f003 030f 	and.w	r3, r3, #15
 800fbd0:	2101      	movs	r1, #1
 800fbd2:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	43db      	mvns	r3, r3
 800fbda:	68f9      	ldr	r1, [r7, #12]
 800fbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbe0:	4013      	ands	r3, r2
 800fbe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbea:	69da      	ldr	r2, [r3, #28]
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	f003 030f 	and.w	r3, r3, #15
 800fbf4:	2101      	movs	r1, #1
 800fbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	43db      	mvns	r3, r3
 800fbfe:	68f9      	ldr	r1, [r7, #12]
 800fc00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc04:	4013      	ands	r3, r2
 800fc06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	015a      	lsls	r2, r3, #5
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4413      	add	r3, r2
 800fc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	0159      	lsls	r1, r3, #5
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	440b      	add	r3, r1
 800fc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc22:	4619      	mov	r1, r3
 800fc24:	4b35      	ldr	r3, [pc, #212]	; (800fcfc <USB_DeactivateEndpoint+0x1b0>)
 800fc26:	4013      	ands	r3, r2
 800fc28:	600b      	str	r3, [r1, #0]
 800fc2a:	e060      	b.n	800fcee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	015a      	lsls	r2, r3, #5
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	4413      	add	r3, r2
 800fc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc42:	d11f      	bne.n	800fc84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	015a      	lsls	r2, r3, #5
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68ba      	ldr	r2, [r7, #8]
 800fc54:	0151      	lsls	r1, r2, #5
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	440a      	add	r2, r1
 800fc5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	015a      	lsls	r2, r3, #5
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	68ba      	ldr	r2, [r7, #8]
 800fc74:	0151      	lsls	r1, r2, #5
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	440a      	add	r2, r1
 800fc7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fc82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	f003 030f 	and.w	r3, r3, #15
 800fc94:	2101      	movs	r1, #1
 800fc96:	fa01 f303 	lsl.w	r3, r1, r3
 800fc9a:	041b      	lsls	r3, r3, #16
 800fc9c:	43db      	mvns	r3, r3
 800fc9e:	68f9      	ldr	r1, [r7, #12]
 800fca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fca4:	4013      	ands	r3, r2
 800fca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcae:	69da      	ldr	r2, [r3, #28]
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 030f 	and.w	r3, r3, #15
 800fcb8:	2101      	movs	r1, #1
 800fcba:	fa01 f303 	lsl.w	r3, r1, r3
 800fcbe:	041b      	lsls	r3, r3, #16
 800fcc0:	43db      	mvns	r3, r3
 800fcc2:	68f9      	ldr	r1, [r7, #12]
 800fcc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcc8:	4013      	ands	r3, r2
 800fcca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	015a      	lsls	r2, r3, #5
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	0159      	lsls	r1, r3, #5
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	440b      	add	r3, r1
 800fce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce6:	4619      	mov	r1, r3
 800fce8:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <USB_DeactivateEndpoint+0x1b4>)
 800fcea:	4013      	ands	r3, r2
 800fcec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3714      	adds	r7, #20
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr
 800fcfc:	ec337800 	.word	0xec337800
 800fd00:	eff37800 	.word	0xeff37800

0800fd04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08a      	sub	sp, #40	; 0x28
 800fd08:	af02      	add	r7, sp, #8
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	4613      	mov	r3, r2
 800fd10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	785b      	ldrb	r3, [r3, #1]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	f040 815c 	bne.w	800ffde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	699b      	ldr	r3, [r3, #24]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d132      	bne.n	800fd94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	015a      	lsls	r2, r3, #5
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	4413      	add	r3, r2
 800fd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	69ba      	ldr	r2, [r7, #24]
 800fd3e:	0151      	lsls	r1, r2, #5
 800fd40:	69fa      	ldr	r2, [r7, #28]
 800fd42:	440a      	add	r2, r1
 800fd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fd50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	015a      	lsls	r2, r3, #5
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	4413      	add	r3, r2
 800fd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	69ba      	ldr	r2, [r7, #24]
 800fd62:	0151      	lsls	r1, r2, #5
 800fd64:	69fa      	ldr	r2, [r7, #28]
 800fd66:	440a      	add	r2, r1
 800fd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	015a      	lsls	r2, r3, #5
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	69ba      	ldr	r2, [r7, #24]
 800fd82:	0151      	lsls	r1, r2, #5
 800fd84:	69fa      	ldr	r2, [r7, #28]
 800fd86:	440a      	add	r2, r1
 800fd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd8c:	0cdb      	lsrs	r3, r3, #19
 800fd8e:	04db      	lsls	r3, r3, #19
 800fd90:	6113      	str	r3, [r2, #16]
 800fd92:	e074      	b.n	800fe7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	015a      	lsls	r2, r3, #5
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	69ba      	ldr	r2, [r7, #24]
 800fda4:	0151      	lsls	r1, r2, #5
 800fda6:	69fa      	ldr	r2, [r7, #28]
 800fda8:	440a      	add	r2, r1
 800fdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdae:	0cdb      	lsrs	r3, r3, #19
 800fdb0:	04db      	lsls	r3, r3, #19
 800fdb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	015a      	lsls	r2, r3, #5
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	4413      	add	r3, r2
 800fdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	69ba      	ldr	r2, [r7, #24]
 800fdc4:	0151      	lsls	r1, r2, #5
 800fdc6:	69fa      	ldr	r2, [r7, #28]
 800fdc8:	440a      	add	r2, r1
 800fdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fdd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fdd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	015a      	lsls	r2, r3, #5
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	4413      	add	r3, r2
 800fde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fde4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	6999      	ldr	r1, [r3, #24]
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	440b      	add	r3, r1
 800fdf0:	1e59      	subs	r1, r3, #1
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	fbb1 f3f3 	udiv	r3, r1, r3
 800fdfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fdfc:	4b9d      	ldr	r3, [pc, #628]	; (8010074 <USB_EPStartXfer+0x370>)
 800fdfe:	400b      	ands	r3, r1
 800fe00:	69b9      	ldr	r1, [r7, #24]
 800fe02:	0148      	lsls	r0, r1, #5
 800fe04:	69f9      	ldr	r1, [r7, #28]
 800fe06:	4401      	add	r1, r0
 800fe08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1c:	691a      	ldr	r2, [r3, #16]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe26:	69b9      	ldr	r1, [r7, #24]
 800fe28:	0148      	lsls	r0, r1, #5
 800fe2a:	69f9      	ldr	r1, [r7, #28]
 800fe2c:	4401      	add	r1, r0
 800fe2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe32:	4313      	orrs	r3, r2
 800fe34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	791b      	ldrb	r3, [r3, #4]
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d11f      	bne.n	800fe7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	015a      	lsls	r2, r3, #5
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	4413      	add	r3, r2
 800fe46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe4a:	691b      	ldr	r3, [r3, #16]
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	0151      	lsls	r1, r2, #5
 800fe50:	69fa      	ldr	r2, [r7, #28]
 800fe52:	440a      	add	r2, r1
 800fe54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fe5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	015a      	lsls	r2, r3, #5
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	4413      	add	r3, r2
 800fe66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe6a:	691b      	ldr	r3, [r3, #16]
 800fe6c:	69ba      	ldr	r2, [r7, #24]
 800fe6e:	0151      	lsls	r1, r2, #5
 800fe70:	69fa      	ldr	r2, [r7, #28]
 800fe72:	440a      	add	r2, r1
 800fe74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fe7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d14b      	bne.n	800ff1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	695b      	ldr	r3, [r3, #20]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d009      	beq.n	800fea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe98:	461a      	mov	r2, r3
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	695b      	ldr	r3, [r3, #20]
 800fe9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	791b      	ldrb	r3, [r3, #4]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d128      	bne.n	800fefa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feae:	689b      	ldr	r3, [r3, #8]
 800feb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d110      	bne.n	800feda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	015a      	lsls	r2, r3, #5
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	4413      	add	r3, r2
 800fec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	69ba      	ldr	r2, [r7, #24]
 800fec8:	0151      	lsls	r1, r2, #5
 800feca:	69fa      	ldr	r2, [r7, #28]
 800fecc:	440a      	add	r2, r1
 800fece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fed6:	6013      	str	r3, [r2, #0]
 800fed8:	e00f      	b.n	800fefa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	015a      	lsls	r2, r3, #5
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	4413      	add	r3, r2
 800fee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	69ba      	ldr	r2, [r7, #24]
 800feea:	0151      	lsls	r1, r2, #5
 800feec:	69fa      	ldr	r2, [r7, #28]
 800feee:	440a      	add	r2, r1
 800fef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	015a      	lsls	r2, r3, #5
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	4413      	add	r3, r2
 800ff02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	0151      	lsls	r1, r2, #5
 800ff0c:	69fa      	ldr	r2, [r7, #28]
 800ff0e:	440a      	add	r2, r1
 800ff10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff18:	6013      	str	r3, [r2, #0]
 800ff1a:	e133      	b.n	8010184 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	015a      	lsls	r2, r3, #5
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	4413      	add	r3, r2
 800ff24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	69ba      	ldr	r2, [r7, #24]
 800ff2c:	0151      	lsls	r1, r2, #5
 800ff2e:	69fa      	ldr	r2, [r7, #28]
 800ff30:	440a      	add	r2, r1
 800ff32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	791b      	ldrb	r3, [r3, #4]
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d015      	beq.n	800ff70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 811b 	beq.w	8010184 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	f003 030f 	and.w	r3, r3, #15
 800ff5e:	2101      	movs	r1, #1
 800ff60:	fa01 f303 	lsl.w	r3, r1, r3
 800ff64:	69f9      	ldr	r1, [r7, #28]
 800ff66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	634b      	str	r3, [r1, #52]	; 0x34
 800ff6e:	e109      	b.n	8010184 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d110      	bne.n	800ffa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	4413      	add	r3, r2
 800ff88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	69ba      	ldr	r2, [r7, #24]
 800ff90:	0151      	lsls	r1, r2, #5
 800ff92:	69fa      	ldr	r2, [r7, #28]
 800ff94:	440a      	add	r2, r1
 800ff96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	e00f      	b.n	800ffc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	015a      	lsls	r2, r3, #5
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	69ba      	ldr	r2, [r7, #24]
 800ffb2:	0151      	lsls	r1, r2, #5
 800ffb4:	69fa      	ldr	r2, [r7, #28]
 800ffb6:	440a      	add	r2, r1
 800ffb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	6919      	ldr	r1, [r3, #16]
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	781a      	ldrb	r2, [r3, #0]
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	699b      	ldr	r3, [r3, #24]
 800ffce:	b298      	uxth	r0, r3
 800ffd0:	79fb      	ldrb	r3, [r7, #7]
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	68f8      	ldr	r0, [r7, #12]
 800ffd8:	f000 fade 	bl	8010598 <USB_WritePacket>
 800ffdc:	e0d2      	b.n	8010184 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	015a      	lsls	r2, r3, #5
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffea:	691b      	ldr	r3, [r3, #16]
 800ffec:	69ba      	ldr	r2, [r7, #24]
 800ffee:	0151      	lsls	r1, r2, #5
 800fff0:	69fa      	ldr	r2, [r7, #28]
 800fff2:	440a      	add	r2, r1
 800fff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fff8:	0cdb      	lsrs	r3, r3, #19
 800fffa:	04db      	lsls	r3, r3, #19
 800fffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	69ba      	ldr	r2, [r7, #24]
 801000e:	0151      	lsls	r1, r2, #5
 8010010:	69fa      	ldr	r2, [r7, #28]
 8010012:	440a      	add	r2, r1
 8010014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801001c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	699b      	ldr	r3, [r3, #24]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d126      	bne.n	8010078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	015a      	lsls	r2, r3, #5
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	4413      	add	r3, r2
 8010032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010036:	691a      	ldr	r2, [r3, #16]
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010040:	69b9      	ldr	r1, [r7, #24]
 8010042:	0148      	lsls	r0, r1, #5
 8010044:	69f9      	ldr	r1, [r7, #28]
 8010046:	4401      	add	r1, r0
 8010048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801004c:	4313      	orrs	r3, r2
 801004e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	015a      	lsls	r2, r3, #5
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	4413      	add	r3, r2
 8010058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	69ba      	ldr	r2, [r7, #24]
 8010060:	0151      	lsls	r1, r2, #5
 8010062:	69fa      	ldr	r2, [r7, #28]
 8010064:	440a      	add	r2, r1
 8010066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801006a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801006e:	6113      	str	r3, [r2, #16]
 8010070:	e03a      	b.n	80100e8 <USB_EPStartXfer+0x3e4>
 8010072:	bf00      	nop
 8010074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	699a      	ldr	r2, [r3, #24]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	4413      	add	r3, r2
 8010082:	1e5a      	subs	r2, r3, #1
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	fbb2 f3f3 	udiv	r3, r2, r3
 801008c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	8afa      	ldrh	r2, [r7, #22]
 8010094:	fb03 f202 	mul.w	r2, r3, r2
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	015a      	lsls	r2, r3, #5
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	4413      	add	r3, r2
 80100a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100a8:	691a      	ldr	r2, [r3, #16]
 80100aa:	8afb      	ldrh	r3, [r7, #22]
 80100ac:	04d9      	lsls	r1, r3, #19
 80100ae:	4b38      	ldr	r3, [pc, #224]	; (8010190 <USB_EPStartXfer+0x48c>)
 80100b0:	400b      	ands	r3, r1
 80100b2:	69b9      	ldr	r1, [r7, #24]
 80100b4:	0148      	lsls	r0, r1, #5
 80100b6:	69f9      	ldr	r1, [r7, #28]
 80100b8:	4401      	add	r1, r0
 80100ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100be:	4313      	orrs	r3, r2
 80100c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	015a      	lsls	r2, r3, #5
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	4413      	add	r3, r2
 80100ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100ce:	691a      	ldr	r2, [r3, #16]
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	69db      	ldr	r3, [r3, #28]
 80100d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100d8:	69b9      	ldr	r1, [r7, #24]
 80100da:	0148      	lsls	r0, r1, #5
 80100dc:	69f9      	ldr	r1, [r7, #28]
 80100de:	4401      	add	r1, r0
 80100e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100e4:	4313      	orrs	r3, r2
 80100e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80100e8:	79fb      	ldrb	r3, [r7, #7]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d10d      	bne.n	801010a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d009      	beq.n	801010a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	6919      	ldr	r1, [r3, #16]
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	015a      	lsls	r2, r3, #5
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	4413      	add	r3, r2
 8010102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010106:	460a      	mov	r2, r1
 8010108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	791b      	ldrb	r3, [r3, #4]
 801010e:	2b01      	cmp	r3, #1
 8010110:	d128      	bne.n	8010164 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801011e:	2b00      	cmp	r3, #0
 8010120:	d110      	bne.n	8010144 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	015a      	lsls	r2, r3, #5
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	4413      	add	r3, r2
 801012a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	69ba      	ldr	r2, [r7, #24]
 8010132:	0151      	lsls	r1, r2, #5
 8010134:	69fa      	ldr	r2, [r7, #28]
 8010136:	440a      	add	r2, r1
 8010138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801013c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010140:	6013      	str	r3, [r2, #0]
 8010142:	e00f      	b.n	8010164 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	69ba      	ldr	r2, [r7, #24]
 8010154:	0151      	lsls	r1, r2, #5
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	440a      	add	r2, r1
 801015a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801015e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	69ba      	ldr	r2, [r7, #24]
 8010174:	0151      	lsls	r1, r2, #5
 8010176:	69fa      	ldr	r2, [r7, #28]
 8010178:	440a      	add	r2, r1
 801017a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801017e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3720      	adds	r7, #32
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	1ff80000 	.word	0x1ff80000

08010194 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010194:	b480      	push	{r7}
 8010196:	b087      	sub	sp, #28
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	4613      	mov	r3, r2
 80101a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	785b      	ldrb	r3, [r3, #1]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	f040 80ce 	bne.w	8010352 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d132      	bne.n	8010224 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	0151      	lsls	r1, r2, #5
 80101d0:	697a      	ldr	r2, [r7, #20]
 80101d2:	440a      	add	r2, r1
 80101d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	015a      	lsls	r2, r3, #5
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	4413      	add	r3, r2
 80101ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	693a      	ldr	r2, [r7, #16]
 80101f2:	0151      	lsls	r1, r2, #5
 80101f4:	697a      	ldr	r2, [r7, #20]
 80101f6:	440a      	add	r2, r1
 80101f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	015a      	lsls	r2, r3, #5
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	4413      	add	r3, r2
 801020a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	693a      	ldr	r2, [r7, #16]
 8010212:	0151      	lsls	r1, r2, #5
 8010214:	697a      	ldr	r2, [r7, #20]
 8010216:	440a      	add	r2, r1
 8010218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801021c:	0cdb      	lsrs	r3, r3, #19
 801021e:	04db      	lsls	r3, r3, #19
 8010220:	6113      	str	r3, [r2, #16]
 8010222:	e04e      	b.n	80102c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	015a      	lsls	r2, r3, #5
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	4413      	add	r3, r2
 801022c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	693a      	ldr	r2, [r7, #16]
 8010234:	0151      	lsls	r1, r2, #5
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	440a      	add	r2, r1
 801023a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801023e:	0cdb      	lsrs	r3, r3, #19
 8010240:	04db      	lsls	r3, r3, #19
 8010242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	015a      	lsls	r2, r3, #5
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	4413      	add	r3, r2
 801024c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	0151      	lsls	r1, r2, #5
 8010256:	697a      	ldr	r2, [r7, #20]
 8010258:	440a      	add	r2, r1
 801025a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801025e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010266:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	699a      	ldr	r2, [r3, #24]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	429a      	cmp	r2, r3
 8010272:	d903      	bls.n	801027c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	68da      	ldr	r2, [r3, #12]
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	015a      	lsls	r2, r3, #5
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	4413      	add	r3, r2
 8010284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	0151      	lsls	r1, r2, #5
 801028e:	697a      	ldr	r2, [r7, #20]
 8010290:	440a      	add	r2, r1
 8010292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801029a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	015a      	lsls	r2, r3, #5
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	4413      	add	r3, r2
 80102a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a8:	691a      	ldr	r2, [r3, #16]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	699b      	ldr	r3, [r3, #24]
 80102ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102b2:	6939      	ldr	r1, [r7, #16]
 80102b4:	0148      	lsls	r0, r1, #5
 80102b6:	6979      	ldr	r1, [r7, #20]
 80102b8:	4401      	add	r1, r0
 80102ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80102be:	4313      	orrs	r3, r2
 80102c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80102c2:	79fb      	ldrb	r3, [r7, #7]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d11e      	bne.n	8010306 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	695b      	ldr	r3, [r3, #20]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d009      	beq.n	80102e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	015a      	lsls	r2, r3, #5
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	4413      	add	r3, r2
 80102d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102dc:	461a      	mov	r2, r3
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	695b      	ldr	r3, [r3, #20]
 80102e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	015a      	lsls	r2, r3, #5
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	4413      	add	r3, r2
 80102ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	0151      	lsls	r1, r2, #5
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	440a      	add	r2, r1
 80102fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	e097      	b.n	8010436 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	015a      	lsls	r2, r3, #5
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	4413      	add	r3, r2
 801030e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	693a      	ldr	r2, [r7, #16]
 8010316:	0151      	lsls	r1, r2, #5
 8010318:	697a      	ldr	r2, [r7, #20]
 801031a:	440a      	add	r2, r1
 801031c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010324:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	2b00      	cmp	r3, #0
 801032c:	f000 8083 	beq.w	8010436 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	f003 030f 	and.w	r3, r3, #15
 8010340:	2101      	movs	r1, #1
 8010342:	fa01 f303 	lsl.w	r3, r1, r3
 8010346:	6979      	ldr	r1, [r7, #20]
 8010348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801034c:	4313      	orrs	r3, r2
 801034e:	634b      	str	r3, [r1, #52]	; 0x34
 8010350:	e071      	b.n	8010436 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	015a      	lsls	r2, r3, #5
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	4413      	add	r3, r2
 801035a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	0151      	lsls	r1, r2, #5
 8010364:	697a      	ldr	r2, [r7, #20]
 8010366:	440a      	add	r2, r1
 8010368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801036c:	0cdb      	lsrs	r3, r3, #19
 801036e:	04db      	lsls	r3, r3, #19
 8010370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	0151      	lsls	r1, r2, #5
 8010384:	697a      	ldr	r2, [r7, #20]
 8010386:	440a      	add	r2, r1
 8010388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801038c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010394:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	68da      	ldr	r2, [r3, #12]
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	68da      	ldr	r2, [r3, #12]
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	015a      	lsls	r2, r3, #5
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	4413      	add	r3, r2
 80103b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ba:	691b      	ldr	r3, [r3, #16]
 80103bc:	693a      	ldr	r2, [r7, #16]
 80103be:	0151      	lsls	r1, r2, #5
 80103c0:	697a      	ldr	r2, [r7, #20]
 80103c2:	440a      	add	r2, r1
 80103c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	015a      	lsls	r2, r3, #5
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	4413      	add	r3, r2
 80103d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103da:	691a      	ldr	r2, [r3, #16]
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	69db      	ldr	r3, [r3, #28]
 80103e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103e4:	6939      	ldr	r1, [r7, #16]
 80103e6:	0148      	lsls	r0, r1, #5
 80103e8:	6979      	ldr	r1, [r7, #20]
 80103ea:	4401      	add	r1, r0
 80103ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80103f0:	4313      	orrs	r3, r2
 80103f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	2b01      	cmp	r3, #1
 80103f8:	d10d      	bne.n	8010416 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d009      	beq.n	8010416 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	6919      	ldr	r1, [r3, #16]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	015a      	lsls	r2, r3, #5
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	4413      	add	r3, r2
 801040e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010412:	460a      	mov	r2, r1
 8010414:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	015a      	lsls	r2, r3, #5
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	4413      	add	r3, r2
 801041e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	693a      	ldr	r2, [r7, #16]
 8010426:	0151      	lsls	r1, r2, #5
 8010428:	697a      	ldr	r2, [r7, #20]
 801042a:	440a      	add	r2, r1
 801042c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	371c      	adds	r7, #28
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010444:	b480      	push	{r7}
 8010446:	b087      	sub	sp, #28
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801044e:	2300      	movs	r3, #0
 8010450:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	785b      	ldrb	r3, [r3, #1]
 801045e:	2b01      	cmp	r3, #1
 8010460:	d14a      	bne.n	80104f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	015a      	lsls	r2, r3, #5
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	4413      	add	r3, r2
 801046c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801047a:	f040 8086 	bne.w	801058a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	015a      	lsls	r2, r3, #5
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	4413      	add	r3, r2
 8010488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	7812      	ldrb	r2, [r2, #0]
 8010492:	0151      	lsls	r1, r2, #5
 8010494:	693a      	ldr	r2, [r7, #16]
 8010496:	440a      	add	r2, r1
 8010498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801049c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80104a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	015a      	lsls	r2, r3, #5
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	4413      	add	r3, r2
 80104ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	7812      	ldrb	r2, [r2, #0]
 80104b6:	0151      	lsls	r1, r2, #5
 80104b8:	693a      	ldr	r2, [r7, #16]
 80104ba:	440a      	add	r2, r1
 80104bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80104c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	3301      	adds	r3, #1
 80104ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d902      	bls.n	80104dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80104d6:	2301      	movs	r3, #1
 80104d8:	75fb      	strb	r3, [r7, #23]
          break;
 80104da:	e056      	b.n	801058a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	015a      	lsls	r2, r3, #5
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	4413      	add	r3, r2
 80104e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104f4:	d0e7      	beq.n	80104c6 <USB_EPStopXfer+0x82>
 80104f6:	e048      	b.n	801058a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	015a      	lsls	r2, r3, #5
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	4413      	add	r3, r2
 8010502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801050c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010510:	d13b      	bne.n	801058a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	7812      	ldrb	r2, [r2, #0]
 8010526:	0151      	lsls	r1, r2, #5
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	440a      	add	r2, r1
 801052c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010534:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	015a      	lsls	r2, r3, #5
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	4413      	add	r3, r2
 8010540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	683a      	ldr	r2, [r7, #0]
 8010548:	7812      	ldrb	r2, [r2, #0]
 801054a:	0151      	lsls	r1, r2, #5
 801054c:	693a      	ldr	r2, [r7, #16]
 801054e:	440a      	add	r2, r1
 8010550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	3301      	adds	r3, #1
 801055e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f242 7210 	movw	r2, #10000	; 0x2710
 8010566:	4293      	cmp	r3, r2
 8010568:	d902      	bls.n	8010570 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801056a:	2301      	movs	r3, #1
 801056c:	75fb      	strb	r3, [r7, #23]
          break;
 801056e:	e00c      	b.n	801058a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	015a      	lsls	r2, r3, #5
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	4413      	add	r3, r2
 801057a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010588:	d0e7      	beq.n	801055a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801058a:	7dfb      	ldrb	r3, [r7, #23]
}
 801058c:	4618      	mov	r0, r3
 801058e:	371c      	adds	r7, #28
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010598:	b480      	push	{r7}
 801059a:	b089      	sub	sp, #36	; 0x24
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	4611      	mov	r1, r2
 80105a4:	461a      	mov	r2, r3
 80105a6:	460b      	mov	r3, r1
 80105a8:	71fb      	strb	r3, [r7, #7]
 80105aa:	4613      	mov	r3, r2
 80105ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80105b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d123      	bne.n	8010606 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80105be:	88bb      	ldrh	r3, [r7, #4]
 80105c0:	3303      	adds	r3, #3
 80105c2:	089b      	lsrs	r3, r3, #2
 80105c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80105c6:	2300      	movs	r3, #0
 80105c8:	61bb      	str	r3, [r7, #24]
 80105ca:	e018      	b.n	80105fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80105cc:	79fb      	ldrb	r3, [r7, #7]
 80105ce:	031a      	lsls	r2, r3, #12
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	4413      	add	r3, r2
 80105d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105d8:	461a      	mov	r2, r3
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	3301      	adds	r3, #1
 80105e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	3301      	adds	r3, #1
 80105ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	3301      	adds	r3, #1
 80105f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	3301      	adds	r3, #1
 80105f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	3301      	adds	r3, #1
 80105fc:	61bb      	str	r3, [r7, #24]
 80105fe:	69ba      	ldr	r2, [r7, #24]
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	429a      	cmp	r2, r3
 8010604:	d3e2      	bcc.n	80105cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3724      	adds	r7, #36	; 0x24
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010614:	b480      	push	{r7}
 8010616:	b08b      	sub	sp, #44	; 0x2c
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	4613      	mov	r3, r2
 8010620:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801062a:	88fb      	ldrh	r3, [r7, #6]
 801062c:	089b      	lsrs	r3, r3, #2
 801062e:	b29b      	uxth	r3, r3
 8010630:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010632:	88fb      	ldrh	r3, [r7, #6]
 8010634:	f003 0303 	and.w	r3, r3, #3
 8010638:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801063a:	2300      	movs	r3, #0
 801063c:	623b      	str	r3, [r7, #32]
 801063e:	e014      	b.n	801066a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064a:	601a      	str	r2, [r3, #0]
    pDest++;
 801064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064e:	3301      	adds	r3, #1
 8010650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	3301      	adds	r3, #1
 8010656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	3301      	adds	r3, #1
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	3301      	adds	r3, #1
 8010662:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	3301      	adds	r3, #1
 8010668:	623b      	str	r3, [r7, #32]
 801066a:	6a3a      	ldr	r2, [r7, #32]
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	429a      	cmp	r2, r3
 8010670:	d3e6      	bcc.n	8010640 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010672:	8bfb      	ldrh	r3, [r7, #30]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d01e      	beq.n	80106b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010678:	2300      	movs	r3, #0
 801067a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010682:	461a      	mov	r2, r3
 8010684:	f107 0310 	add.w	r3, r7, #16
 8010688:	6812      	ldr	r2, [r2, #0]
 801068a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801068c:	693a      	ldr	r2, [r7, #16]
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	b2db      	uxtb	r3, r3
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	fa22 f303 	lsr.w	r3, r2, r3
 8010698:	b2da      	uxtb	r2, r3
 801069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069c:	701a      	strb	r2, [r3, #0]
      i++;
 801069e:	6a3b      	ldr	r3, [r7, #32]
 80106a0:	3301      	adds	r3, #1
 80106a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	3301      	adds	r3, #1
 80106a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80106aa:	8bfb      	ldrh	r3, [r7, #30]
 80106ac:	3b01      	subs	r3, #1
 80106ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80106b0:	8bfb      	ldrh	r3, [r7, #30]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1ea      	bne.n	801068c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	372c      	adds	r7, #44	; 0x2c
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	785b      	ldrb	r3, [r3, #1]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d12c      	bne.n	801073a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	015a      	lsls	r2, r3, #5
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	4413      	add	r3, r2
 80106e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	db12      	blt.n	8010718 <USB_EPSetStall+0x54>
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d00f      	beq.n	8010718 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	015a      	lsls	r2, r3, #5
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	4413      	add	r3, r2
 8010700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	0151      	lsls	r1, r2, #5
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	440a      	add	r2, r1
 801070e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010716:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	015a      	lsls	r2, r3, #5
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	4413      	add	r3, r2
 8010720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	0151      	lsls	r1, r2, #5
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	440a      	add	r2, r1
 801072e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010736:	6013      	str	r3, [r2, #0]
 8010738:	e02b      	b.n	8010792 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	015a      	lsls	r2, r3, #5
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	4413      	add	r3, r2
 8010742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	db12      	blt.n	8010772 <USB_EPSetStall+0xae>
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00f      	beq.n	8010772 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	015a      	lsls	r2, r3, #5
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	4413      	add	r3, r2
 801075a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	0151      	lsls	r1, r2, #5
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	440a      	add	r2, r1
 8010768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801076c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010770:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	015a      	lsls	r2, r3, #5
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	4413      	add	r3, r2
 801077a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	68ba      	ldr	r2, [r7, #8]
 8010782:	0151      	lsls	r1, r2, #5
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	440a      	add	r2, r1
 8010788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010790:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b085      	sub	sp, #20
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	785b      	ldrb	r3, [r3, #1]
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d128      	bne.n	801080e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	015a      	lsls	r2, r3, #5
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	4413      	add	r3, r2
 80107c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	0151      	lsls	r1, r2, #5
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	440a      	add	r2, r1
 80107d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80107da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	791b      	ldrb	r3, [r3, #4]
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d003      	beq.n	80107ec <USB_EPClearStall+0x4c>
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	791b      	ldrb	r3, [r3, #4]
 80107e8:	2b02      	cmp	r3, #2
 80107ea:	d138      	bne.n	801085e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68ba      	ldr	r2, [r7, #8]
 80107fc:	0151      	lsls	r1, r2, #5
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	440a      	add	r2, r1
 8010802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	e027      	b.n	801085e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	015a      	lsls	r2, r3, #5
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	4413      	add	r3, r2
 8010816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	68ba      	ldr	r2, [r7, #8]
 801081e:	0151      	lsls	r1, r2, #5
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	440a      	add	r2, r1
 8010824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801082c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	791b      	ldrb	r3, [r3, #4]
 8010832:	2b03      	cmp	r3, #3
 8010834:	d003      	beq.n	801083e <USB_EPClearStall+0x9e>
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	791b      	ldrb	r3, [r3, #4]
 801083a:	2b02      	cmp	r3, #2
 801083c:	d10f      	bne.n	801085e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	015a      	lsls	r2, r3, #5
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	4413      	add	r3, r2
 8010846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68ba      	ldr	r2, [r7, #8]
 801084e:	0151      	lsls	r1, r2, #5
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	440a      	add	r2, r1
 8010854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801085c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	460b      	mov	r3, r1
 8010876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801088a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801088e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	78fb      	ldrb	r3, [r7, #3]
 801089a:	011b      	lsls	r3, r3, #4
 801089c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80108a0:	68f9      	ldr	r1, [r7, #12]
 80108a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108a6:	4313      	orrs	r3, r2
 80108a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3714      	adds	r7, #20
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr

080108b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80108d2:	f023 0303 	bic.w	r3, r3, #3
 80108d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108e6:	f023 0302 	bic.w	r3, r3, #2
 80108ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3714      	adds	r7, #20
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80108fa:	b480      	push	{r7}
 80108fc:	b085      	sub	sp, #20
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010914:	f023 0303 	bic.w	r3, r3, #3
 8010918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010928:	f043 0302 	orr.w	r3, r3, #2
 801092c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	3714      	adds	r7, #20
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801093c:	b480      	push	{r7}
 801093e:	b085      	sub	sp, #20
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	695b      	ldr	r3, [r3, #20]
 8010948:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	699b      	ldr	r3, [r3, #24]
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	4013      	ands	r3, r2
 8010952:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010954:	68fb      	ldr	r3, [r7, #12]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3714      	adds	r7, #20
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr

08010962 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010962:	b480      	push	{r7}
 8010964:	b085      	sub	sp, #20
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010974:	699b      	ldr	r3, [r3, #24]
 8010976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801097e:	69db      	ldr	r3, [r3, #28]
 8010980:	68ba      	ldr	r2, [r7, #8]
 8010982:	4013      	ands	r3, r2
 8010984:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	0c1b      	lsrs	r3, r3, #16
}
 801098a:	4618      	mov	r0, r3
 801098c:	3714      	adds	r7, #20
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr

08010996 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010996:	b480      	push	{r7}
 8010998:	b085      	sub	sp, #20
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109a8:	699b      	ldr	r3, [r3, #24]
 80109aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109b2:	69db      	ldr	r3, [r3, #28]
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	4013      	ands	r3, r2
 80109b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	b29b      	uxth	r3, r3
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr

080109ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80109ca:	b480      	push	{r7}
 80109cc:	b085      	sub	sp, #20
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
 80109d2:	460b      	mov	r3, r1
 80109d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80109da:	78fb      	ldrb	r3, [r7, #3]
 80109dc:	015a      	lsls	r2, r3, #5
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	4413      	add	r3, r2
 80109e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109f0:	695b      	ldr	r3, [r3, #20]
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	4013      	ands	r3, r2
 80109f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80109f8:	68bb      	ldr	r3, [r7, #8]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3714      	adds	r7, #20
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a06:	b480      	push	{r7}
 8010a08:	b087      	sub	sp, #28
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	460b      	mov	r3, r1
 8010a10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a1c:	691b      	ldr	r3, [r3, #16]
 8010a1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010a2a:	78fb      	ldrb	r3, [r7, #3]
 8010a2c:	f003 030f 	and.w	r3, r3, #15
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	fa22 f303 	lsr.w	r3, r2, r3
 8010a36:	01db      	lsls	r3, r3, #7
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	693a      	ldr	r2, [r7, #16]
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	015a      	lsls	r2, r3, #5
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	4413      	add	r3, r2
 8010a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	4013      	ands	r3, r2
 8010a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a54:	68bb      	ldr	r3, [r7, #8]
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	371c      	adds	r7, #28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr

08010a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010a62:	b480      	push	{r7}
 8010a64:	b083      	sub	sp, #12
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	695b      	ldr	r3, [r3, #20]
 8010a6e:	f003 0301 	and.w	r3, r3, #1
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	370c      	adds	r7, #12
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr

08010a7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010a7e:	b480      	push	{r7}
 8010a80:	b085      	sub	sp, #20
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68fa      	ldr	r2, [r7, #12]
 8010a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010a9c:	f023 0307 	bic.w	r3, r3, #7
 8010aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010ab6:	2300      	movs	r3, #0
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3714      	adds	r7, #20
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b087      	sub	sp, #28
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	460b      	mov	r3, r1
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	333c      	adds	r3, #60	; 0x3c
 8010ada:	3304      	adds	r3, #4
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	4a26      	ldr	r2, [pc, #152]	; (8010b7c <USB_EP0_OutStart+0xb8>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d90a      	bls.n	8010afe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010af8:	d101      	bne.n	8010afe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010afa:	2300      	movs	r3, #0
 8010afc:	e037      	b.n	8010b6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b04:	461a      	mov	r2, r3
 8010b06:	2300      	movs	r3, #0
 8010b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b10:	691b      	ldr	r3, [r3, #16]
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	697a      	ldr	r2, [r7, #20]
 8010b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b2c:	f043 0318 	orr.w	r3, r3, #24
 8010b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	697a      	ldr	r2, [r7, #20]
 8010b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010b44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010b46:	7afb      	ldrb	r3, [r7, #11]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d10f      	bne.n	8010b6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b52:	461a      	mov	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	697a      	ldr	r2, [r7, #20]
 8010b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	371c      	adds	r7, #28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	4f54300a 	.word	0x4f54300a

08010b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	4a13      	ldr	r2, [pc, #76]	; (8010be4 <USB_CoreReset+0x64>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d901      	bls.n	8010b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010b9a:	2303      	movs	r3, #3
 8010b9c:	e01b      	b.n	8010bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	691b      	ldr	r3, [r3, #16]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	daf2      	bge.n	8010b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	f043 0201 	orr.w	r2, r3, #1
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	4a09      	ldr	r2, [pc, #36]	; (8010be4 <USB_CoreReset+0x64>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d901      	bls.n	8010bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010bc4:	2303      	movs	r3, #3
 8010bc6:	e006      	b.n	8010bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	691b      	ldr	r3, [r3, #16]
 8010bcc:	f003 0301 	and.w	r3, r3, #1
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d0f0      	beq.n	8010bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3714      	adds	r7, #20
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr
 8010be2:	bf00      	nop
 8010be4:	00030d40 	.word	0x00030d40

08010be8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010bec:	4904      	ldr	r1, [pc, #16]	; (8010c00 <MX_FATFS_Init+0x18>)
 8010bee:	4805      	ldr	r0, [pc, #20]	; (8010c04 <MX_FATFS_Init+0x1c>)
 8010bf0:	f005 f8ba 	bl	8015d68 <FATFS_LinkDriver>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	4b03      	ldr	r3, [pc, #12]	; (8010c08 <MX_FATFS_Init+0x20>)
 8010bfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010bfc:	bf00      	nop
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	20000e90 	.word	0x20000e90
 8010c04:	0801c7fc 	.word	0x0801c7fc
 8010c08:	20000e8c 	.word	0x20000e8c

08010c0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010c10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c26:	f000 f896 	bl	8010d56 <BSP_SD_IsDetected>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d001      	beq.n	8010c34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010c30:	2301      	movs	r3, #1
 8010c32:	e012      	b.n	8010c5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010c34:	480b      	ldr	r0, [pc, #44]	; (8010c64 <BSP_SD_Init+0x48>)
 8010c36:	f7fa fb6b 	bl	800b310 <HAL_SD_Init>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c3e:	79fb      	ldrb	r3, [r7, #7]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d109      	bne.n	8010c58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c48:	4806      	ldr	r0, [pc, #24]	; (8010c64 <BSP_SD_Init+0x48>)
 8010c4a:	f7fb f939 	bl	800bec0 <HAL_SD_ConfigWideBusOperation>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d001      	beq.n	8010c58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010c54:	2301      	movs	r3, #1
 8010c56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010c58:	79fb      	ldrb	r3, [r7, #7]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3708      	adds	r7, #8
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	2000091c 	.word	0x2000091c

08010c68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c74:	2300      	movs	r3, #0
 8010c76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68ba      	ldr	r2, [r7, #8]
 8010c7c:	68f9      	ldr	r1, [r7, #12]
 8010c7e:	4806      	ldr	r0, [pc, #24]	; (8010c98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010c80:	f7fa fbf6 	bl	800b470 <HAL_SD_ReadBlocks_DMA>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d001      	beq.n	8010c8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3718      	adds	r7, #24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	2000091c 	.word	0x2000091c

08010c9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	68f9      	ldr	r1, [r7, #12]
 8010cb2:	4806      	ldr	r0, [pc, #24]	; (8010ccc <BSP_SD_WriteBlocks_DMA+0x30>)
 8010cb4:	f7fa fcbe 	bl	800b634 <HAL_SD_WriteBlocks_DMA>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	2000091c 	.word	0x2000091c

08010cd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010cd4:	4805      	ldr	r0, [pc, #20]	; (8010cec <BSP_SD_GetCardState+0x1c>)
 8010cd6:	f7fb f98d 	bl	800bff4 <HAL_SD_GetCardState>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b04      	cmp	r3, #4
 8010cde:	bf14      	ite	ne
 8010ce0:	2301      	movne	r3, #1
 8010ce2:	2300      	moveq	r3, #0
 8010ce4:	b2db      	uxtb	r3, r3
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	2000091c 	.word	0x2000091c

08010cf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010cf8:	6879      	ldr	r1, [r7, #4]
 8010cfa:	4803      	ldr	r0, [pc, #12]	; (8010d08 <BSP_SD_GetCardInfo+0x18>)
 8010cfc:	f7fb f8b4 	bl	800be68 <HAL_SD_GetCardInfo>
}
 8010d00:	bf00      	nop
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	2000091c 	.word	0x2000091c

08010d0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010d14:	f000 f818 	bl	8010d48 <BSP_SD_AbortCallback>
}
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010d28:	f000 f98c 	bl	8011044 <BSP_SD_WriteCpltCallback>
}
 8010d2c:	bf00      	nop
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010d3c:	f000 f98e 	bl	801105c <BSP_SD_ReadCpltCallback>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	af00      	add	r7, sp, #0

}
 8010d4c:	bf00      	nop
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010d56:	b480      	push	{r7}
 8010d58:	b083      	sub	sp, #12
 8010d5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8010d60:	79fb      	ldrb	r3, [r7, #7]
 8010d62:	b2db      	uxtb	r3, r3
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	370c      	adds	r7, #12
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010d78:	f7f5 f87e 	bl	8005e78 <HAL_GetTick>
 8010d7c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010d7e:	e006      	b.n	8010d8e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d80:	f7ff ffa6 	bl	8010cd0 <BSP_SD_GetCardState>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d101      	bne.n	8010d8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e009      	b.n	8010da2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010d8e:	f7f5 f873 	bl	8005e78 <HAL_GetTick>
 8010d92:	4602      	mov	r2, r0
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d8f0      	bhi.n	8010d80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
	...

08010dac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	4603      	mov	r3, r0
 8010db4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010db6:	4b0b      	ldr	r3, [pc, #44]	; (8010de4 <SD_CheckStatus+0x38>)
 8010db8:	2201      	movs	r2, #1
 8010dba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010dbc:	f7ff ff88 	bl	8010cd0 <BSP_SD_GetCardState>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d107      	bne.n	8010dd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010dc6:	4b07      	ldr	r3, [pc, #28]	; (8010de4 <SD_CheckStatus+0x38>)
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	f023 0301 	bic.w	r3, r3, #1
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	4b04      	ldr	r3, [pc, #16]	; (8010de4 <SD_CheckStatus+0x38>)
 8010dd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010dd6:	4b03      	ldr	r3, [pc, #12]	; (8010de4 <SD_CheckStatus+0x38>)
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	b2db      	uxtb	r3, r3
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3708      	adds	r7, #8
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	20000061 	.word	0x20000061

08010de8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	4603      	mov	r3, r0
 8010df0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010df2:	f7ff ff13 	bl	8010c1c <BSP_SD_Init>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d107      	bne.n	8010e0c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff ffd4 	bl	8010dac <SD_CheckStatus>
 8010e04:	4603      	mov	r3, r0
 8010e06:	461a      	mov	r2, r3
 8010e08:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <SD_initialize+0x34>)
 8010e0a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e0c:	4b03      	ldr	r3, [pc, #12]	; (8010e1c <SD_initialize+0x34>)
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	b2db      	uxtb	r3, r3
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3708      	adds	r7, #8
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	20000061 	.word	0x20000061

08010e20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010e2a:	79fb      	ldrb	r3, [r7, #7]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff ffbd 	bl	8010dac <SD_CheckStatus>
 8010e32:	4603      	mov	r3, r0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b086      	sub	sp, #24
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	607a      	str	r2, [r7, #4]
 8010e46:	603b      	str	r3, [r7, #0]
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8010e54:	f7ff ff8c 	bl	8010d70 <SD_CheckStatusWithTimeout>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	da01      	bge.n	8010e62 <SD_read+0x26>
  {
    return res;
 8010e5e:	7dfb      	ldrb	r3, [r7, #23]
 8010e60:	e03b      	b.n	8010eda <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010e62:	683a      	ldr	r2, [r7, #0]
 8010e64:	6879      	ldr	r1, [r7, #4]
 8010e66:	68b8      	ldr	r0, [r7, #8]
 8010e68:	f7ff fefe 	bl	8010c68 <BSP_SD_ReadBlocks_DMA>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d132      	bne.n	8010ed8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010e72:	4b1c      	ldr	r3, [pc, #112]	; (8010ee4 <SD_read+0xa8>)
 8010e74:	2200      	movs	r2, #0
 8010e76:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010e78:	f7f4 fffe 	bl	8005e78 <HAL_GetTick>
 8010e7c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010e7e:	bf00      	nop
 8010e80:	4b18      	ldr	r3, [pc, #96]	; (8010ee4 <SD_read+0xa8>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d108      	bne.n	8010e9a <SD_read+0x5e>
 8010e88:	f7f4 fff6 	bl	8005e78 <HAL_GetTick>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d9f2      	bls.n	8010e80 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010e9a:	4b12      	ldr	r3, [pc, #72]	; (8010ee4 <SD_read+0xa8>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d102      	bne.n	8010ea8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	75fb      	strb	r3, [r7, #23]
 8010ea6:	e017      	b.n	8010ed8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010ea8:	4b0e      	ldr	r3, [pc, #56]	; (8010ee4 <SD_read+0xa8>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010eae:	f7f4 ffe3 	bl	8005e78 <HAL_GetTick>
 8010eb2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010eb4:	e007      	b.n	8010ec6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010eb6:	f7ff ff0b 	bl	8010cd0 <BSP_SD_GetCardState>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d102      	bne.n	8010ec6 <SD_read+0x8a>
          {
            res = RES_OK;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010ec4:	e008      	b.n	8010ed8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ec6:	f7f4 ffd7 	bl	8005e78 <HAL_GetTick>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d9ee      	bls.n	8010eb6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3718      	adds	r7, #24
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20000e98 	.word	0x20000e98

08010ee8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60b9      	str	r1, [r7, #8]
 8010ef0:	607a      	str	r2, [r7, #4]
 8010ef2:	603b      	str	r3, [r7, #0]
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ef8:	2301      	movs	r3, #1
 8010efa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010efc:	4b24      	ldr	r3, [pc, #144]	; (8010f90 <SD_write+0xa8>)
 8010efe:	2200      	movs	r2, #0
 8010f00:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8010f06:	f7ff ff33 	bl	8010d70 <SD_CheckStatusWithTimeout>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	da01      	bge.n	8010f14 <SD_write+0x2c>
  {
    return res;
 8010f10:	7dfb      	ldrb	r3, [r7, #23]
 8010f12:	e038      	b.n	8010f86 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010f14:	683a      	ldr	r2, [r7, #0]
 8010f16:	6879      	ldr	r1, [r7, #4]
 8010f18:	68b8      	ldr	r0, [r7, #8]
 8010f1a:	f7ff febf 	bl	8010c9c <BSP_SD_WriteBlocks_DMA>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d12f      	bne.n	8010f84 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010f24:	f7f4 ffa8 	bl	8005e78 <HAL_GetTick>
 8010f28:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f2a:	bf00      	nop
 8010f2c:	4b18      	ldr	r3, [pc, #96]	; (8010f90 <SD_write+0xa8>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d108      	bne.n	8010f46 <SD_write+0x5e>
 8010f34:	f7f4 ffa0 	bl	8005e78 <HAL_GetTick>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	1ad3      	subs	r3, r2, r3
 8010f3e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d9f2      	bls.n	8010f2c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010f46:	4b12      	ldr	r3, [pc, #72]	; (8010f90 <SD_write+0xa8>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d102      	bne.n	8010f54 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	75fb      	strb	r3, [r7, #23]
 8010f52:	e017      	b.n	8010f84 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010f54:	4b0e      	ldr	r3, [pc, #56]	; (8010f90 <SD_write+0xa8>)
 8010f56:	2200      	movs	r2, #0
 8010f58:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f5a:	f7f4 ff8d 	bl	8005e78 <HAL_GetTick>
 8010f5e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f60:	e007      	b.n	8010f72 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f62:	f7ff feb5 	bl	8010cd0 <BSP_SD_GetCardState>
 8010f66:	4603      	mov	r3, r0
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d102      	bne.n	8010f72 <SD_write+0x8a>
          {
            res = RES_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	75fb      	strb	r3, [r7, #23]
            break;
 8010f70:	e008      	b.n	8010f84 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f72:	f7f4 ff81 	bl	8005e78 <HAL_GetTick>
 8010f76:	4602      	mov	r2, r0
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d9ee      	bls.n	8010f62 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3718      	adds	r7, #24
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20000e94 	.word	0x20000e94

08010f94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b08c      	sub	sp, #48	; 0x30
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	603a      	str	r2, [r7, #0]
 8010f9e:	71fb      	strb	r3, [r7, #7]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010faa:	4b25      	ldr	r3, [pc, #148]	; (8011040 <SD_ioctl+0xac>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d001      	beq.n	8010fbc <SD_ioctl+0x28>
 8010fb8:	2303      	movs	r3, #3
 8010fba:	e03c      	b.n	8011036 <SD_ioctl+0xa2>

  switch (cmd)
 8010fbc:	79bb      	ldrb	r3, [r7, #6]
 8010fbe:	2b03      	cmp	r3, #3
 8010fc0:	d834      	bhi.n	801102c <SD_ioctl+0x98>
 8010fc2:	a201      	add	r2, pc, #4	; (adr r2, 8010fc8 <SD_ioctl+0x34>)
 8010fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc8:	08010fd9 	.word	0x08010fd9
 8010fcc:	08010fe1 	.word	0x08010fe1
 8010fd0:	08010ff9 	.word	0x08010ff9
 8010fd4:	08011013 	.word	0x08011013
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010fde:	e028      	b.n	8011032 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fe0:	f107 030c 	add.w	r3, r7, #12
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fe83 	bl	8010cf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ff6:	e01c      	b.n	8011032 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ff8:	f107 030c 	add.w	r3, r7, #12
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff fe77 	bl	8010cf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011004:	b29a      	uxth	r2, r3
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011010:	e00f      	b.n	8011032 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011012:	f107 030c 	add.w	r3, r7, #12
 8011016:	4618      	mov	r0, r3
 8011018:	f7ff fe6a 	bl	8010cf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101e:	0a5a      	lsrs	r2, r3, #9
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011024:	2300      	movs	r3, #0
 8011026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801102a:	e002      	b.n	8011032 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801102c:	2304      	movs	r3, #4
 801102e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011036:	4618      	mov	r0, r3
 8011038:	3730      	adds	r7, #48	; 0x30
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	20000061 	.word	0x20000061

08011044 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011044:	b480      	push	{r7}
 8011046:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011048:	4b03      	ldr	r3, [pc, #12]	; (8011058 <BSP_SD_WriteCpltCallback+0x14>)
 801104a:	2201      	movs	r2, #1
 801104c:	601a      	str	r2, [r3, #0]
}
 801104e:	bf00      	nop
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr
 8011058:	20000e94 	.word	0x20000e94

0801105c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801105c:	b480      	push	{r7}
 801105e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011060:	4b03      	ldr	r3, [pc, #12]	; (8011070 <BSP_SD_ReadCpltCallback+0x14>)
 8011062:	2201      	movs	r2, #1
 8011064:	601a      	str	r2, [r3, #0]
}
 8011066:	bf00      	nop
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr
 8011070:	20000e98 	.word	0x20000e98

08011074 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	460b      	mov	r3, r1
 801107e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011080:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011084:	f005 fb56 	bl	8016734 <USBD_static_malloc>
 8011088:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d109      	bne.n	80110a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	32b0      	adds	r2, #176	; 0xb0
 801109a:	2100      	movs	r1, #0
 801109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80110a0:	2302      	movs	r3, #2
 80110a2:	e0d4      	b.n	801124e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80110a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80110a8:	2100      	movs	r1, #0
 80110aa:	68f8      	ldr	r0, [r7, #12]
 80110ac:	f006 fd20 	bl	8017af0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	32b0      	adds	r2, #176	; 0xb0
 80110ba:	68f9      	ldr	r1, [r7, #12]
 80110bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	32b0      	adds	r2, #176	; 0xb0
 80110ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	7c1b      	ldrb	r3, [r3, #16]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d138      	bne.n	801114e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80110dc:	4b5e      	ldr	r3, [pc, #376]	; (8011258 <USBD_CDC_Init+0x1e4>)
 80110de:	7819      	ldrb	r1, [r3, #0]
 80110e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110e4:	2202      	movs	r2, #2
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f005 fa01 	bl	80164ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80110ec:	4b5a      	ldr	r3, [pc, #360]	; (8011258 <USBD_CDC_Init+0x1e4>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	f003 020f 	and.w	r2, r3, #15
 80110f4:	6879      	ldr	r1, [r7, #4]
 80110f6:	4613      	mov	r3, r2
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4413      	add	r3, r2
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	440b      	add	r3, r1
 8011100:	3324      	adds	r3, #36	; 0x24
 8011102:	2201      	movs	r2, #1
 8011104:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011106:	4b55      	ldr	r3, [pc, #340]	; (801125c <USBD_CDC_Init+0x1e8>)
 8011108:	7819      	ldrb	r1, [r3, #0]
 801110a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801110e:	2202      	movs	r2, #2
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f005 f9ec 	bl	80164ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011116:	4b51      	ldr	r3, [pc, #324]	; (801125c <USBD_CDC_Init+0x1e8>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	f003 020f 	and.w	r2, r3, #15
 801111e:	6879      	ldr	r1, [r7, #4]
 8011120:	4613      	mov	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4413      	add	r3, r2
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	440b      	add	r3, r1
 801112a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801112e:	2201      	movs	r2, #1
 8011130:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011132:	4b4b      	ldr	r3, [pc, #300]	; (8011260 <USBD_CDC_Init+0x1ec>)
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	f003 020f 	and.w	r2, r3, #15
 801113a:	6879      	ldr	r1, [r7, #4]
 801113c:	4613      	mov	r3, r2
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	4413      	add	r3, r2
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	440b      	add	r3, r1
 8011146:	3326      	adds	r3, #38	; 0x26
 8011148:	2210      	movs	r2, #16
 801114a:	801a      	strh	r2, [r3, #0]
 801114c:	e035      	b.n	80111ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801114e:	4b42      	ldr	r3, [pc, #264]	; (8011258 <USBD_CDC_Init+0x1e4>)
 8011150:	7819      	ldrb	r1, [r3, #0]
 8011152:	2340      	movs	r3, #64	; 0x40
 8011154:	2202      	movs	r2, #2
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f005 f9c9 	bl	80164ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801115c:	4b3e      	ldr	r3, [pc, #248]	; (8011258 <USBD_CDC_Init+0x1e4>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 020f 	and.w	r2, r3, #15
 8011164:	6879      	ldr	r1, [r7, #4]
 8011166:	4613      	mov	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	4413      	add	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	440b      	add	r3, r1
 8011170:	3324      	adds	r3, #36	; 0x24
 8011172:	2201      	movs	r2, #1
 8011174:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011176:	4b39      	ldr	r3, [pc, #228]	; (801125c <USBD_CDC_Init+0x1e8>)
 8011178:	7819      	ldrb	r1, [r3, #0]
 801117a:	2340      	movs	r3, #64	; 0x40
 801117c:	2202      	movs	r2, #2
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f005 f9b5 	bl	80164ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011184:	4b35      	ldr	r3, [pc, #212]	; (801125c <USBD_CDC_Init+0x1e8>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	f003 020f 	and.w	r2, r3, #15
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	4613      	mov	r3, r2
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	440b      	add	r3, r1
 8011198:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801119c:	2201      	movs	r2, #1
 801119e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80111a0:	4b2f      	ldr	r3, [pc, #188]	; (8011260 <USBD_CDC_Init+0x1ec>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f003 020f 	and.w	r2, r3, #15
 80111a8:	6879      	ldr	r1, [r7, #4]
 80111aa:	4613      	mov	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	440b      	add	r3, r1
 80111b4:	3326      	adds	r3, #38	; 0x26
 80111b6:	2210      	movs	r2, #16
 80111b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111ba:	4b29      	ldr	r3, [pc, #164]	; (8011260 <USBD_CDC_Init+0x1ec>)
 80111bc:	7819      	ldrb	r1, [r3, #0]
 80111be:	2308      	movs	r3, #8
 80111c0:	2203      	movs	r2, #3
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f005 f993 	bl	80164ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80111c8:	4b25      	ldr	r3, [pc, #148]	; (8011260 <USBD_CDC_Init+0x1ec>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f003 020f 	and.w	r2, r3, #15
 80111d0:	6879      	ldr	r1, [r7, #4]
 80111d2:	4613      	mov	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4413      	add	r3, r2
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	440b      	add	r3, r1
 80111dc:	3324      	adds	r3, #36	; 0x24
 80111de:	2201      	movs	r2, #1
 80111e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2200      	movs	r2, #0
 80111e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	33b0      	adds	r3, #176	; 0xb0
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	4413      	add	r3, r2
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2200      	movs	r2, #0
 8011202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2200      	movs	r2, #0
 801120a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8011214:	2b00      	cmp	r3, #0
 8011216:	d101      	bne.n	801121c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011218:	2302      	movs	r3, #2
 801121a:	e018      	b.n	801124e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	7c1b      	ldrb	r3, [r3, #16]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d10a      	bne.n	801123a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <USBD_CDC_Init+0x1e8>)
 8011226:	7819      	ldrb	r1, [r3, #0]
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801122e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f005 fa4a 	bl	80166cc <USBD_LL_PrepareReceive>
 8011238:	e008      	b.n	801124c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801123a:	4b08      	ldr	r3, [pc, #32]	; (801125c <USBD_CDC_Init+0x1e8>)
 801123c:	7819      	ldrb	r1, [r3, #0]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011244:	2340      	movs	r3, #64	; 0x40
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f005 fa40 	bl	80166cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801124c:	2300      	movs	r3, #0
}
 801124e:	4618      	mov	r0, r3
 8011250:	3710      	adds	r7, #16
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	200000eb 	.word	0x200000eb
 801125c:	200000ec 	.word	0x200000ec
 8011260:	200000ed 	.word	0x200000ed

08011264 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	460b      	mov	r3, r1
 801126e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011270:	4b3a      	ldr	r3, [pc, #232]	; (801135c <USBD_CDC_DeInit+0xf8>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f005 f95f 	bl	801653a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801127c:	4b37      	ldr	r3, [pc, #220]	; (801135c <USBD_CDC_DeInit+0xf8>)
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	f003 020f 	and.w	r2, r3, #15
 8011284:	6879      	ldr	r1, [r7, #4]
 8011286:	4613      	mov	r3, r2
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	4413      	add	r3, r2
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	440b      	add	r3, r1
 8011290:	3324      	adds	r3, #36	; 0x24
 8011292:	2200      	movs	r2, #0
 8011294:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011296:	4b32      	ldr	r3, [pc, #200]	; (8011360 <USBD_CDC_DeInit+0xfc>)
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	4619      	mov	r1, r3
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f005 f94c 	bl	801653a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80112a2:	4b2f      	ldr	r3, [pc, #188]	; (8011360 <USBD_CDC_DeInit+0xfc>)
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	f003 020f 	and.w	r2, r3, #15
 80112aa:	6879      	ldr	r1, [r7, #4]
 80112ac:	4613      	mov	r3, r2
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	4413      	add	r3, r2
 80112b2:	009b      	lsls	r3, r3, #2
 80112b4:	440b      	add	r3, r1
 80112b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80112ba:	2200      	movs	r2, #0
 80112bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80112be:	4b29      	ldr	r3, [pc, #164]	; (8011364 <USBD_CDC_DeInit+0x100>)
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f005 f938 	bl	801653a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80112ca:	4b26      	ldr	r3, [pc, #152]	; (8011364 <USBD_CDC_DeInit+0x100>)
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	f003 020f 	and.w	r2, r3, #15
 80112d2:	6879      	ldr	r1, [r7, #4]
 80112d4:	4613      	mov	r3, r2
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	440b      	add	r3, r1
 80112de:	3324      	adds	r3, #36	; 0x24
 80112e0:	2200      	movs	r2, #0
 80112e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80112e4:	4b1f      	ldr	r3, [pc, #124]	; (8011364 <USBD_CDC_DeInit+0x100>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f003 020f 	and.w	r2, r3, #15
 80112ec:	6879      	ldr	r1, [r7, #4]
 80112ee:	4613      	mov	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	4413      	add	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	440b      	add	r3, r1
 80112f8:	3326      	adds	r3, #38	; 0x26
 80112fa:	2200      	movs	r2, #0
 80112fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	32b0      	adds	r2, #176	; 0xb0
 8011308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d01f      	beq.n	8011350 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011316:	687a      	ldr	r2, [r7, #4]
 8011318:	33b0      	adds	r3, #176	; 0xb0
 801131a:	009b      	lsls	r3, r3, #2
 801131c:	4413      	add	r3, r2
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	32b0      	adds	r2, #176	; 0xb0
 801132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011332:	4618      	mov	r0, r3
 8011334:	f005 fa0c 	bl	8016750 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	32b0      	adds	r2, #176	; 0xb0
 8011342:	2100      	movs	r1, #0
 8011344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	200000eb 	.word	0x200000eb
 8011360:	200000ec 	.word	0x200000ec
 8011364:	200000ed 	.word	0x200000ed

08011368 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b086      	sub	sp, #24
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	32b0      	adds	r2, #176	; 0xb0
 801137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011380:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011382:	2300      	movs	r3, #0
 8011384:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011386:	2300      	movs	r3, #0
 8011388:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801138a:	2300      	movs	r3, #0
 801138c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d101      	bne.n	8011398 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011394:	2303      	movs	r3, #3
 8011396:	e0bf      	b.n	8011518 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d050      	beq.n	8011446 <USBD_CDC_Setup+0xde>
 80113a4:	2b20      	cmp	r3, #32
 80113a6:	f040 80af 	bne.w	8011508 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	88db      	ldrh	r3, [r3, #6]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d03a      	beq.n	8011428 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	b25b      	sxtb	r3, r3
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	da1b      	bge.n	80113f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	33b0      	adds	r3, #176	; 0xb0
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	4413      	add	r3, r2
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80113d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80113d4:	683a      	ldr	r2, [r7, #0]
 80113d6:	88d2      	ldrh	r2, [r2, #6]
 80113d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	88db      	ldrh	r3, [r3, #6]
 80113de:	2b07      	cmp	r3, #7
 80113e0:	bf28      	it	cs
 80113e2:	2307      	movcs	r3, #7
 80113e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	89fa      	ldrh	r2, [r7, #14]
 80113ea:	4619      	mov	r1, r3
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f001 fd89 	bl	8012f04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80113f2:	e090      	b.n	8011516 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	785a      	ldrb	r2, [r3, #1]
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	88db      	ldrh	r3, [r3, #6]
 8011402:	2b3f      	cmp	r3, #63	; 0x3f
 8011404:	d803      	bhi.n	801140e <USBD_CDC_Setup+0xa6>
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	88db      	ldrh	r3, [r3, #6]
 801140a:	b2da      	uxtb	r2, r3
 801140c:	e000      	b.n	8011410 <USBD_CDC_Setup+0xa8>
 801140e:	2240      	movs	r2, #64	; 0x40
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011416:	6939      	ldr	r1, [r7, #16]
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801141e:	461a      	mov	r2, r3
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f001 fd9b 	bl	8012f5c <USBD_CtlPrepareRx>
      break;
 8011426:	e076      	b.n	8011516 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	33b0      	adds	r3, #176	; 0xb0
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	683a      	ldr	r2, [r7, #0]
 801143c:	7850      	ldrb	r0, [r2, #1]
 801143e:	2200      	movs	r2, #0
 8011440:	6839      	ldr	r1, [r7, #0]
 8011442:	4798      	blx	r3
      break;
 8011444:	e067      	b.n	8011516 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	785b      	ldrb	r3, [r3, #1]
 801144a:	2b0b      	cmp	r3, #11
 801144c:	d851      	bhi.n	80114f2 <USBD_CDC_Setup+0x18a>
 801144e:	a201      	add	r2, pc, #4	; (adr r2, 8011454 <USBD_CDC_Setup+0xec>)
 8011450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011454:	08011485 	.word	0x08011485
 8011458:	08011501 	.word	0x08011501
 801145c:	080114f3 	.word	0x080114f3
 8011460:	080114f3 	.word	0x080114f3
 8011464:	080114f3 	.word	0x080114f3
 8011468:	080114f3 	.word	0x080114f3
 801146c:	080114f3 	.word	0x080114f3
 8011470:	080114f3 	.word	0x080114f3
 8011474:	080114f3 	.word	0x080114f3
 8011478:	080114f3 	.word	0x080114f3
 801147c:	080114af 	.word	0x080114af
 8011480:	080114d9 	.word	0x080114d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801148a:	b2db      	uxtb	r3, r3
 801148c:	2b03      	cmp	r3, #3
 801148e:	d107      	bne.n	80114a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011490:	f107 030a 	add.w	r3, r7, #10
 8011494:	2202      	movs	r2, #2
 8011496:	4619      	mov	r1, r3
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f001 fd33 	bl	8012f04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801149e:	e032      	b.n	8011506 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f001 fcbd 	bl	8012e22 <USBD_CtlError>
            ret = USBD_FAIL;
 80114a8:	2303      	movs	r3, #3
 80114aa:	75fb      	strb	r3, [r7, #23]
          break;
 80114ac:	e02b      	b.n	8011506 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	2b03      	cmp	r3, #3
 80114b8:	d107      	bne.n	80114ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80114ba:	f107 030d 	add.w	r3, r7, #13
 80114be:	2201      	movs	r2, #1
 80114c0:	4619      	mov	r1, r3
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f001 fd1e 	bl	8012f04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80114c8:	e01d      	b.n	8011506 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80114ca:	6839      	ldr	r1, [r7, #0]
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f001 fca8 	bl	8012e22 <USBD_CtlError>
            ret = USBD_FAIL;
 80114d2:	2303      	movs	r3, #3
 80114d4:	75fb      	strb	r3, [r7, #23]
          break;
 80114d6:	e016      	b.n	8011506 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d00f      	beq.n	8011504 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80114e4:	6839      	ldr	r1, [r7, #0]
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f001 fc9b 	bl	8012e22 <USBD_CtlError>
            ret = USBD_FAIL;
 80114ec:	2303      	movs	r3, #3
 80114ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80114f0:	e008      	b.n	8011504 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80114f2:	6839      	ldr	r1, [r7, #0]
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f001 fc94 	bl	8012e22 <USBD_CtlError>
          ret = USBD_FAIL;
 80114fa:	2303      	movs	r3, #3
 80114fc:	75fb      	strb	r3, [r7, #23]
          break;
 80114fe:	e002      	b.n	8011506 <USBD_CDC_Setup+0x19e>
          break;
 8011500:	bf00      	nop
 8011502:	e008      	b.n	8011516 <USBD_CDC_Setup+0x1ae>
          break;
 8011504:	bf00      	nop
      }
      break;
 8011506:	e006      	b.n	8011516 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011508:	6839      	ldr	r1, [r7, #0]
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f001 fc89 	bl	8012e22 <USBD_CtlError>
      ret = USBD_FAIL;
 8011510:	2303      	movs	r3, #3
 8011512:	75fb      	strb	r3, [r7, #23]
      break;
 8011514:	bf00      	nop
  }

  return (uint8_t)ret;
 8011516:	7dfb      	ldrb	r3, [r7, #23]
}
 8011518:	4618      	mov	r0, r3
 801151a:	3718      	adds	r7, #24
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	460b      	mov	r3, r1
 801152a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	32b0      	adds	r2, #176	; 0xb0
 801153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d101      	bne.n	801154a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011546:	2303      	movs	r3, #3
 8011548:	e065      	b.n	8011616 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	32b0      	adds	r2, #176	; 0xb0
 8011554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011558:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801155a:	78fb      	ldrb	r3, [r7, #3]
 801155c:	f003 020f 	and.w	r2, r3, #15
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	4613      	mov	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	440b      	add	r3, r1
 801156c:	3318      	adds	r3, #24
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d02f      	beq.n	80115d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011574:	78fb      	ldrb	r3, [r7, #3]
 8011576:	f003 020f 	and.w	r2, r3, #15
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	4613      	mov	r3, r2
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	440b      	add	r3, r1
 8011586:	3318      	adds	r3, #24
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	78fb      	ldrb	r3, [r7, #3]
 801158c:	f003 010f 	and.w	r1, r3, #15
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	460b      	mov	r3, r1
 8011594:	00db      	lsls	r3, r3, #3
 8011596:	440b      	add	r3, r1
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	4403      	add	r3, r0
 801159c:	3348      	adds	r3, #72	; 0x48
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80115a4:	fb01 f303 	mul.w	r3, r1, r3
 80115a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d112      	bne.n	80115d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80115ae:	78fb      	ldrb	r3, [r7, #3]
 80115b0:	f003 020f 	and.w	r2, r3, #15
 80115b4:	6879      	ldr	r1, [r7, #4]
 80115b6:	4613      	mov	r3, r2
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4413      	add	r3, r2
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	440b      	add	r3, r1
 80115c0:	3318      	adds	r3, #24
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80115c6:	78f9      	ldrb	r1, [r7, #3]
 80115c8:	2300      	movs	r3, #0
 80115ca:	2200      	movs	r2, #0
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f005 f85c 	bl	801668a <USBD_LL_Transmit>
 80115d2:	e01f      	b.n	8011614 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	33b0      	adds	r3, #176	; 0xb0
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	4413      	add	r3, r2
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	691b      	ldr	r3, [r3, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d010      	beq.n	8011614 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	33b0      	adds	r3, #176	; 0xb0
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	4413      	add	r3, r2
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801160a:	68ba      	ldr	r2, [r7, #8]
 801160c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011610:	78fa      	ldrb	r2, [r7, #3]
 8011612:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011614:	2300      	movs	r3, #0
}
 8011616:	4618      	mov	r0, r3
 8011618:	3710      	adds	r7, #16
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}

0801161e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801161e:	b580      	push	{r7, lr}
 8011620:	b084      	sub	sp, #16
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
 8011626:	460b      	mov	r3, r1
 8011628:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	32b0      	adds	r2, #176	; 0xb0
 8011634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011638:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	32b0      	adds	r2, #176	; 0xb0
 8011644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801164c:	2303      	movs	r3, #3
 801164e:	e01a      	b.n	8011686 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011650:	78fb      	ldrb	r3, [r7, #3]
 8011652:	4619      	mov	r1, r3
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f005 f85a 	bl	801670e <USBD_LL_GetRxDataSize>
 801165a:	4602      	mov	r2, r0
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	33b0      	adds	r3, #176	; 0xb0
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	4413      	add	r3, r2
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	68fa      	ldr	r2, [r7, #12]
 8011676:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011680:	4611      	mov	r1, r2
 8011682:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b084      	sub	sp, #16
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	32b0      	adds	r2, #176	; 0xb0
 80116a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d101      	bne.n	80116b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80116ac:	2303      	movs	r3, #3
 80116ae:	e025      	b.n	80116fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	33b0      	adds	r3, #176	; 0xb0
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	4413      	add	r3, r2
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d01a      	beq.n	80116fa <USBD_CDC_EP0_RxReady+0x6c>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80116ca:	2bff      	cmp	r3, #255	; 0xff
 80116cc:	d015      	beq.n	80116fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	33b0      	adds	r3, #176	; 0xb0
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	4413      	add	r3, r2
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80116e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80116ee:	b292      	uxth	r2, r2
 80116f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	22ff      	movs	r2, #255	; 0xff
 80116f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80116fa:	2300      	movs	r3, #0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801170c:	2182      	movs	r1, #130	; 0x82
 801170e:	4818      	ldr	r0, [pc, #96]	; (8011770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011710:	f000 fd4f 	bl	80121b2 <USBD_GetEpDesc>
 8011714:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011716:	2101      	movs	r1, #1
 8011718:	4815      	ldr	r0, [pc, #84]	; (8011770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801171a:	f000 fd4a 	bl	80121b2 <USBD_GetEpDesc>
 801171e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011720:	2181      	movs	r1, #129	; 0x81
 8011722:	4813      	ldr	r0, [pc, #76]	; (8011770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011724:	f000 fd45 	bl	80121b2 <USBD_GetEpDesc>
 8011728:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d002      	beq.n	8011736 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2210      	movs	r2, #16
 8011734:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d006      	beq.n	801174a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	2200      	movs	r2, #0
 8011740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011744:	711a      	strb	r2, [r3, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d006      	beq.n	801175e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2200      	movs	r2, #0
 8011754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011758:	711a      	strb	r2, [r3, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2243      	movs	r2, #67	; 0x43
 8011762:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011764:	4b02      	ldr	r3, [pc, #8]	; (8011770 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011766:	4618      	mov	r0, r3
 8011768:	3718      	adds	r7, #24
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	200000a8 	.word	0x200000a8

08011774 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b086      	sub	sp, #24
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801177c:	2182      	movs	r1, #130	; 0x82
 801177e:	4818      	ldr	r0, [pc, #96]	; (80117e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011780:	f000 fd17 	bl	80121b2 <USBD_GetEpDesc>
 8011784:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011786:	2101      	movs	r1, #1
 8011788:	4815      	ldr	r0, [pc, #84]	; (80117e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801178a:	f000 fd12 	bl	80121b2 <USBD_GetEpDesc>
 801178e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011790:	2181      	movs	r1, #129	; 0x81
 8011792:	4813      	ldr	r0, [pc, #76]	; (80117e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011794:	f000 fd0d 	bl	80121b2 <USBD_GetEpDesc>
 8011798:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d002      	beq.n	80117a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2210      	movs	r2, #16
 80117a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d006      	beq.n	80117ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	2200      	movs	r2, #0
 80117b0:	711a      	strb	r2, [r3, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	f042 0202 	orr.w	r2, r2, #2
 80117b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d006      	beq.n	80117ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2200      	movs	r2, #0
 80117c4:	711a      	strb	r2, [r3, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	f042 0202 	orr.w	r2, r2, #2
 80117cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2243      	movs	r2, #67	; 0x43
 80117d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80117d4:	4b02      	ldr	r3, [pc, #8]	; (80117e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	200000a8 	.word	0x200000a8

080117e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80117ec:	2182      	movs	r1, #130	; 0x82
 80117ee:	4818      	ldr	r0, [pc, #96]	; (8011850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80117f0:	f000 fcdf 	bl	80121b2 <USBD_GetEpDesc>
 80117f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80117f6:	2101      	movs	r1, #1
 80117f8:	4815      	ldr	r0, [pc, #84]	; (8011850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80117fa:	f000 fcda 	bl	80121b2 <USBD_GetEpDesc>
 80117fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011800:	2181      	movs	r1, #129	; 0x81
 8011802:	4813      	ldr	r0, [pc, #76]	; (8011850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011804:	f000 fcd5 	bl	80121b2 <USBD_GetEpDesc>
 8011808:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	2210      	movs	r2, #16
 8011814:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d006      	beq.n	801182a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	2200      	movs	r2, #0
 8011820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011824:	711a      	strb	r2, [r3, #4]
 8011826:	2200      	movs	r2, #0
 8011828:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d006      	beq.n	801183e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011838:	711a      	strb	r2, [r3, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2243      	movs	r2, #67	; 0x43
 8011842:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011844:	4b02      	ldr	r3, [pc, #8]	; (8011850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011846:	4618      	mov	r0, r3
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	200000a8 	.word	0x200000a8

08011854 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	220a      	movs	r2, #10
 8011860:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011862:	4b03      	ldr	r3, [pc, #12]	; (8011870 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	20000064 	.word	0x20000064

08011874 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d101      	bne.n	8011888 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011884:	2303      	movs	r3, #3
 8011886:	e009      	b.n	801189c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	33b0      	adds	r3, #176	; 0xb0
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	4413      	add	r3, r2
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b087      	sub	sp, #28
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	32b0      	adds	r2, #176	; 0xb0
 80118be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d101      	bne.n	80118ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80118ca:	2303      	movs	r3, #3
 80118cc:	e008      	b.n	80118e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80118de:	2300      	movs	r3, #0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	371c      	adds	r7, #28
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b085      	sub	sp, #20
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	32b0      	adds	r2, #176	; 0xb0
 8011900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011904:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d101      	bne.n	8011910 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801190c:	2303      	movs	r3, #3
 801190e:	e004      	b.n	801191a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	683a      	ldr	r2, [r7, #0]
 8011914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3714      	adds	r7, #20
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr
	...

08011928 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b084      	sub	sp, #16
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	32b0      	adds	r2, #176	; 0xb0
 801193a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801193e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011940:	2301      	movs	r3, #1
 8011942:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	32b0      	adds	r2, #176	; 0xb0
 801194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d101      	bne.n	801195a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011956:	2303      	movs	r3, #3
 8011958:	e025      	b.n	80119a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011960:	2b00      	cmp	r3, #0
 8011962:	d11f      	bne.n	80119a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	2201      	movs	r2, #1
 8011968:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801196c:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <USBD_CDC_TransmitPacket+0x88>)
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	f003 020f 	and.w	r2, r3, #15
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	4613      	mov	r3, r2
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4413      	add	r3, r2
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4403      	add	r3, r0
 8011986:	3318      	adds	r3, #24
 8011988:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801198a:	4b09      	ldr	r3, [pc, #36]	; (80119b0 <USBD_CDC_TransmitPacket+0x88>)
 801198c:	7819      	ldrb	r1, [r3, #0]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f004 fe75 	bl	801668a <USBD_LL_Transmit>

    ret = USBD_OK;
 80119a0:	2300      	movs	r3, #0
 80119a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80119a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	200000eb 	.word	0x200000eb

080119b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	32b0      	adds	r2, #176	; 0xb0
 80119c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	32b0      	adds	r2, #176	; 0xb0
 80119d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d101      	bne.n	80119e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80119de:	2303      	movs	r3, #3
 80119e0:	e018      	b.n	8011a14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	7c1b      	ldrb	r3, [r3, #16]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d10a      	bne.n	8011a00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80119ea:	4b0c      	ldr	r3, [pc, #48]	; (8011a1c <USBD_CDC_ReceivePacket+0x68>)
 80119ec:	7819      	ldrb	r1, [r3, #0]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80119f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f004 fe67 	bl	80166cc <USBD_LL_PrepareReceive>
 80119fe:	e008      	b.n	8011a12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011a00:	4b06      	ldr	r3, [pc, #24]	; (8011a1c <USBD_CDC_ReceivePacket+0x68>)
 8011a02:	7819      	ldrb	r1, [r3, #0]
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a0a:	2340      	movs	r3, #64	; 0x40
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f004 fe5d 	bl	80166cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	200000ec 	.word	0x200000ec

08011a20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b086      	sub	sp, #24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d101      	bne.n	8011a38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011a34:	2303      	movs	r3, #3
 8011a36:	e01f      	b.n	8011a78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2200      	movs	r2, #0
 8011a44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	68ba      	ldr	r2, [r7, #8]
 8011a5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	79fa      	ldrb	r2, [r7, #7]
 8011a6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f004 fcd7 	bl	8016420 <USBD_LL_Init>
 8011a72:	4603      	mov	r3, r0
 8011a74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3718      	adds	r7, #24
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d101      	bne.n	8011a98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011a94:	2303      	movs	r3, #3
 8011a96:	e025      	b.n	8011ae4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	32ae      	adds	r2, #174	; 0xae
 8011aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d00f      	beq.n	8011ad4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	32ae      	adds	r2, #174	; 0xae
 8011abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac4:	f107 020e 	add.w	r2, r7, #14
 8011ac8:	4610      	mov	r0, r2
 8011aca:	4798      	blx	r3
 8011acc:	4602      	mov	r2, r0
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011ada:	1c5a      	adds	r2, r3, #1
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f004 fcdf 	bl	80164b8 <USBD_LL_Start>
 8011afa:	4603      	mov	r3, r0
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3708      	adds	r7, #8
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	370c      	adds	r7, #12
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr

08011b1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	460b      	mov	r3, r1
 8011b24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d009      	beq.n	8011b48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	78fa      	ldrb	r2, [r7, #3]
 8011b3e:	4611      	mov	r1, r2
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	4798      	blx	r3
 8011b44:	4603      	mov	r3, r0
 8011b46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	78fa      	ldrb	r2, [r7, #3]
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	4798      	blx	r3
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d001      	beq.n	8011b7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011b78:	2303      	movs	r3, #3
 8011b7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b084      	sub	sp, #16
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
 8011b8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f001 f908 	bl	8012dae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011bac:	461a      	mov	r2, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011bba:	f003 031f 	and.w	r3, r3, #31
 8011bbe:	2b02      	cmp	r3, #2
 8011bc0:	d01a      	beq.n	8011bf8 <USBD_LL_SetupStage+0x72>
 8011bc2:	2b02      	cmp	r3, #2
 8011bc4:	d822      	bhi.n	8011c0c <USBD_LL_SetupStage+0x86>
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d002      	beq.n	8011bd0 <USBD_LL_SetupStage+0x4a>
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d00a      	beq.n	8011be4 <USBD_LL_SetupStage+0x5e>
 8011bce:	e01d      	b.n	8011c0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 fb5f 	bl	801229c <USBD_StdDevReq>
 8011bde:	4603      	mov	r3, r0
 8011be0:	73fb      	strb	r3, [r7, #15]
      break;
 8011be2:	e020      	b.n	8011c26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bea:	4619      	mov	r1, r3
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 fbc7 	bl	8012380 <USBD_StdItfReq>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8011bf6:	e016      	b.n	8011c26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bfe:	4619      	mov	r1, r3
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 fc29 	bl	8012458 <USBD_StdEPReq>
 8011c06:	4603      	mov	r3, r0
 8011c08:	73fb      	strb	r3, [r7, #15]
      break;
 8011c0a:	e00c      	b.n	8011c26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	4619      	mov	r1, r3
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f004 fcac 	bl	8016578 <USBD_LL_StallEP>
 8011c20:	4603      	mov	r3, r0
 8011c22:	73fb      	strb	r3, [r7, #15]
      break;
 8011c24:	bf00      	nop
  }

  return ret;
 8011c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3710      	adds	r7, #16
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	607a      	str	r2, [r7, #4]
 8011c3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011c42:	7afb      	ldrb	r3, [r7, #11]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d16e      	bne.n	8011d26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c56:	2b03      	cmp	r3, #3
 8011c58:	f040 8098 	bne.w	8011d8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	689a      	ldr	r2, [r3, #8]
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d913      	bls.n	8011c90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	689a      	ldr	r2, [r3, #8]
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	1ad2      	subs	r2, r2, r3
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	68da      	ldr	r2, [r3, #12]
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	bf28      	it	cs
 8011c82:	4613      	movcs	r3, r2
 8011c84:	461a      	mov	r2, r3
 8011c86:	6879      	ldr	r1, [r7, #4]
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f001 f984 	bl	8012f96 <USBD_CtlContinueRx>
 8011c8e:	e07d      	b.n	8011d8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c96:	f003 031f 	and.w	r3, r3, #31
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	d014      	beq.n	8011cc8 <USBD_LL_DataOutStage+0x98>
 8011c9e:	2b02      	cmp	r3, #2
 8011ca0:	d81d      	bhi.n	8011cde <USBD_LL_DataOutStage+0xae>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d002      	beq.n	8011cac <USBD_LL_DataOutStage+0x7c>
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d003      	beq.n	8011cb2 <USBD_LL_DataOutStage+0x82>
 8011caa:	e018      	b.n	8011cde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011cac:	2300      	movs	r3, #0
 8011cae:	75bb      	strb	r3, [r7, #22]
            break;
 8011cb0:	e018      	b.n	8011ce4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	4619      	mov	r1, r3
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f000 fa5e 	bl	801217e <USBD_CoreFindIF>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	75bb      	strb	r3, [r7, #22]
            break;
 8011cc6:	e00d      	b.n	8011ce4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	68f8      	ldr	r0, [r7, #12]
 8011cd4:	f000 fa60 	bl	8012198 <USBD_CoreFindEP>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	75bb      	strb	r3, [r7, #22]
            break;
 8011cdc:	e002      	b.n	8011ce4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	75bb      	strb	r3, [r7, #22]
            break;
 8011ce2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011ce4:	7dbb      	ldrb	r3, [r7, #22]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d119      	bne.n	8011d1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	2b03      	cmp	r3, #3
 8011cf4:	d113      	bne.n	8011d1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011cf6:	7dba      	ldrb	r2, [r7, #22]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	32ae      	adds	r2, #174	; 0xae
 8011cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d00:	691b      	ldr	r3, [r3, #16]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00b      	beq.n	8011d1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011d06:	7dba      	ldrb	r2, [r7, #22]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011d0e:	7dba      	ldrb	r2, [r7, #22]
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	32ae      	adds	r2, #174	; 0xae
 8011d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d18:	691b      	ldr	r3, [r3, #16]
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	f001 f94a 	bl	8012fb8 <USBD_CtlSendStatus>
 8011d24:	e032      	b.n	8011d8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011d26:	7afb      	ldrb	r3, [r7, #11]
 8011d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	4619      	mov	r1, r3
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f000 fa31 	bl	8012198 <USBD_CoreFindEP>
 8011d36:	4603      	mov	r3, r0
 8011d38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d3a:	7dbb      	ldrb	r3, [r7, #22]
 8011d3c:	2bff      	cmp	r3, #255	; 0xff
 8011d3e:	d025      	beq.n	8011d8c <USBD_LL_DataOutStage+0x15c>
 8011d40:	7dbb      	ldrb	r3, [r7, #22]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d122      	bne.n	8011d8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b03      	cmp	r3, #3
 8011d50:	d117      	bne.n	8011d82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011d52:	7dba      	ldrb	r2, [r7, #22]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	32ae      	adds	r2, #174	; 0xae
 8011d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5c:	699b      	ldr	r3, [r3, #24]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00f      	beq.n	8011d82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011d62:	7dba      	ldrb	r2, [r7, #22]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011d6a:	7dba      	ldrb	r2, [r7, #22]
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	32ae      	adds	r2, #174	; 0xae
 8011d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d74:	699b      	ldr	r3, [r3, #24]
 8011d76:	7afa      	ldrb	r2, [r7, #11]
 8011d78:	4611      	mov	r1, r2
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	4798      	blx	r3
 8011d7e:	4603      	mov	r3, r0
 8011d80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011d82:	7dfb      	ldrb	r3, [r7, #23]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d001      	beq.n	8011d8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011d88:	7dfb      	ldrb	r3, [r7, #23]
 8011d8a:	e000      	b.n	8011d8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b086      	sub	sp, #24
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d16f      	bne.n	8011e8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	3314      	adds	r3, #20
 8011dae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	d15a      	bne.n	8011e70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	689a      	ldr	r2, [r3, #8]
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d914      	bls.n	8011df0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	689a      	ldr	r2, [r3, #8]
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	1ad2      	subs	r2, r2, r3
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	689b      	ldr	r3, [r3, #8]
 8011dd8:	461a      	mov	r2, r3
 8011dda:	6879      	ldr	r1, [r7, #4]
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f001 f8ac 	bl	8012f3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011de2:	2300      	movs	r3, #0
 8011de4:	2200      	movs	r2, #0
 8011de6:	2100      	movs	r1, #0
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f004 fc6f 	bl	80166cc <USBD_LL_PrepareReceive>
 8011dee:	e03f      	b.n	8011e70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	68da      	ldr	r2, [r3, #12]
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d11c      	bne.n	8011e36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	685a      	ldr	r2, [r3, #4]
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d316      	bcc.n	8011e36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	685a      	ldr	r2, [r3, #4]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d20f      	bcs.n	8011e36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e16:	2200      	movs	r2, #0
 8011e18:	2100      	movs	r1, #0
 8011e1a:	68f8      	ldr	r0, [r7, #12]
 8011e1c:	f001 f88d 	bl	8012f3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2200      	movs	r2, #0
 8011e24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e28:	2300      	movs	r3, #0
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f004 fc4c 	bl	80166cc <USBD_LL_PrepareReceive>
 8011e34:	e01c      	b.n	8011e70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b03      	cmp	r3, #3
 8011e40:	d10f      	bne.n	8011e62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d009      	beq.n	8011e62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2200      	movs	r2, #0
 8011e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e62:	2180      	movs	r1, #128	; 0x80
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f004 fb87 	bl	8016578 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f001 f8b7 	bl	8012fde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d03a      	beq.n	8011ef0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f7ff fe42 	bl	8011b04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2200      	movs	r2, #0
 8011e84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e88:	e032      	b.n	8011ef0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011e8a:	7afb      	ldrb	r3, [r7, #11]
 8011e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	4619      	mov	r1, r3
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f000 f97f 	bl	8012198 <USBD_CoreFindEP>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	2bff      	cmp	r3, #255	; 0xff
 8011ea2:	d025      	beq.n	8011ef0 <USBD_LL_DataInStage+0x15a>
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d122      	bne.n	8011ef0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	2b03      	cmp	r3, #3
 8011eb4:	d11c      	bne.n	8011ef0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011eb6:	7dfa      	ldrb	r2, [r7, #23]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	32ae      	adds	r2, #174	; 0xae
 8011ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ec0:	695b      	ldr	r3, [r3, #20]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d014      	beq.n	8011ef0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011ec6:	7dfa      	ldrb	r2, [r7, #23]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011ece:	7dfa      	ldrb	r2, [r7, #23]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	32ae      	adds	r2, #174	; 0xae
 8011ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ed8:	695b      	ldr	r3, [r3, #20]
 8011eda:	7afa      	ldrb	r2, [r7, #11]
 8011edc:	4611      	mov	r1, r2
 8011ede:	68f8      	ldr	r0, [r7, #12]
 8011ee0:	4798      	blx	r3
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011ee6:	7dbb      	ldrb	r3, [r7, #22]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011eec:	7dbb      	ldrb	r3, [r7, #22]
 8011eee:	e000      	b.n	8011ef2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}

08011efa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b084      	sub	sp, #16
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f02:	2300      	movs	r3, #0
 8011f04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d014      	beq.n	8011f60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d00e      	beq.n	8011f60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	6852      	ldr	r2, [r2, #4]
 8011f4e:	b2d2      	uxtb	r2, r2
 8011f50:	4611      	mov	r1, r2
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	4798      	blx	r3
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d001      	beq.n	8011f60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011f5c:	2303      	movs	r3, #3
 8011f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f60:	2340      	movs	r3, #64	; 0x40
 8011f62:	2200      	movs	r2, #0
 8011f64:	2100      	movs	r1, #0
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f004 fac1 	bl	80164ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2240      	movs	r2, #64	; 0x40
 8011f78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f7c:	2340      	movs	r3, #64	; 0x40
 8011f7e:	2200      	movs	r2, #0
 8011f80:	2180      	movs	r1, #128	; 0x80
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f004 fab3 	bl	80164ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2240      	movs	r2, #64	; 0x40
 8011f92:	621a      	str	r2, [r3, #32]

  return ret;
 8011f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011f9e:	b480      	push	{r7}
 8011fa0:	b083      	sub	sp, #12
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	78fa      	ldrb	r2, [r7, #3]
 8011fae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011fb0:	2300      	movs	r3, #0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr

08011fbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b083      	sub	sp, #12
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fcc:	b2da      	uxtb	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2204      	movs	r2, #4
 8011fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	370c      	adds	r7, #12
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr

08011fea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011fea:	b480      	push	{r7}
 8011fec:	b083      	sub	sp, #12
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	2b04      	cmp	r3, #4
 8011ffc:	d106      	bne.n	801200c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012004:	b2da      	uxtb	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801200c:	2300      	movs	r3, #0
}
 801200e:	4618      	mov	r0, r3
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b082      	sub	sp, #8
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012028:	b2db      	uxtb	r3, r3
 801202a:	2b03      	cmp	r3, #3
 801202c:	d110      	bne.n	8012050 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00b      	beq.n	8012050 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801203e:	69db      	ldr	r3, [r3, #28]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d005      	beq.n	8012050 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801204a:	69db      	ldr	r3, [r3, #28]
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012050:	2300      	movs	r3, #0
}
 8012052:	4618      	mov	r0, r3
 8012054:	3708      	adds	r7, #8
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801205a:	b580      	push	{r7, lr}
 801205c:	b082      	sub	sp, #8
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
 8012062:	460b      	mov	r3, r1
 8012064:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	32ae      	adds	r2, #174	; 0xae
 8012070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d101      	bne.n	801207c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012078:	2303      	movs	r3, #3
 801207a:	e01c      	b.n	80120b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b03      	cmp	r3, #3
 8012086:	d115      	bne.n	80120b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	32ae      	adds	r2, #174	; 0xae
 8012092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012096:	6a1b      	ldr	r3, [r3, #32]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00b      	beq.n	80120b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	32ae      	adds	r2, #174	; 0xae
 80120a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120aa:	6a1b      	ldr	r3, [r3, #32]
 80120ac:	78fa      	ldrb	r2, [r7, #3]
 80120ae:	4611      	mov	r1, r2
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3708      	adds	r7, #8
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}

080120be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80120be:	b580      	push	{r7, lr}
 80120c0:	b082      	sub	sp, #8
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	460b      	mov	r3, r1
 80120c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	32ae      	adds	r2, #174	; 0xae
 80120d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d101      	bne.n	80120e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80120dc:	2303      	movs	r3, #3
 80120de:	e01c      	b.n	801211a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	2b03      	cmp	r3, #3
 80120ea:	d115      	bne.n	8012118 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	32ae      	adds	r2, #174	; 0xae
 80120f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00b      	beq.n	8012118 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	32ae      	adds	r2, #174	; 0xae
 801210a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012110:	78fa      	ldrb	r2, [r7, #3]
 8012112:	4611      	mov	r1, r2
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801212a:	2300      	movs	r3, #0
}
 801212c:	4618      	mov	r0, r3
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012140:	2300      	movs	r3, #0
 8012142:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2201      	movs	r2, #1
 8012148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012152:	2b00      	cmp	r3, #0
 8012154:	d00e      	beq.n	8012174 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	6852      	ldr	r2, [r2, #4]
 8012162:	b2d2      	uxtb	r2, r2
 8012164:	4611      	mov	r1, r2
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	4798      	blx	r3
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d001      	beq.n	8012174 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012170:	2303      	movs	r3, #3
 8012172:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012174:	7bfb      	ldrb	r3, [r7, #15]
}
 8012176:	4618      	mov	r0, r3
 8012178:	3710      	adds	r7, #16
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	460b      	mov	r3, r1
 8012188:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801218a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801218c:	4618      	mov	r0, r3
 801218e:	370c      	adds	r7, #12
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	460b      	mov	r3, r1
 80121a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80121a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	370c      	adds	r7, #12
 80121aa:	46bd      	mov	sp, r7
 80121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b0:	4770      	bx	lr

080121b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80121b2:	b580      	push	{r7, lr}
 80121b4:	b086      	sub	sp, #24
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
 80121ba:	460b      	mov	r3, r1
 80121bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80121c6:	2300      	movs	r3, #0
 80121c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	885b      	ldrh	r3, [r3, #2]
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d920      	bls.n	801221c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	b29b      	uxth	r3, r3
 80121e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80121e2:	e013      	b.n	801220c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80121e4:	f107 030a 	add.w	r3, r7, #10
 80121e8:	4619      	mov	r1, r3
 80121ea:	6978      	ldr	r0, [r7, #20]
 80121ec:	f000 f81b 	bl	8012226 <USBD_GetNextDesc>
 80121f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	785b      	ldrb	r3, [r3, #1]
 80121f6:	2b05      	cmp	r3, #5
 80121f8:	d108      	bne.n	801220c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	789b      	ldrb	r3, [r3, #2]
 8012202:	78fa      	ldrb	r2, [r7, #3]
 8012204:	429a      	cmp	r2, r3
 8012206:	d008      	beq.n	801221a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012208:	2300      	movs	r3, #0
 801220a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	885b      	ldrh	r3, [r3, #2]
 8012210:	b29a      	uxth	r2, r3
 8012212:	897b      	ldrh	r3, [r7, #10]
 8012214:	429a      	cmp	r2, r3
 8012216:	d8e5      	bhi.n	80121e4 <USBD_GetEpDesc+0x32>
 8012218:	e000      	b.n	801221c <USBD_GetEpDesc+0x6a>
          break;
 801221a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801221c:	693b      	ldr	r3, [r7, #16]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3718      	adds	r7, #24
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012226:	b480      	push	{r7}
 8012228:	b085      	sub	sp, #20
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
 801222e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	881a      	ldrh	r2, [r3, #0]
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	b29b      	uxth	r3, r3
 801223e:	4413      	add	r3, r2
 8012240:	b29a      	uxth	r2, r3
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	461a      	mov	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4413      	add	r3, r2
 8012250:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012252:	68fb      	ldr	r3, [r7, #12]
}
 8012254:	4618      	mov	r0, r3
 8012256:	3714      	adds	r7, #20
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012260:	b480      	push	{r7}
 8012262:	b087      	sub	sp, #28
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	3301      	adds	r3, #1
 8012276:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801227e:	8a3b      	ldrh	r3, [r7, #16]
 8012280:	021b      	lsls	r3, r3, #8
 8012282:	b21a      	sxth	r2, r3
 8012284:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012288:	4313      	orrs	r3, r2
 801228a:	b21b      	sxth	r3, r3
 801228c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801228e:	89fb      	ldrh	r3, [r7, #14]
}
 8012290:	4618      	mov	r0, r3
 8012292:	371c      	adds	r7, #28
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122a6:	2300      	movs	r3, #0
 80122a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122b2:	2b40      	cmp	r3, #64	; 0x40
 80122b4:	d005      	beq.n	80122c2 <USBD_StdDevReq+0x26>
 80122b6:	2b40      	cmp	r3, #64	; 0x40
 80122b8:	d857      	bhi.n	801236a <USBD_StdDevReq+0xce>
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00f      	beq.n	80122de <USBD_StdDevReq+0x42>
 80122be:	2b20      	cmp	r3, #32
 80122c0:	d153      	bne.n	801236a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	32ae      	adds	r2, #174	; 0xae
 80122cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	6839      	ldr	r1, [r7, #0]
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	4798      	blx	r3
 80122d8:	4603      	mov	r3, r0
 80122da:	73fb      	strb	r3, [r7, #15]
      break;
 80122dc:	e04a      	b.n	8012374 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	785b      	ldrb	r3, [r3, #1]
 80122e2:	2b09      	cmp	r3, #9
 80122e4:	d83b      	bhi.n	801235e <USBD_StdDevReq+0xc2>
 80122e6:	a201      	add	r2, pc, #4	; (adr r2, 80122ec <USBD_StdDevReq+0x50>)
 80122e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122ec:	08012341 	.word	0x08012341
 80122f0:	08012355 	.word	0x08012355
 80122f4:	0801235f 	.word	0x0801235f
 80122f8:	0801234b 	.word	0x0801234b
 80122fc:	0801235f 	.word	0x0801235f
 8012300:	0801231f 	.word	0x0801231f
 8012304:	08012315 	.word	0x08012315
 8012308:	0801235f 	.word	0x0801235f
 801230c:	08012337 	.word	0x08012337
 8012310:	08012329 	.word	0x08012329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012314:	6839      	ldr	r1, [r7, #0]
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 fa3c 	bl	8012794 <USBD_GetDescriptor>
          break;
 801231c:	e024      	b.n	8012368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801231e:	6839      	ldr	r1, [r7, #0]
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 fba1 	bl	8012a68 <USBD_SetAddress>
          break;
 8012326:	e01f      	b.n	8012368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fbe0 	bl	8012af0 <USBD_SetConfig>
 8012330:	4603      	mov	r3, r0
 8012332:	73fb      	strb	r3, [r7, #15]
          break;
 8012334:	e018      	b.n	8012368 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012336:	6839      	ldr	r1, [r7, #0]
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 fc83 	bl	8012c44 <USBD_GetConfig>
          break;
 801233e:	e013      	b.n	8012368 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012340:	6839      	ldr	r1, [r7, #0]
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 fcb4 	bl	8012cb0 <USBD_GetStatus>
          break;
 8012348:	e00e      	b.n	8012368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801234a:	6839      	ldr	r1, [r7, #0]
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 fce3 	bl	8012d18 <USBD_SetFeature>
          break;
 8012352:	e009      	b.n	8012368 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012354:	6839      	ldr	r1, [r7, #0]
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 fd07 	bl	8012d6a <USBD_ClrFeature>
          break;
 801235c:	e004      	b.n	8012368 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 fd5e 	bl	8012e22 <USBD_CtlError>
          break;
 8012366:	bf00      	nop
      }
      break;
 8012368:	e004      	b.n	8012374 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801236a:	6839      	ldr	r1, [r7, #0]
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 fd58 	bl	8012e22 <USBD_CtlError>
      break;
 8012372:	bf00      	nop
  }

  return ret;
 8012374:	7bfb      	ldrb	r3, [r7, #15]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop

08012380 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801238a:	2300      	movs	r3, #0
 801238c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012396:	2b40      	cmp	r3, #64	; 0x40
 8012398:	d005      	beq.n	80123a6 <USBD_StdItfReq+0x26>
 801239a:	2b40      	cmp	r3, #64	; 0x40
 801239c:	d852      	bhi.n	8012444 <USBD_StdItfReq+0xc4>
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d001      	beq.n	80123a6 <USBD_StdItfReq+0x26>
 80123a2:	2b20      	cmp	r3, #32
 80123a4:	d14e      	bne.n	8012444 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	3b01      	subs	r3, #1
 80123b0:	2b02      	cmp	r3, #2
 80123b2:	d840      	bhi.n	8012436 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	889b      	ldrh	r3, [r3, #4]
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d836      	bhi.n	801242c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	889b      	ldrh	r3, [r3, #4]
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	4619      	mov	r1, r3
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ff fed9 	bl	801217e <USBD_CoreFindIF>
 80123cc:	4603      	mov	r3, r0
 80123ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80123d0:	7bbb      	ldrb	r3, [r7, #14]
 80123d2:	2bff      	cmp	r3, #255	; 0xff
 80123d4:	d01d      	beq.n	8012412 <USBD_StdItfReq+0x92>
 80123d6:	7bbb      	ldrb	r3, [r7, #14]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d11a      	bne.n	8012412 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80123dc:	7bba      	ldrb	r2, [r7, #14]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	32ae      	adds	r2, #174	; 0xae
 80123e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123e6:	689b      	ldr	r3, [r3, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00f      	beq.n	801240c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80123ec:	7bba      	ldrb	r2, [r7, #14]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80123f4:	7bba      	ldrb	r2, [r7, #14]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	32ae      	adds	r2, #174	; 0xae
 80123fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123fe:	689b      	ldr	r3, [r3, #8]
 8012400:	6839      	ldr	r1, [r7, #0]
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	4798      	blx	r3
 8012406:	4603      	mov	r3, r0
 8012408:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801240a:	e004      	b.n	8012416 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801240c:	2303      	movs	r3, #3
 801240e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012410:	e001      	b.n	8012416 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012412:	2303      	movs	r3, #3
 8012414:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	88db      	ldrh	r3, [r3, #6]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d110      	bne.n	8012440 <USBD_StdItfReq+0xc0>
 801241e:	7bfb      	ldrb	r3, [r7, #15]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10d      	bne.n	8012440 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 fdc7 	bl	8012fb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801242a:	e009      	b.n	8012440 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801242c:	6839      	ldr	r1, [r7, #0]
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f000 fcf7 	bl	8012e22 <USBD_CtlError>
          break;
 8012434:	e004      	b.n	8012440 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012436:	6839      	ldr	r1, [r7, #0]
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 fcf2 	bl	8012e22 <USBD_CtlError>
          break;
 801243e:	e000      	b.n	8012442 <USBD_StdItfReq+0xc2>
          break;
 8012440:	bf00      	nop
      }
      break;
 8012442:	e004      	b.n	801244e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012444:	6839      	ldr	r1, [r7, #0]
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 fceb 	bl	8012e22 <USBD_CtlError>
      break;
 801244c:	bf00      	nop
  }

  return ret;
 801244e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012450:	4618      	mov	r0, r3
 8012452:	3710      	adds	r7, #16
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	889b      	ldrh	r3, [r3, #4]
 801246a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012474:	2b40      	cmp	r3, #64	; 0x40
 8012476:	d007      	beq.n	8012488 <USBD_StdEPReq+0x30>
 8012478:	2b40      	cmp	r3, #64	; 0x40
 801247a:	f200 817f 	bhi.w	801277c <USBD_StdEPReq+0x324>
 801247e:	2b00      	cmp	r3, #0
 8012480:	d02a      	beq.n	80124d8 <USBD_StdEPReq+0x80>
 8012482:	2b20      	cmp	r3, #32
 8012484:	f040 817a 	bne.w	801277c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012488:	7bbb      	ldrb	r3, [r7, #14]
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff fe83 	bl	8012198 <USBD_CoreFindEP>
 8012492:	4603      	mov	r3, r0
 8012494:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012496:	7b7b      	ldrb	r3, [r7, #13]
 8012498:	2bff      	cmp	r3, #255	; 0xff
 801249a:	f000 8174 	beq.w	8012786 <USBD_StdEPReq+0x32e>
 801249e:	7b7b      	ldrb	r3, [r7, #13]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f040 8170 	bne.w	8012786 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80124a6:	7b7a      	ldrb	r2, [r7, #13]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80124ae:	7b7a      	ldrb	r2, [r7, #13]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	32ae      	adds	r2, #174	; 0xae
 80124b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 8163 	beq.w	8012786 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80124c0:	7b7a      	ldrb	r2, [r7, #13]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	32ae      	adds	r2, #174	; 0xae
 80124c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	4798      	blx	r3
 80124d2:	4603      	mov	r3, r0
 80124d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80124d6:	e156      	b.n	8012786 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	785b      	ldrb	r3, [r3, #1]
 80124dc:	2b03      	cmp	r3, #3
 80124de:	d008      	beq.n	80124f2 <USBD_StdEPReq+0x9a>
 80124e0:	2b03      	cmp	r3, #3
 80124e2:	f300 8145 	bgt.w	8012770 <USBD_StdEPReq+0x318>
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	f000 809b 	beq.w	8012622 <USBD_StdEPReq+0x1ca>
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d03c      	beq.n	801256a <USBD_StdEPReq+0x112>
 80124f0:	e13e      	b.n	8012770 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b02      	cmp	r3, #2
 80124fc:	d002      	beq.n	8012504 <USBD_StdEPReq+0xac>
 80124fe:	2b03      	cmp	r3, #3
 8012500:	d016      	beq.n	8012530 <USBD_StdEPReq+0xd8>
 8012502:	e02c      	b.n	801255e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012504:	7bbb      	ldrb	r3, [r7, #14]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d00d      	beq.n	8012526 <USBD_StdEPReq+0xce>
 801250a:	7bbb      	ldrb	r3, [r7, #14]
 801250c:	2b80      	cmp	r3, #128	; 0x80
 801250e:	d00a      	beq.n	8012526 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012510:	7bbb      	ldrb	r3, [r7, #14]
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f004 f82f 	bl	8016578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801251a:	2180      	movs	r1, #128	; 0x80
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f004 f82b 	bl	8016578 <USBD_LL_StallEP>
 8012522:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012524:	e020      	b.n	8012568 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012526:	6839      	ldr	r1, [r7, #0]
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 fc7a 	bl	8012e22 <USBD_CtlError>
              break;
 801252e:	e01b      	b.n	8012568 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	885b      	ldrh	r3, [r3, #2]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10e      	bne.n	8012556 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012538:	7bbb      	ldrb	r3, [r7, #14]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <USBD_StdEPReq+0xfe>
 801253e:	7bbb      	ldrb	r3, [r7, #14]
 8012540:	2b80      	cmp	r3, #128	; 0x80
 8012542:	d008      	beq.n	8012556 <USBD_StdEPReq+0xfe>
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	88db      	ldrh	r3, [r3, #6]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d104      	bne.n	8012556 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801254c:	7bbb      	ldrb	r3, [r7, #14]
 801254e:	4619      	mov	r1, r3
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f004 f811 	bl	8016578 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fd2e 	bl	8012fb8 <USBD_CtlSendStatus>

              break;
 801255c:	e004      	b.n	8012568 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fc5e 	bl	8012e22 <USBD_CtlError>
              break;
 8012566:	bf00      	nop
          }
          break;
 8012568:	e107      	b.n	801277a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012570:	b2db      	uxtb	r3, r3
 8012572:	2b02      	cmp	r3, #2
 8012574:	d002      	beq.n	801257c <USBD_StdEPReq+0x124>
 8012576:	2b03      	cmp	r3, #3
 8012578:	d016      	beq.n	80125a8 <USBD_StdEPReq+0x150>
 801257a:	e04b      	b.n	8012614 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801257c:	7bbb      	ldrb	r3, [r7, #14]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d00d      	beq.n	801259e <USBD_StdEPReq+0x146>
 8012582:	7bbb      	ldrb	r3, [r7, #14]
 8012584:	2b80      	cmp	r3, #128	; 0x80
 8012586:	d00a      	beq.n	801259e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012588:	7bbb      	ldrb	r3, [r7, #14]
 801258a:	4619      	mov	r1, r3
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f003 fff3 	bl	8016578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012592:	2180      	movs	r1, #128	; 0x80
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f003 ffef 	bl	8016578 <USBD_LL_StallEP>
 801259a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801259c:	e040      	b.n	8012620 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fc3e 	bl	8012e22 <USBD_CtlError>
              break;
 80125a6:	e03b      	b.n	8012620 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	885b      	ldrh	r3, [r3, #2]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d136      	bne.n	801261e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80125b0:	7bbb      	ldrb	r3, [r7, #14]
 80125b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d004      	beq.n	80125c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80125ba:	7bbb      	ldrb	r3, [r7, #14]
 80125bc:	4619      	mov	r1, r3
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f003 fff9 	bl	80165b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fcf7 	bl	8012fb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80125ca:	7bbb      	ldrb	r3, [r7, #14]
 80125cc:	4619      	mov	r1, r3
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff fde2 	bl	8012198 <USBD_CoreFindEP>
 80125d4:	4603      	mov	r3, r0
 80125d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80125d8:	7b7b      	ldrb	r3, [r7, #13]
 80125da:	2bff      	cmp	r3, #255	; 0xff
 80125dc:	d01f      	beq.n	801261e <USBD_StdEPReq+0x1c6>
 80125de:	7b7b      	ldrb	r3, [r7, #13]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d11c      	bne.n	801261e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80125e4:	7b7a      	ldrb	r2, [r7, #13]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80125ec:	7b7a      	ldrb	r2, [r7, #13]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	32ae      	adds	r2, #174	; 0xae
 80125f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125f6:	689b      	ldr	r3, [r3, #8]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d010      	beq.n	801261e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80125fc:	7b7a      	ldrb	r2, [r7, #13]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	32ae      	adds	r2, #174	; 0xae
 8012602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012606:	689b      	ldr	r3, [r3, #8]
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	4798      	blx	r3
 801260e:	4603      	mov	r3, r0
 8012610:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012612:	e004      	b.n	801261e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 fc03 	bl	8012e22 <USBD_CtlError>
              break;
 801261c:	e000      	b.n	8012620 <USBD_StdEPReq+0x1c8>
              break;
 801261e:	bf00      	nop
          }
          break;
 8012620:	e0ab      	b.n	801277a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012628:	b2db      	uxtb	r3, r3
 801262a:	2b02      	cmp	r3, #2
 801262c:	d002      	beq.n	8012634 <USBD_StdEPReq+0x1dc>
 801262e:	2b03      	cmp	r3, #3
 8012630:	d032      	beq.n	8012698 <USBD_StdEPReq+0x240>
 8012632:	e097      	b.n	8012764 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012634:	7bbb      	ldrb	r3, [r7, #14]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d007      	beq.n	801264a <USBD_StdEPReq+0x1f2>
 801263a:	7bbb      	ldrb	r3, [r7, #14]
 801263c:	2b80      	cmp	r3, #128	; 0x80
 801263e:	d004      	beq.n	801264a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012640:	6839      	ldr	r1, [r7, #0]
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 fbed 	bl	8012e22 <USBD_CtlError>
                break;
 8012648:	e091      	b.n	801276e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801264a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801264e:	2b00      	cmp	r3, #0
 8012650:	da0b      	bge.n	801266a <USBD_StdEPReq+0x212>
 8012652:	7bbb      	ldrb	r3, [r7, #14]
 8012654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012658:	4613      	mov	r3, r2
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	4413      	add	r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	3310      	adds	r3, #16
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	4413      	add	r3, r2
 8012666:	3304      	adds	r3, #4
 8012668:	e00b      	b.n	8012682 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801266a:	7bbb      	ldrb	r3, [r7, #14]
 801266c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012670:	4613      	mov	r3, r2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	4413      	add	r3, r2
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	4413      	add	r3, r2
 8012680:	3304      	adds	r3, #4
 8012682:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	2200      	movs	r2, #0
 8012688:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	2202      	movs	r2, #2
 801268e:	4619      	mov	r1, r3
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 fc37 	bl	8012f04 <USBD_CtlSendData>
              break;
 8012696:	e06a      	b.n	801276e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801269c:	2b00      	cmp	r3, #0
 801269e:	da11      	bge.n	80126c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80126a0:	7bbb      	ldrb	r3, [r7, #14]
 80126a2:	f003 020f 	and.w	r2, r3, #15
 80126a6:	6879      	ldr	r1, [r7, #4]
 80126a8:	4613      	mov	r3, r2
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	4413      	add	r3, r2
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	440b      	add	r3, r1
 80126b2:	3324      	adds	r3, #36	; 0x24
 80126b4:	881b      	ldrh	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d117      	bne.n	80126ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80126ba:	6839      	ldr	r1, [r7, #0]
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 fbb0 	bl	8012e22 <USBD_CtlError>
                  break;
 80126c2:	e054      	b.n	801276e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80126c4:	7bbb      	ldrb	r3, [r7, #14]
 80126c6:	f003 020f 	and.w	r2, r3, #15
 80126ca:	6879      	ldr	r1, [r7, #4]
 80126cc:	4613      	mov	r3, r2
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4413      	add	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	440b      	add	r3, r1
 80126d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80126da:	881b      	ldrh	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d104      	bne.n	80126ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80126e0:	6839      	ldr	r1, [r7, #0]
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 fb9d 	bl	8012e22 <USBD_CtlError>
                  break;
 80126e8:	e041      	b.n	801276e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80126ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	da0b      	bge.n	801270a <USBD_StdEPReq+0x2b2>
 80126f2:	7bbb      	ldrb	r3, [r7, #14]
 80126f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126f8:	4613      	mov	r3, r2
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	4413      	add	r3, r2
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	3310      	adds	r3, #16
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	4413      	add	r3, r2
 8012706:	3304      	adds	r3, #4
 8012708:	e00b      	b.n	8012722 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801270a:	7bbb      	ldrb	r3, [r7, #14]
 801270c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012710:	4613      	mov	r3, r2
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	4413      	add	r3, r2
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	4413      	add	r3, r2
 8012720:	3304      	adds	r3, #4
 8012722:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012724:	7bbb      	ldrb	r3, [r7, #14]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d002      	beq.n	8012730 <USBD_StdEPReq+0x2d8>
 801272a:	7bbb      	ldrb	r3, [r7, #14]
 801272c:	2b80      	cmp	r3, #128	; 0x80
 801272e:	d103      	bne.n	8012738 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2200      	movs	r2, #0
 8012734:	601a      	str	r2, [r3, #0]
 8012736:	e00e      	b.n	8012756 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012738:	7bbb      	ldrb	r3, [r7, #14]
 801273a:	4619      	mov	r1, r3
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f003 ff59 	bl	80165f4 <USBD_LL_IsStallEP>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d003      	beq.n	8012750 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	2201      	movs	r2, #1
 801274c:	601a      	str	r2, [r3, #0]
 801274e:	e002      	b.n	8012756 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	2200      	movs	r2, #0
 8012754:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	2202      	movs	r2, #2
 801275a:	4619      	mov	r1, r3
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fbd1 	bl	8012f04 <USBD_CtlSendData>
              break;
 8012762:	e004      	b.n	801276e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012764:	6839      	ldr	r1, [r7, #0]
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 fb5b 	bl	8012e22 <USBD_CtlError>
              break;
 801276c:	bf00      	nop
          }
          break;
 801276e:	e004      	b.n	801277a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fb55 	bl	8012e22 <USBD_CtlError>
          break;
 8012778:	bf00      	nop
      }
      break;
 801277a:	e005      	b.n	8012788 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801277c:	6839      	ldr	r1, [r7, #0]
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 fb4f 	bl	8012e22 <USBD_CtlError>
      break;
 8012784:	e000      	b.n	8012788 <USBD_StdEPReq+0x330>
      break;
 8012786:	bf00      	nop
  }

  return ret;
 8012788:	7bfb      	ldrb	r3, [r7, #15]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
	...

08012794 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801279e:	2300      	movs	r3, #0
 80127a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80127a2:	2300      	movs	r3, #0
 80127a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80127a6:	2300      	movs	r3, #0
 80127a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	885b      	ldrh	r3, [r3, #2]
 80127ae:	0a1b      	lsrs	r3, r3, #8
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	3b01      	subs	r3, #1
 80127b4:	2b06      	cmp	r3, #6
 80127b6:	f200 8128 	bhi.w	8012a0a <USBD_GetDescriptor+0x276>
 80127ba:	a201      	add	r2, pc, #4	; (adr r2, 80127c0 <USBD_GetDescriptor+0x2c>)
 80127bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c0:	080127dd 	.word	0x080127dd
 80127c4:	080127f5 	.word	0x080127f5
 80127c8:	08012835 	.word	0x08012835
 80127cc:	08012a0b 	.word	0x08012a0b
 80127d0:	08012a0b 	.word	0x08012a0b
 80127d4:	080129ab 	.word	0x080129ab
 80127d8:	080129d7 	.word	0x080129d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	7c12      	ldrb	r2, [r2, #16]
 80127e8:	f107 0108 	add.w	r1, r7, #8
 80127ec:	4610      	mov	r0, r2
 80127ee:	4798      	blx	r3
 80127f0:	60f8      	str	r0, [r7, #12]
      break;
 80127f2:	e112      	b.n	8012a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	7c1b      	ldrb	r3, [r3, #16]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d10d      	bne.n	8012818 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012804:	f107 0208 	add.w	r2, r7, #8
 8012808:	4610      	mov	r0, r2
 801280a:	4798      	blx	r3
 801280c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	3301      	adds	r3, #1
 8012812:	2202      	movs	r2, #2
 8012814:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012816:	e100      	b.n	8012a1a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012820:	f107 0208 	add.w	r2, r7, #8
 8012824:	4610      	mov	r0, r2
 8012826:	4798      	blx	r3
 8012828:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	3301      	adds	r3, #1
 801282e:	2202      	movs	r2, #2
 8012830:	701a      	strb	r2, [r3, #0]
      break;
 8012832:	e0f2      	b.n	8012a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	885b      	ldrh	r3, [r3, #2]
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b05      	cmp	r3, #5
 801283c:	f200 80ac 	bhi.w	8012998 <USBD_GetDescriptor+0x204>
 8012840:	a201      	add	r2, pc, #4	; (adr r2, 8012848 <USBD_GetDescriptor+0xb4>)
 8012842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012846:	bf00      	nop
 8012848:	08012861 	.word	0x08012861
 801284c:	08012895 	.word	0x08012895
 8012850:	080128c9 	.word	0x080128c9
 8012854:	080128fd 	.word	0x080128fd
 8012858:	08012931 	.word	0x08012931
 801285c:	08012965 	.word	0x08012965
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d00b      	beq.n	8012884 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	7c12      	ldrb	r2, [r2, #16]
 8012878:	f107 0108 	add.w	r1, r7, #8
 801287c:	4610      	mov	r0, r2
 801287e:	4798      	blx	r3
 8012880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012882:	e091      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012884:	6839      	ldr	r1, [r7, #0]
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f000 facb 	bl	8012e22 <USBD_CtlError>
            err++;
 801288c:	7afb      	ldrb	r3, [r7, #11]
 801288e:	3301      	adds	r3, #1
 8012890:	72fb      	strb	r3, [r7, #11]
          break;
 8012892:	e089      	b.n	80129a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801289a:	689b      	ldr	r3, [r3, #8]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d00b      	beq.n	80128b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128a6:	689b      	ldr	r3, [r3, #8]
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	7c12      	ldrb	r2, [r2, #16]
 80128ac:	f107 0108 	add.w	r1, r7, #8
 80128b0:	4610      	mov	r0, r2
 80128b2:	4798      	blx	r3
 80128b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128b6:	e077      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 fab1 	bl	8012e22 <USBD_CtlError>
            err++;
 80128c0:	7afb      	ldrb	r3, [r7, #11]
 80128c2:	3301      	adds	r3, #1
 80128c4:	72fb      	strb	r3, [r7, #11]
          break;
 80128c6:	e06f      	b.n	80129a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00b      	beq.n	80128ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	7c12      	ldrb	r2, [r2, #16]
 80128e0:	f107 0108 	add.w	r1, r7, #8
 80128e4:	4610      	mov	r0, r2
 80128e6:	4798      	blx	r3
 80128e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128ea:	e05d      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80128ec:	6839      	ldr	r1, [r7, #0]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 fa97 	bl	8012e22 <USBD_CtlError>
            err++;
 80128f4:	7afb      	ldrb	r3, [r7, #11]
 80128f6:	3301      	adds	r3, #1
 80128f8:	72fb      	strb	r3, [r7, #11]
          break;
 80128fa:	e055      	b.n	80129a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d00b      	beq.n	8012920 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801290e:	691b      	ldr	r3, [r3, #16]
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	7c12      	ldrb	r2, [r2, #16]
 8012914:	f107 0108 	add.w	r1, r7, #8
 8012918:	4610      	mov	r0, r2
 801291a:	4798      	blx	r3
 801291c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801291e:	e043      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012920:	6839      	ldr	r1, [r7, #0]
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f000 fa7d 	bl	8012e22 <USBD_CtlError>
            err++;
 8012928:	7afb      	ldrb	r3, [r7, #11]
 801292a:	3301      	adds	r3, #1
 801292c:	72fb      	strb	r3, [r7, #11]
          break;
 801292e:	e03b      	b.n	80129a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012936:	695b      	ldr	r3, [r3, #20]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00b      	beq.n	8012954 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012942:	695b      	ldr	r3, [r3, #20]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	7c12      	ldrb	r2, [r2, #16]
 8012948:	f107 0108 	add.w	r1, r7, #8
 801294c:	4610      	mov	r0, r2
 801294e:	4798      	blx	r3
 8012950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012952:	e029      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012954:	6839      	ldr	r1, [r7, #0]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 fa63 	bl	8012e22 <USBD_CtlError>
            err++;
 801295c:	7afb      	ldrb	r3, [r7, #11]
 801295e:	3301      	adds	r3, #1
 8012960:	72fb      	strb	r3, [r7, #11]
          break;
 8012962:	e021      	b.n	80129a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801296a:	699b      	ldr	r3, [r3, #24]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d00b      	beq.n	8012988 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012976:	699b      	ldr	r3, [r3, #24]
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	7c12      	ldrb	r2, [r2, #16]
 801297c:	f107 0108 	add.w	r1, r7, #8
 8012980:	4610      	mov	r0, r2
 8012982:	4798      	blx	r3
 8012984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012986:	e00f      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012988:	6839      	ldr	r1, [r7, #0]
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f000 fa49 	bl	8012e22 <USBD_CtlError>
            err++;
 8012990:	7afb      	ldrb	r3, [r7, #11]
 8012992:	3301      	adds	r3, #1
 8012994:	72fb      	strb	r3, [r7, #11]
          break;
 8012996:	e007      	b.n	80129a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012998:	6839      	ldr	r1, [r7, #0]
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 fa41 	bl	8012e22 <USBD_CtlError>
          err++;
 80129a0:	7afb      	ldrb	r3, [r7, #11]
 80129a2:	3301      	adds	r3, #1
 80129a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80129a6:	bf00      	nop
      }
      break;
 80129a8:	e037      	b.n	8012a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	7c1b      	ldrb	r3, [r3, #16]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d109      	bne.n	80129c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ba:	f107 0208 	add.w	r2, r7, #8
 80129be:	4610      	mov	r0, r2
 80129c0:	4798      	blx	r3
 80129c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129c4:	e029      	b.n	8012a1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80129c6:	6839      	ldr	r1, [r7, #0]
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 fa2a 	bl	8012e22 <USBD_CtlError>
        err++;
 80129ce:	7afb      	ldrb	r3, [r7, #11]
 80129d0:	3301      	adds	r3, #1
 80129d2:	72fb      	strb	r3, [r7, #11]
      break;
 80129d4:	e021      	b.n	8012a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	7c1b      	ldrb	r3, [r3, #16]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d10d      	bne.n	80129fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129e6:	f107 0208 	add.w	r2, r7, #8
 80129ea:	4610      	mov	r0, r2
 80129ec:	4798      	blx	r3
 80129ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	3301      	adds	r3, #1
 80129f4:	2207      	movs	r2, #7
 80129f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129f8:	e00f      	b.n	8012a1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 fa10 	bl	8012e22 <USBD_CtlError>
        err++;
 8012a02:	7afb      	ldrb	r3, [r7, #11]
 8012a04:	3301      	adds	r3, #1
 8012a06:	72fb      	strb	r3, [r7, #11]
      break;
 8012a08:	e007      	b.n	8012a1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f000 fa08 	bl	8012e22 <USBD_CtlError>
      err++;
 8012a12:	7afb      	ldrb	r3, [r7, #11]
 8012a14:	3301      	adds	r3, #1
 8012a16:	72fb      	strb	r3, [r7, #11]
      break;
 8012a18:	bf00      	nop
  }

  if (err != 0U)
 8012a1a:	7afb      	ldrb	r3, [r7, #11]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d11e      	bne.n	8012a5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	88db      	ldrh	r3, [r3, #6]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d016      	beq.n	8012a56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012a28:	893b      	ldrh	r3, [r7, #8]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00e      	beq.n	8012a4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	88da      	ldrh	r2, [r3, #6]
 8012a32:	893b      	ldrh	r3, [r7, #8]
 8012a34:	4293      	cmp	r3, r2
 8012a36:	bf28      	it	cs
 8012a38:	4613      	movcs	r3, r2
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012a3e:	893b      	ldrh	r3, [r7, #8]
 8012a40:	461a      	mov	r2, r3
 8012a42:	68f9      	ldr	r1, [r7, #12]
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 fa5d 	bl	8012f04 <USBD_CtlSendData>
 8012a4a:	e009      	b.n	8012a60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012a4c:	6839      	ldr	r1, [r7, #0]
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 f9e7 	bl	8012e22 <USBD_CtlError>
 8012a54:	e004      	b.n	8012a60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 faae 	bl	8012fb8 <USBD_CtlSendStatus>
 8012a5c:	e000      	b.n	8012a60 <USBD_GetDescriptor+0x2cc>
    return;
 8012a5e:	bf00      	nop
  }
}
 8012a60:	3710      	adds	r7, #16
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop

08012a68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	889b      	ldrh	r3, [r3, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d131      	bne.n	8012ade <USBD_SetAddress+0x76>
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	88db      	ldrh	r3, [r3, #6]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d12d      	bne.n	8012ade <USBD_SetAddress+0x76>
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	885b      	ldrh	r3, [r3, #2]
 8012a86:	2b7f      	cmp	r3, #127	; 0x7f
 8012a88:	d829      	bhi.n	8012ade <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	885b      	ldrh	r3, [r3, #2]
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d104      	bne.n	8012aac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012aa2:	6839      	ldr	r1, [r7, #0]
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 f9bc 	bl	8012e22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012aaa:	e01d      	b.n	8012ae8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	7bfa      	ldrb	r2, [r7, #15]
 8012ab0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012ab4:	7bfb      	ldrb	r3, [r7, #15]
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f003 fdc7 	bl	801664c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f000 fa7a 	bl	8012fb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012ac4:	7bfb      	ldrb	r3, [r7, #15]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d004      	beq.n	8012ad4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2202      	movs	r2, #2
 8012ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ad2:	e009      	b.n	8012ae8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012adc:	e004      	b.n	8012ae8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012ade:	6839      	ldr	r1, [r7, #0]
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f000 f99e 	bl	8012e22 <USBD_CtlError>
  }
}
 8012ae6:	bf00      	nop
 8012ae8:	bf00      	nop
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b084      	sub	sp, #16
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012afa:	2300      	movs	r3, #0
 8012afc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	885b      	ldrh	r3, [r3, #2]
 8012b02:	b2da      	uxtb	r2, r3
 8012b04:	4b4e      	ldr	r3, [pc, #312]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012b08:	4b4d      	ldr	r3, [pc, #308]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	d905      	bls.n	8012b1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012b10:	6839      	ldr	r1, [r7, #0]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f000 f985 	bl	8012e22 <USBD_CtlError>
    return USBD_FAIL;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	e08c      	b.n	8012c36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d002      	beq.n	8012b2e <USBD_SetConfig+0x3e>
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d029      	beq.n	8012b80 <USBD_SetConfig+0x90>
 8012b2c:	e075      	b.n	8012c1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012b2e:	4b44      	ldr	r3, [pc, #272]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d020      	beq.n	8012b78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012b36:	4b42      	ldr	r3, [pc, #264]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b40:	4b3f      	ldr	r3, [pc, #252]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	4619      	mov	r1, r3
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7fe ffe7 	bl	8011b1a <USBD_SetClassConfig>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d008      	beq.n	8012b68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012b56:	6839      	ldr	r1, [r7, #0]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 f962 	bl	8012e22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2202      	movs	r2, #2
 8012b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b66:	e065      	b.n	8012c34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 fa25 	bl	8012fb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2203      	movs	r2, #3
 8012b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012b76:	e05d      	b.n	8012c34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 fa1d 	bl	8012fb8 <USBD_CtlSendStatus>
      break;
 8012b7e:	e059      	b.n	8012c34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012b80:	4b2f      	ldr	r3, [pc, #188]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d112      	bne.n	8012bae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2202      	movs	r2, #2
 8012b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012b90:	4b2b      	ldr	r3, [pc, #172]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	461a      	mov	r2, r3
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b9a:	4b29      	ldr	r3, [pc, #164]	; (8012c40 <USBD_SetConfig+0x150>)
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7fe ffd6 	bl	8011b52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f000 fa06 	bl	8012fb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012bac:	e042      	b.n	8012c34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012bae:	4b24      	ldr	r3, [pc, #144]	; (8012c40 <USBD_SetConfig+0x150>)
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d02a      	beq.n	8012c12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7fe ffc4 	bl	8011b52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012bca:	4b1d      	ldr	r3, [pc, #116]	; (8012c40 <USBD_SetConfig+0x150>)
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012bd4:	4b1a      	ldr	r3, [pc, #104]	; (8012c40 <USBD_SetConfig+0x150>)
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	4619      	mov	r1, r3
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7fe ff9d 	bl	8011b1a <USBD_SetClassConfig>
 8012be0:	4603      	mov	r3, r0
 8012be2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012be4:	7bfb      	ldrb	r3, [r7, #15]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d00f      	beq.n	8012c0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012bea:	6839      	ldr	r1, [r7, #0]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 f918 	bl	8012e22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7fe ffa9 	bl	8011b52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2202      	movs	r2, #2
 8012c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012c08:	e014      	b.n	8012c34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 f9d4 	bl	8012fb8 <USBD_CtlSendStatus>
      break;
 8012c10:	e010      	b.n	8012c34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f000 f9d0 	bl	8012fb8 <USBD_CtlSendStatus>
      break;
 8012c18:	e00c      	b.n	8012c34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012c1a:	6839      	ldr	r1, [r7, #0]
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f000 f900 	bl	8012e22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012c22:	4b07      	ldr	r3, [pc, #28]	; (8012c40 <USBD_SetConfig+0x150>)
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	4619      	mov	r1, r3
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7fe ff92 	bl	8011b52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012c2e:	2303      	movs	r3, #3
 8012c30:	73fb      	strb	r3, [r7, #15]
      break;
 8012c32:	bf00      	nop
  }

  return ret;
 8012c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3710      	adds	r7, #16
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	20000e9c 	.word	0x20000e9c

08012c44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	88db      	ldrh	r3, [r3, #6]
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d004      	beq.n	8012c60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012c56:	6839      	ldr	r1, [r7, #0]
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f8e2 	bl	8012e22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012c5e:	e023      	b.n	8012ca8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	2b02      	cmp	r3, #2
 8012c6a:	dc02      	bgt.n	8012c72 <USBD_GetConfig+0x2e>
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	dc03      	bgt.n	8012c78 <USBD_GetConfig+0x34>
 8012c70:	e015      	b.n	8012c9e <USBD_GetConfig+0x5a>
 8012c72:	2b03      	cmp	r3, #3
 8012c74:	d00b      	beq.n	8012c8e <USBD_GetConfig+0x4a>
 8012c76:	e012      	b.n	8012c9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	3308      	adds	r3, #8
 8012c82:	2201      	movs	r2, #1
 8012c84:	4619      	mov	r1, r3
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 f93c 	bl	8012f04 <USBD_CtlSendData>
        break;
 8012c8c:	e00c      	b.n	8012ca8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	3304      	adds	r3, #4
 8012c92:	2201      	movs	r2, #1
 8012c94:	4619      	mov	r1, r3
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f000 f934 	bl	8012f04 <USBD_CtlSendData>
        break;
 8012c9c:	e004      	b.n	8012ca8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012c9e:	6839      	ldr	r1, [r7, #0]
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 f8be 	bl	8012e22 <USBD_CtlError>
        break;
 8012ca6:	bf00      	nop
}
 8012ca8:	bf00      	nop
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	3b01      	subs	r3, #1
 8012cc4:	2b02      	cmp	r3, #2
 8012cc6:	d81e      	bhi.n	8012d06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	88db      	ldrh	r3, [r3, #6]
 8012ccc:	2b02      	cmp	r3, #2
 8012cce:	d004      	beq.n	8012cda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012cd0:	6839      	ldr	r1, [r7, #0]
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f000 f8a5 	bl	8012e22 <USBD_CtlError>
        break;
 8012cd8:	e01a      	b.n	8012d10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2201      	movs	r2, #1
 8012cde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d005      	beq.n	8012cf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	68db      	ldr	r3, [r3, #12]
 8012cee:	f043 0202 	orr.w	r2, r3, #2
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	330c      	adds	r3, #12
 8012cfa:	2202      	movs	r2, #2
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 f900 	bl	8012f04 <USBD_CtlSendData>
      break;
 8012d04:	e004      	b.n	8012d10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012d06:	6839      	ldr	r1, [r7, #0]
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 f88a 	bl	8012e22 <USBD_CtlError>
      break;
 8012d0e:	bf00      	nop
  }
}
 8012d10:	bf00      	nop
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	885b      	ldrh	r3, [r3, #2]
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	d107      	bne.n	8012d3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 f940 	bl	8012fb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012d38:	e013      	b.n	8012d62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	885b      	ldrh	r3, [r3, #2]
 8012d3e:	2b02      	cmp	r3, #2
 8012d40:	d10b      	bne.n	8012d5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	889b      	ldrh	r3, [r3, #4]
 8012d46:	0a1b      	lsrs	r3, r3, #8
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	b2da      	uxtb	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f000 f930 	bl	8012fb8 <USBD_CtlSendStatus>
}
 8012d58:	e003      	b.n	8012d62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012d5a:	6839      	ldr	r1, [r7, #0]
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f000 f860 	bl	8012e22 <USBD_CtlError>
}
 8012d62:	bf00      	nop
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b082      	sub	sp, #8
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
 8012d72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	d80b      	bhi.n	8012d9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	885b      	ldrh	r3, [r3, #2]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d10c      	bne.n	8012da4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f000 f910 	bl	8012fb8 <USBD_CtlSendStatus>
      }
      break;
 8012d98:	e004      	b.n	8012da4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012d9a:	6839      	ldr	r1, [r7, #0]
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f000 f840 	bl	8012e22 <USBD_CtlError>
      break;
 8012da2:	e000      	b.n	8012da6 <USBD_ClrFeature+0x3c>
      break;
 8012da4:	bf00      	nop
  }
}
 8012da6:	bf00      	nop
 8012da8:	3708      	adds	r7, #8
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}

08012dae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012dae:	b580      	push	{r7, lr}
 8012db0:	b084      	sub	sp, #16
 8012db2:	af00      	add	r7, sp, #0
 8012db4:	6078      	str	r0, [r7, #4]
 8012db6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	781a      	ldrb	r2, [r3, #0]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	781a      	ldrb	r2, [r3, #0]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f7ff fa41 	bl	8012260 <SWAPBYTE>
 8012dde:	4603      	mov	r3, r0
 8012de0:	461a      	mov	r2, r3
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	3301      	adds	r3, #1
 8012dea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	3301      	adds	r3, #1
 8012df0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f7ff fa34 	bl	8012260 <SWAPBYTE>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	3301      	adds	r3, #1
 8012e04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012e0c:	68f8      	ldr	r0, [r7, #12]
 8012e0e:	f7ff fa27 	bl	8012260 <SWAPBYTE>
 8012e12:	4603      	mov	r3, r0
 8012e14:	461a      	mov	r2, r3
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	80da      	strh	r2, [r3, #6]
}
 8012e1a:	bf00      	nop
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b082      	sub	sp, #8
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012e2c:	2180      	movs	r1, #128	; 0x80
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f003 fba2 	bl	8016578 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012e34:	2100      	movs	r1, #0
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f003 fb9e 	bl	8016578 <USBD_LL_StallEP>
}
 8012e3c:	bf00      	nop
 8012e3e:	3708      	adds	r7, #8
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b086      	sub	sp, #24
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012e50:	2300      	movs	r3, #0
 8012e52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d036      	beq.n	8012ec8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012e5e:	6938      	ldr	r0, [r7, #16]
 8012e60:	f000 f836 	bl	8012ed0 <USBD_GetLen>
 8012e64:	4603      	mov	r3, r0
 8012e66:	3301      	adds	r3, #1
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	005b      	lsls	r3, r3, #1
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012e72:	7dfb      	ldrb	r3, [r7, #23]
 8012e74:	68ba      	ldr	r2, [r7, #8]
 8012e76:	4413      	add	r3, r2
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	7812      	ldrb	r2, [r2, #0]
 8012e7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e7e:	7dfb      	ldrb	r3, [r7, #23]
 8012e80:	3301      	adds	r3, #1
 8012e82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012e84:	7dfb      	ldrb	r3, [r7, #23]
 8012e86:	68ba      	ldr	r2, [r7, #8]
 8012e88:	4413      	add	r3, r2
 8012e8a:	2203      	movs	r2, #3
 8012e8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e8e:	7dfb      	ldrb	r3, [r7, #23]
 8012e90:	3301      	adds	r3, #1
 8012e92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012e94:	e013      	b.n	8012ebe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012e96:	7dfb      	ldrb	r3, [r7, #23]
 8012e98:	68ba      	ldr	r2, [r7, #8]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	693a      	ldr	r2, [r7, #16]
 8012e9e:	7812      	ldrb	r2, [r2, #0]
 8012ea0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	613b      	str	r3, [r7, #16]
    idx++;
 8012ea8:	7dfb      	ldrb	r3, [r7, #23]
 8012eaa:	3301      	adds	r3, #1
 8012eac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012eae:	7dfb      	ldrb	r3, [r7, #23]
 8012eb0:	68ba      	ldr	r2, [r7, #8]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	701a      	strb	r2, [r3, #0]
    idx++;
 8012eb8:	7dfb      	ldrb	r3, [r7, #23]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d1e7      	bne.n	8012e96 <USBD_GetString+0x52>
 8012ec6:	e000      	b.n	8012eca <USBD_GetString+0x86>
    return;
 8012ec8:	bf00      	nop
  }
}
 8012eca:	3718      	adds	r7, #24
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012ee0:	e005      	b.n	8012eee <USBD_GetLen+0x1e>
  {
    len++;
 8012ee2:	7bfb      	ldrb	r3, [r7, #15]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	3301      	adds	r3, #1
 8012eec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d1f5      	bne.n	8012ee2 <USBD_GetLen+0x12>
  }

  return len;
 8012ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3714      	adds	r7, #20
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr

08012f04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2202      	movs	r2, #2
 8012f14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	68ba      	ldr	r2, [r7, #8]
 8012f28:	2100      	movs	r1, #0
 8012f2a:	68f8      	ldr	r0, [r7, #12]
 8012f2c:	f003 fbad 	bl	801668a <USBD_LL_Transmit>

  return USBD_OK;
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b084      	sub	sp, #16
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	60f8      	str	r0, [r7, #12]
 8012f42:	60b9      	str	r1, [r7, #8]
 8012f44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68ba      	ldr	r2, [r7, #8]
 8012f4a:	2100      	movs	r1, #0
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	f003 fb9c 	bl	801668a <USBD_LL_Transmit>

  return USBD_OK;
 8012f52:	2300      	movs	r3, #0
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	3710      	adds	r7, #16
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2203      	movs	r2, #3
 8012f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	2100      	movs	r1, #0
 8012f86:	68f8      	ldr	r0, [r7, #12]
 8012f88:	f003 fba0 	bl	80166cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f8c:	2300      	movs	r3, #0
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b084      	sub	sp, #16
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	60f8      	str	r0, [r7, #12]
 8012f9e:	60b9      	str	r1, [r7, #8]
 8012fa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	2100      	movs	r1, #0
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	f003 fb8f 	bl	80166cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012fae:	2300      	movs	r3, #0
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2204      	movs	r2, #4
 8012fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012fc8:	2300      	movs	r3, #0
 8012fca:	2200      	movs	r2, #0
 8012fcc:	2100      	movs	r1, #0
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f003 fb5b 	bl	801668a <USBD_LL_Transmit>

  return USBD_OK;
 8012fd4:	2300      	movs	r3, #0
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3708      	adds	r7, #8
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}

08012fde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012fde:	b580      	push	{r7, lr}
 8012fe0:	b082      	sub	sp, #8
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2205      	movs	r2, #5
 8012fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012fee:	2300      	movs	r3, #0
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	2100      	movs	r1, #0
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f003 fb69 	bl	80166cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ffa:	2300      	movs	r3, #0
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3708      	adds	r7, #8
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b084      	sub	sp, #16
 8013008:	af00      	add	r7, sp, #0
 801300a:	4603      	mov	r3, r0
 801300c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801300e:	79fb      	ldrb	r3, [r7, #7]
 8013010:	4a08      	ldr	r2, [pc, #32]	; (8013034 <disk_status+0x30>)
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	4413      	add	r3, r2
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	79fa      	ldrb	r2, [r7, #7]
 801301c:	4905      	ldr	r1, [pc, #20]	; (8013034 <disk_status+0x30>)
 801301e:	440a      	add	r2, r1
 8013020:	7a12      	ldrb	r2, [r2, #8]
 8013022:	4610      	mov	r0, r2
 8013024:	4798      	blx	r3
 8013026:	4603      	mov	r3, r0
 8013028:	73fb      	strb	r3, [r7, #15]
  return stat;
 801302a:	7bfb      	ldrb	r3, [r7, #15]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3710      	adds	r7, #16
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	20000ee8 	.word	0x20000ee8

08013038 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013042:	2300      	movs	r3, #0
 8013044:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013046:	79fb      	ldrb	r3, [r7, #7]
 8013048:	4a0d      	ldr	r2, [pc, #52]	; (8013080 <disk_initialize+0x48>)
 801304a:	5cd3      	ldrb	r3, [r2, r3]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d111      	bne.n	8013074 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013050:	79fb      	ldrb	r3, [r7, #7]
 8013052:	4a0b      	ldr	r2, [pc, #44]	; (8013080 <disk_initialize+0x48>)
 8013054:	2101      	movs	r1, #1
 8013056:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013058:	79fb      	ldrb	r3, [r7, #7]
 801305a:	4a09      	ldr	r2, [pc, #36]	; (8013080 <disk_initialize+0x48>)
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	4413      	add	r3, r2
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	79fa      	ldrb	r2, [r7, #7]
 8013066:	4906      	ldr	r1, [pc, #24]	; (8013080 <disk_initialize+0x48>)
 8013068:	440a      	add	r2, r1
 801306a:	7a12      	ldrb	r2, [r2, #8]
 801306c:	4610      	mov	r0, r2
 801306e:	4798      	blx	r3
 8013070:	4603      	mov	r3, r0
 8013072:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013074:	7bfb      	ldrb	r3, [r7, #15]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3710      	adds	r7, #16
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	20000ee8 	.word	0x20000ee8

08013084 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013084:	b590      	push	{r4, r7, lr}
 8013086:	b087      	sub	sp, #28
 8013088:	af00      	add	r7, sp, #0
 801308a:	60b9      	str	r1, [r7, #8]
 801308c:	607a      	str	r2, [r7, #4]
 801308e:	603b      	str	r3, [r7, #0]
 8013090:	4603      	mov	r3, r0
 8013092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013094:	7bfb      	ldrb	r3, [r7, #15]
 8013096:	4a0a      	ldr	r2, [pc, #40]	; (80130c0 <disk_read+0x3c>)
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	4413      	add	r3, r2
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	689c      	ldr	r4, [r3, #8]
 80130a0:	7bfb      	ldrb	r3, [r7, #15]
 80130a2:	4a07      	ldr	r2, [pc, #28]	; (80130c0 <disk_read+0x3c>)
 80130a4:	4413      	add	r3, r2
 80130a6:	7a18      	ldrb	r0, [r3, #8]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	68b9      	ldr	r1, [r7, #8]
 80130ae:	47a0      	blx	r4
 80130b0:	4603      	mov	r3, r0
 80130b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80130b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	371c      	adds	r7, #28
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd90      	pop	{r4, r7, pc}
 80130be:	bf00      	nop
 80130c0:	20000ee8 	.word	0x20000ee8

080130c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80130c4:	b590      	push	{r4, r7, lr}
 80130c6:	b087      	sub	sp, #28
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	60b9      	str	r1, [r7, #8]
 80130cc:	607a      	str	r2, [r7, #4]
 80130ce:	603b      	str	r3, [r7, #0]
 80130d0:	4603      	mov	r3, r0
 80130d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
 80130d6:	4a0a      	ldr	r2, [pc, #40]	; (8013100 <disk_write+0x3c>)
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	4413      	add	r3, r2
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	68dc      	ldr	r4, [r3, #12]
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
 80130e2:	4a07      	ldr	r2, [pc, #28]	; (8013100 <disk_write+0x3c>)
 80130e4:	4413      	add	r3, r2
 80130e6:	7a18      	ldrb	r0, [r3, #8]
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	68b9      	ldr	r1, [r7, #8]
 80130ee:	47a0      	blx	r4
 80130f0:	4603      	mov	r3, r0
 80130f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80130f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	371c      	adds	r7, #28
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd90      	pop	{r4, r7, pc}
 80130fe:	bf00      	nop
 8013100:	20000ee8 	.word	0x20000ee8

08013104 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	4603      	mov	r3, r0
 801310c:	603a      	str	r2, [r7, #0]
 801310e:	71fb      	strb	r3, [r7, #7]
 8013110:	460b      	mov	r3, r1
 8013112:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013114:	79fb      	ldrb	r3, [r7, #7]
 8013116:	4a09      	ldr	r2, [pc, #36]	; (801313c <disk_ioctl+0x38>)
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	691b      	ldr	r3, [r3, #16]
 8013120:	79fa      	ldrb	r2, [r7, #7]
 8013122:	4906      	ldr	r1, [pc, #24]	; (801313c <disk_ioctl+0x38>)
 8013124:	440a      	add	r2, r1
 8013126:	7a10      	ldrb	r0, [r2, #8]
 8013128:	79b9      	ldrb	r1, [r7, #6]
 801312a:	683a      	ldr	r2, [r7, #0]
 801312c:	4798      	blx	r3
 801312e:	4603      	mov	r3, r0
 8013130:	73fb      	strb	r3, [r7, #15]
  return res;
 8013132:	7bfb      	ldrb	r3, [r7, #15]
}
 8013134:	4618      	mov	r0, r3
 8013136:	3710      	adds	r7, #16
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	20000ee8 	.word	0x20000ee8

08013140 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013140:	b480      	push	{r7}
 8013142:	b085      	sub	sp, #20
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	3301      	adds	r3, #1
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013150:	89fb      	ldrh	r3, [r7, #14]
 8013152:	021b      	lsls	r3, r3, #8
 8013154:	b21a      	sxth	r2, r3
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	b21b      	sxth	r3, r3
 801315c:	4313      	orrs	r3, r2
 801315e:	b21b      	sxth	r3, r3
 8013160:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013162:	89fb      	ldrh	r3, [r7, #14]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3714      	adds	r7, #20
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013170:	b480      	push	{r7}
 8013172:	b085      	sub	sp, #20
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	3303      	adds	r3, #3
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	021b      	lsls	r3, r3, #8
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	3202      	adds	r2, #2
 8013188:	7812      	ldrb	r2, [r2, #0]
 801318a:	4313      	orrs	r3, r2
 801318c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	021b      	lsls	r3, r3, #8
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	3201      	adds	r2, #1
 8013196:	7812      	ldrb	r2, [r2, #0]
 8013198:	4313      	orrs	r3, r2
 801319a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	021b      	lsls	r3, r3, #8
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	7812      	ldrb	r2, [r2, #0]
 80131a4:	4313      	orrs	r3, r2
 80131a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80131a8:	68fb      	ldr	r3, [r7, #12]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3714      	adds	r7, #20
 80131ae:	46bd      	mov	sp, r7
 80131b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b4:	4770      	bx	lr

080131b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80131b6:	b480      	push	{r7}
 80131b8:	b083      	sub	sp, #12
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
 80131be:	460b      	mov	r3, r1
 80131c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	1c5a      	adds	r2, r3, #1
 80131c6:	607a      	str	r2, [r7, #4]
 80131c8:	887a      	ldrh	r2, [r7, #2]
 80131ca:	b2d2      	uxtb	r2, r2
 80131cc:	701a      	strb	r2, [r3, #0]
 80131ce:	887b      	ldrh	r3, [r7, #2]
 80131d0:	0a1b      	lsrs	r3, r3, #8
 80131d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	1c5a      	adds	r2, r3, #1
 80131d8:	607a      	str	r2, [r7, #4]
 80131da:	887a      	ldrh	r2, [r7, #2]
 80131dc:	b2d2      	uxtb	r2, r2
 80131de:	701a      	strb	r2, [r3, #0]
}
 80131e0:	bf00      	nop
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	1c5a      	adds	r2, r3, #1
 80131fa:	607a      	str	r2, [r7, #4]
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	b2d2      	uxtb	r2, r2
 8013200:	701a      	strb	r2, [r3, #0]
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	0a1b      	lsrs	r3, r3, #8
 8013206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	1c5a      	adds	r2, r3, #1
 801320c:	607a      	str	r2, [r7, #4]
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	b2d2      	uxtb	r2, r2
 8013212:	701a      	strb	r2, [r3, #0]
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	0a1b      	lsrs	r3, r3, #8
 8013218:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	1c5a      	adds	r2, r3, #1
 801321e:	607a      	str	r2, [r7, #4]
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	b2d2      	uxtb	r2, r2
 8013224:	701a      	strb	r2, [r3, #0]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	0a1b      	lsrs	r3, r3, #8
 801322a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	1c5a      	adds	r2, r3, #1
 8013230:	607a      	str	r2, [r7, #4]
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	b2d2      	uxtb	r2, r2
 8013236:	701a      	strb	r2, [r3, #0]
}
 8013238:	bf00      	nop
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013244:	b480      	push	{r7}
 8013246:	b087      	sub	sp, #28
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d00d      	beq.n	801327a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801325e:	693a      	ldr	r2, [r7, #16]
 8013260:	1c53      	adds	r3, r2, #1
 8013262:	613b      	str	r3, [r7, #16]
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	1c59      	adds	r1, r3, #1
 8013268:	6179      	str	r1, [r7, #20]
 801326a:	7812      	ldrb	r2, [r2, #0]
 801326c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	3b01      	subs	r3, #1
 8013272:	607b      	str	r3, [r7, #4]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1f1      	bne.n	801325e <mem_cpy+0x1a>
	}
}
 801327a:	bf00      	nop
 801327c:	371c      	adds	r7, #28
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013286:	b480      	push	{r7}
 8013288:	b087      	sub	sp, #28
 801328a:	af00      	add	r7, sp, #0
 801328c:	60f8      	str	r0, [r7, #12]
 801328e:	60b9      	str	r1, [r7, #8]
 8013290:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	1c5a      	adds	r2, r3, #1
 801329a:	617a      	str	r2, [r7, #20]
 801329c:	68ba      	ldr	r2, [r7, #8]
 801329e:	b2d2      	uxtb	r2, r2
 80132a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	3b01      	subs	r3, #1
 80132a6:	607b      	str	r3, [r7, #4]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d1f3      	bne.n	8013296 <mem_set+0x10>
}
 80132ae:	bf00      	nop
 80132b0:	bf00      	nop
 80132b2:	371c      	adds	r7, #28
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr

080132bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80132bc:	b480      	push	{r7}
 80132be:	b089      	sub	sp, #36	; 0x24
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	61fb      	str	r3, [r7, #28]
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80132d0:	2300      	movs	r3, #0
 80132d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	1c5a      	adds	r2, r3, #1
 80132d8:	61fa      	str	r2, [r7, #28]
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	4619      	mov	r1, r3
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	1c5a      	adds	r2, r3, #1
 80132e2:	61ba      	str	r2, [r7, #24]
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	1acb      	subs	r3, r1, r3
 80132e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	3b01      	subs	r3, #1
 80132ee:	607b      	str	r3, [r7, #4]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d002      	beq.n	80132fc <mem_cmp+0x40>
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d0eb      	beq.n	80132d4 <mem_cmp+0x18>

	return r;
 80132fc:	697b      	ldr	r3, [r7, #20]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3724      	adds	r7, #36	; 0x24
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr

0801330a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801330a:	b480      	push	{r7}
 801330c:	b083      	sub	sp, #12
 801330e:	af00      	add	r7, sp, #0
 8013310:	6078      	str	r0, [r7, #4]
 8013312:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013314:	e002      	b.n	801331c <chk_chr+0x12>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	3301      	adds	r3, #1
 801331a:	607b      	str	r3, [r7, #4]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d005      	beq.n	8013330 <chk_chr+0x26>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	461a      	mov	r2, r3
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	4293      	cmp	r3, r2
 801332e:	d1f2      	bne.n	8013316 <chk_chr+0xc>
	return *str;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	781b      	ldrb	r3, [r3, #0]
}
 8013334:	4618      	mov	r0, r3
 8013336:	370c      	adds	r7, #12
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013340:	b480      	push	{r7}
 8013342:	b085      	sub	sp, #20
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801334a:	2300      	movs	r3, #0
 801334c:	60bb      	str	r3, [r7, #8]
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	60fb      	str	r3, [r7, #12]
 8013352:	e029      	b.n	80133a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013354:	4a27      	ldr	r2, [pc, #156]	; (80133f4 <chk_lock+0xb4>)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	011b      	lsls	r3, r3, #4
 801335a:	4413      	add	r3, r2
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d01d      	beq.n	801339e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013362:	4a24      	ldr	r2, [pc, #144]	; (80133f4 <chk_lock+0xb4>)
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	011b      	lsls	r3, r3, #4
 8013368:	4413      	add	r3, r2
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d116      	bne.n	80133a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013374:	4a1f      	ldr	r2, [pc, #124]	; (80133f4 <chk_lock+0xb4>)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	011b      	lsls	r3, r3, #4
 801337a:	4413      	add	r3, r2
 801337c:	3304      	adds	r3, #4
 801337e:	681a      	ldr	r2, [r3, #0]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013384:	429a      	cmp	r2, r3
 8013386:	d10c      	bne.n	80133a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013388:	4a1a      	ldr	r2, [pc, #104]	; (80133f4 <chk_lock+0xb4>)
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	011b      	lsls	r3, r3, #4
 801338e:	4413      	add	r3, r2
 8013390:	3308      	adds	r3, #8
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013398:	429a      	cmp	r2, r3
 801339a:	d102      	bne.n	80133a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801339c:	e007      	b.n	80133ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801339e:	2301      	movs	r3, #1
 80133a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	3301      	adds	r3, #1
 80133a6:	60fb      	str	r3, [r7, #12]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2b03      	cmp	r3, #3
 80133ac:	d9d2      	bls.n	8013354 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2b04      	cmp	r3, #4
 80133b2:	d109      	bne.n	80133c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d102      	bne.n	80133c0 <chk_lock+0x80>
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	2b02      	cmp	r3, #2
 80133be:	d101      	bne.n	80133c4 <chk_lock+0x84>
 80133c0:	2300      	movs	r3, #0
 80133c2:	e010      	b.n	80133e6 <chk_lock+0xa6>
 80133c4:	2312      	movs	r3, #18
 80133c6:	e00e      	b.n	80133e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d108      	bne.n	80133e0 <chk_lock+0xa0>
 80133ce:	4a09      	ldr	r2, [pc, #36]	; (80133f4 <chk_lock+0xb4>)
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	011b      	lsls	r3, r3, #4
 80133d4:	4413      	add	r3, r2
 80133d6:	330c      	adds	r3, #12
 80133d8:	881b      	ldrh	r3, [r3, #0]
 80133da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133de:	d101      	bne.n	80133e4 <chk_lock+0xa4>
 80133e0:	2310      	movs	r3, #16
 80133e2:	e000      	b.n	80133e6 <chk_lock+0xa6>
 80133e4:	2300      	movs	r3, #0
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3714      	adds	r7, #20
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop
 80133f4:	20000ea8 	.word	0x20000ea8

080133f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80133fe:	2300      	movs	r3, #0
 8013400:	607b      	str	r3, [r7, #4]
 8013402:	e002      	b.n	801340a <enq_lock+0x12>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3301      	adds	r3, #1
 8013408:	607b      	str	r3, [r7, #4]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b03      	cmp	r3, #3
 801340e:	d806      	bhi.n	801341e <enq_lock+0x26>
 8013410:	4a09      	ldr	r2, [pc, #36]	; (8013438 <enq_lock+0x40>)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	011b      	lsls	r3, r3, #4
 8013416:	4413      	add	r3, r2
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d1f2      	bne.n	8013404 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2b04      	cmp	r3, #4
 8013422:	bf14      	ite	ne
 8013424:	2301      	movne	r3, #1
 8013426:	2300      	moveq	r3, #0
 8013428:	b2db      	uxtb	r3, r3
}
 801342a:	4618      	mov	r0, r3
 801342c:	370c      	adds	r7, #12
 801342e:	46bd      	mov	sp, r7
 8013430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop
 8013438:	20000ea8 	.word	0x20000ea8

0801343c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801343c:	b480      	push	{r7}
 801343e:	b085      	sub	sp, #20
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013446:	2300      	movs	r3, #0
 8013448:	60fb      	str	r3, [r7, #12]
 801344a:	e01f      	b.n	801348c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801344c:	4a41      	ldr	r2, [pc, #260]	; (8013554 <inc_lock+0x118>)
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	011b      	lsls	r3, r3, #4
 8013452:	4413      	add	r3, r2
 8013454:	681a      	ldr	r2, [r3, #0]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	429a      	cmp	r2, r3
 801345c:	d113      	bne.n	8013486 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801345e:	4a3d      	ldr	r2, [pc, #244]	; (8013554 <inc_lock+0x118>)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	011b      	lsls	r3, r3, #4
 8013464:	4413      	add	r3, r2
 8013466:	3304      	adds	r3, #4
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801346e:	429a      	cmp	r2, r3
 8013470:	d109      	bne.n	8013486 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013472:	4a38      	ldr	r2, [pc, #224]	; (8013554 <inc_lock+0x118>)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	011b      	lsls	r3, r3, #4
 8013478:	4413      	add	r3, r2
 801347a:	3308      	adds	r3, #8
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013482:	429a      	cmp	r2, r3
 8013484:	d006      	beq.n	8013494 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	3301      	adds	r3, #1
 801348a:	60fb      	str	r3, [r7, #12]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2b03      	cmp	r3, #3
 8013490:	d9dc      	bls.n	801344c <inc_lock+0x10>
 8013492:	e000      	b.n	8013496 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013494:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2b04      	cmp	r3, #4
 801349a:	d132      	bne.n	8013502 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801349c:	2300      	movs	r3, #0
 801349e:	60fb      	str	r3, [r7, #12]
 80134a0:	e002      	b.n	80134a8 <inc_lock+0x6c>
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	3301      	adds	r3, #1
 80134a6:	60fb      	str	r3, [r7, #12]
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2b03      	cmp	r3, #3
 80134ac:	d806      	bhi.n	80134bc <inc_lock+0x80>
 80134ae:	4a29      	ldr	r2, [pc, #164]	; (8013554 <inc_lock+0x118>)
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	011b      	lsls	r3, r3, #4
 80134b4:	4413      	add	r3, r2
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d1f2      	bne.n	80134a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2b04      	cmp	r3, #4
 80134c0:	d101      	bne.n	80134c6 <inc_lock+0x8a>
 80134c2:	2300      	movs	r3, #0
 80134c4:	e040      	b.n	8013548 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	4922      	ldr	r1, [pc, #136]	; (8013554 <inc_lock+0x118>)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	011b      	lsls	r3, r3, #4
 80134d0:	440b      	add	r3, r1
 80134d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	689a      	ldr	r2, [r3, #8]
 80134d8:	491e      	ldr	r1, [pc, #120]	; (8013554 <inc_lock+0x118>)
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	011b      	lsls	r3, r3, #4
 80134de:	440b      	add	r3, r1
 80134e0:	3304      	adds	r3, #4
 80134e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	695a      	ldr	r2, [r3, #20]
 80134e8:	491a      	ldr	r1, [pc, #104]	; (8013554 <inc_lock+0x118>)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	011b      	lsls	r3, r3, #4
 80134ee:	440b      	add	r3, r1
 80134f0:	3308      	adds	r3, #8
 80134f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80134f4:	4a17      	ldr	r2, [pc, #92]	; (8013554 <inc_lock+0x118>)
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	011b      	lsls	r3, r3, #4
 80134fa:	4413      	add	r3, r2
 80134fc:	330c      	adds	r3, #12
 80134fe:	2200      	movs	r2, #0
 8013500:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d009      	beq.n	801351c <inc_lock+0xe0>
 8013508:	4a12      	ldr	r2, [pc, #72]	; (8013554 <inc_lock+0x118>)
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	011b      	lsls	r3, r3, #4
 801350e:	4413      	add	r3, r2
 8013510:	330c      	adds	r3, #12
 8013512:	881b      	ldrh	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <inc_lock+0xe0>
 8013518:	2300      	movs	r3, #0
 801351a:	e015      	b.n	8013548 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d108      	bne.n	8013534 <inc_lock+0xf8>
 8013522:	4a0c      	ldr	r2, [pc, #48]	; (8013554 <inc_lock+0x118>)
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	011b      	lsls	r3, r3, #4
 8013528:	4413      	add	r3, r2
 801352a:	330c      	adds	r3, #12
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	3301      	adds	r3, #1
 8013530:	b29a      	uxth	r2, r3
 8013532:	e001      	b.n	8013538 <inc_lock+0xfc>
 8013534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013538:	4906      	ldr	r1, [pc, #24]	; (8013554 <inc_lock+0x118>)
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	011b      	lsls	r3, r3, #4
 801353e:	440b      	add	r3, r1
 8013540:	330c      	adds	r3, #12
 8013542:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	3301      	adds	r3, #1
}
 8013548:	4618      	mov	r0, r3
 801354a:	3714      	adds	r7, #20
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr
 8013554:	20000ea8 	.word	0x20000ea8

08013558 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013558:	b480      	push	{r7}
 801355a:	b085      	sub	sp, #20
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	3b01      	subs	r3, #1
 8013564:	607b      	str	r3, [r7, #4]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b03      	cmp	r3, #3
 801356a:	d825      	bhi.n	80135b8 <dec_lock+0x60>
		n = Files[i].ctr;
 801356c:	4a17      	ldr	r2, [pc, #92]	; (80135cc <dec_lock+0x74>)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	011b      	lsls	r3, r3, #4
 8013572:	4413      	add	r3, r2
 8013574:	330c      	adds	r3, #12
 8013576:	881b      	ldrh	r3, [r3, #0]
 8013578:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801357a:	89fb      	ldrh	r3, [r7, #14]
 801357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013580:	d101      	bne.n	8013586 <dec_lock+0x2e>
 8013582:	2300      	movs	r3, #0
 8013584:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013586:	89fb      	ldrh	r3, [r7, #14]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d002      	beq.n	8013592 <dec_lock+0x3a>
 801358c:	89fb      	ldrh	r3, [r7, #14]
 801358e:	3b01      	subs	r3, #1
 8013590:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013592:	4a0e      	ldr	r2, [pc, #56]	; (80135cc <dec_lock+0x74>)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	011b      	lsls	r3, r3, #4
 8013598:	4413      	add	r3, r2
 801359a:	330c      	adds	r3, #12
 801359c:	89fa      	ldrh	r2, [r7, #14]
 801359e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80135a0:	89fb      	ldrh	r3, [r7, #14]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d105      	bne.n	80135b2 <dec_lock+0x5a>
 80135a6:	4a09      	ldr	r2, [pc, #36]	; (80135cc <dec_lock+0x74>)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	011b      	lsls	r3, r3, #4
 80135ac:	4413      	add	r3, r2
 80135ae:	2200      	movs	r2, #0
 80135b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	737b      	strb	r3, [r7, #13]
 80135b6:	e001      	b.n	80135bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80135b8:	2302      	movs	r3, #2
 80135ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80135bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3714      	adds	r7, #20
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop
 80135cc:	20000ea8 	.word	0x20000ea8

080135d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b085      	sub	sp, #20
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80135d8:	2300      	movs	r3, #0
 80135da:	60fb      	str	r3, [r7, #12]
 80135dc:	e010      	b.n	8013600 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80135de:	4a0d      	ldr	r2, [pc, #52]	; (8013614 <clear_lock+0x44>)
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	011b      	lsls	r3, r3, #4
 80135e4:	4413      	add	r3, r2
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d105      	bne.n	80135fa <clear_lock+0x2a>
 80135ee:	4a09      	ldr	r2, [pc, #36]	; (8013614 <clear_lock+0x44>)
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	011b      	lsls	r3, r3, #4
 80135f4:	4413      	add	r3, r2
 80135f6:	2200      	movs	r2, #0
 80135f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	3301      	adds	r3, #1
 80135fe:	60fb      	str	r3, [r7, #12]
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2b03      	cmp	r3, #3
 8013604:	d9eb      	bls.n	80135de <clear_lock+0xe>
	}
}
 8013606:	bf00      	nop
 8013608:	bf00      	nop
 801360a:	3714      	adds	r7, #20
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr
 8013614:	20000ea8 	.word	0x20000ea8

08013618 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b086      	sub	sp, #24
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	78db      	ldrb	r3, [r3, #3]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d034      	beq.n	8013696 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013630:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	7858      	ldrb	r0, [r3, #1]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801363c:	2301      	movs	r3, #1
 801363e:	697a      	ldr	r2, [r7, #20]
 8013640:	f7ff fd40 	bl	80130c4 <disk_write>
 8013644:	4603      	mov	r3, r0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d002      	beq.n	8013650 <sync_window+0x38>
			res = FR_DISK_ERR;
 801364a:	2301      	movs	r3, #1
 801364c:	73fb      	strb	r3, [r7, #15]
 801364e:	e022      	b.n	8013696 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2200      	movs	r2, #0
 8013654:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a1b      	ldr	r3, [r3, #32]
 801365a:	697a      	ldr	r2, [r7, #20]
 801365c:	1ad2      	subs	r2, r2, r3
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	699b      	ldr	r3, [r3, #24]
 8013662:	429a      	cmp	r2, r3
 8013664:	d217      	bcs.n	8013696 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	789b      	ldrb	r3, [r3, #2]
 801366a:	613b      	str	r3, [r7, #16]
 801366c:	e010      	b.n	8013690 <sync_window+0x78>
					wsect += fs->fsize;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	699b      	ldr	r3, [r3, #24]
 8013672:	697a      	ldr	r2, [r7, #20]
 8013674:	4413      	add	r3, r2
 8013676:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	7858      	ldrb	r0, [r3, #1]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013682:	2301      	movs	r3, #1
 8013684:	697a      	ldr	r2, [r7, #20]
 8013686:	f7ff fd1d 	bl	80130c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	3b01      	subs	r3, #1
 801368e:	613b      	str	r3, [r7, #16]
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	2b01      	cmp	r3, #1
 8013694:	d8eb      	bhi.n	801366e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013696:	7bfb      	ldrb	r3, [r7, #15]
}
 8013698:	4618      	mov	r0, r3
 801369a:	3718      	adds	r7, #24
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80136aa:	2300      	movs	r3, #0
 80136ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d01b      	beq.n	80136f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7ff ffad 	bl	8013618 <sync_window>
 80136be:	4603      	mov	r3, r0
 80136c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80136c2:	7bfb      	ldrb	r3, [r7, #15]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d113      	bne.n	80136f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	7858      	ldrb	r0, [r3, #1]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136d2:	2301      	movs	r3, #1
 80136d4:	683a      	ldr	r2, [r7, #0]
 80136d6:	f7ff fcd5 	bl	8013084 <disk_read>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d004      	beq.n	80136ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80136e0:	f04f 33ff 	mov.w	r3, #4294967295
 80136e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80136e6:	2301      	movs	r3, #1
 80136e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80136f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
	...

080136fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7ff ff87 	bl	8013618 <sync_window>
 801370a:	4603      	mov	r3, r0
 801370c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801370e:	7bfb      	ldrb	r3, [r7, #15]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d158      	bne.n	80137c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	2b03      	cmp	r3, #3
 801371a:	d148      	bne.n	80137ae <sync_fs+0xb2>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	791b      	ldrb	r3, [r3, #4]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d144      	bne.n	80137ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3330      	adds	r3, #48	; 0x30
 8013728:	f44f 7200 	mov.w	r2, #512	; 0x200
 801372c:	2100      	movs	r1, #0
 801372e:	4618      	mov	r0, r3
 8013730:	f7ff fda9 	bl	8013286 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	3330      	adds	r3, #48	; 0x30
 8013738:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801373c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013740:	4618      	mov	r0, r3
 8013742:	f7ff fd38 	bl	80131b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	3330      	adds	r3, #48	; 0x30
 801374a:	4921      	ldr	r1, [pc, #132]	; (80137d0 <sync_fs+0xd4>)
 801374c:	4618      	mov	r0, r3
 801374e:	f7ff fd4d 	bl	80131ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	3330      	adds	r3, #48	; 0x30
 8013756:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801375a:	491e      	ldr	r1, [pc, #120]	; (80137d4 <sync_fs+0xd8>)
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff fd45 	bl	80131ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	3330      	adds	r3, #48	; 0x30
 8013766:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	691b      	ldr	r3, [r3, #16]
 801376e:	4619      	mov	r1, r3
 8013770:	4610      	mov	r0, r2
 8013772:	f7ff fd3b 	bl	80131ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3330      	adds	r3, #48	; 0x30
 801377a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	4619      	mov	r1, r3
 8013784:	4610      	mov	r0, r2
 8013786:	f7ff fd31 	bl	80131ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	69db      	ldr	r3, [r3, #28]
 801378e:	1c5a      	adds	r2, r3, #1
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	7858      	ldrb	r0, [r3, #1]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137a2:	2301      	movs	r3, #1
 80137a4:	f7ff fc8e 	bl	80130c4 <disk_write>
			fs->fsi_flag = 0;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2200      	movs	r2, #0
 80137ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	785b      	ldrb	r3, [r3, #1]
 80137b2:	2200      	movs	r2, #0
 80137b4:	2100      	movs	r1, #0
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff fca4 	bl	8013104 <disk_ioctl>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d001      	beq.n	80137c6 <sync_fs+0xca>
 80137c2:	2301      	movs	r3, #1
 80137c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80137c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	3710      	adds	r7, #16
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	41615252 	.word	0x41615252
 80137d4:	61417272 	.word	0x61417272

080137d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	3b02      	subs	r3, #2
 80137e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	695b      	ldr	r3, [r3, #20]
 80137ec:	3b02      	subs	r3, #2
 80137ee:	683a      	ldr	r2, [r7, #0]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d301      	bcc.n	80137f8 <clust2sect+0x20>
 80137f4:	2300      	movs	r3, #0
 80137f6:	e008      	b.n	801380a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	895b      	ldrh	r3, [r3, #10]
 80137fc:	461a      	mov	r2, r3
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	fb03 f202 	mul.w	r2, r3, r2
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013808:	4413      	add	r3, r2
}
 801380a:	4618      	mov	r0, r3
 801380c:	370c      	adds	r7, #12
 801380e:	46bd      	mov	sp, r7
 8013810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013814:	4770      	bx	lr

08013816 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013816:	b580      	push	{r7, lr}
 8013818:	b086      	sub	sp, #24
 801381a:	af00      	add	r7, sp, #0
 801381c:	6078      	str	r0, [r7, #4]
 801381e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	2b01      	cmp	r3, #1
 801382a:	d904      	bls.n	8013836 <get_fat+0x20>
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	695b      	ldr	r3, [r3, #20]
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	429a      	cmp	r2, r3
 8013834:	d302      	bcc.n	801383c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013836:	2301      	movs	r3, #1
 8013838:	617b      	str	r3, [r7, #20]
 801383a:	e08f      	b.n	801395c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801383c:	f04f 33ff 	mov.w	r3, #4294967295
 8013840:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	2b03      	cmp	r3, #3
 8013848:	d062      	beq.n	8013910 <get_fat+0xfa>
 801384a:	2b03      	cmp	r3, #3
 801384c:	dc7c      	bgt.n	8013948 <get_fat+0x132>
 801384e:	2b01      	cmp	r3, #1
 8013850:	d002      	beq.n	8013858 <get_fat+0x42>
 8013852:	2b02      	cmp	r3, #2
 8013854:	d042      	beq.n	80138dc <get_fat+0xc6>
 8013856:	e077      	b.n	8013948 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	60fb      	str	r3, [r7, #12]
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	085b      	lsrs	r3, r3, #1
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	4413      	add	r3, r2
 8013864:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	6a1a      	ldr	r2, [r3, #32]
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	0a5b      	lsrs	r3, r3, #9
 801386e:	4413      	add	r3, r2
 8013870:	4619      	mov	r1, r3
 8013872:	6938      	ldr	r0, [r7, #16]
 8013874:	f7ff ff14 	bl	80136a0 <move_window>
 8013878:	4603      	mov	r3, r0
 801387a:	2b00      	cmp	r3, #0
 801387c:	d167      	bne.n	801394e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	1c5a      	adds	r2, r3, #1
 8013882:	60fa      	str	r2, [r7, #12]
 8013884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013888:	693a      	ldr	r2, [r7, #16]
 801388a:	4413      	add	r3, r2
 801388c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013890:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	6a1a      	ldr	r2, [r3, #32]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	0a5b      	lsrs	r3, r3, #9
 801389a:	4413      	add	r3, r2
 801389c:	4619      	mov	r1, r3
 801389e:	6938      	ldr	r0, [r7, #16]
 80138a0:	f7ff fefe 	bl	80136a0 <move_window>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d153      	bne.n	8013952 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138b0:	693a      	ldr	r2, [r7, #16]
 80138b2:	4413      	add	r3, r2
 80138b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138b8:	021b      	lsls	r3, r3, #8
 80138ba:	461a      	mov	r2, r3
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	4313      	orrs	r3, r2
 80138c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	f003 0301 	and.w	r3, r3, #1
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d002      	beq.n	80138d2 <get_fat+0xbc>
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	091b      	lsrs	r3, r3, #4
 80138d0:	e002      	b.n	80138d8 <get_fat+0xc2>
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80138d8:	617b      	str	r3, [r7, #20]
			break;
 80138da:	e03f      	b.n	801395c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	6a1a      	ldr	r2, [r3, #32]
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	0a1b      	lsrs	r3, r3, #8
 80138e4:	4413      	add	r3, r2
 80138e6:	4619      	mov	r1, r3
 80138e8:	6938      	ldr	r0, [r7, #16]
 80138ea:	f7ff fed9 	bl	80136a0 <move_window>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d130      	bne.n	8013956 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	005b      	lsls	r3, r3, #1
 80138fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013902:	4413      	add	r3, r2
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff fc1b 	bl	8013140 <ld_word>
 801390a:	4603      	mov	r3, r0
 801390c:	617b      	str	r3, [r7, #20]
			break;
 801390e:	e025      	b.n	801395c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	6a1a      	ldr	r2, [r3, #32]
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	09db      	lsrs	r3, r3, #7
 8013918:	4413      	add	r3, r2
 801391a:	4619      	mov	r1, r3
 801391c:	6938      	ldr	r0, [r7, #16]
 801391e:	f7ff febf 	bl	80136a0 <move_window>
 8013922:	4603      	mov	r3, r0
 8013924:	2b00      	cmp	r3, #0
 8013926:	d118      	bne.n	801395a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013936:	4413      	add	r3, r2
 8013938:	4618      	mov	r0, r3
 801393a:	f7ff fc19 	bl	8013170 <ld_dword>
 801393e:	4603      	mov	r3, r0
 8013940:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013944:	617b      	str	r3, [r7, #20]
			break;
 8013946:	e009      	b.n	801395c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013948:	2301      	movs	r3, #1
 801394a:	617b      	str	r3, [r7, #20]
 801394c:	e006      	b.n	801395c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801394e:	bf00      	nop
 8013950:	e004      	b.n	801395c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013952:	bf00      	nop
 8013954:	e002      	b.n	801395c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013956:	bf00      	nop
 8013958:	e000      	b.n	801395c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801395a:	bf00      	nop
		}
	}

	return val;
 801395c:	697b      	ldr	r3, [r7, #20]
}
 801395e:	4618      	mov	r0, r3
 8013960:	3718      	adds	r7, #24
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013966:	b590      	push	{r4, r7, lr}
 8013968:	b089      	sub	sp, #36	; 0x24
 801396a:	af00      	add	r7, sp, #0
 801396c:	60f8      	str	r0, [r7, #12]
 801396e:	60b9      	str	r1, [r7, #8]
 8013970:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013972:	2302      	movs	r3, #2
 8013974:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	2b01      	cmp	r3, #1
 801397a:	f240 80d9 	bls.w	8013b30 <put_fat+0x1ca>
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	695b      	ldr	r3, [r3, #20]
 8013982:	68ba      	ldr	r2, [r7, #8]
 8013984:	429a      	cmp	r2, r3
 8013986:	f080 80d3 	bcs.w	8013b30 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	2b03      	cmp	r3, #3
 8013990:	f000 8096 	beq.w	8013ac0 <put_fat+0x15a>
 8013994:	2b03      	cmp	r3, #3
 8013996:	f300 80cb 	bgt.w	8013b30 <put_fat+0x1ca>
 801399a:	2b01      	cmp	r3, #1
 801399c:	d002      	beq.n	80139a4 <put_fat+0x3e>
 801399e:	2b02      	cmp	r3, #2
 80139a0:	d06e      	beq.n	8013a80 <put_fat+0x11a>
 80139a2:	e0c5      	b.n	8013b30 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	61bb      	str	r3, [r7, #24]
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	085b      	lsrs	r3, r3, #1
 80139ac:	69ba      	ldr	r2, [r7, #24]
 80139ae:	4413      	add	r3, r2
 80139b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	6a1a      	ldr	r2, [r3, #32]
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	0a5b      	lsrs	r3, r3, #9
 80139ba:	4413      	add	r3, r2
 80139bc:	4619      	mov	r1, r3
 80139be:	68f8      	ldr	r0, [r7, #12]
 80139c0:	f7ff fe6e 	bl	80136a0 <move_window>
 80139c4:	4603      	mov	r3, r0
 80139c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80139c8:	7ffb      	ldrb	r3, [r7, #31]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	f040 80a9 	bne.w	8013b22 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	1c59      	adds	r1, r3, #1
 80139da:	61b9      	str	r1, [r7, #24]
 80139dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139e0:	4413      	add	r3, r2
 80139e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	f003 0301 	and.w	r3, r3, #1
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00d      	beq.n	8013a0a <put_fat+0xa4>
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	b25b      	sxtb	r3, r3
 80139f4:	f003 030f 	and.w	r3, r3, #15
 80139f8:	b25a      	sxtb	r2, r3
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	011b      	lsls	r3, r3, #4
 8013a00:	b25b      	sxtb	r3, r3
 8013a02:	4313      	orrs	r3, r2
 8013a04:	b25b      	sxtb	r3, r3
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	e001      	b.n	8013a0e <put_fat+0xa8>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	697a      	ldr	r2, [r7, #20]
 8013a10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2201      	movs	r2, #1
 8013a16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6a1a      	ldr	r2, [r3, #32]
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	0a5b      	lsrs	r3, r3, #9
 8013a20:	4413      	add	r3, r2
 8013a22:	4619      	mov	r1, r3
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f7ff fe3b 	bl	80136a0 <move_window>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a2e:	7ffb      	ldrb	r3, [r7, #31]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d178      	bne.n	8013b26 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a40:	4413      	add	r3, r2
 8013a42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	f003 0301 	and.w	r3, r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d003      	beq.n	8013a56 <put_fat+0xf0>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	091b      	lsrs	r3, r3, #4
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	e00e      	b.n	8013a74 <put_fat+0x10e>
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	b25b      	sxtb	r3, r3
 8013a5c:	f023 030f 	bic.w	r3, r3, #15
 8013a60:	b25a      	sxtb	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	0a1b      	lsrs	r3, r3, #8
 8013a66:	b25b      	sxtb	r3, r3
 8013a68:	f003 030f 	and.w	r3, r3, #15
 8013a6c:	b25b      	sxtb	r3, r3
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	b25b      	sxtb	r3, r3
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	697a      	ldr	r2, [r7, #20]
 8013a76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2201      	movs	r2, #1
 8013a7c:	70da      	strb	r2, [r3, #3]
			break;
 8013a7e:	e057      	b.n	8013b30 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	6a1a      	ldr	r2, [r3, #32]
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	0a1b      	lsrs	r3, r3, #8
 8013a88:	4413      	add	r3, r2
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f7ff fe07 	bl	80136a0 <move_window>
 8013a92:	4603      	mov	r3, r0
 8013a94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a96:	7ffb      	ldrb	r3, [r7, #31]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d146      	bne.n	8013b2a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013aaa:	4413      	add	r3, r2
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	b292      	uxth	r2, r2
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7ff fb7f 	bl	80131b6 <st_word>
			fs->wflag = 1;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2201      	movs	r2, #1
 8013abc:	70da      	strb	r2, [r3, #3]
			break;
 8013abe:	e037      	b.n	8013b30 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6a1a      	ldr	r2, [r3, #32]
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	09db      	lsrs	r3, r3, #7
 8013ac8:	4413      	add	r3, r2
 8013aca:	4619      	mov	r1, r3
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f7ff fde7 	bl	80136a0 <move_window>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013ad6:	7ffb      	ldrb	r3, [r7, #31]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d128      	bne.n	8013b2e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	009b      	lsls	r3, r3, #2
 8013aec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013af0:	4413      	add	r3, r2
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7ff fb3c 	bl	8013170 <ld_dword>
 8013af8:	4603      	mov	r3, r0
 8013afa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013afe:	4323      	orrs	r3, r4
 8013b00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	009b      	lsls	r3, r3, #2
 8013b0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013b10:	4413      	add	r3, r2
 8013b12:	6879      	ldr	r1, [r7, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ff fb69 	bl	80131ec <st_dword>
			fs->wflag = 1;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	70da      	strb	r2, [r3, #3]
			break;
 8013b20:	e006      	b.n	8013b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013b22:	bf00      	nop
 8013b24:	e004      	b.n	8013b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013b26:	bf00      	nop
 8013b28:	e002      	b.n	8013b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013b2a:	bf00      	nop
 8013b2c:	e000      	b.n	8013b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013b2e:	bf00      	nop
		}
	}
	return res;
 8013b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3724      	adds	r7, #36	; 0x24
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd90      	pop	{r4, r7, pc}

08013b3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b088      	sub	sp, #32
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	60f8      	str	r0, [r7, #12]
 8013b42:	60b9      	str	r1, [r7, #8]
 8013b44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013b46:	2300      	movs	r3, #0
 8013b48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	2b01      	cmp	r3, #1
 8013b54:	d904      	bls.n	8013b60 <remove_chain+0x26>
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	695b      	ldr	r3, [r3, #20]
 8013b5a:	68ba      	ldr	r2, [r7, #8]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d301      	bcc.n	8013b64 <remove_chain+0x2a>
 8013b60:	2302      	movs	r3, #2
 8013b62:	e04b      	b.n	8013bfc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d00c      	beq.n	8013b84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b6e:	6879      	ldr	r1, [r7, #4]
 8013b70:	69b8      	ldr	r0, [r7, #24]
 8013b72:	f7ff fef8 	bl	8013966 <put_fat>
 8013b76:	4603      	mov	r3, r0
 8013b78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013b7a:	7ffb      	ldrb	r3, [r7, #31]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d001      	beq.n	8013b84 <remove_chain+0x4a>
 8013b80:	7ffb      	ldrb	r3, [r7, #31]
 8013b82:	e03b      	b.n	8013bfc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013b84:	68b9      	ldr	r1, [r7, #8]
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f7ff fe45 	bl	8013816 <get_fat>
 8013b8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d031      	beq.n	8013bf8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d101      	bne.n	8013b9e <remove_chain+0x64>
 8013b9a:	2302      	movs	r3, #2
 8013b9c:	e02e      	b.n	8013bfc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba4:	d101      	bne.n	8013baa <remove_chain+0x70>
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e028      	b.n	8013bfc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013baa:	2200      	movs	r2, #0
 8013bac:	68b9      	ldr	r1, [r7, #8]
 8013bae:	69b8      	ldr	r0, [r7, #24]
 8013bb0:	f7ff fed9 	bl	8013966 <put_fat>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013bb8:	7ffb      	ldrb	r3, [r7, #31]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d001      	beq.n	8013bc2 <remove_chain+0x88>
 8013bbe:	7ffb      	ldrb	r3, [r7, #31]
 8013bc0:	e01c      	b.n	8013bfc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	691a      	ldr	r2, [r3, #16]
 8013bc6:	69bb      	ldr	r3, [r7, #24]
 8013bc8:	695b      	ldr	r3, [r3, #20]
 8013bca:	3b02      	subs	r3, #2
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d20b      	bcs.n	8013be8 <remove_chain+0xae>
			fs->free_clst++;
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	691b      	ldr	r3, [r3, #16]
 8013bd4:	1c5a      	adds	r2, r3, #1
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	791b      	ldrb	r3, [r3, #4]
 8013bde:	f043 0301 	orr.w	r3, r3, #1
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	69bb      	ldr	r3, [r7, #24]
 8013be6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	695b      	ldr	r3, [r3, #20]
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d3c6      	bcc.n	8013b84 <remove_chain+0x4a>
 8013bf6:	e000      	b.n	8013bfa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013bf8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013bfa:	2300      	movs	r3, #0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3720      	adds	r7, #32
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b088      	sub	sp, #32
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d10d      	bne.n	8013c36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d004      	beq.n	8013c30 <create_chain+0x2c>
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	695b      	ldr	r3, [r3, #20]
 8013c2a:	69ba      	ldr	r2, [r7, #24]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d31b      	bcc.n	8013c68 <create_chain+0x64>
 8013c30:	2301      	movs	r3, #1
 8013c32:	61bb      	str	r3, [r7, #24]
 8013c34:	e018      	b.n	8013c68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013c36:	6839      	ldr	r1, [r7, #0]
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7ff fdec 	bl	8013816 <get_fat>
 8013c3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d801      	bhi.n	8013c4a <create_chain+0x46>
 8013c46:	2301      	movs	r3, #1
 8013c48:	e070      	b.n	8013d2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c50:	d101      	bne.n	8013c56 <create_chain+0x52>
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	e06a      	b.n	8013d2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	695b      	ldr	r3, [r3, #20]
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d201      	bcs.n	8013c64 <create_chain+0x60>
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	e063      	b.n	8013d2c <create_chain+0x128>
		scl = clst;
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013c68:	69bb      	ldr	r3, [r7, #24]
 8013c6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013c6c:	69fb      	ldr	r3, [r7, #28]
 8013c6e:	3301      	adds	r3, #1
 8013c70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	695b      	ldr	r3, [r3, #20]
 8013c76:	69fa      	ldr	r2, [r7, #28]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d307      	bcc.n	8013c8c <create_chain+0x88>
				ncl = 2;
 8013c7c:	2302      	movs	r3, #2
 8013c7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013c80:	69fa      	ldr	r2, [r7, #28]
 8013c82:	69bb      	ldr	r3, [r7, #24]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d901      	bls.n	8013c8c <create_chain+0x88>
 8013c88:	2300      	movs	r3, #0
 8013c8a:	e04f      	b.n	8013d2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013c8c:	69f9      	ldr	r1, [r7, #28]
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff fdc1 	bl	8013816 <get_fat>
 8013c94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00e      	beq.n	8013cba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d003      	beq.n	8013caa <create_chain+0xa6>
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ca8:	d101      	bne.n	8013cae <create_chain+0xaa>
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	e03e      	b.n	8013d2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013cae:	69fa      	ldr	r2, [r7, #28]
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d1da      	bne.n	8013c6c <create_chain+0x68>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	e038      	b.n	8013d2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013cba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc0:	69f9      	ldr	r1, [r7, #28]
 8013cc2:	6938      	ldr	r0, [r7, #16]
 8013cc4:	f7ff fe4f 	bl	8013966 <put_fat>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013ccc:	7dfb      	ldrb	r3, [r7, #23]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d109      	bne.n	8013ce6 <create_chain+0xe2>
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d006      	beq.n	8013ce6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013cd8:	69fa      	ldr	r2, [r7, #28]
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	6938      	ldr	r0, [r7, #16]
 8013cde:	f7ff fe42 	bl	8013966 <put_fat>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013ce6:	7dfb      	ldrb	r3, [r7, #23]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d116      	bne.n	8013d1a <create_chain+0x116>
		fs->last_clst = ncl;
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	69fa      	ldr	r2, [r7, #28]
 8013cf0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	691a      	ldr	r2, [r3, #16]
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	695b      	ldr	r3, [r3, #20]
 8013cfa:	3b02      	subs	r3, #2
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d804      	bhi.n	8013d0a <create_chain+0x106>
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	1e5a      	subs	r2, r3, #1
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	791b      	ldrb	r3, [r3, #4]
 8013d0e:	f043 0301 	orr.w	r3, r3, #1
 8013d12:	b2da      	uxtb	r2, r3
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	711a      	strb	r2, [r3, #4]
 8013d18:	e007      	b.n	8013d2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013d1a:	7dfb      	ldrb	r3, [r7, #23]
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	d102      	bne.n	8013d26 <create_chain+0x122>
 8013d20:	f04f 33ff 	mov.w	r3, #4294967295
 8013d24:	e000      	b.n	8013d28 <create_chain+0x124>
 8013d26:	2301      	movs	r3, #1
 8013d28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013d2a:	69fb      	ldr	r3, [r7, #28]
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3720      	adds	r7, #32
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b087      	sub	sp, #28
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d48:	3304      	adds	r3, #4
 8013d4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	0a5b      	lsrs	r3, r3, #9
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	8952      	ldrh	r2, [r2, #10]
 8013d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	1d1a      	adds	r2, r3, #4
 8013d5e:	613a      	str	r2, [r7, #16]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d101      	bne.n	8013d6e <clmt_clust+0x3a>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e010      	b.n	8013d90 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013d6e:	697a      	ldr	r2, [r7, #20]
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d307      	bcc.n	8013d86 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013d76:	697a      	ldr	r2, [r7, #20]
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	617b      	str	r3, [r7, #20]
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	3304      	adds	r3, #4
 8013d82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013d84:	e7e9      	b.n	8013d5a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013d86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	4413      	add	r3, r2
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	371c      	adds	r7, #28
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr

08013d9c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b086      	sub	sp, #24
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013db2:	d204      	bcs.n	8013dbe <dir_sdi+0x22>
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	f003 031f 	and.w	r3, r3, #31
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d001      	beq.n	8013dc2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013dbe:	2302      	movs	r3, #2
 8013dc0:	e063      	b.n	8013e8a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d106      	bne.n	8013de2 <dir_sdi+0x46>
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	d902      	bls.n	8013de2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10c      	bne.n	8013e02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	095b      	lsrs	r3, r3, #5
 8013dec:	693a      	ldr	r2, [r7, #16]
 8013dee:	8912      	ldrh	r2, [r2, #8]
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d301      	bcc.n	8013df8 <dir_sdi+0x5c>
 8013df4:	2302      	movs	r3, #2
 8013df6:	e048      	b.n	8013e8a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	61da      	str	r2, [r3, #28]
 8013e00:	e029      	b.n	8013e56 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	895b      	ldrh	r3, [r3, #10]
 8013e06:	025b      	lsls	r3, r3, #9
 8013e08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013e0a:	e019      	b.n	8013e40 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6979      	ldr	r1, [r7, #20]
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7ff fd00 	bl	8013816 <get_fat>
 8013e16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e1e:	d101      	bne.n	8013e24 <dir_sdi+0x88>
 8013e20:	2301      	movs	r3, #1
 8013e22:	e032      	b.n	8013e8a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d904      	bls.n	8013e34 <dir_sdi+0x98>
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	695b      	ldr	r3, [r3, #20]
 8013e2e:	697a      	ldr	r2, [r7, #20]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d301      	bcc.n	8013e38 <dir_sdi+0x9c>
 8013e34:	2302      	movs	r3, #2
 8013e36:	e028      	b.n	8013e8a <dir_sdi+0xee>
			ofs -= csz;
 8013e38:	683a      	ldr	r2, [r7, #0]
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	1ad3      	subs	r3, r2, r3
 8013e3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013e40:	683a      	ldr	r2, [r7, #0]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d2e1      	bcs.n	8013e0c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013e48:	6979      	ldr	r1, [r7, #20]
 8013e4a:	6938      	ldr	r0, [r7, #16]
 8013e4c:	f7ff fcc4 	bl	80137d8 <clust2sect>
 8013e50:	4602      	mov	r2, r0
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	697a      	ldr	r2, [r7, #20]
 8013e5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	69db      	ldr	r3, [r3, #28]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d101      	bne.n	8013e68 <dir_sdi+0xcc>
 8013e64:	2302      	movs	r3, #2
 8013e66:	e010      	b.n	8013e8a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	69da      	ldr	r2, [r3, #28]
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	0a5b      	lsrs	r3, r3, #9
 8013e70:	441a      	add	r2, r3
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e82:	441a      	add	r2, r3
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3718      	adds	r7, #24
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b086      	sub	sp, #24
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	695b      	ldr	r3, [r3, #20]
 8013ea6:	3320      	adds	r3, #32
 8013ea8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	69db      	ldr	r3, [r3, #28]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d003      	beq.n	8013eba <dir_next+0x28>
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013eb8:	d301      	bcc.n	8013ebe <dir_next+0x2c>
 8013eba:	2304      	movs	r3, #4
 8013ebc:	e0aa      	b.n	8014014 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f040 8098 	bne.w	8013ffa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	69db      	ldr	r3, [r3, #28]
 8013ece:	1c5a      	adds	r2, r3, #1
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	699b      	ldr	r3, [r3, #24]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d10b      	bne.n	8013ef4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	095b      	lsrs	r3, r3, #5
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	8912      	ldrh	r2, [r2, #8]
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	f0c0 8088 	bcc.w	8013ffa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2200      	movs	r2, #0
 8013eee:	61da      	str	r2, [r3, #28]
 8013ef0:	2304      	movs	r3, #4
 8013ef2:	e08f      	b.n	8014014 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	0a5b      	lsrs	r3, r3, #9
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	8952      	ldrh	r2, [r2, #10]
 8013efc:	3a01      	subs	r2, #1
 8013efe:	4013      	ands	r3, r2
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d17a      	bne.n	8013ffa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	699b      	ldr	r3, [r3, #24]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	4610      	mov	r0, r2
 8013f0e:	f7ff fc82 	bl	8013816 <get_fat>
 8013f12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d801      	bhi.n	8013f1e <dir_next+0x8c>
 8013f1a:	2302      	movs	r3, #2
 8013f1c:	e07a      	b.n	8014014 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f24:	d101      	bne.n	8013f2a <dir_next+0x98>
 8013f26:	2301      	movs	r3, #1
 8013f28:	e074      	b.n	8014014 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	695b      	ldr	r3, [r3, #20]
 8013f2e:	697a      	ldr	r2, [r7, #20]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d358      	bcc.n	8013fe6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d104      	bne.n	8013f44 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	61da      	str	r2, [r3, #28]
 8013f40:	2304      	movs	r3, #4
 8013f42:	e067      	b.n	8014014 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	699b      	ldr	r3, [r3, #24]
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	4610      	mov	r0, r2
 8013f4e:	f7ff fe59 	bl	8013c04 <create_chain>
 8013f52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d101      	bne.n	8013f5e <dir_next+0xcc>
 8013f5a:	2307      	movs	r3, #7
 8013f5c:	e05a      	b.n	8014014 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d101      	bne.n	8013f68 <dir_next+0xd6>
 8013f64:	2302      	movs	r3, #2
 8013f66:	e055      	b.n	8014014 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f6e:	d101      	bne.n	8013f74 <dir_next+0xe2>
 8013f70:	2301      	movs	r3, #1
 8013f72:	e04f      	b.n	8014014 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f7ff fb4f 	bl	8013618 <sync_window>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d001      	beq.n	8013f84 <dir_next+0xf2>
 8013f80:	2301      	movs	r3, #1
 8013f82:	e047      	b.n	8014014 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	3330      	adds	r3, #48	; 0x30
 8013f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7ff f979 	bl	8013286 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013f94:	2300      	movs	r3, #0
 8013f96:	613b      	str	r3, [r7, #16]
 8013f98:	6979      	ldr	r1, [r7, #20]
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f7ff fc1c 	bl	80137d8 <clust2sect>
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8013fa6:	e012      	b.n	8013fce <dir_next+0x13c>
						fs->wflag = 1;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2201      	movs	r2, #1
 8013fac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f7ff fb32 	bl	8013618 <sync_window>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d001      	beq.n	8013fbe <dir_next+0x12c>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e02a      	b.n	8014014 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	613b      	str	r3, [r7, #16]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc8:	1c5a      	adds	r2, r3, #1
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	895b      	ldrh	r3, [r3, #10]
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d3e6      	bcc.n	8013fa8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	1ad2      	subs	r2, r2, r3
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	697a      	ldr	r2, [r7, #20]
 8013fea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013fec:	6979      	ldr	r1, [r7, #20]
 8013fee:	68f8      	ldr	r0, [r7, #12]
 8013ff0:	f7ff fbf2 	bl	80137d8 <clust2sect>
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68ba      	ldr	r2, [r7, #8]
 8013ffe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801400c:	441a      	add	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014012:	2300      	movs	r3, #0
}
 8014014:	4618      	mov	r0, r3
 8014016:	3718      	adds	r7, #24
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801402c:	2100      	movs	r1, #0
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7ff feb4 	bl	8013d9c <dir_sdi>
 8014034:	4603      	mov	r3, r0
 8014036:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014038:	7dfb      	ldrb	r3, [r7, #23]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d12b      	bne.n	8014096 <dir_alloc+0x7a>
		n = 0;
 801403e:	2300      	movs	r3, #0
 8014040:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	69db      	ldr	r3, [r3, #28]
 8014046:	4619      	mov	r1, r3
 8014048:	68f8      	ldr	r0, [r7, #12]
 801404a:	f7ff fb29 	bl	80136a0 <move_window>
 801404e:	4603      	mov	r3, r0
 8014050:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014052:	7dfb      	ldrb	r3, [r7, #23]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d11d      	bne.n	8014094 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6a1b      	ldr	r3, [r3, #32]
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	2be5      	cmp	r3, #229	; 0xe5
 8014060:	d004      	beq.n	801406c <dir_alloc+0x50>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6a1b      	ldr	r3, [r3, #32]
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d107      	bne.n	801407c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	3301      	adds	r3, #1
 8014070:	613b      	str	r3, [r7, #16]
 8014072:	693a      	ldr	r2, [r7, #16]
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	429a      	cmp	r2, r3
 8014078:	d102      	bne.n	8014080 <dir_alloc+0x64>
 801407a:	e00c      	b.n	8014096 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801407c:	2300      	movs	r3, #0
 801407e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014080:	2101      	movs	r1, #1
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f7ff ff05 	bl	8013e92 <dir_next>
 8014088:	4603      	mov	r3, r0
 801408a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801408c:	7dfb      	ldrb	r3, [r7, #23]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d0d7      	beq.n	8014042 <dir_alloc+0x26>
 8014092:	e000      	b.n	8014096 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014094:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014096:	7dfb      	ldrb	r3, [r7, #23]
 8014098:	2b04      	cmp	r3, #4
 801409a:	d101      	bne.n	80140a0 <dir_alloc+0x84>
 801409c:	2307      	movs	r3, #7
 801409e:	75fb      	strb	r3, [r7, #23]
	return res;
 80140a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3718      	adds	r7, #24
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}

080140aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80140aa:	b580      	push	{r7, lr}
 80140ac:	b084      	sub	sp, #16
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	6078      	str	r0, [r7, #4]
 80140b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	331a      	adds	r3, #26
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7ff f841 	bl	8013140 <ld_word>
 80140be:	4603      	mov	r3, r0
 80140c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	2b03      	cmp	r3, #3
 80140c8:	d109      	bne.n	80140de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	3314      	adds	r3, #20
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7ff f836 	bl	8013140 <ld_word>
 80140d4:	4603      	mov	r3, r0
 80140d6:	041b      	lsls	r3, r3, #16
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	4313      	orrs	r3, r2
 80140dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80140de:	68fb      	ldr	r3, [r7, #12]
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3710      	adds	r7, #16
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	331a      	adds	r3, #26
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	b292      	uxth	r2, r2
 80140fc:	4611      	mov	r1, r2
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ff f859 	bl	80131b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b03      	cmp	r3, #3
 801410a:	d109      	bne.n	8014120 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	f103 0214 	add.w	r2, r3, #20
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	0c1b      	lsrs	r3, r3, #16
 8014116:	b29b      	uxth	r3, r3
 8014118:	4619      	mov	r1, r3
 801411a:	4610      	mov	r0, r2
 801411c:	f7ff f84b 	bl	80131b6 <st_word>
	}
}
 8014120:	bf00      	nop
 8014122:	3710      	adds	r7, #16
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014132:	2304      	movs	r3, #4
 8014134:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801413c:	e03c      	b.n	80141b8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	69db      	ldr	r3, [r3, #28]
 8014142:	4619      	mov	r1, r3
 8014144:	6938      	ldr	r0, [r7, #16]
 8014146:	f7ff faab 	bl	80136a0 <move_window>
 801414a:	4603      	mov	r3, r0
 801414c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801414e:	7dfb      	ldrb	r3, [r7, #23]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d136      	bne.n	80141c2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6a1b      	ldr	r3, [r3, #32]
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801415c:	7bfb      	ldrb	r3, [r7, #15]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d102      	bne.n	8014168 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014162:	2304      	movs	r3, #4
 8014164:	75fb      	strb	r3, [r7, #23]
 8014166:	e031      	b.n	80141cc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a1b      	ldr	r3, [r3, #32]
 801416c:	330b      	adds	r3, #11
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014174:	73bb      	strb	r3, [r7, #14]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	7bba      	ldrb	r2, [r7, #14]
 801417a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801417c:	7bfb      	ldrb	r3, [r7, #15]
 801417e:	2be5      	cmp	r3, #229	; 0xe5
 8014180:	d011      	beq.n	80141a6 <dir_read+0x7e>
 8014182:	7bfb      	ldrb	r3, [r7, #15]
 8014184:	2b2e      	cmp	r3, #46	; 0x2e
 8014186:	d00e      	beq.n	80141a6 <dir_read+0x7e>
 8014188:	7bbb      	ldrb	r3, [r7, #14]
 801418a:	2b0f      	cmp	r3, #15
 801418c:	d00b      	beq.n	80141a6 <dir_read+0x7e>
 801418e:	7bbb      	ldrb	r3, [r7, #14]
 8014190:	f023 0320 	bic.w	r3, r3, #32
 8014194:	2b08      	cmp	r3, #8
 8014196:	bf0c      	ite	eq
 8014198:	2301      	moveq	r3, #1
 801419a:	2300      	movne	r3, #0
 801419c:	b2db      	uxtb	r3, r3
 801419e:	461a      	mov	r2, r3
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	4293      	cmp	r3, r2
 80141a4:	d00f      	beq.n	80141c6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80141a6:	2100      	movs	r1, #0
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7ff fe72 	bl	8013e92 <dir_next>
 80141ae:	4603      	mov	r3, r0
 80141b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80141b2:	7dfb      	ldrb	r3, [r7, #23]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d108      	bne.n	80141ca <dir_read+0xa2>
	while (dp->sect) {
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	69db      	ldr	r3, [r3, #28]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d1be      	bne.n	801413e <dir_read+0x16>
 80141c0:	e004      	b.n	80141cc <dir_read+0xa4>
		if (res != FR_OK) break;
 80141c2:	bf00      	nop
 80141c4:	e002      	b.n	80141cc <dir_read+0xa4>
				break;
 80141c6:	bf00      	nop
 80141c8:	e000      	b.n	80141cc <dir_read+0xa4>
		if (res != FR_OK) break;
 80141ca:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80141cc:	7dfb      	ldrb	r3, [r7, #23]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d002      	beq.n	80141d8 <dir_read+0xb0>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2200      	movs	r2, #0
 80141d6:	61da      	str	r2, [r3, #28]
	return res;
 80141d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80141e2:	b580      	push	{r7, lr}
 80141e4:	b086      	sub	sp, #24
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80141f0:	2100      	movs	r1, #0
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7ff fdd2 	bl	8013d9c <dir_sdi>
 80141f8:	4603      	mov	r3, r0
 80141fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80141fc:	7dfb      	ldrb	r3, [r7, #23]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d001      	beq.n	8014206 <dir_find+0x24>
 8014202:	7dfb      	ldrb	r3, [r7, #23]
 8014204:	e03e      	b.n	8014284 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	69db      	ldr	r3, [r3, #28]
 801420a:	4619      	mov	r1, r3
 801420c:	6938      	ldr	r0, [r7, #16]
 801420e:	f7ff fa47 	bl	80136a0 <move_window>
 8014212:	4603      	mov	r3, r0
 8014214:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014216:	7dfb      	ldrb	r3, [r7, #23]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d12f      	bne.n	801427c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6a1b      	ldr	r3, [r3, #32]
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014224:	7bfb      	ldrb	r3, [r7, #15]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d102      	bne.n	8014230 <dir_find+0x4e>
 801422a:	2304      	movs	r3, #4
 801422c:	75fb      	strb	r3, [r7, #23]
 801422e:	e028      	b.n	8014282 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6a1b      	ldr	r3, [r3, #32]
 8014234:	330b      	adds	r3, #11
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801423c:	b2da      	uxtb	r2, r3
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6a1b      	ldr	r3, [r3, #32]
 8014246:	330b      	adds	r3, #11
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	f003 0308 	and.w	r3, r3, #8
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10a      	bne.n	8014268 <dir_find+0x86>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a18      	ldr	r0, [r3, #32]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	3324      	adds	r3, #36	; 0x24
 801425a:	220b      	movs	r2, #11
 801425c:	4619      	mov	r1, r3
 801425e:	f7ff f82d 	bl	80132bc <mem_cmp>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00b      	beq.n	8014280 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014268:	2100      	movs	r1, #0
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f7ff fe11 	bl	8013e92 <dir_next>
 8014270:	4603      	mov	r3, r0
 8014272:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014274:	7dfb      	ldrb	r3, [r7, #23]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d0c5      	beq.n	8014206 <dir_find+0x24>
 801427a:	e002      	b.n	8014282 <dir_find+0xa0>
		if (res != FR_OK) break;
 801427c:	bf00      	nop
 801427e:	e000      	b.n	8014282 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014280:	bf00      	nop

	return res;
 8014282:	7dfb      	ldrb	r3, [r7, #23]
}
 8014284:	4618      	mov	r0, r3
 8014286:	3718      	adds	r7, #24
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b084      	sub	sp, #16
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801429a:	2101      	movs	r1, #1
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f7ff febd 	bl	801401c <dir_alloc>
 80142a2:	4603      	mov	r3, r0
 80142a4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80142a6:	7bfb      	ldrb	r3, [r7, #15]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d11c      	bne.n	80142e6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	69db      	ldr	r3, [r3, #28]
 80142b0:	4619      	mov	r1, r3
 80142b2:	68b8      	ldr	r0, [r7, #8]
 80142b4:	f7ff f9f4 	bl	80136a0 <move_window>
 80142b8:	4603      	mov	r3, r0
 80142ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80142bc:	7bfb      	ldrb	r3, [r7, #15]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d111      	bne.n	80142e6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6a1b      	ldr	r3, [r3, #32]
 80142c6:	2220      	movs	r2, #32
 80142c8:	2100      	movs	r1, #0
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7fe ffdb 	bl	8013286 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6a18      	ldr	r0, [r3, #32]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	3324      	adds	r3, #36	; 0x24
 80142d8:	220b      	movs	r2, #11
 80142da:	4619      	mov	r1, r3
 80142dc:	f7fe ffb2 	bl	8013244 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	2201      	movs	r2, #1
 80142e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80142e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3710      	adds	r7, #16
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	2200      	movs	r2, #0
 80142fe:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	69db      	ldr	r3, [r3, #28]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d04e      	beq.n	80143a6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8014308:	2300      	movs	r3, #0
 801430a:	613b      	str	r3, [r7, #16]
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8014310:	e021      	b.n	8014356 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6a1a      	ldr	r2, [r3, #32]
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	1c59      	adds	r1, r3, #1
 801431a:	6179      	str	r1, [r7, #20]
 801431c:	4413      	add	r3, r2
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014322:	7bfb      	ldrb	r3, [r7, #15]
 8014324:	2b20      	cmp	r3, #32
 8014326:	d100      	bne.n	801432a <get_fileinfo+0x3a>
 8014328:	e015      	b.n	8014356 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801432a:	7bfb      	ldrb	r3, [r7, #15]
 801432c:	2b05      	cmp	r3, #5
 801432e:	d101      	bne.n	8014334 <get_fileinfo+0x44>
 8014330:	23e5      	movs	r3, #229	; 0xe5
 8014332:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	2b09      	cmp	r3, #9
 8014338:	d106      	bne.n	8014348 <get_fileinfo+0x58>
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	1c5a      	adds	r2, r3, #1
 801433e:	613a      	str	r2, [r7, #16]
 8014340:	683a      	ldr	r2, [r7, #0]
 8014342:	4413      	add	r3, r2
 8014344:	222e      	movs	r2, #46	; 0x2e
 8014346:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	1c5a      	adds	r2, r3, #1
 801434c:	613a      	str	r2, [r7, #16]
 801434e:	683a      	ldr	r2, [r7, #0]
 8014350:	4413      	add	r3, r2
 8014352:	7bfa      	ldrb	r2, [r7, #15]
 8014354:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	2b0a      	cmp	r3, #10
 801435a:	d9da      	bls.n	8014312 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801435c:	683a      	ldr	r2, [r7, #0]
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	4413      	add	r3, r2
 8014362:	3309      	adds	r3, #9
 8014364:	2200      	movs	r2, #0
 8014366:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6a1b      	ldr	r3, [r3, #32]
 801436c:	7ada      	ldrb	r2, [r3, #11]
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6a1b      	ldr	r3, [r3, #32]
 8014376:	331c      	adds	r3, #28
 8014378:	4618      	mov	r0, r3
 801437a:	f7fe fef9 	bl	8013170 <ld_dword>
 801437e:	4602      	mov	r2, r0
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6a1b      	ldr	r3, [r3, #32]
 8014388:	3316      	adds	r3, #22
 801438a:	4618      	mov	r0, r3
 801438c:	f7fe fef0 	bl	8013170 <ld_dword>
 8014390:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	b29a      	uxth	r2, r3
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	80da      	strh	r2, [r3, #6]
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	0c1b      	lsrs	r3, r3, #16
 801439e:	b29a      	uxth	r2, r3
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	809a      	strh	r2, [r3, #4]
 80143a4:	e000      	b.n	80143a8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80143a6:	bf00      	nop
}
 80143a8:	3718      	adds	r7, #24
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
	...

080143b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b088      	sub	sp, #32
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	60fb      	str	r3, [r7, #12]
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	3324      	adds	r3, #36	; 0x24
 80143c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80143c6:	220b      	movs	r2, #11
 80143c8:	2120      	movs	r1, #32
 80143ca:	68b8      	ldr	r0, [r7, #8]
 80143cc:	f7fe ff5b 	bl	8013286 <mem_set>
	si = i = 0; ni = 8;
 80143d0:	2300      	movs	r3, #0
 80143d2:	613b      	str	r3, [r7, #16]
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	61fb      	str	r3, [r7, #28]
 80143d8:	2308      	movs	r3, #8
 80143da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	1c5a      	adds	r2, r3, #1
 80143e0:	61fa      	str	r2, [r7, #28]
 80143e2:	68fa      	ldr	r2, [r7, #12]
 80143e4:	4413      	add	r3, r2
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80143ea:	7efb      	ldrb	r3, [r7, #27]
 80143ec:	2b20      	cmp	r3, #32
 80143ee:	d94e      	bls.n	801448e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80143f0:	7efb      	ldrb	r3, [r7, #27]
 80143f2:	2b2f      	cmp	r3, #47	; 0x2f
 80143f4:	d006      	beq.n	8014404 <create_name+0x54>
 80143f6:	7efb      	ldrb	r3, [r7, #27]
 80143f8:	2b5c      	cmp	r3, #92	; 0x5c
 80143fa:	d110      	bne.n	801441e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80143fc:	e002      	b.n	8014404 <create_name+0x54>
 80143fe:	69fb      	ldr	r3, [r7, #28]
 8014400:	3301      	adds	r3, #1
 8014402:	61fb      	str	r3, [r7, #28]
 8014404:	68fa      	ldr	r2, [r7, #12]
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	4413      	add	r3, r2
 801440a:	781b      	ldrb	r3, [r3, #0]
 801440c:	2b2f      	cmp	r3, #47	; 0x2f
 801440e:	d0f6      	beq.n	80143fe <create_name+0x4e>
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	4413      	add	r3, r2
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	2b5c      	cmp	r3, #92	; 0x5c
 801441a:	d0f0      	beq.n	80143fe <create_name+0x4e>
			break;
 801441c:	e038      	b.n	8014490 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801441e:	7efb      	ldrb	r3, [r7, #27]
 8014420:	2b2e      	cmp	r3, #46	; 0x2e
 8014422:	d003      	beq.n	801442c <create_name+0x7c>
 8014424:	693a      	ldr	r2, [r7, #16]
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	429a      	cmp	r2, r3
 801442a:	d30c      	bcc.n	8014446 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	2b0b      	cmp	r3, #11
 8014430:	d002      	beq.n	8014438 <create_name+0x88>
 8014432:	7efb      	ldrb	r3, [r7, #27]
 8014434:	2b2e      	cmp	r3, #46	; 0x2e
 8014436:	d001      	beq.n	801443c <create_name+0x8c>
 8014438:	2306      	movs	r3, #6
 801443a:	e044      	b.n	80144c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801443c:	2308      	movs	r3, #8
 801443e:	613b      	str	r3, [r7, #16]
 8014440:	230b      	movs	r3, #11
 8014442:	617b      	str	r3, [r7, #20]
			continue;
 8014444:	e022      	b.n	801448c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014446:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801444a:	2b00      	cmp	r3, #0
 801444c:	da04      	bge.n	8014458 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801444e:	7efb      	ldrb	r3, [r7, #27]
 8014450:	3b80      	subs	r3, #128	; 0x80
 8014452:	4a1f      	ldr	r2, [pc, #124]	; (80144d0 <create_name+0x120>)
 8014454:	5cd3      	ldrb	r3, [r2, r3]
 8014456:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014458:	7efb      	ldrb	r3, [r7, #27]
 801445a:	4619      	mov	r1, r3
 801445c:	481d      	ldr	r0, [pc, #116]	; (80144d4 <create_name+0x124>)
 801445e:	f7fe ff54 	bl	801330a <chk_chr>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d001      	beq.n	801446c <create_name+0xbc>
 8014468:	2306      	movs	r3, #6
 801446a:	e02c      	b.n	80144c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801446c:	7efb      	ldrb	r3, [r7, #27]
 801446e:	2b60      	cmp	r3, #96	; 0x60
 8014470:	d905      	bls.n	801447e <create_name+0xce>
 8014472:	7efb      	ldrb	r3, [r7, #27]
 8014474:	2b7a      	cmp	r3, #122	; 0x7a
 8014476:	d802      	bhi.n	801447e <create_name+0xce>
 8014478:	7efb      	ldrb	r3, [r7, #27]
 801447a:	3b20      	subs	r3, #32
 801447c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	1c5a      	adds	r2, r3, #1
 8014482:	613a      	str	r2, [r7, #16]
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	4413      	add	r3, r2
 8014488:	7efa      	ldrb	r2, [r7, #27]
 801448a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801448c:	e7a6      	b.n	80143dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801448e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014490:	68fa      	ldr	r2, [r7, #12]
 8014492:	69fb      	ldr	r3, [r7, #28]
 8014494:	441a      	add	r2, r3
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d101      	bne.n	80144a4 <create_name+0xf4>
 80144a0:	2306      	movs	r3, #6
 80144a2:	e010      	b.n	80144c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	2be5      	cmp	r3, #229	; 0xe5
 80144aa:	d102      	bne.n	80144b2 <create_name+0x102>
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	2205      	movs	r2, #5
 80144b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80144b2:	7efb      	ldrb	r3, [r7, #27]
 80144b4:	2b20      	cmp	r3, #32
 80144b6:	d801      	bhi.n	80144bc <create_name+0x10c>
 80144b8:	2204      	movs	r2, #4
 80144ba:	e000      	b.n	80144be <create_name+0x10e>
 80144bc:	2200      	movs	r2, #0
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	330b      	adds	r3, #11
 80144c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80144c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3720      	adds	r7, #32
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
 80144ce:	bf00      	nop
 80144d0:	0801c810 	.word	0x0801c810
 80144d4:	0801c71c 	.word	0x0801c71c

080144d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b086      	sub	sp, #24
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80144ec:	e002      	b.n	80144f4 <follow_path+0x1c>
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	3301      	adds	r3, #1
 80144f2:	603b      	str	r3, [r7, #0]
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	2b2f      	cmp	r3, #47	; 0x2f
 80144fa:	d0f8      	beq.n	80144ee <follow_path+0x16>
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	2b5c      	cmp	r3, #92	; 0x5c
 8014502:	d0f4      	beq.n	80144ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	2200      	movs	r2, #0
 8014508:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	2b1f      	cmp	r3, #31
 8014510:	d80a      	bhi.n	8014528 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2280      	movs	r2, #128	; 0x80
 8014516:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801451a:	2100      	movs	r1, #0
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7ff fc3d 	bl	8013d9c <dir_sdi>
 8014522:	4603      	mov	r3, r0
 8014524:	75fb      	strb	r3, [r7, #23]
 8014526:	e043      	b.n	80145b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014528:	463b      	mov	r3, r7
 801452a:	4619      	mov	r1, r3
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f7ff ff3f 	bl	80143b0 <create_name>
 8014532:	4603      	mov	r3, r0
 8014534:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014536:	7dfb      	ldrb	r3, [r7, #23]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d134      	bne.n	80145a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7ff fe50 	bl	80141e2 <dir_find>
 8014542:	4603      	mov	r3, r0
 8014544:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801454c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801454e:	7dfb      	ldrb	r3, [r7, #23]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d00a      	beq.n	801456a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014554:	7dfb      	ldrb	r3, [r7, #23]
 8014556:	2b04      	cmp	r3, #4
 8014558:	d127      	bne.n	80145aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801455a:	7afb      	ldrb	r3, [r7, #11]
 801455c:	f003 0304 	and.w	r3, r3, #4
 8014560:	2b00      	cmp	r3, #0
 8014562:	d122      	bne.n	80145aa <follow_path+0xd2>
 8014564:	2305      	movs	r3, #5
 8014566:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014568:	e01f      	b.n	80145aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801456a:	7afb      	ldrb	r3, [r7, #11]
 801456c:	f003 0304 	and.w	r3, r3, #4
 8014570:	2b00      	cmp	r3, #0
 8014572:	d11c      	bne.n	80145ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	799b      	ldrb	r3, [r3, #6]
 8014578:	f003 0310 	and.w	r3, r3, #16
 801457c:	2b00      	cmp	r3, #0
 801457e:	d102      	bne.n	8014586 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014580:	2305      	movs	r3, #5
 8014582:	75fb      	strb	r3, [r7, #23]
 8014584:	e014      	b.n	80145b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	695b      	ldr	r3, [r3, #20]
 8014590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014594:	4413      	add	r3, r2
 8014596:	4619      	mov	r1, r3
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f7ff fd86 	bl	80140aa <ld_clust>
 801459e:	4602      	mov	r2, r0
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80145a4:	e7c0      	b.n	8014528 <follow_path+0x50>
			if (res != FR_OK) break;
 80145a6:	bf00      	nop
 80145a8:	e002      	b.n	80145b0 <follow_path+0xd8>
				break;
 80145aa:	bf00      	nop
 80145ac:	e000      	b.n	80145b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80145ae:	bf00      	nop
			}
		}
	}

	return res;
 80145b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3718      	adds	r7, #24
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}

080145ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80145ba:	b480      	push	{r7}
 80145bc:	b087      	sub	sp, #28
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80145c2:	f04f 33ff 	mov.w	r3, #4294967295
 80145c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d031      	beq.n	8014634 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	617b      	str	r3, [r7, #20]
 80145d6:	e002      	b.n	80145de <get_ldnumber+0x24>
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	3301      	adds	r3, #1
 80145dc:	617b      	str	r3, [r7, #20]
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b20      	cmp	r3, #32
 80145e4:	d903      	bls.n	80145ee <get_ldnumber+0x34>
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	2b3a      	cmp	r3, #58	; 0x3a
 80145ec:	d1f4      	bne.n	80145d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	2b3a      	cmp	r3, #58	; 0x3a
 80145f4:	d11c      	bne.n	8014630 <get_ldnumber+0x76>
			tp = *path;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	1c5a      	adds	r2, r3, #1
 8014600:	60fa      	str	r2, [r7, #12]
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	3b30      	subs	r3, #48	; 0x30
 8014606:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	2b09      	cmp	r3, #9
 801460c:	d80e      	bhi.n	801462c <get_ldnumber+0x72>
 801460e:	68fa      	ldr	r2, [r7, #12]
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	429a      	cmp	r2, r3
 8014614:	d10a      	bne.n	801462c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d107      	bne.n	801462c <get_ldnumber+0x72>
					vol = (int)i;
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	3301      	adds	r3, #1
 8014624:	617b      	str	r3, [r7, #20]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	697a      	ldr	r2, [r7, #20]
 801462a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	e002      	b.n	8014636 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014630:	2300      	movs	r3, #0
 8014632:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014634:	693b      	ldr	r3, [r7, #16]
}
 8014636:	4618      	mov	r0, r3
 8014638:	371c      	adds	r7, #28
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr
	...

08014644 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2200      	movs	r2, #0
 8014652:	70da      	strb	r2, [r3, #3]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f04f 32ff 	mov.w	r2, #4294967295
 801465a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801465c:	6839      	ldr	r1, [r7, #0]
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f7ff f81e 	bl	80136a0 <move_window>
 8014664:	4603      	mov	r3, r0
 8014666:	2b00      	cmp	r3, #0
 8014668:	d001      	beq.n	801466e <check_fs+0x2a>
 801466a:	2304      	movs	r3, #4
 801466c:	e038      	b.n	80146e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	3330      	adds	r3, #48	; 0x30
 8014672:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014676:	4618      	mov	r0, r3
 8014678:	f7fe fd62 	bl	8013140 <ld_word>
 801467c:	4603      	mov	r3, r0
 801467e:	461a      	mov	r2, r3
 8014680:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014684:	429a      	cmp	r2, r3
 8014686:	d001      	beq.n	801468c <check_fs+0x48>
 8014688:	2303      	movs	r3, #3
 801468a:	e029      	b.n	80146e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014692:	2be9      	cmp	r3, #233	; 0xe9
 8014694:	d009      	beq.n	80146aa <check_fs+0x66>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801469c:	2beb      	cmp	r3, #235	; 0xeb
 801469e:	d11e      	bne.n	80146de <check_fs+0x9a>
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80146a6:	2b90      	cmp	r3, #144	; 0x90
 80146a8:	d119      	bne.n	80146de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	3330      	adds	r3, #48	; 0x30
 80146ae:	3336      	adds	r3, #54	; 0x36
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fe fd5d 	bl	8013170 <ld_dword>
 80146b6:	4603      	mov	r3, r0
 80146b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80146bc:	4a0a      	ldr	r2, [pc, #40]	; (80146e8 <check_fs+0xa4>)
 80146be:	4293      	cmp	r3, r2
 80146c0:	d101      	bne.n	80146c6 <check_fs+0x82>
 80146c2:	2300      	movs	r3, #0
 80146c4:	e00c      	b.n	80146e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	3330      	adds	r3, #48	; 0x30
 80146ca:	3352      	adds	r3, #82	; 0x52
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7fe fd4f 	bl	8013170 <ld_dword>
 80146d2:	4603      	mov	r3, r0
 80146d4:	4a05      	ldr	r2, [pc, #20]	; (80146ec <check_fs+0xa8>)
 80146d6:	4293      	cmp	r3, r2
 80146d8:	d101      	bne.n	80146de <check_fs+0x9a>
 80146da:	2300      	movs	r3, #0
 80146dc:	e000      	b.n	80146e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80146de:	2302      	movs	r3, #2
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	00544146 	.word	0x00544146
 80146ec:	33544146 	.word	0x33544146

080146f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b096      	sub	sp, #88	; 0x58
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	4613      	mov	r3, r2
 80146fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	2200      	movs	r2, #0
 8014702:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f7ff ff58 	bl	80145ba <get_ldnumber>
 801470a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801470e:	2b00      	cmp	r3, #0
 8014710:	da01      	bge.n	8014716 <find_volume+0x26>
 8014712:	230b      	movs	r3, #11
 8014714:	e22d      	b.n	8014b72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014716:	4aa1      	ldr	r2, [pc, #644]	; (801499c <find_volume+0x2ac>)
 8014718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801471e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014722:	2b00      	cmp	r3, #0
 8014724:	d101      	bne.n	801472a <find_volume+0x3a>
 8014726:	230c      	movs	r3, #12
 8014728:	e223      	b.n	8014b72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801472e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014730:	79fb      	ldrb	r3, [r7, #7]
 8014732:	f023 0301 	bic.w	r3, r3, #1
 8014736:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d01a      	beq.n	8014776 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014742:	785b      	ldrb	r3, [r3, #1]
 8014744:	4618      	mov	r0, r3
 8014746:	f7fe fc5d 	bl	8013004 <disk_status>
 801474a:	4603      	mov	r3, r0
 801474c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014754:	f003 0301 	and.w	r3, r3, #1
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10c      	bne.n	8014776 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801475c:	79fb      	ldrb	r3, [r7, #7]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d007      	beq.n	8014772 <find_volume+0x82>
 8014762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014766:	f003 0304 	and.w	r3, r3, #4
 801476a:	2b00      	cmp	r3, #0
 801476c:	d001      	beq.n	8014772 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801476e:	230a      	movs	r3, #10
 8014770:	e1ff      	b.n	8014b72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8014772:	2300      	movs	r3, #0
 8014774:	e1fd      	b.n	8014b72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014778:	2200      	movs	r2, #0
 801477a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801477c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801477e:	b2da      	uxtb	r2, r3
 8014780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014782:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	785b      	ldrb	r3, [r3, #1]
 8014788:	4618      	mov	r0, r3
 801478a:	f7fe fc55 	bl	8013038 <disk_initialize>
 801478e:	4603      	mov	r3, r0
 8014790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014798:	f003 0301 	and.w	r3, r3, #1
 801479c:	2b00      	cmp	r3, #0
 801479e:	d001      	beq.n	80147a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80147a0:	2303      	movs	r3, #3
 80147a2:	e1e6      	b.n	8014b72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80147a4:	79fb      	ldrb	r3, [r7, #7]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d007      	beq.n	80147ba <find_volume+0xca>
 80147aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147ae:	f003 0304 	and.w	r3, r3, #4
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d001      	beq.n	80147ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80147b6:	230a      	movs	r3, #10
 80147b8:	e1db      	b.n	8014b72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80147be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147c2:	f7ff ff3f 	bl	8014644 <check_fs>
 80147c6:	4603      	mov	r3, r0
 80147c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80147cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147d0:	2b02      	cmp	r3, #2
 80147d2:	d149      	bne.n	8014868 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80147d4:	2300      	movs	r3, #0
 80147d6:	643b      	str	r3, [r7, #64]	; 0x40
 80147d8:	e01e      	b.n	8014818 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80147da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80147e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147e2:	011b      	lsls	r3, r3, #4
 80147e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80147e8:	4413      	add	r3, r2
 80147ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80147ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ee:	3304      	adds	r3, #4
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d006      	beq.n	8014804 <find_volume+0x114>
 80147f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f8:	3308      	adds	r3, #8
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fe fcb8 	bl	8013170 <ld_dword>
 8014800:	4602      	mov	r2, r0
 8014802:	e000      	b.n	8014806 <find_volume+0x116>
 8014804:	2200      	movs	r2, #0
 8014806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	3358      	adds	r3, #88	; 0x58
 801480c:	443b      	add	r3, r7
 801480e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014814:	3301      	adds	r3, #1
 8014816:	643b      	str	r3, [r7, #64]	; 0x40
 8014818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801481a:	2b03      	cmp	r3, #3
 801481c:	d9dd      	bls.n	80147da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801481e:	2300      	movs	r3, #0
 8014820:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014824:	2b00      	cmp	r3, #0
 8014826:	d002      	beq.n	801482e <find_volume+0x13e>
 8014828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801482a:	3b01      	subs	r3, #1
 801482c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801482e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014830:	009b      	lsls	r3, r3, #2
 8014832:	3358      	adds	r3, #88	; 0x58
 8014834:	443b      	add	r3, r7
 8014836:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801483a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801483c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801483e:	2b00      	cmp	r3, #0
 8014840:	d005      	beq.n	801484e <find_volume+0x15e>
 8014842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014846:	f7ff fefd 	bl	8014644 <check_fs>
 801484a:	4603      	mov	r3, r0
 801484c:	e000      	b.n	8014850 <find_volume+0x160>
 801484e:	2303      	movs	r3, #3
 8014850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014858:	2b01      	cmp	r3, #1
 801485a:	d905      	bls.n	8014868 <find_volume+0x178>
 801485c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801485e:	3301      	adds	r3, #1
 8014860:	643b      	str	r3, [r7, #64]	; 0x40
 8014862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014864:	2b03      	cmp	r3, #3
 8014866:	d9e2      	bls.n	801482e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801486c:	2b04      	cmp	r3, #4
 801486e:	d101      	bne.n	8014874 <find_volume+0x184>
 8014870:	2301      	movs	r3, #1
 8014872:	e17e      	b.n	8014b72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014878:	2b01      	cmp	r3, #1
 801487a:	d901      	bls.n	8014880 <find_volume+0x190>
 801487c:	230d      	movs	r3, #13
 801487e:	e178      	b.n	8014b72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014882:	3330      	adds	r3, #48	; 0x30
 8014884:	330b      	adds	r3, #11
 8014886:	4618      	mov	r0, r3
 8014888:	f7fe fc5a 	bl	8013140 <ld_word>
 801488c:	4603      	mov	r3, r0
 801488e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014892:	d001      	beq.n	8014898 <find_volume+0x1a8>
 8014894:	230d      	movs	r3, #13
 8014896:	e16c      	b.n	8014b72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489a:	3330      	adds	r3, #48	; 0x30
 801489c:	3316      	adds	r3, #22
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fe fc4e 	bl	8013140 <ld_word>
 80148a4:	4603      	mov	r3, r0
 80148a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80148a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d106      	bne.n	80148bc <find_volume+0x1cc>
 80148ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b0:	3330      	adds	r3, #48	; 0x30
 80148b2:	3324      	adds	r3, #36	; 0x24
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fe fc5b 	bl	8013170 <ld_dword>
 80148ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80148bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80148c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80148c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80148cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ce:	789b      	ldrb	r3, [r3, #2]
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d005      	beq.n	80148e0 <find_volume+0x1f0>
 80148d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d6:	789b      	ldrb	r3, [r3, #2]
 80148d8:	2b02      	cmp	r3, #2
 80148da:	d001      	beq.n	80148e0 <find_volume+0x1f0>
 80148dc:	230d      	movs	r3, #13
 80148de:	e148      	b.n	8014b72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80148e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e2:	789b      	ldrb	r3, [r3, #2]
 80148e4:	461a      	mov	r2, r3
 80148e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148e8:	fb02 f303 	mul.w	r3, r2, r3
 80148ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80148ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80148fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fc:	895b      	ldrh	r3, [r3, #10]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d008      	beq.n	8014914 <find_volume+0x224>
 8014902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014904:	895b      	ldrh	r3, [r3, #10]
 8014906:	461a      	mov	r2, r3
 8014908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490a:	895b      	ldrh	r3, [r3, #10]
 801490c:	3b01      	subs	r3, #1
 801490e:	4013      	ands	r3, r2
 8014910:	2b00      	cmp	r3, #0
 8014912:	d001      	beq.n	8014918 <find_volume+0x228>
 8014914:	230d      	movs	r3, #13
 8014916:	e12c      	b.n	8014b72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491a:	3330      	adds	r3, #48	; 0x30
 801491c:	3311      	adds	r3, #17
 801491e:	4618      	mov	r0, r3
 8014920:	f7fe fc0e 	bl	8013140 <ld_word>
 8014924:	4603      	mov	r3, r0
 8014926:	461a      	mov	r2, r3
 8014928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492e:	891b      	ldrh	r3, [r3, #8]
 8014930:	f003 030f 	and.w	r3, r3, #15
 8014934:	b29b      	uxth	r3, r3
 8014936:	2b00      	cmp	r3, #0
 8014938:	d001      	beq.n	801493e <find_volume+0x24e>
 801493a:	230d      	movs	r3, #13
 801493c:	e119      	b.n	8014b72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014940:	3330      	adds	r3, #48	; 0x30
 8014942:	3313      	adds	r3, #19
 8014944:	4618      	mov	r0, r3
 8014946:	f7fe fbfb 	bl	8013140 <ld_word>
 801494a:	4603      	mov	r3, r0
 801494c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014950:	2b00      	cmp	r3, #0
 8014952:	d106      	bne.n	8014962 <find_volume+0x272>
 8014954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014956:	3330      	adds	r3, #48	; 0x30
 8014958:	3320      	adds	r3, #32
 801495a:	4618      	mov	r0, r3
 801495c:	f7fe fc08 	bl	8013170 <ld_dword>
 8014960:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014964:	3330      	adds	r3, #48	; 0x30
 8014966:	330e      	adds	r3, #14
 8014968:	4618      	mov	r0, r3
 801496a:	f7fe fbe9 	bl	8013140 <ld_word>
 801496e:	4603      	mov	r3, r0
 8014970:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014974:	2b00      	cmp	r3, #0
 8014976:	d101      	bne.n	801497c <find_volume+0x28c>
 8014978:	230d      	movs	r3, #13
 801497a:	e0fa      	b.n	8014b72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801497c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014980:	4413      	add	r3, r2
 8014982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014984:	8912      	ldrh	r2, [r2, #8]
 8014986:	0912      	lsrs	r2, r2, #4
 8014988:	b292      	uxth	r2, r2
 801498a:	4413      	add	r3, r2
 801498c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801498e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014992:	429a      	cmp	r2, r3
 8014994:	d204      	bcs.n	80149a0 <find_volume+0x2b0>
 8014996:	230d      	movs	r3, #13
 8014998:	e0eb      	b.n	8014b72 <find_volume+0x482>
 801499a:	bf00      	nop
 801499c:	20000ea0 	.word	0x20000ea0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80149a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80149a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a4:	1ad3      	subs	r3, r2, r3
 80149a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149a8:	8952      	ldrh	r2, [r2, #10]
 80149aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80149ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80149b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d101      	bne.n	80149ba <find_volume+0x2ca>
 80149b6:	230d      	movs	r3, #13
 80149b8:	e0db      	b.n	8014b72 <find_volume+0x482>
		fmt = FS_FAT32;
 80149ba:	2303      	movs	r3, #3
 80149bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80149c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80149c6:	4293      	cmp	r3, r2
 80149c8:	d802      	bhi.n	80149d0 <find_volume+0x2e0>
 80149ca:	2302      	movs	r3, #2
 80149cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80149d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d802      	bhi.n	80149e0 <find_volume+0x2f0>
 80149da:	2301      	movs	r3, #1
 80149dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80149e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e2:	1c9a      	adds	r2, r3, #2
 80149e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80149e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80149ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80149f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149f2:	441a      	add	r2, r3
 80149f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80149f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fc:	441a      	add	r2, r3
 80149fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a00:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8014a02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a06:	2b03      	cmp	r3, #3
 8014a08:	d11e      	bne.n	8014a48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0c:	3330      	adds	r3, #48	; 0x30
 8014a0e:	332a      	adds	r3, #42	; 0x2a
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7fe fb95 	bl	8013140 <ld_word>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d001      	beq.n	8014a20 <find_volume+0x330>
 8014a1c:	230d      	movs	r3, #13
 8014a1e:	e0a8      	b.n	8014b72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a22:	891b      	ldrh	r3, [r3, #8]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <find_volume+0x33c>
 8014a28:	230d      	movs	r3, #13
 8014a2a:	e0a2      	b.n	8014b72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2e:	3330      	adds	r3, #48	; 0x30
 8014a30:	332c      	adds	r3, #44	; 0x2c
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7fe fb9c 	bl	8013170 <ld_dword>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a40:	695b      	ldr	r3, [r3, #20]
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	647b      	str	r3, [r7, #68]	; 0x44
 8014a46:	e01f      	b.n	8014a88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4a:	891b      	ldrh	r3, [r3, #8]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d101      	bne.n	8014a54 <find_volume+0x364>
 8014a50:	230d      	movs	r3, #13
 8014a52:	e08e      	b.n	8014b72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a56:	6a1a      	ldr	r2, [r3, #32]
 8014a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a5a:	441a      	add	r2, r3
 8014a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a5e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a64:	2b02      	cmp	r3, #2
 8014a66:	d103      	bne.n	8014a70 <find_volume+0x380>
 8014a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6a:	695b      	ldr	r3, [r3, #20]
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	e00a      	b.n	8014a86 <find_volume+0x396>
 8014a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a72:	695a      	ldr	r2, [r3, #20]
 8014a74:	4613      	mov	r3, r2
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	4413      	add	r3, r2
 8014a7a:	085a      	lsrs	r2, r3, #1
 8014a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7e:	695b      	ldr	r3, [r3, #20]
 8014a80:	f003 0301 	and.w	r3, r3, #1
 8014a84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014a86:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	699a      	ldr	r2, [r3, #24]
 8014a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014a92:	0a5b      	lsrs	r3, r3, #9
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d201      	bcs.n	8014a9c <find_volume+0x3ac>
 8014a98:	230d      	movs	r3, #13
 8014a9a:	e06a      	b.n	8014b72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8014aa2:	611a      	str	r2, [r3, #16]
 8014aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa6:	691a      	ldr	r2, [r3, #16]
 8014aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aaa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aae:	2280      	movs	r2, #128	; 0x80
 8014ab0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014ab6:	2b03      	cmp	r3, #3
 8014ab8:	d149      	bne.n	8014b4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014abc:	3330      	adds	r3, #48	; 0x30
 8014abe:	3330      	adds	r3, #48	; 0x30
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fe fb3d 	bl	8013140 <ld_word>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b01      	cmp	r3, #1
 8014aca:	d140      	bne.n	8014b4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ace:	3301      	adds	r3, #1
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ad4:	f7fe fde4 	bl	80136a0 <move_window>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d137      	bne.n	8014b4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae6:	3330      	adds	r3, #48	; 0x30
 8014ae8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fe fb27 	bl	8013140 <ld_word>
 8014af2:	4603      	mov	r3, r0
 8014af4:	461a      	mov	r2, r3
 8014af6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d127      	bne.n	8014b4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b00:	3330      	adds	r3, #48	; 0x30
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fe fb34 	bl	8013170 <ld_dword>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	4a1c      	ldr	r2, [pc, #112]	; (8014b7c <find_volume+0x48c>)
 8014b0c:	4293      	cmp	r3, r2
 8014b0e:	d11e      	bne.n	8014b4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b12:	3330      	adds	r3, #48	; 0x30
 8014b14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7fe fb29 	bl	8013170 <ld_dword>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	4a17      	ldr	r2, [pc, #92]	; (8014b80 <find_volume+0x490>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d113      	bne.n	8014b4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b28:	3330      	adds	r3, #48	; 0x30
 8014b2a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fe fb1e 	bl	8013170 <ld_dword>
 8014b34:	4602      	mov	r2, r0
 8014b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b3c:	3330      	adds	r3, #48	; 0x30
 8014b3e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7fe fb14 	bl	8013170 <ld_dword>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014b54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014b56:	4b0b      	ldr	r3, [pc, #44]	; (8014b84 <find_volume+0x494>)
 8014b58:	881b      	ldrh	r3, [r3, #0]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	4b09      	ldr	r3, [pc, #36]	; (8014b84 <find_volume+0x494>)
 8014b60:	801a      	strh	r2, [r3, #0]
 8014b62:	4b08      	ldr	r3, [pc, #32]	; (8014b84 <find_volume+0x494>)
 8014b64:	881a      	ldrh	r2, [r3, #0]
 8014b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014b6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014b6c:	f7fe fd30 	bl	80135d0 <clear_lock>
#endif
	return FR_OK;
 8014b70:	2300      	movs	r3, #0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3758      	adds	r7, #88	; 0x58
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	41615252 	.word	0x41615252
 8014b80:	61417272 	.word	0x61417272
 8014b84:	20000ea4 	.word	0x20000ea4

08014b88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014b92:	2309      	movs	r3, #9
 8014b94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d01c      	beq.n	8014bd6 <validate+0x4e>
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d018      	beq.n	8014bd6 <validate+0x4e>
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d013      	beq.n	8014bd6 <validate+0x4e>
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	889a      	ldrh	r2, [r3, #4]
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	88db      	ldrh	r3, [r3, #6]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d10c      	bne.n	8014bd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	785b      	ldrb	r3, [r3, #1]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fe fa1e 	bl	8013004 <disk_status>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	f003 0301 	and.w	r3, r3, #1
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d101      	bne.n	8014bd6 <validate+0x4e>
			res = FR_OK;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014bd6:	7bfb      	ldrb	r3, [r7, #15]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d102      	bne.n	8014be2 <validate+0x5a>
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	e000      	b.n	8014be4 <validate+0x5c>
 8014be2:	2300      	movs	r3, #0
 8014be4:	683a      	ldr	r2, [r7, #0]
 8014be6:	6013      	str	r3, [r2, #0]
	return res;
 8014be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3710      	adds	r7, #16
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
	...

08014bf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b088      	sub	sp, #32
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	60f8      	str	r0, [r7, #12]
 8014bfc:	60b9      	str	r1, [r7, #8]
 8014bfe:	4613      	mov	r3, r2
 8014c00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014c06:	f107 0310 	add.w	r3, r7, #16
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7ff fcd5 	bl	80145ba <get_ldnumber>
 8014c10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014c12:	69fb      	ldr	r3, [r7, #28]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	da01      	bge.n	8014c1c <f_mount+0x28>
 8014c18:	230b      	movs	r3, #11
 8014c1a:	e02b      	b.n	8014c74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014c1c:	4a17      	ldr	r2, [pc, #92]	; (8014c7c <f_mount+0x88>)
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014c26:	69bb      	ldr	r3, [r7, #24]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d005      	beq.n	8014c38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014c2c:	69b8      	ldr	r0, [r7, #24]
 8014c2e:	f7fe fccf 	bl	80135d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	2200      	movs	r2, #0
 8014c36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d002      	beq.n	8014c44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2200      	movs	r2, #0
 8014c42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	490d      	ldr	r1, [pc, #52]	; (8014c7c <f_mount+0x88>)
 8014c48:	69fb      	ldr	r3, [r7, #28]
 8014c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d002      	beq.n	8014c5a <f_mount+0x66>
 8014c54:	79fb      	ldrb	r3, [r7, #7]
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d001      	beq.n	8014c5e <f_mount+0x6a>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	e00a      	b.n	8014c74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014c5e:	f107 010c 	add.w	r1, r7, #12
 8014c62:	f107 0308 	add.w	r3, r7, #8
 8014c66:	2200      	movs	r2, #0
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7ff fd41 	bl	80146f0 <find_volume>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3720      	adds	r7, #32
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	20000ea0 	.word	0x20000ea0

08014c80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b098      	sub	sp, #96	; 0x60
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d101      	bne.n	8014c98 <f_open+0x18>
 8014c94:	2309      	movs	r3, #9
 8014c96:	e1ad      	b.n	8014ff4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014c98:	79fb      	ldrb	r3, [r7, #7]
 8014c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014c9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014ca0:	79fa      	ldrb	r2, [r7, #7]
 8014ca2:	f107 0110 	add.w	r1, r7, #16
 8014ca6:	f107 0308 	add.w	r3, r7, #8
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7ff fd20 	bl	80146f0 <find_volume>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f040 8191 	bne.w	8014fe2 <f_open+0x362>
		dj.obj.fs = fs;
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	f107 0314 	add.w	r3, r7, #20
 8014cca:	4611      	mov	r1, r2
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7ff fc03 	bl	80144d8 <follow_path>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d11a      	bne.n	8014d16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014ce0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014ce4:	b25b      	sxtb	r3, r3
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	da03      	bge.n	8014cf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8014cea:	2306      	movs	r3, #6
 8014cec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014cf0:	e011      	b.n	8014d16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014cf2:	79fb      	ldrb	r3, [r7, #7]
 8014cf4:	f023 0301 	bic.w	r3, r3, #1
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	bf14      	ite	ne
 8014cfc:	2301      	movne	r3, #1
 8014cfe:	2300      	moveq	r3, #0
 8014d00:	b2db      	uxtb	r3, r3
 8014d02:	461a      	mov	r2, r3
 8014d04:	f107 0314 	add.w	r3, r7, #20
 8014d08:	4611      	mov	r1, r2
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fe fb18 	bl	8013340 <chk_lock>
 8014d10:	4603      	mov	r3, r0
 8014d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014d16:	79fb      	ldrb	r3, [r7, #7]
 8014d18:	f003 031c 	and.w	r3, r3, #28
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d07f      	beq.n	8014e20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d017      	beq.n	8014d58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d2c:	2b04      	cmp	r3, #4
 8014d2e:	d10e      	bne.n	8014d4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014d30:	f7fe fb62 	bl	80133f8 <enq_lock>
 8014d34:	4603      	mov	r3, r0
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d006      	beq.n	8014d48 <f_open+0xc8>
 8014d3a:	f107 0314 	add.w	r3, r7, #20
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7ff faa4 	bl	801428c <dir_register>
 8014d44:	4603      	mov	r3, r0
 8014d46:	e000      	b.n	8014d4a <f_open+0xca>
 8014d48:	2312      	movs	r3, #18
 8014d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014d4e:	79fb      	ldrb	r3, [r7, #7]
 8014d50:	f043 0308 	orr.w	r3, r3, #8
 8014d54:	71fb      	strb	r3, [r7, #7]
 8014d56:	e010      	b.n	8014d7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014d58:	7ebb      	ldrb	r3, [r7, #26]
 8014d5a:	f003 0311 	and.w	r3, r3, #17
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d003      	beq.n	8014d6a <f_open+0xea>
					res = FR_DENIED;
 8014d62:	2307      	movs	r3, #7
 8014d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d68:	e007      	b.n	8014d7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014d6a:	79fb      	ldrb	r3, [r7, #7]
 8014d6c:	f003 0304 	and.w	r3, r3, #4
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d002      	beq.n	8014d7a <f_open+0xfa>
 8014d74:	2308      	movs	r3, #8
 8014d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d168      	bne.n	8014e54 <f_open+0x1d4>
 8014d82:	79fb      	ldrb	r3, [r7, #7]
 8014d84:	f003 0308 	and.w	r3, r3, #8
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d063      	beq.n	8014e54 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014d8c:	f7fb ff3e 	bl	8010c0c <get_fattime>
 8014d90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d94:	330e      	adds	r3, #14
 8014d96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fe fa27 	bl	80131ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da0:	3316      	adds	r3, #22
 8014da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7fe fa21 	bl	80131ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dac:	330b      	adds	r3, #11
 8014dae:	2220      	movs	r2, #32
 8014db0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014db6:	4611      	mov	r1, r2
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7ff f976 	bl	80140aa <ld_clust>
 8014dbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7ff f98e 	bl	80140e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dce:	331c      	adds	r3, #28
 8014dd0:	2100      	movs	r1, #0
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fe fa0a 	bl	80131ec <st_dword>
					fs->wflag = 1;
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	2201      	movs	r2, #1
 8014ddc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d037      	beq.n	8014e54 <f_open+0x1d4>
						dw = fs->winsect;
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014de8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014dea:	f107 0314 	add.w	r3, r7, #20
 8014dee:	2200      	movs	r2, #0
 8014df0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fe fea1 	bl	8013b3a <remove_chain>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d126      	bne.n	8014e54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fe fc48 	bl	80136a0 <move_window>
 8014e10:	4603      	mov	r3, r0
 8014e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e1a:	3a01      	subs	r2, #1
 8014e1c:	60da      	str	r2, [r3, #12]
 8014e1e:	e019      	b.n	8014e54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d115      	bne.n	8014e54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014e28:	7ebb      	ldrb	r3, [r7, #26]
 8014e2a:	f003 0310 	and.w	r3, r3, #16
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d003      	beq.n	8014e3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8014e32:	2304      	movs	r3, #4
 8014e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014e38:	e00c      	b.n	8014e54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014e3a:	79fb      	ldrb	r3, [r7, #7]
 8014e3c:	f003 0302 	and.w	r3, r3, #2
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d007      	beq.n	8014e54 <f_open+0x1d4>
 8014e44:	7ebb      	ldrb	r3, [r7, #26]
 8014e46:	f003 0301 	and.w	r3, r3, #1
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d002      	beq.n	8014e54 <f_open+0x1d4>
						res = FR_DENIED;
 8014e4e:	2307      	movs	r3, #7
 8014e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d128      	bne.n	8014eae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014e5c:	79fb      	ldrb	r3, [r7, #7]
 8014e5e:	f003 0308 	and.w	r3, r3, #8
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d003      	beq.n	8014e6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014e66:	79fb      	ldrb	r3, [r7, #7]
 8014e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014e7c:	79fb      	ldrb	r3, [r7, #7]
 8014e7e:	f023 0301 	bic.w	r3, r3, #1
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	bf14      	ite	ne
 8014e86:	2301      	movne	r3, #1
 8014e88:	2300      	moveq	r3, #0
 8014e8a:	b2db      	uxtb	r3, r3
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	f107 0314 	add.w	r3, r7, #20
 8014e92:	4611      	mov	r1, r2
 8014e94:	4618      	mov	r0, r3
 8014e96:	f7fe fad1 	bl	801343c <inc_lock>
 8014e9a:	4602      	mov	r2, r0
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	691b      	ldr	r3, [r3, #16]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d102      	bne.n	8014eae <f_open+0x22e>
 8014ea8:	2302      	movs	r3, #2
 8014eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f040 8095 	bne.w	8014fe2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ebc:	4611      	mov	r1, r2
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7ff f8f3 	bl	80140aa <ld_clust>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ecc:	331c      	adds	r3, #28
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fe f94e 	bl	8013170 <ld_dword>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	2200      	movs	r2, #0
 8014ede:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014ee0:	693a      	ldr	r2, [r7, #16]
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	88da      	ldrh	r2, [r3, #6]
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	79fa      	ldrb	r2, [r7, #7]
 8014ef2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	2200      	movs	r2, #0
 8014efe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2200      	movs	r2, #0
 8014f04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	3330      	adds	r3, #48	; 0x30
 8014f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f0e:	2100      	movs	r1, #0
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7fe f9b8 	bl	8013286 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014f16:	79fb      	ldrb	r3, [r7, #7]
 8014f18:	f003 0320 	and.w	r3, r3, #32
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d060      	beq.n	8014fe2 <f_open+0x362>
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d05c      	beq.n	8014fe2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	68da      	ldr	r2, [r3, #12]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	895b      	ldrh	r3, [r3, #10]
 8014f34:	025b      	lsls	r3, r3, #9
 8014f36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	689b      	ldr	r3, [r3, #8]
 8014f3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	68db      	ldr	r3, [r3, #12]
 8014f42:	657b      	str	r3, [r7, #84]	; 0x54
 8014f44:	e016      	b.n	8014f74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fe fc63 	bl	8013816 <get_fat>
 8014f50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d802      	bhi.n	8014f5e <f_open+0x2de>
 8014f58:	2302      	movs	r3, #2
 8014f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f64:	d102      	bne.n	8014f6c <f_open+0x2ec>
 8014f66:	2301      	movs	r3, #1
 8014f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f70:	1ad3      	subs	r3, r2, r3
 8014f72:	657b      	str	r3, [r7, #84]	; 0x54
 8014f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d103      	bne.n	8014f84 <f_open+0x304>
 8014f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d8e0      	bhi.n	8014f46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014f88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d127      	bne.n	8014fe2 <f_open+0x362>
 8014f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d022      	beq.n	8014fe2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7fe fc19 	bl	80137d8 <clust2sect>
 8014fa6:	6478      	str	r0, [r7, #68]	; 0x44
 8014fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d103      	bne.n	8014fb6 <f_open+0x336>
						res = FR_INT_ERR;
 8014fae:	2302      	movs	r3, #2
 8014fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014fb4:	e015      	b.n	8014fe2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fb8:	0a5a      	lsrs	r2, r3, #9
 8014fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fbc:	441a      	add	r2, r3
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	7858      	ldrb	r0, [r3, #1]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6a1a      	ldr	r2, [r3, #32]
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	f7fe f857 	bl	8013084 <disk_read>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d002      	beq.n	8014fe2 <f_open+0x362>
 8014fdc:	2301      	movs	r3, #1
 8014fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d002      	beq.n	8014ff0 <f_open+0x370>
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2200      	movs	r2, #0
 8014fee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3760      	adds	r7, #96	; 0x60
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b08c      	sub	sp, #48	; 0x30
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	607a      	str	r2, [r7, #4]
 8015008:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	2200      	movs	r2, #0
 8015012:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f107 0210 	add.w	r2, r7, #16
 801501a:	4611      	mov	r1, r2
 801501c:	4618      	mov	r0, r3
 801501e:	f7ff fdb3 	bl	8014b88 <validate>
 8015022:	4603      	mov	r3, r0
 8015024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801502c:	2b00      	cmp	r3, #0
 801502e:	d107      	bne.n	8015040 <f_write+0x44>
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	7d5b      	ldrb	r3, [r3, #21]
 8015034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801503c:	2b00      	cmp	r3, #0
 801503e:	d002      	beq.n	8015046 <f_write+0x4a>
 8015040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015044:	e14b      	b.n	80152de <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	7d1b      	ldrb	r3, [r3, #20]
 801504a:	f003 0302 	and.w	r3, r3, #2
 801504e:	2b00      	cmp	r3, #0
 8015050:	d101      	bne.n	8015056 <f_write+0x5a>
 8015052:	2307      	movs	r3, #7
 8015054:	e143      	b.n	80152de <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	699a      	ldr	r2, [r3, #24]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	441a      	add	r2, r3
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	699b      	ldr	r3, [r3, #24]
 8015062:	429a      	cmp	r2, r3
 8015064:	f080 812d 	bcs.w	80152c2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	699b      	ldr	r3, [r3, #24]
 801506c:	43db      	mvns	r3, r3
 801506e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015070:	e127      	b.n	80152c2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	699b      	ldr	r3, [r3, #24]
 8015076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801507a:	2b00      	cmp	r3, #0
 801507c:	f040 80e3 	bne.w	8015246 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	699b      	ldr	r3, [r3, #24]
 8015084:	0a5b      	lsrs	r3, r3, #9
 8015086:	693a      	ldr	r2, [r7, #16]
 8015088:	8952      	ldrh	r2, [r2, #10]
 801508a:	3a01      	subs	r2, #1
 801508c:	4013      	ands	r3, r2
 801508e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015090:	69bb      	ldr	r3, [r7, #24]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d143      	bne.n	801511e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	699b      	ldr	r3, [r3, #24]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d10c      	bne.n	80150b8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	689b      	ldr	r3, [r3, #8]
 80150a2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80150a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d11a      	bne.n	80150e0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2100      	movs	r1, #0
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fe fda8 	bl	8013c04 <create_chain>
 80150b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80150b6:	e013      	b.n	80150e0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d007      	beq.n	80150d0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	699b      	ldr	r3, [r3, #24]
 80150c4:	4619      	mov	r1, r3
 80150c6:	68f8      	ldr	r0, [r7, #12]
 80150c8:	f7fe fe34 	bl	8013d34 <clmt_clust>
 80150cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80150ce:	e007      	b.n	80150e0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80150d0:	68fa      	ldr	r2, [r7, #12]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	69db      	ldr	r3, [r3, #28]
 80150d6:	4619      	mov	r1, r3
 80150d8:	4610      	mov	r0, r2
 80150da:	f7fe fd93 	bl	8013c04 <create_chain>
 80150de:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80150e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	f000 80f2 	beq.w	80152cc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80150e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d104      	bne.n	80150f8 <f_write+0xfc>
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2202      	movs	r2, #2
 80150f2:	755a      	strb	r2, [r3, #21]
 80150f4:	2302      	movs	r3, #2
 80150f6:	e0f2      	b.n	80152de <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80150f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150fe:	d104      	bne.n	801510a <f_write+0x10e>
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2201      	movs	r2, #1
 8015104:	755a      	strb	r2, [r3, #21]
 8015106:	2301      	movs	r3, #1
 8015108:	e0e9      	b.n	80152de <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801510e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	689b      	ldr	r3, [r3, #8]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d102      	bne.n	801511e <f_write+0x122>
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801511c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	7d1b      	ldrb	r3, [r3, #20]
 8015122:	b25b      	sxtb	r3, r3
 8015124:	2b00      	cmp	r3, #0
 8015126:	da18      	bge.n	801515a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	7858      	ldrb	r0, [r3, #1]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	6a1a      	ldr	r2, [r3, #32]
 8015136:	2301      	movs	r3, #1
 8015138:	f7fd ffc4 	bl	80130c4 <disk_write>
 801513c:	4603      	mov	r3, r0
 801513e:	2b00      	cmp	r3, #0
 8015140:	d004      	beq.n	801514c <f_write+0x150>
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2201      	movs	r2, #1
 8015146:	755a      	strb	r2, [r3, #21]
 8015148:	2301      	movs	r3, #1
 801514a:	e0c8      	b.n	80152de <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	7d1b      	ldrb	r3, [r3, #20]
 8015150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015154:	b2da      	uxtb	r2, r3
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801515a:	693a      	ldr	r2, [r7, #16]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	69db      	ldr	r3, [r3, #28]
 8015160:	4619      	mov	r1, r3
 8015162:	4610      	mov	r0, r2
 8015164:	f7fe fb38 	bl	80137d8 <clust2sect>
 8015168:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d104      	bne.n	801517a <f_write+0x17e>
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2202      	movs	r2, #2
 8015174:	755a      	strb	r2, [r3, #21]
 8015176:	2302      	movs	r3, #2
 8015178:	e0b1      	b.n	80152de <f_write+0x2e2>
			sect += csect;
 801517a:	697a      	ldr	r2, [r7, #20]
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	4413      	add	r3, r2
 8015180:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	0a5b      	lsrs	r3, r3, #9
 8015186:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015188:	6a3b      	ldr	r3, [r7, #32]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d03c      	beq.n	8015208 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801518e:	69ba      	ldr	r2, [r7, #24]
 8015190:	6a3b      	ldr	r3, [r7, #32]
 8015192:	4413      	add	r3, r2
 8015194:	693a      	ldr	r2, [r7, #16]
 8015196:	8952      	ldrh	r2, [r2, #10]
 8015198:	4293      	cmp	r3, r2
 801519a:	d905      	bls.n	80151a8 <f_write+0x1ac>
					cc = fs->csize - csect;
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	895b      	ldrh	r3, [r3, #10]
 80151a0:	461a      	mov	r2, r3
 80151a2:	69bb      	ldr	r3, [r7, #24]
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	7858      	ldrb	r0, [r3, #1]
 80151ac:	6a3b      	ldr	r3, [r7, #32]
 80151ae:	697a      	ldr	r2, [r7, #20]
 80151b0:	69f9      	ldr	r1, [r7, #28]
 80151b2:	f7fd ff87 	bl	80130c4 <disk_write>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d004      	beq.n	80151c6 <f_write+0x1ca>
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2201      	movs	r2, #1
 80151c0:	755a      	strb	r2, [r3, #21]
 80151c2:	2301      	movs	r3, #1
 80151c4:	e08b      	b.n	80152de <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	6a1a      	ldr	r2, [r3, #32]
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	6a3a      	ldr	r2, [r7, #32]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d915      	bls.n	8015200 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	6a1a      	ldr	r2, [r3, #32]
 80151de:	697b      	ldr	r3, [r7, #20]
 80151e0:	1ad3      	subs	r3, r2, r3
 80151e2:	025b      	lsls	r3, r3, #9
 80151e4:	69fa      	ldr	r2, [r7, #28]
 80151e6:	4413      	add	r3, r2
 80151e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80151ec:	4619      	mov	r1, r3
 80151ee:	f7fe f829 	bl	8013244 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	7d1b      	ldrb	r3, [r3, #20]
 80151f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151fa:	b2da      	uxtb	r2, r3
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015200:	6a3b      	ldr	r3, [r7, #32]
 8015202:	025b      	lsls	r3, r3, #9
 8015204:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015206:	e03f      	b.n	8015288 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	6a1b      	ldr	r3, [r3, #32]
 801520c:	697a      	ldr	r2, [r7, #20]
 801520e:	429a      	cmp	r2, r3
 8015210:	d016      	beq.n	8015240 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	699a      	ldr	r2, [r3, #24]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801521a:	429a      	cmp	r2, r3
 801521c:	d210      	bcs.n	8015240 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	7858      	ldrb	r0, [r3, #1]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015228:	2301      	movs	r3, #1
 801522a:	697a      	ldr	r2, [r7, #20]
 801522c:	f7fd ff2a 	bl	8013084 <disk_read>
 8015230:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015232:	2b00      	cmp	r3, #0
 8015234:	d004      	beq.n	8015240 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2201      	movs	r2, #1
 801523a:	755a      	strb	r2, [r3, #21]
 801523c:	2301      	movs	r3, #1
 801523e:	e04e      	b.n	80152de <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	697a      	ldr	r2, [r7, #20]
 8015244:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801524e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015252:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	429a      	cmp	r2, r3
 801525a:	d901      	bls.n	8015260 <f_write+0x264>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	699b      	ldr	r3, [r3, #24]
 801526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801526e:	4413      	add	r3, r2
 8015270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015272:	69f9      	ldr	r1, [r7, #28]
 8015274:	4618      	mov	r0, r3
 8015276:	f7fd ffe5 	bl	8013244 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	7d1b      	ldrb	r3, [r3, #20]
 801527e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015282:	b2da      	uxtb	r2, r3
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015288:	69fa      	ldr	r2, [r7, #28]
 801528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528c:	4413      	add	r3, r2
 801528e:	61fb      	str	r3, [r7, #28]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	699a      	ldr	r2, [r3, #24]
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	441a      	add	r2, r3
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	619a      	str	r2, [r3, #24]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	68da      	ldr	r2, [r3, #12]
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	699b      	ldr	r3, [r3, #24]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	bf38      	it	cc
 80152a8:	461a      	movcc	r2, r3
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	60da      	str	r2, [r3, #12]
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b4:	441a      	add	r2, r3
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152be:	1ad3      	subs	r3, r2, r3
 80152c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	f47f aed4 	bne.w	8015072 <f_write+0x76>
 80152ca:	e000      	b.n	80152ce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80152cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	7d1b      	ldrb	r3, [r3, #20]
 80152d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152d6:	b2da      	uxtb	r2, r3
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80152dc:	2300      	movs	r3, #0
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3730      	adds	r7, #48	; 0x30
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}

080152e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80152e6:	b580      	push	{r7, lr}
 80152e8:	b086      	sub	sp, #24
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f107 0208 	add.w	r2, r7, #8
 80152f4:	4611      	mov	r1, r2
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7ff fc46 	bl	8014b88 <validate>
 80152fc:	4603      	mov	r3, r0
 80152fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015300:	7dfb      	ldrb	r3, [r7, #23]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d168      	bne.n	80153d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	7d1b      	ldrb	r3, [r3, #20]
 801530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801530e:	2b00      	cmp	r3, #0
 8015310:	d062      	beq.n	80153d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	7d1b      	ldrb	r3, [r3, #20]
 8015316:	b25b      	sxtb	r3, r3
 8015318:	2b00      	cmp	r3, #0
 801531a:	da15      	bge.n	8015348 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	7858      	ldrb	r0, [r3, #1]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6a1a      	ldr	r2, [r3, #32]
 801532a:	2301      	movs	r3, #1
 801532c:	f7fd feca 	bl	80130c4 <disk_write>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <f_sync+0x54>
 8015336:	2301      	movs	r3, #1
 8015338:	e04f      	b.n	80153da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	7d1b      	ldrb	r3, [r3, #20]
 801533e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015342:	b2da      	uxtb	r2, r3
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015348:	f7fb fc60 	bl	8010c0c <get_fattime>
 801534c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801534e:	68ba      	ldr	r2, [r7, #8]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015354:	4619      	mov	r1, r3
 8015356:	4610      	mov	r0, r2
 8015358:	f7fe f9a2 	bl	80136a0 <move_window>
 801535c:	4603      	mov	r3, r0
 801535e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015360:	7dfb      	ldrb	r3, [r7, #23]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d138      	bne.n	80153d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801536a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	330b      	adds	r3, #11
 8015370:	781a      	ldrb	r2, [r3, #0]
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	330b      	adds	r3, #11
 8015376:	f042 0220 	orr.w	r2, r2, #32
 801537a:	b2d2      	uxtb	r2, r2
 801537c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6818      	ldr	r0, [r3, #0]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	689b      	ldr	r3, [r3, #8]
 8015386:	461a      	mov	r2, r3
 8015388:	68f9      	ldr	r1, [r7, #12]
 801538a:	f7fe fead 	bl	80140e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	f103 021c 	add.w	r2, r3, #28
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	4619      	mov	r1, r3
 801539a:	4610      	mov	r0, r2
 801539c:	f7fd ff26 	bl	80131ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	3316      	adds	r3, #22
 80153a4:	6939      	ldr	r1, [r7, #16]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fd ff20 	bl	80131ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	3312      	adds	r3, #18
 80153b0:	2100      	movs	r1, #0
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fd feff 	bl	80131b6 <st_word>
					fs->wflag = 1;
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	2201      	movs	r2, #1
 80153bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fe f99b 	bl	80136fc <sync_fs>
 80153c6:	4603      	mov	r3, r0
 80153c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	7d1b      	ldrb	r3, [r3, #20]
 80153ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80153d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3718      	adds	r7, #24
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b084      	sub	sp, #16
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f7ff ff7b 	bl	80152e6 <f_sync>
 80153f0:	4603      	mov	r3, r0
 80153f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80153f4:	7bfb      	ldrb	r3, [r7, #15]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d118      	bne.n	801542c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f107 0208 	add.w	r2, r7, #8
 8015400:	4611      	mov	r1, r2
 8015402:	4618      	mov	r0, r3
 8015404:	f7ff fbc0 	bl	8014b88 <validate>
 8015408:	4603      	mov	r3, r0
 801540a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801540c:	7bfb      	ldrb	r3, [r7, #15]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d10c      	bne.n	801542c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	691b      	ldr	r3, [r3, #16]
 8015416:	4618      	mov	r0, r3
 8015418:	f7fe f89e 	bl	8013558 <dec_lock>
 801541c:	4603      	mov	r3, r0
 801541e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015420:	7bfb      	ldrb	r3, [r7, #15]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d102      	bne.n	801542c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2200      	movs	r2, #0
 801542a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801542c:	7bfb      	ldrb	r3, [r7, #15]
}
 801542e:	4618      	mov	r0, r3
 8015430:	3710      	adds	r7, #16
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b086      	sub	sp, #24
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
 801543e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d101      	bne.n	801544a <f_opendir+0x14>
 8015446:	2309      	movs	r3, #9
 8015448:	e064      	b.n	8015514 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801544e:	f107 010c 	add.w	r1, r7, #12
 8015452:	463b      	mov	r3, r7
 8015454:	2200      	movs	r2, #0
 8015456:	4618      	mov	r0, r3
 8015458:	f7ff f94a 	bl	80146f0 <find_volume>
 801545c:	4603      	mov	r3, r0
 801545e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015460:	7dfb      	ldrb	r3, [r7, #23]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d14f      	bne.n	8015506 <f_opendir+0xd0>
		obj->fs = fs;
 8015466:	68fa      	ldr	r2, [r7, #12]
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	4619      	mov	r1, r3
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7ff f831 	bl	80144d8 <follow_path>
 8015476:	4603      	mov	r3, r0
 8015478:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801547a:	7dfb      	ldrb	r3, [r7, #23]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d13d      	bne.n	80154fc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015486:	b25b      	sxtb	r3, r3
 8015488:	2b00      	cmp	r3, #0
 801548a:	db12      	blt.n	80154b2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	799b      	ldrb	r3, [r3, #6]
 8015490:	f003 0310 	and.w	r3, r3, #16
 8015494:	2b00      	cmp	r3, #0
 8015496:	d00a      	beq.n	80154ae <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015498:	68fa      	ldr	r2, [r7, #12]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6a1b      	ldr	r3, [r3, #32]
 801549e:	4619      	mov	r1, r3
 80154a0:	4610      	mov	r0, r2
 80154a2:	f7fe fe02 	bl	80140aa <ld_clust>
 80154a6:	4602      	mov	r2, r0
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	609a      	str	r2, [r3, #8]
 80154ac:	e001      	b.n	80154b2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80154ae:	2305      	movs	r3, #5
 80154b0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d121      	bne.n	80154fc <f_opendir+0xc6>
				obj->id = fs->id;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	88da      	ldrh	r2, [r3, #6]
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80154c0:	2100      	movs	r1, #0
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f7fe fc6a 	bl	8013d9c <dir_sdi>
 80154c8:	4603      	mov	r3, r0
 80154ca:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80154cc:	7dfb      	ldrb	r3, [r7, #23]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d114      	bne.n	80154fc <f_opendir+0xc6>
					if (obj->sclust) {
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	689b      	ldr	r3, [r3, #8]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d00d      	beq.n	80154f6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80154da:	2100      	movs	r1, #0
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7fd ffad 	bl	801343c <inc_lock>
 80154e2:	4602      	mov	r2, r0
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	691b      	ldr	r3, [r3, #16]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d105      	bne.n	80154fc <f_opendir+0xc6>
 80154f0:	2312      	movs	r3, #18
 80154f2:	75fb      	strb	r3, [r7, #23]
 80154f4:	e002      	b.n	80154fc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	2200      	movs	r2, #0
 80154fa:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80154fc:	7dfb      	ldrb	r3, [r7, #23]
 80154fe:	2b04      	cmp	r3, #4
 8015500:	d101      	bne.n	8015506 <f_opendir+0xd0>
 8015502:	2305      	movs	r3, #5
 8015504:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015506:	7dfb      	ldrb	r3, [r7, #23]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d002      	beq.n	8015512 <f_opendir+0xdc>
 801550c:	693b      	ldr	r3, [r7, #16]
 801550e:	2200      	movs	r2, #0
 8015510:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015512:	7dfb      	ldrb	r3, [r7, #23]
}
 8015514:	4618      	mov	r0, r3
 8015516:	3718      	adds	r7, #24
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f107 0208 	add.w	r2, r7, #8
 801552c:	4611      	mov	r1, r2
 801552e:	4618      	mov	r0, r3
 8015530:	f7ff fb2a 	bl	8014b88 <validate>
 8015534:	4603      	mov	r3, r0
 8015536:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015538:	7bfb      	ldrb	r3, [r7, #15]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d126      	bne.n	801558c <f_readdir+0x70>
		if (!fno) {
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d106      	bne.n	8015552 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015544:	2100      	movs	r1, #0
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7fe fc28 	bl	8013d9c <dir_sdi>
 801554c:	4603      	mov	r3, r0
 801554e:	73fb      	strb	r3, [r7, #15]
 8015550:	e01c      	b.n	801558c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015552:	2100      	movs	r1, #0
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7fe fde7 	bl	8014128 <dir_read>
 801555a:	4603      	mov	r3, r0
 801555c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801555e:	7bfb      	ldrb	r3, [r7, #15]
 8015560:	2b04      	cmp	r3, #4
 8015562:	d101      	bne.n	8015568 <f_readdir+0x4c>
 8015564:	2300      	movs	r3, #0
 8015566:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015568:	7bfb      	ldrb	r3, [r7, #15]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d10e      	bne.n	801558c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801556e:	6839      	ldr	r1, [r7, #0]
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f7fe febd 	bl	80142f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015576:	2100      	movs	r1, #0
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f7fe fc8a 	bl	8013e92 <dir_next>
 801557e:	4603      	mov	r3, r0
 8015580:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015582:	7bfb      	ldrb	r3, [r7, #15]
 8015584:	2b04      	cmp	r3, #4
 8015586:	d101      	bne.n	801558c <f_readdir+0x70>
 8015588:	2300      	movs	r3, #0
 801558a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801558c:	7bfb      	ldrb	r3, [r7, #15]
}
 801558e:	4618      	mov	r0, r3
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015596:	b580      	push	{r7, lr}
 8015598:	b096      	sub	sp, #88	; 0x58
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801559e:	f107 0108 	add.w	r1, r7, #8
 80155a2:	1d3b      	adds	r3, r7, #4
 80155a4:	2202      	movs	r2, #2
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7ff f8a2 	bl	80146f0 <find_volume>
 80155ac:	4603      	mov	r3, r0
 80155ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80155b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	f040 80ec 	bne.w	8015798 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	f107 030c 	add.w	r3, r7, #12
 80155c6:	4611      	mov	r1, r2
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7fe ff85 	bl	80144d8 <follow_path>
 80155ce:	4603      	mov	r3, r0
 80155d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80155d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d102      	bne.n	80155e2 <f_mkdir+0x4c>
 80155dc:	2308      	movs	r3, #8
 80155de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80155e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80155e6:	2b04      	cmp	r3, #4
 80155e8:	f040 80d6 	bne.w	8015798 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80155ec:	f107 030c 	add.w	r3, r7, #12
 80155f0:	2100      	movs	r1, #0
 80155f2:	4618      	mov	r0, r3
 80155f4:	f7fe fb06 	bl	8013c04 <create_chain>
 80155f8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	895b      	ldrh	r3, [r3, #10]
 80155fe:	025b      	lsls	r3, r3, #9
 8015600:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801560a:	2b00      	cmp	r3, #0
 801560c:	d102      	bne.n	8015614 <f_mkdir+0x7e>
 801560e:	2307      	movs	r3, #7
 8015610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015616:	2b01      	cmp	r3, #1
 8015618:	d102      	bne.n	8015620 <f_mkdir+0x8a>
 801561a:	2302      	movs	r3, #2
 801561c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015626:	d102      	bne.n	801562e <f_mkdir+0x98>
 8015628:	2301      	movs	r3, #1
 801562a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801562e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015632:	2b00      	cmp	r3, #0
 8015634:	d106      	bne.n	8015644 <f_mkdir+0xae>
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	4618      	mov	r0, r3
 801563a:	f7fd ffed 	bl	8013618 <sync_window>
 801563e:	4603      	mov	r3, r0
 8015640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015644:	f7fb fae2 	bl	8010c0c <get_fattime>
 8015648:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801564a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801564e:	2b00      	cmp	r3, #0
 8015650:	d16a      	bne.n	8015728 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015656:	4618      	mov	r0, r3
 8015658:	f7fe f8be 	bl	80137d8 <clust2sect>
 801565c:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	3330      	adds	r3, #48	; 0x30
 8015662:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015668:	2100      	movs	r1, #0
 801566a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801566c:	f7fd fe0b 	bl	8013286 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015670:	220b      	movs	r2, #11
 8015672:	2120      	movs	r1, #32
 8015674:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015676:	f7fd fe06 	bl	8013286 <mem_set>
					dir[DIR_Name] = '.';
 801567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801567c:	222e      	movs	r2, #46	; 0x2e
 801567e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015682:	330b      	adds	r3, #11
 8015684:	2210      	movs	r2, #16
 8015686:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801568a:	3316      	adds	r3, #22
 801568c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801568e:	4618      	mov	r0, r3
 8015690:	f7fd fdac 	bl	80131ec <st_dword>
					st_clust(fs, dir, dcl);
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801569a:	4618      	mov	r0, r3
 801569c:	f7fe fd24 	bl	80140e8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80156a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156a2:	3320      	adds	r3, #32
 80156a4:	2220      	movs	r2, #32
 80156a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7fd fdcb 	bl	8013244 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80156ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156b0:	3321      	adds	r3, #33	; 0x21
 80156b2:	222e      	movs	r2, #46	; 0x2e
 80156b4:	701a      	strb	r2, [r3, #0]
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	2b03      	cmp	r3, #3
 80156c0:	d106      	bne.n	80156d0 <f_mkdir+0x13a>
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d101      	bne.n	80156d0 <f_mkdir+0x13a>
 80156cc:	2300      	movs	r3, #0
 80156ce:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80156d0:	68b8      	ldr	r0, [r7, #8]
 80156d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156d4:	3320      	adds	r3, #32
 80156d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156d8:	4619      	mov	r1, r3
 80156da:	f7fe fd05 	bl	80140e8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	895b      	ldrh	r3, [r3, #10]
 80156e2:	653b      	str	r3, [r7, #80]	; 0x50
 80156e4:	e01b      	b.n	801571e <f_mkdir+0x188>
					fs->winsect = dsc++;
 80156e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156e8:	1c5a      	adds	r2, r3, #1
 80156ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80156ec:	68ba      	ldr	r2, [r7, #8]
 80156ee:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	2201      	movs	r2, #1
 80156f4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fd ff8d 	bl	8013618 <sync_window>
 80156fe:	4603      	mov	r3, r0
 8015700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015708:	2b00      	cmp	r3, #0
 801570a:	d10c      	bne.n	8015726 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 801570c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015710:	2100      	movs	r1, #0
 8015712:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015714:	f7fd fdb7 	bl	8013286 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801571a:	3b01      	subs	r3, #1
 801571c:	653b      	str	r3, [r7, #80]	; 0x50
 801571e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015720:	2b00      	cmp	r3, #0
 8015722:	d1e0      	bne.n	80156e6 <f_mkdir+0x150>
 8015724:	e000      	b.n	8015728 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8015726:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801572c:	2b00      	cmp	r3, #0
 801572e:	d107      	bne.n	8015740 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015730:	f107 030c 	add.w	r3, r7, #12
 8015734:	4618      	mov	r0, r3
 8015736:	f7fe fda9 	bl	801428c <dir_register>
 801573a:	4603      	mov	r3, r0
 801573c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015740:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015744:	2b00      	cmp	r3, #0
 8015746:	d120      	bne.n	801578a <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574a:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801574e:	3316      	adds	r3, #22
 8015750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015752:	4618      	mov	r0, r3
 8015754:	f7fd fd4a 	bl	80131ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801575c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801575e:	4618      	mov	r0, r3
 8015760:	f7fe fcc2 	bl	80140e8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015766:	330b      	adds	r3, #11
 8015768:	2210      	movs	r2, #16
 801576a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	2201      	movs	r2, #1
 8015770:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015776:	2b00      	cmp	r3, #0
 8015778:	d10e      	bne.n	8015798 <f_mkdir+0x202>
					res = sync_fs(fs);
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	4618      	mov	r0, r3
 801577e:	f7fd ffbd 	bl	80136fc <sync_fs>
 8015782:	4603      	mov	r3, r0
 8015784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015788:	e006      	b.n	8015798 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801578a:	f107 030c 	add.w	r3, r7, #12
 801578e:	2200      	movs	r2, #0
 8015790:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015792:	4618      	mov	r0, r3
 8015794:	f7fe f9d1 	bl	8013b3a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801579c:	4618      	mov	r0, r3
 801579e:	3758      	adds	r7, #88	; 0x58
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	460b      	mov	r3, r1
 80157ae:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80157b0:	78fb      	ldrb	r3, [r7, #3]
 80157b2:	2b0a      	cmp	r3, #10
 80157b4:	d103      	bne.n	80157be <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80157b6:	210d      	movs	r1, #13
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f7ff fff3 	bl	80157a4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	685b      	ldr	r3, [r3, #4]
 80157c2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	db25      	blt.n	8015816 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	1c5a      	adds	r2, r3, #1
 80157ce:	60fa      	str	r2, [r7, #12]
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	4413      	add	r3, r2
 80157d4:	78fa      	ldrb	r2, [r7, #3]
 80157d6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	2b3c      	cmp	r3, #60	; 0x3c
 80157dc:	dd12      	ble.n	8015804 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	6818      	ldr	r0, [r3, #0]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f103 010c 	add.w	r1, r3, #12
 80157e8:	68fa      	ldr	r2, [r7, #12]
 80157ea:	f107 0308 	add.w	r3, r7, #8
 80157ee:	f7ff fc05 	bl	8014ffc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80157f2:	68ba      	ldr	r2, [r7, #8]
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d101      	bne.n	80157fe <putc_bfd+0x5a>
 80157fa:	2300      	movs	r3, #0
 80157fc:	e001      	b.n	8015802 <putc_bfd+0x5e>
 80157fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015802:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	68fa      	ldr	r2, [r7, #12]
 8015808:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	1c5a      	adds	r2, r3, #1
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	609a      	str	r2, [r3, #8]
 8015814:	e000      	b.n	8015818 <putc_bfd+0x74>
	if (i < 0) return;
 8015816:	bf00      	nop
}
 8015818:	3710      	adds	r7, #16
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b084      	sub	sp, #16
 8015822:	af00      	add	r7, sp, #0
 8015824:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	2b00      	cmp	r3, #0
 801582c:	db16      	blt.n	801585c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6818      	ldr	r0, [r3, #0]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f103 010c 	add.w	r1, r3, #12
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	461a      	mov	r2, r3
 801583e:	f107 030c 	add.w	r3, r7, #12
 8015842:	f7ff fbdb 	bl	8014ffc <f_write>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d107      	bne.n	801585c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	68fa      	ldr	r2, [r7, #12]
 8015852:	4293      	cmp	r3, r2
 8015854:	d102      	bne.n	801585c <putc_flush+0x3e>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	689b      	ldr	r3, [r3, #8]
 801585a:	e001      	b.n	8015860 <putc_flush+0x42>
	return EOF;
 801585c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015860:	4618      	mov	r0, r3
 8015862:	3710      	adds	r7, #16
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	683a      	ldr	r2, [r7, #0]
 8015876:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2200      	movs	r2, #0
 801587c:	605a      	str	r2, [r3, #4]
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	685a      	ldr	r2, [r3, #4]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	609a      	str	r2, [r3, #8]
}
 8015886:	bf00      	nop
 8015888:	370c      	adds	r7, #12
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr
	...

08015894 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8015894:	b40e      	push	{r1, r2, r3}
 8015896:	b580      	push	{r7, lr}
 8015898:	b0a7      	sub	sp, #156	; 0x9c
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801589e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80158a2:	6879      	ldr	r1, [r7, #4]
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7ff ffdf 	bl	8015868 <putc_init>

	va_start(arp, fmt);
 80158aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80158ae:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80158b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80158b4:	1c5a      	adds	r2, r3, #1
 80158b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80158c0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f000 81f2 	beq.w	8015cae <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80158ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80158ce:	2b25      	cmp	r3, #37	; 0x25
 80158d0:	d008      	beq.n	80158e4 <f_printf+0x50>
			putc_bfd(&pb, c);
 80158d2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80158d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80158da:	4611      	mov	r1, r2
 80158dc:	4618      	mov	r0, r3
 80158de:	f7ff ff61 	bl	80157a4 <putc_bfd>
			continue;
 80158e2:	e1e3      	b.n	8015cac <f_printf+0x418>
		}
		w = f = 0;
 80158e4:	2300      	movs	r3, #0
 80158e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80158ea:	2300      	movs	r3, #0
 80158ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80158f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80158f4:	1c5a      	adds	r2, r3, #1
 80158f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8015900:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015904:	2b30      	cmp	r3, #48	; 0x30
 8015906:	d10b      	bne.n	8015920 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8015908:	2301      	movs	r3, #1
 801590a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801590e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015912:	1c5a      	adds	r2, r3, #1
 8015914:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801591e:	e024      	b.n	801596a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8015920:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015924:	2b2d      	cmp	r3, #45	; 0x2d
 8015926:	d120      	bne.n	801596a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015928:	2302      	movs	r3, #2
 801592a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801592e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015932:	1c5a      	adds	r2, r3, #1
 8015934:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015938:	781b      	ldrb	r3, [r3, #0]
 801593a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801593e:	e014      	b.n	801596a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8015940:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015944:	4613      	mov	r3, r2
 8015946:	009b      	lsls	r3, r3, #2
 8015948:	4413      	add	r3, r2
 801594a:	005b      	lsls	r3, r3, #1
 801594c:	461a      	mov	r2, r3
 801594e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015952:	4413      	add	r3, r2
 8015954:	3b30      	subs	r3, #48	; 0x30
 8015956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801595a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801595e:	1c5a      	adds	r2, r3, #1
 8015960:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801596a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801596e:	2b2f      	cmp	r3, #47	; 0x2f
 8015970:	d903      	bls.n	801597a <f_printf+0xe6>
 8015972:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015976:	2b39      	cmp	r3, #57	; 0x39
 8015978:	d9e2      	bls.n	8015940 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801597a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801597e:	2b6c      	cmp	r3, #108	; 0x6c
 8015980:	d003      	beq.n	801598a <f_printf+0xf6>
 8015982:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015986:	2b4c      	cmp	r3, #76	; 0x4c
 8015988:	d10d      	bne.n	80159a6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801598a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801598e:	f043 0304 	orr.w	r3, r3, #4
 8015992:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801599a:	1c5a      	adds	r2, r3, #1
 801599c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80159a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	f000 8181 	beq.w	8015cb2 <f_printf+0x41e>
		d = c;
 80159b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80159b4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80159b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80159bc:	2b60      	cmp	r3, #96	; 0x60
 80159be:	d908      	bls.n	80159d2 <f_printf+0x13e>
 80159c0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80159c4:	2b7a      	cmp	r3, #122	; 0x7a
 80159c6:	d804      	bhi.n	80159d2 <f_printf+0x13e>
 80159c8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80159cc:	3b20      	subs	r3, #32
 80159ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80159d2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80159d6:	3b42      	subs	r3, #66	; 0x42
 80159d8:	2b16      	cmp	r3, #22
 80159da:	f200 8098 	bhi.w	8015b0e <f_printf+0x27a>
 80159de:	a201      	add	r2, pc, #4	; (adr r2, 80159e4 <f_printf+0x150>)
 80159e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159e4:	08015aef 	.word	0x08015aef
 80159e8:	08015ad7 	.word	0x08015ad7
 80159ec:	08015aff 	.word	0x08015aff
 80159f0:	08015b0f 	.word	0x08015b0f
 80159f4:	08015b0f 	.word	0x08015b0f
 80159f8:	08015b0f 	.word	0x08015b0f
 80159fc:	08015b0f 	.word	0x08015b0f
 8015a00:	08015b0f 	.word	0x08015b0f
 8015a04:	08015b0f 	.word	0x08015b0f
 8015a08:	08015b0f 	.word	0x08015b0f
 8015a0c:	08015b0f 	.word	0x08015b0f
 8015a10:	08015b0f 	.word	0x08015b0f
 8015a14:	08015b0f 	.word	0x08015b0f
 8015a18:	08015af7 	.word	0x08015af7
 8015a1c:	08015b0f 	.word	0x08015b0f
 8015a20:	08015b0f 	.word	0x08015b0f
 8015a24:	08015b0f 	.word	0x08015b0f
 8015a28:	08015a41 	.word	0x08015a41
 8015a2c:	08015b0f 	.word	0x08015b0f
 8015a30:	08015aff 	.word	0x08015aff
 8015a34:	08015b0f 	.word	0x08015b0f
 8015a38:	08015b0f 	.word	0x08015b0f
 8015a3c:	08015b07 	.word	0x08015b07
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8015a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a42:	1d1a      	adds	r2, r3, #4
 8015a44:	67ba      	str	r2, [r7, #120]	; 0x78
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015a50:	e004      	b.n	8015a5c <f_printf+0x1c8>
 8015a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a56:	3301      	adds	r3, #1
 8015a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015a5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a62:	4413      	add	r3, r2
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d1f3      	bne.n	8015a52 <f_printf+0x1be>
			if (!(f & 2)) {
 8015a6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015a6e:	f003 0302 	and.w	r3, r3, #2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d11a      	bne.n	8015aac <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8015a76:	e005      	b.n	8015a84 <f_printf+0x1f0>
 8015a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a7c:	2120      	movs	r1, #32
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f7ff fe90 	bl	80157a4 <putc_bfd>
 8015a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a88:	1c5a      	adds	r2, r3, #1
 8015a8a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015a8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d8f0      	bhi.n	8015a78 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8015a96:	e009      	b.n	8015aac <f_printf+0x218>
 8015a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a9a:	1c5a      	adds	r2, r3, #1
 8015a9c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015a9e:	781a      	ldrb	r2, [r3, #0]
 8015aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015aa4:	4611      	mov	r1, r2
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7ff fe7c 	bl	80157a4 <putc_bfd>
 8015aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d1f1      	bne.n	8015a98 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8015ab4:	e005      	b.n	8015ac2 <f_printf+0x22e>
 8015ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015aba:	2120      	movs	r1, #32
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7ff fe71 	bl	80157a4 <putc_bfd>
 8015ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015ac6:	1c5a      	adds	r2, r3, #1
 8015ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015acc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d8f0      	bhi.n	8015ab6 <f_printf+0x222>
			continue;
 8015ad4:	e0ea      	b.n	8015cac <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8015ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ad8:	1d1a      	adds	r2, r3, #4
 8015ada:	67ba      	str	r2, [r7, #120]	; 0x78
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	b2da      	uxtb	r2, r3
 8015ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ae4:	4611      	mov	r1, r2
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7ff fe5c 	bl	80157a4 <putc_bfd>
 8015aec:	e0de      	b.n	8015cac <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8015aee:	2302      	movs	r3, #2
 8015af0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015af4:	e014      	b.n	8015b20 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8015af6:	2308      	movs	r3, #8
 8015af8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015afc:	e010      	b.n	8015b20 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8015afe:	230a      	movs	r3, #10
 8015b00:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015b04:	e00c      	b.n	8015b20 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8015b06:	2310      	movs	r3, #16
 8015b08:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8015b0c:	e008      	b.n	8015b20 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8015b0e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8015b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b16:	4611      	mov	r1, r2
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7ff fe43 	bl	80157a4 <putc_bfd>
 8015b1e:	e0c5      	b.n	8015cac <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8015b20:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015b24:	f003 0304 	and.w	r3, r3, #4
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d004      	beq.n	8015b36 <f_printf+0x2a2>
 8015b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015b2e:	1d1a      	adds	r2, r3, #4
 8015b30:	67ba      	str	r2, [r7, #120]	; 0x78
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	e00c      	b.n	8015b50 <f_printf+0x2bc>
 8015b36:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015b3a:	2b44      	cmp	r3, #68	; 0x44
 8015b3c:	d104      	bne.n	8015b48 <f_printf+0x2b4>
 8015b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015b40:	1d1a      	adds	r2, r3, #4
 8015b42:	67ba      	str	r2, [r7, #120]	; 0x78
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	e003      	b.n	8015b50 <f_printf+0x2bc>
 8015b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015b4a:	1d1a      	adds	r2, r3, #4
 8015b4c:	67ba      	str	r2, [r7, #120]	; 0x78
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8015b54:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015b58:	2b44      	cmp	r3, #68	; 0x44
 8015b5a:	d10e      	bne.n	8015b7a <f_printf+0x2e6>
 8015b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	da0a      	bge.n	8015b7a <f_printf+0x2e6>
			v = 0 - v;
 8015b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b68:	425b      	negs	r3, r3
 8015b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8015b6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015b72:	f043 0308 	orr.w	r3, r3, #8
 8015b76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8015b80:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8015b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b8c:	fb01 f202 	mul.w	r2, r1, r2
 8015b90:	1a9b      	subs	r3, r3, r2
 8015b92:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8015b96:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8015b9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8015ba6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015baa:	2b09      	cmp	r3, #9
 8015bac:	d90b      	bls.n	8015bc6 <f_printf+0x332>
 8015bae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015bb2:	2b78      	cmp	r3, #120	; 0x78
 8015bb4:	d101      	bne.n	8015bba <f_printf+0x326>
 8015bb6:	2227      	movs	r2, #39	; 0x27
 8015bb8:	e000      	b.n	8015bbc <f_printf+0x328>
 8015bba:	2207      	movs	r2, #7
 8015bbc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8015bc0:	4413      	add	r3, r2
 8015bc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8015bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015bca:	1c5a      	adds	r2, r3, #1
 8015bcc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015bd0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015bd4:	3230      	adds	r2, #48	; 0x30
 8015bd6:	b2d2      	uxtb	r2, r2
 8015bd8:	3398      	adds	r3, #152	; 0x98
 8015bda:	443b      	add	r3, r7
 8015bdc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8015be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d003      	beq.n	8015bf0 <f_printf+0x35c>
 8015be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015bec:	2b1f      	cmp	r3, #31
 8015bee:	d9c7      	bls.n	8015b80 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8015bf0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015bf4:	f003 0308 	and.w	r3, r3, #8
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d009      	beq.n	8015c10 <f_printf+0x37c>
 8015bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c00:	1c5a      	adds	r2, r3, #1
 8015c02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015c06:	3398      	adds	r3, #152	; 0x98
 8015c08:	443b      	add	r3, r7
 8015c0a:	222d      	movs	r2, #45	; 0x2d
 8015c0c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8015c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015c18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015c1c:	f003 0301 	and.w	r3, r3, #1
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d001      	beq.n	8015c28 <f_printf+0x394>
 8015c24:	2330      	movs	r3, #48	; 0x30
 8015c26:	e000      	b.n	8015c2a <f_printf+0x396>
 8015c28:	2320      	movs	r3, #32
 8015c2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8015c2e:	e007      	b.n	8015c40 <f_printf+0x3ac>
 8015c30:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c38:	4611      	mov	r1, r2
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7ff fdb2 	bl	80157a4 <putc_bfd>
 8015c40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015c44:	f003 0302 	and.w	r3, r3, #2
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d108      	bne.n	8015c5e <f_printf+0x3ca>
 8015c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c50:	1c5a      	adds	r2, r3, #1
 8015c52:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015c56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d8e8      	bhi.n	8015c30 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8015c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c62:	3b01      	subs	r3, #1
 8015c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015c68:	f107 020c 	add.w	r2, r7, #12
 8015c6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c70:	4413      	add	r3, r2
 8015c72:	781a      	ldrb	r2, [r3, #0]
 8015c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c78:	4611      	mov	r1, r2
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7ff fd92 	bl	80157a4 <putc_bfd>
		} while (i);
 8015c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d1ea      	bne.n	8015c5e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8015c88:	e007      	b.n	8015c9a <f_printf+0x406>
 8015c8a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8015c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c92:	4611      	mov	r1, r2
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff fd85 	bl	80157a4 <putc_bfd>
 8015c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c9e:	1c5a      	adds	r2, r3, #1
 8015ca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015ca4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d8ee      	bhi.n	8015c8a <f_printf+0x3f6>
		c = *fmt++;
 8015cac:	e600      	b.n	80158b0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8015cae:	bf00      	nop
 8015cb0:	e000      	b.n	8015cb4 <f_printf+0x420>
		if (!c) break;
 8015cb2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8015cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7ff fdb0 	bl	801581e <putc_flush>
 8015cbe:	4603      	mov	r3, r0
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	379c      	adds	r7, #156	; 0x9c
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015cca:	b003      	add	sp, #12
 8015ccc:	4770      	bx	lr
 8015cce:	bf00      	nop

08015cd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	b087      	sub	sp, #28
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	4613      	mov	r3, r2
 8015cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015ce6:	4b1f      	ldr	r3, [pc, #124]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015ce8:	7a5b      	ldrb	r3, [r3, #9]
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d131      	bne.n	8015d54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015cf0:	4b1c      	ldr	r3, [pc, #112]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015cf2:	7a5b      	ldrb	r3, [r3, #9]
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	4b1a      	ldr	r3, [pc, #104]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015cfe:	4b19      	ldr	r3, [pc, #100]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015d00:	7a5b      	ldrb	r3, [r3, #9]
 8015d02:	b2db      	uxtb	r3, r3
 8015d04:	4a17      	ldr	r2, [pc, #92]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015d06:	009b      	lsls	r3, r3, #2
 8015d08:	4413      	add	r3, r2
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015d0e:	4b15      	ldr	r3, [pc, #84]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015d10:	7a5b      	ldrb	r3, [r3, #9]
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	461a      	mov	r2, r3
 8015d16:	4b13      	ldr	r3, [pc, #76]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015d18:	4413      	add	r3, r2
 8015d1a:	79fa      	ldrb	r2, [r7, #7]
 8015d1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015d1e:	4b11      	ldr	r3, [pc, #68]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015d20:	7a5b      	ldrb	r3, [r3, #9]
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	1c5a      	adds	r2, r3, #1
 8015d26:	b2d1      	uxtb	r1, r2
 8015d28:	4a0e      	ldr	r2, [pc, #56]	; (8015d64 <FATFS_LinkDriverEx+0x94>)
 8015d2a:	7251      	strb	r1, [r2, #9]
 8015d2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015d2e:	7dbb      	ldrb	r3, [r7, #22]
 8015d30:	3330      	adds	r3, #48	; 0x30
 8015d32:	b2da      	uxtb	r2, r3
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	223a      	movs	r2, #58	; 0x3a
 8015d3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	3302      	adds	r3, #2
 8015d44:	222f      	movs	r2, #47	; 0x2f
 8015d46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	3303      	adds	r3, #3
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015d50:	2300      	movs	r3, #0
 8015d52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	371c      	adds	r7, #28
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop
 8015d64:	20000ee8 	.word	0x20000ee8

08015d68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b082      	sub	sp, #8
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015d72:	2200      	movs	r2, #0
 8015d74:	6839      	ldr	r1, [r7, #0]
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7ff ffaa 	bl	8015cd0 <FATFS_LinkDriverEx>
 8015d7c:	4603      	mov	r3, r0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3708      	adds	r7, #8
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
	...

08015d88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	4912      	ldr	r1, [pc, #72]	; (8015dd8 <MX_USB_DEVICE_Init+0x50>)
 8015d90:	4812      	ldr	r0, [pc, #72]	; (8015ddc <MX_USB_DEVICE_Init+0x54>)
 8015d92:	f7fb fe45 	bl	8011a20 <USBD_Init>
 8015d96:	4603      	mov	r3, r0
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d001      	beq.n	8015da0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015d9c:	f7ed f95c 	bl	8003058 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015da0:	490f      	ldr	r1, [pc, #60]	; (8015de0 <MX_USB_DEVICE_Init+0x58>)
 8015da2:	480e      	ldr	r0, [pc, #56]	; (8015ddc <MX_USB_DEVICE_Init+0x54>)
 8015da4:	f7fb fe6c 	bl	8011a80 <USBD_RegisterClass>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d001      	beq.n	8015db2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015dae:	f7ed f953 	bl	8003058 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015db2:	490c      	ldr	r1, [pc, #48]	; (8015de4 <MX_USB_DEVICE_Init+0x5c>)
 8015db4:	4809      	ldr	r0, [pc, #36]	; (8015ddc <MX_USB_DEVICE_Init+0x54>)
 8015db6:	f7fb fd5d 	bl	8011874 <USBD_CDC_RegisterInterface>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015dc0:	f7ed f94a 	bl	8003058 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015dc4:	4805      	ldr	r0, [pc, #20]	; (8015ddc <MX_USB_DEVICE_Init+0x54>)
 8015dc6:	f7fb fe91 	bl	8011aec <USBD_Start>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d001      	beq.n	8015dd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015dd0:	f7ed f942 	bl	8003058 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015dd4:	bf00      	nop
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	20000104 	.word	0x20000104
 8015ddc:	20000ef4 	.word	0x20000ef4
 8015de0:	20000070 	.word	0x20000070
 8015de4:	200000f0 	.word	0x200000f0

08015de8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015dec:	2200      	movs	r2, #0
 8015dee:	4905      	ldr	r1, [pc, #20]	; (8015e04 <CDC_Init_FS+0x1c>)
 8015df0:	4805      	ldr	r0, [pc, #20]	; (8015e08 <CDC_Init_FS+0x20>)
 8015df2:	f7fb fd59 	bl	80118a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015df6:	4905      	ldr	r1, [pc, #20]	; (8015e0c <CDC_Init_FS+0x24>)
 8015df8:	4803      	ldr	r0, [pc, #12]	; (8015e08 <CDC_Init_FS+0x20>)
 8015dfa:	f7fb fd77 	bl	80118ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015dfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	bd80      	pop	{r7, pc}
 8015e04:	200019d0 	.word	0x200019d0
 8015e08:	20000ef4 	.word	0x20000ef4
 8015e0c:	200011d0 	.word	0x200011d0

08015e10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015e10:	b480      	push	{r7}
 8015e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015e14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1e:	4770      	bx	lr

08015e20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	4603      	mov	r3, r0
 8015e28:	6039      	str	r1, [r7, #0]
 8015e2a:	71fb      	strb	r3, [r7, #7]
 8015e2c:	4613      	mov	r3, r2
 8015e2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015e30:	79fb      	ldrb	r3, [r7, #7]
 8015e32:	2b23      	cmp	r3, #35	; 0x23
 8015e34:	d84a      	bhi.n	8015ecc <CDC_Control_FS+0xac>
 8015e36:	a201      	add	r2, pc, #4	; (adr r2, 8015e3c <CDC_Control_FS+0x1c>)
 8015e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e3c:	08015ecd 	.word	0x08015ecd
 8015e40:	08015ecd 	.word	0x08015ecd
 8015e44:	08015ecd 	.word	0x08015ecd
 8015e48:	08015ecd 	.word	0x08015ecd
 8015e4c:	08015ecd 	.word	0x08015ecd
 8015e50:	08015ecd 	.word	0x08015ecd
 8015e54:	08015ecd 	.word	0x08015ecd
 8015e58:	08015ecd 	.word	0x08015ecd
 8015e5c:	08015ecd 	.word	0x08015ecd
 8015e60:	08015ecd 	.word	0x08015ecd
 8015e64:	08015ecd 	.word	0x08015ecd
 8015e68:	08015ecd 	.word	0x08015ecd
 8015e6c:	08015ecd 	.word	0x08015ecd
 8015e70:	08015ecd 	.word	0x08015ecd
 8015e74:	08015ecd 	.word	0x08015ecd
 8015e78:	08015ecd 	.word	0x08015ecd
 8015e7c:	08015ecd 	.word	0x08015ecd
 8015e80:	08015ecd 	.word	0x08015ecd
 8015e84:	08015ecd 	.word	0x08015ecd
 8015e88:	08015ecd 	.word	0x08015ecd
 8015e8c:	08015ecd 	.word	0x08015ecd
 8015e90:	08015ecd 	.word	0x08015ecd
 8015e94:	08015ecd 	.word	0x08015ecd
 8015e98:	08015ecd 	.word	0x08015ecd
 8015e9c:	08015ecd 	.word	0x08015ecd
 8015ea0:	08015ecd 	.word	0x08015ecd
 8015ea4:	08015ecd 	.word	0x08015ecd
 8015ea8:	08015ecd 	.word	0x08015ecd
 8015eac:	08015ecd 	.word	0x08015ecd
 8015eb0:	08015ecd 	.word	0x08015ecd
 8015eb4:	08015ecd 	.word	0x08015ecd
 8015eb8:	08015ecd 	.word	0x08015ecd
 8015ebc:	08015ecd 	.word	0x08015ecd
 8015ec0:	08015ecd 	.word	0x08015ecd
 8015ec4:	08015ecd 	.word	0x08015ecd
 8015ec8:	08015ecd 	.word	0x08015ecd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015ecc:	bf00      	nop
  }

  return (USBD_OK);
 8015ece:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	370c      	adds	r7, #12
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eda:	4770      	bx	lr

08015edc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015ee6:	6879      	ldr	r1, [r7, #4]
 8015ee8:	4805      	ldr	r0, [pc, #20]	; (8015f00 <CDC_Receive_FS+0x24>)
 8015eea:	f7fb fcff 	bl	80118ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015eee:	4804      	ldr	r0, [pc, #16]	; (8015f00 <CDC_Receive_FS+0x24>)
 8015ef0:	f7fb fd60 	bl	80119b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015ef4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3708      	adds	r7, #8
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	20000ef4 	.word	0x20000ef4

08015f04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015f10:	2300      	movs	r3, #0
 8015f12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015f14:	4b0d      	ldr	r3, [pc, #52]	; (8015f4c <CDC_Transmit_FS+0x48>)
 8015f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015f1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015f26:	2301      	movs	r3, #1
 8015f28:	e00b      	b.n	8015f42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015f2a:	887b      	ldrh	r3, [r7, #2]
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	6879      	ldr	r1, [r7, #4]
 8015f30:	4806      	ldr	r0, [pc, #24]	; (8015f4c <CDC_Transmit_FS+0x48>)
 8015f32:	f7fb fcb9 	bl	80118a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015f36:	4805      	ldr	r0, [pc, #20]	; (8015f4c <CDC_Transmit_FS+0x48>)
 8015f38:	f7fb fcf6 	bl	8011928 <USBD_CDC_TransmitPacket>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f42:	4618      	mov	r0, r3
 8015f44:	3710      	adds	r7, #16
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
 8015f4a:	bf00      	nop
 8015f4c:	20000ef4 	.word	0x20000ef4

08015f50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015f50:	b480      	push	{r7}
 8015f52:	b087      	sub	sp, #28
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	4613      	mov	r3, r2
 8015f5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	371c      	adds	r7, #28
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f70:	4770      	bx	lr
	...

08015f74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	6039      	str	r1, [r7, #0]
 8015f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	2212      	movs	r2, #18
 8015f84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015f86:	4b03      	ldr	r3, [pc, #12]	; (8015f94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	370c      	adds	r7, #12
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f92:	4770      	bx	lr
 8015f94:	20000120 	.word	0x20000120

08015f98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	6039      	str	r1, [r7, #0]
 8015fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015fa4:	683b      	ldr	r3, [r7, #0]
 8015fa6:	2204      	movs	r2, #4
 8015fa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015faa:	4b03      	ldr	r3, [pc, #12]	; (8015fb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	370c      	adds	r7, #12
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb6:	4770      	bx	lr
 8015fb8:	20000134 	.word	0x20000134

08015fbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	6039      	str	r1, [r7, #0]
 8015fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015fc8:	79fb      	ldrb	r3, [r7, #7]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d105      	bne.n	8015fda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	4907      	ldr	r1, [pc, #28]	; (8015ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8015fd2:	4808      	ldr	r0, [pc, #32]	; (8015ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8015fd4:	f7fc ff36 	bl	8012e44 <USBD_GetString>
 8015fd8:	e004      	b.n	8015fe4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015fda:	683a      	ldr	r2, [r7, #0]
 8015fdc:	4904      	ldr	r1, [pc, #16]	; (8015ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8015fde:	4805      	ldr	r0, [pc, #20]	; (8015ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8015fe0:	f7fc ff30 	bl	8012e44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015fe4:	4b02      	ldr	r3, [pc, #8]	; (8015ff0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3708      	adds	r7, #8
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	200021d0 	.word	0x200021d0
 8015ff4:	0801c760 	.word	0x0801c760

08015ff8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	4603      	mov	r3, r0
 8016000:	6039      	str	r1, [r7, #0]
 8016002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016004:	683a      	ldr	r2, [r7, #0]
 8016006:	4904      	ldr	r1, [pc, #16]	; (8016018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016008:	4804      	ldr	r0, [pc, #16]	; (801601c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801600a:	f7fc ff1b 	bl	8012e44 <USBD_GetString>
  return USBD_StrDesc;
 801600e:	4b02      	ldr	r3, [pc, #8]	; (8016018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016010:	4618      	mov	r0, r3
 8016012:	3708      	adds	r7, #8
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}
 8016018:	200021d0 	.word	0x200021d0
 801601c:	0801c778 	.word	0x0801c778

08016020 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	4603      	mov	r3, r0
 8016028:	6039      	str	r1, [r7, #0]
 801602a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	221a      	movs	r2, #26
 8016030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016032:	f000 f843 	bl	80160bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016036:	4b02      	ldr	r3, [pc, #8]	; (8016040 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016038:	4618      	mov	r0, r3
 801603a:	3708      	adds	r7, #8
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}
 8016040:	20000138 	.word	0x20000138

08016044 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b082      	sub	sp, #8
 8016048:	af00      	add	r7, sp, #0
 801604a:	4603      	mov	r3, r0
 801604c:	6039      	str	r1, [r7, #0]
 801604e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016050:	79fb      	ldrb	r3, [r7, #7]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d105      	bne.n	8016062 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016056:	683a      	ldr	r2, [r7, #0]
 8016058:	4907      	ldr	r1, [pc, #28]	; (8016078 <USBD_FS_ConfigStrDescriptor+0x34>)
 801605a:	4808      	ldr	r0, [pc, #32]	; (801607c <USBD_FS_ConfigStrDescriptor+0x38>)
 801605c:	f7fc fef2 	bl	8012e44 <USBD_GetString>
 8016060:	e004      	b.n	801606c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016062:	683a      	ldr	r2, [r7, #0]
 8016064:	4904      	ldr	r1, [pc, #16]	; (8016078 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016066:	4805      	ldr	r0, [pc, #20]	; (801607c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016068:	f7fc feec 	bl	8012e44 <USBD_GetString>
  }
  return USBD_StrDesc;
 801606c:	4b02      	ldr	r3, [pc, #8]	; (8016078 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801606e:	4618      	mov	r0, r3
 8016070:	3708      	adds	r7, #8
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	200021d0 	.word	0x200021d0
 801607c:	0801c78c 	.word	0x0801c78c

08016080 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	4603      	mov	r3, r0
 8016088:	6039      	str	r1, [r7, #0]
 801608a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801608c:	79fb      	ldrb	r3, [r7, #7]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d105      	bne.n	801609e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016092:	683a      	ldr	r2, [r7, #0]
 8016094:	4907      	ldr	r1, [pc, #28]	; (80160b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016096:	4808      	ldr	r0, [pc, #32]	; (80160b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016098:	f7fc fed4 	bl	8012e44 <USBD_GetString>
 801609c:	e004      	b.n	80160a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801609e:	683a      	ldr	r2, [r7, #0]
 80160a0:	4904      	ldr	r1, [pc, #16]	; (80160b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80160a2:	4805      	ldr	r0, [pc, #20]	; (80160b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80160a4:	f7fc fece 	bl	8012e44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80160a8:	4b02      	ldr	r3, [pc, #8]	; (80160b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3708      	adds	r7, #8
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	200021d0 	.word	0x200021d0
 80160b8:	0801c798 	.word	0x0801c798

080160bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80160c2:	4b0f      	ldr	r3, [pc, #60]	; (8016100 <Get_SerialNum+0x44>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80160c8:	4b0e      	ldr	r3, [pc, #56]	; (8016104 <Get_SerialNum+0x48>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80160ce:	4b0e      	ldr	r3, [pc, #56]	; (8016108 <Get_SerialNum+0x4c>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80160d4:	68fa      	ldr	r2, [r7, #12]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	4413      	add	r3, r2
 80160da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d009      	beq.n	80160f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80160e2:	2208      	movs	r2, #8
 80160e4:	4909      	ldr	r1, [pc, #36]	; (801610c <Get_SerialNum+0x50>)
 80160e6:	68f8      	ldr	r0, [r7, #12]
 80160e8:	f000 f814 	bl	8016114 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80160ec:	2204      	movs	r2, #4
 80160ee:	4908      	ldr	r1, [pc, #32]	; (8016110 <Get_SerialNum+0x54>)
 80160f0:	68b8      	ldr	r0, [r7, #8]
 80160f2:	f000 f80f 	bl	8016114 <IntToUnicode>
  }
}
 80160f6:	bf00      	nop
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	1fff7a10 	.word	0x1fff7a10
 8016104:	1fff7a14 	.word	0x1fff7a14
 8016108:	1fff7a18 	.word	0x1fff7a18
 801610c:	2000013a 	.word	0x2000013a
 8016110:	2000014a 	.word	0x2000014a

08016114 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016114:	b480      	push	{r7}
 8016116:	b087      	sub	sp, #28
 8016118:	af00      	add	r7, sp, #0
 801611a:	60f8      	str	r0, [r7, #12]
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	4613      	mov	r3, r2
 8016120:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016122:	2300      	movs	r3, #0
 8016124:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016126:	2300      	movs	r3, #0
 8016128:	75fb      	strb	r3, [r7, #23]
 801612a:	e027      	b.n	801617c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	0f1b      	lsrs	r3, r3, #28
 8016130:	2b09      	cmp	r3, #9
 8016132:	d80b      	bhi.n	801614c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	0f1b      	lsrs	r3, r3, #28
 8016138:	b2da      	uxtb	r2, r3
 801613a:	7dfb      	ldrb	r3, [r7, #23]
 801613c:	005b      	lsls	r3, r3, #1
 801613e:	4619      	mov	r1, r3
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	440b      	add	r3, r1
 8016144:	3230      	adds	r2, #48	; 0x30
 8016146:	b2d2      	uxtb	r2, r2
 8016148:	701a      	strb	r2, [r3, #0]
 801614a:	e00a      	b.n	8016162 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	0f1b      	lsrs	r3, r3, #28
 8016150:	b2da      	uxtb	r2, r3
 8016152:	7dfb      	ldrb	r3, [r7, #23]
 8016154:	005b      	lsls	r3, r3, #1
 8016156:	4619      	mov	r1, r3
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	440b      	add	r3, r1
 801615c:	3237      	adds	r2, #55	; 0x37
 801615e:	b2d2      	uxtb	r2, r2
 8016160:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	011b      	lsls	r3, r3, #4
 8016166:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016168:	7dfb      	ldrb	r3, [r7, #23]
 801616a:	005b      	lsls	r3, r3, #1
 801616c:	3301      	adds	r3, #1
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	4413      	add	r3, r2
 8016172:	2200      	movs	r2, #0
 8016174:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016176:	7dfb      	ldrb	r3, [r7, #23]
 8016178:	3301      	adds	r3, #1
 801617a:	75fb      	strb	r3, [r7, #23]
 801617c:	7dfa      	ldrb	r2, [r7, #23]
 801617e:	79fb      	ldrb	r3, [r7, #7]
 8016180:	429a      	cmp	r2, r3
 8016182:	d3d3      	bcc.n	801612c <IntToUnicode+0x18>
  }
}
 8016184:	bf00      	nop
 8016186:	bf00      	nop
 8016188:	371c      	adds	r7, #28
 801618a:	46bd      	mov	sp, r7
 801618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016190:	4770      	bx	lr
	...

08016194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b08a      	sub	sp, #40	; 0x28
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801619c:	f107 0314 	add.w	r3, r7, #20
 80161a0:	2200      	movs	r2, #0
 80161a2:	601a      	str	r2, [r3, #0]
 80161a4:	605a      	str	r2, [r3, #4]
 80161a6:	609a      	str	r2, [r3, #8]
 80161a8:	60da      	str	r2, [r3, #12]
 80161aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80161b4:	d13a      	bne.n	801622c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161b6:	2300      	movs	r3, #0
 80161b8:	613b      	str	r3, [r7, #16]
 80161ba:	4b1e      	ldr	r3, [pc, #120]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 80161bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161be:	4a1d      	ldr	r2, [pc, #116]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 80161c0:	f043 0301 	orr.w	r3, r3, #1
 80161c4:	6313      	str	r3, [r2, #48]	; 0x30
 80161c6:	4b1b      	ldr	r3, [pc, #108]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 80161c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ca:	f003 0301 	and.w	r3, r3, #1
 80161ce:	613b      	str	r3, [r7, #16]
 80161d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80161d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80161d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161d8:	2302      	movs	r3, #2
 80161da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161dc:	2300      	movs	r3, #0
 80161de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161e0:	2303      	movs	r3, #3
 80161e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80161e4:	230a      	movs	r3, #10
 80161e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80161e8:	f107 0314 	add.w	r3, r7, #20
 80161ec:	4619      	mov	r1, r3
 80161ee:	4812      	ldr	r0, [pc, #72]	; (8016238 <HAL_PCD_MspInit+0xa4>)
 80161f0:	f7f0 fba0 	bl	8006934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80161f4:	4b0f      	ldr	r3, [pc, #60]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 80161f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161f8:	4a0e      	ldr	r2, [pc, #56]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 80161fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161fe:	6353      	str	r3, [r2, #52]	; 0x34
 8016200:	2300      	movs	r3, #0
 8016202:	60fb      	str	r3, [r7, #12]
 8016204:	4b0b      	ldr	r3, [pc, #44]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 8016206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016208:	4a0a      	ldr	r2, [pc, #40]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 801620a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801620e:	6453      	str	r3, [r2, #68]	; 0x44
 8016210:	4b08      	ldr	r3, [pc, #32]	; (8016234 <HAL_PCD_MspInit+0xa0>)
 8016212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016218:	60fb      	str	r3, [r7, #12]
 801621a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801621c:	2200      	movs	r2, #0
 801621e:	2100      	movs	r1, #0
 8016220:	2043      	movs	r0, #67	; 0x43
 8016222:	f7ef ff34 	bl	800608e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016226:	2043      	movs	r0, #67	; 0x43
 8016228:	f7ef ff4d 	bl	80060c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801622c:	bf00      	nop
 801622e:	3728      	adds	r7, #40	; 0x28
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	40023800 	.word	0x40023800
 8016238:	40020000 	.word	0x40020000

0801623c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016250:	4619      	mov	r1, r3
 8016252:	4610      	mov	r0, r2
 8016254:	f7fb fc97 	bl	8011b86 <USBD_LL_SetupStage>
}
 8016258:	bf00      	nop
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b082      	sub	sp, #8
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	460b      	mov	r3, r1
 801626a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016272:	78fa      	ldrb	r2, [r7, #3]
 8016274:	6879      	ldr	r1, [r7, #4]
 8016276:	4613      	mov	r3, r2
 8016278:	00db      	lsls	r3, r3, #3
 801627a:	4413      	add	r3, r2
 801627c:	009b      	lsls	r3, r3, #2
 801627e:	440b      	add	r3, r1
 8016280:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	78fb      	ldrb	r3, [r7, #3]
 8016288:	4619      	mov	r1, r3
 801628a:	f7fb fcd1 	bl	8011c30 <USBD_LL_DataOutStage>
}
 801628e:	bf00      	nop
 8016290:	3708      	adds	r7, #8
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}

08016296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016296:	b580      	push	{r7, lr}
 8016298:	b082      	sub	sp, #8
 801629a:	af00      	add	r7, sp, #0
 801629c:	6078      	str	r0, [r7, #4]
 801629e:	460b      	mov	r3, r1
 80162a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80162a8:	78fa      	ldrb	r2, [r7, #3]
 80162aa:	6879      	ldr	r1, [r7, #4]
 80162ac:	4613      	mov	r3, r2
 80162ae:	00db      	lsls	r3, r3, #3
 80162b0:	4413      	add	r3, r2
 80162b2:	009b      	lsls	r3, r3, #2
 80162b4:	440b      	add	r3, r1
 80162b6:	334c      	adds	r3, #76	; 0x4c
 80162b8:	681a      	ldr	r2, [r3, #0]
 80162ba:	78fb      	ldrb	r3, [r7, #3]
 80162bc:	4619      	mov	r1, r3
 80162be:	f7fb fd6a 	bl	8011d96 <USBD_LL_DataInStage>
}
 80162c2:	bf00      	nop
 80162c4:	3708      	adds	r7, #8
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}

080162ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162ca:	b580      	push	{r7, lr}
 80162cc:	b082      	sub	sp, #8
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80162d8:	4618      	mov	r0, r3
 80162da:	f7fb fe9e 	bl	801201a <USBD_LL_SOF>
}
 80162de:	bf00      	nop
 80162e0:	3708      	adds	r7, #8
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}

080162e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162e6:	b580      	push	{r7, lr}
 80162e8:	b084      	sub	sp, #16
 80162ea:	af00      	add	r7, sp, #0
 80162ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80162ee:	2301      	movs	r3, #1
 80162f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d102      	bne.n	8016300 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80162fa:	2300      	movs	r3, #0
 80162fc:	73fb      	strb	r3, [r7, #15]
 80162fe:	e008      	b.n	8016312 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	2b02      	cmp	r3, #2
 8016306:	d102      	bne.n	801630e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016308:	2301      	movs	r3, #1
 801630a:	73fb      	strb	r3, [r7, #15]
 801630c:	e001      	b.n	8016312 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801630e:	f7ec fea3 	bl	8003058 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016318:	7bfa      	ldrb	r2, [r7, #15]
 801631a:	4611      	mov	r1, r2
 801631c:	4618      	mov	r0, r3
 801631e:	f7fb fe3e 	bl	8011f9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016328:	4618      	mov	r0, r3
 801632a:	f7fb fde6 	bl	8011efa <USBD_LL_Reset>
}
 801632e:	bf00      	nop
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
	...

08016338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b082      	sub	sp, #8
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016346:	4618      	mov	r0, r3
 8016348:	f7fb fe39 	bl	8011fbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	687a      	ldr	r2, [r7, #4]
 8016358:	6812      	ldr	r2, [r2, #0]
 801635a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801635e:	f043 0301 	orr.w	r3, r3, #1
 8016362:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6a1b      	ldr	r3, [r3, #32]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d005      	beq.n	8016378 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801636c:	4b04      	ldr	r3, [pc, #16]	; (8016380 <HAL_PCD_SuspendCallback+0x48>)
 801636e:	691b      	ldr	r3, [r3, #16]
 8016370:	4a03      	ldr	r2, [pc, #12]	; (8016380 <HAL_PCD_SuspendCallback+0x48>)
 8016372:	f043 0306 	orr.w	r3, r3, #6
 8016376:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016378:	bf00      	nop
 801637a:	3708      	adds	r7, #8
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}
 8016380:	e000ed00 	.word	0xe000ed00

08016384 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016392:	4618      	mov	r0, r3
 8016394:	f7fb fe29 	bl	8011fea <USBD_LL_Resume>
}
 8016398:	bf00      	nop
 801639a:	3708      	adds	r7, #8
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}

080163a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	460b      	mov	r3, r1
 80163aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80163b2:	78fa      	ldrb	r2, [r7, #3]
 80163b4:	4611      	mov	r1, r2
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7fb fe81 	bl	80120be <USBD_LL_IsoOUTIncomplete>
}
 80163bc:	bf00      	nop
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	460b      	mov	r3, r1
 80163ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80163d6:	78fa      	ldrb	r2, [r7, #3]
 80163d8:	4611      	mov	r1, r2
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fb fe3d 	bl	801205a <USBD_LL_IsoINIncomplete>
}
 80163e0:	bf00      	nop
 80163e2:	3708      	adds	r7, #8
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}

080163e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7fb fe93 	bl	8012122 <USBD_LL_DevConnected>
}
 80163fc:	bf00      	nop
 80163fe:	3708      	adds	r7, #8
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}

08016404 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b082      	sub	sp, #8
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016412:	4618      	mov	r0, r3
 8016414:	f7fb fe90 	bl	8012138 <USBD_LL_DevDisconnected>
}
 8016418:	bf00      	nop
 801641a:	3708      	adds	r7, #8
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}

08016420 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d13c      	bne.n	80164aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016430:	4a20      	ldr	r2, [pc, #128]	; (80164b4 <USBD_LL_Init+0x94>)
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	4a1e      	ldr	r2, [pc, #120]	; (80164b4 <USBD_LL_Init+0x94>)
 801643c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016440:	4b1c      	ldr	r3, [pc, #112]	; (80164b4 <USBD_LL_Init+0x94>)
 8016442:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016446:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016448:	4b1a      	ldr	r3, [pc, #104]	; (80164b4 <USBD_LL_Init+0x94>)
 801644a:	2204      	movs	r2, #4
 801644c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801644e:	4b19      	ldr	r3, [pc, #100]	; (80164b4 <USBD_LL_Init+0x94>)
 8016450:	2202      	movs	r2, #2
 8016452:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016454:	4b17      	ldr	r3, [pc, #92]	; (80164b4 <USBD_LL_Init+0x94>)
 8016456:	2200      	movs	r2, #0
 8016458:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801645a:	4b16      	ldr	r3, [pc, #88]	; (80164b4 <USBD_LL_Init+0x94>)
 801645c:	2202      	movs	r2, #2
 801645e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016460:	4b14      	ldr	r3, [pc, #80]	; (80164b4 <USBD_LL_Init+0x94>)
 8016462:	2200      	movs	r2, #0
 8016464:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016466:	4b13      	ldr	r3, [pc, #76]	; (80164b4 <USBD_LL_Init+0x94>)
 8016468:	2200      	movs	r2, #0
 801646a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801646c:	4b11      	ldr	r3, [pc, #68]	; (80164b4 <USBD_LL_Init+0x94>)
 801646e:	2200      	movs	r2, #0
 8016470:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016472:	4b10      	ldr	r3, [pc, #64]	; (80164b4 <USBD_LL_Init+0x94>)
 8016474:	2200      	movs	r2, #0
 8016476:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016478:	4b0e      	ldr	r3, [pc, #56]	; (80164b4 <USBD_LL_Init+0x94>)
 801647a:	2200      	movs	r2, #0
 801647c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801647e:	480d      	ldr	r0, [pc, #52]	; (80164b4 <USBD_LL_Init+0x94>)
 8016480:	f7f3 f870 	bl	8009564 <HAL_PCD_Init>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	d001      	beq.n	801648e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801648a:	f7ec fde5 	bl	8003058 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801648e:	2180      	movs	r1, #128	; 0x80
 8016490:	4808      	ldr	r0, [pc, #32]	; (80164b4 <USBD_LL_Init+0x94>)
 8016492:	f7f4 fac8 	bl	800aa26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016496:	2240      	movs	r2, #64	; 0x40
 8016498:	2100      	movs	r1, #0
 801649a:	4806      	ldr	r0, [pc, #24]	; (80164b4 <USBD_LL_Init+0x94>)
 801649c:	f7f4 fa7c 	bl	800a998 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80164a0:	2280      	movs	r2, #128	; 0x80
 80164a2:	2101      	movs	r1, #1
 80164a4:	4803      	ldr	r0, [pc, #12]	; (80164b4 <USBD_LL_Init+0x94>)
 80164a6:	f7f4 fa77 	bl	800a998 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80164aa:	2300      	movs	r3, #0
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3708      	adds	r7, #8
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	200023d0 	.word	0x200023d0

080164b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164c0:	2300      	movs	r3, #0
 80164c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164c4:	2300      	movs	r3, #0
 80164c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7f3 f965 	bl	800979e <HAL_PCD_Start>
 80164d4:	4603      	mov	r3, r0
 80164d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164d8:	7bfb      	ldrb	r3, [r7, #15]
 80164da:	4618      	mov	r0, r3
 80164dc:	f000 f942 	bl	8016764 <USBD_Get_USB_Status>
 80164e0:	4603      	mov	r3, r0
 80164e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80164e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b084      	sub	sp, #16
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	4608      	mov	r0, r1
 80164f8:	4611      	mov	r1, r2
 80164fa:	461a      	mov	r2, r3
 80164fc:	4603      	mov	r3, r0
 80164fe:	70fb      	strb	r3, [r7, #3]
 8016500:	460b      	mov	r3, r1
 8016502:	70bb      	strb	r3, [r7, #2]
 8016504:	4613      	mov	r3, r2
 8016506:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016508:	2300      	movs	r3, #0
 801650a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801650c:	2300      	movs	r3, #0
 801650e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016516:	78bb      	ldrb	r3, [r7, #2]
 8016518:	883a      	ldrh	r2, [r7, #0]
 801651a:	78f9      	ldrb	r1, [r7, #3]
 801651c:	f7f3 fe36 	bl	800a18c <HAL_PCD_EP_Open>
 8016520:	4603      	mov	r3, r0
 8016522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016524:	7bfb      	ldrb	r3, [r7, #15]
 8016526:	4618      	mov	r0, r3
 8016528:	f000 f91c 	bl	8016764 <USBD_Get_USB_Status>
 801652c:	4603      	mov	r3, r0
 801652e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016530:	7bbb      	ldrb	r3, [r7, #14]
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}

0801653a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801653a:	b580      	push	{r7, lr}
 801653c:	b084      	sub	sp, #16
 801653e:	af00      	add	r7, sp, #0
 8016540:	6078      	str	r0, [r7, #4]
 8016542:	460b      	mov	r3, r1
 8016544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016546:	2300      	movs	r3, #0
 8016548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801654a:	2300      	movs	r3, #0
 801654c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016554:	78fa      	ldrb	r2, [r7, #3]
 8016556:	4611      	mov	r1, r2
 8016558:	4618      	mov	r0, r3
 801655a:	f7f3 fe7f 	bl	800a25c <HAL_PCD_EP_Close>
 801655e:	4603      	mov	r3, r0
 8016560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016562:	7bfb      	ldrb	r3, [r7, #15]
 8016564:	4618      	mov	r0, r3
 8016566:	f000 f8fd 	bl	8016764 <USBD_Get_USB_Status>
 801656a:	4603      	mov	r3, r0
 801656c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801656e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016570:	4618      	mov	r0, r3
 8016572:	3710      	adds	r7, #16
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}

08016578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
 8016580:	460b      	mov	r3, r1
 8016582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016584:	2300      	movs	r3, #0
 8016586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016588:	2300      	movs	r3, #0
 801658a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016592:	78fa      	ldrb	r2, [r7, #3]
 8016594:	4611      	mov	r1, r2
 8016596:	4618      	mov	r0, r3
 8016598:	f7f3 ff57 	bl	800a44a <HAL_PCD_EP_SetStall>
 801659c:	4603      	mov	r3, r0
 801659e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165a0:	7bfb      	ldrb	r3, [r7, #15]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f000 f8de 	bl	8016764 <USBD_Get_USB_Status>
 80165a8:	4603      	mov	r3, r0
 80165aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3710      	adds	r7, #16
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}

080165b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165b6:	b580      	push	{r7, lr}
 80165b8:	b084      	sub	sp, #16
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]
 80165be:	460b      	mov	r3, r1
 80165c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165c2:	2300      	movs	r3, #0
 80165c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165c6:	2300      	movs	r3, #0
 80165c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80165d0:	78fa      	ldrb	r2, [r7, #3]
 80165d2:	4611      	mov	r1, r2
 80165d4:	4618      	mov	r0, r3
 80165d6:	f7f3 ff9c 	bl	800a512 <HAL_PCD_EP_ClrStall>
 80165da:	4603      	mov	r3, r0
 80165dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165de:	7bfb      	ldrb	r3, [r7, #15]
 80165e0:	4618      	mov	r0, r3
 80165e2:	f000 f8bf 	bl	8016764 <USBD_Get_USB_Status>
 80165e6:	4603      	mov	r3, r0
 80165e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3710      	adds	r7, #16
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165f4:	b480      	push	{r7}
 80165f6:	b085      	sub	sp, #20
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	460b      	mov	r3, r1
 80165fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016606:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801660c:	2b00      	cmp	r3, #0
 801660e:	da0b      	bge.n	8016628 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016610:	78fb      	ldrb	r3, [r7, #3]
 8016612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016616:	68f9      	ldr	r1, [r7, #12]
 8016618:	4613      	mov	r3, r2
 801661a:	00db      	lsls	r3, r3, #3
 801661c:	4413      	add	r3, r2
 801661e:	009b      	lsls	r3, r3, #2
 8016620:	440b      	add	r3, r1
 8016622:	333e      	adds	r3, #62	; 0x3e
 8016624:	781b      	ldrb	r3, [r3, #0]
 8016626:	e00b      	b.n	8016640 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016628:	78fb      	ldrb	r3, [r7, #3]
 801662a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801662e:	68f9      	ldr	r1, [r7, #12]
 8016630:	4613      	mov	r3, r2
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	4413      	add	r3, r2
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	440b      	add	r3, r1
 801663a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801663e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016640:	4618      	mov	r0, r3
 8016642:	3714      	adds	r7, #20
 8016644:	46bd      	mov	sp, r7
 8016646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664a:	4770      	bx	lr

0801664c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b084      	sub	sp, #16
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	460b      	mov	r3, r1
 8016656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016658:	2300      	movs	r3, #0
 801665a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801665c:	2300      	movs	r3, #0
 801665e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016666:	78fa      	ldrb	r2, [r7, #3]
 8016668:	4611      	mov	r1, r2
 801666a:	4618      	mov	r0, r3
 801666c:	f7f3 fd69 	bl	800a142 <HAL_PCD_SetAddress>
 8016670:	4603      	mov	r3, r0
 8016672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016674:	7bfb      	ldrb	r3, [r7, #15]
 8016676:	4618      	mov	r0, r3
 8016678:	f000 f874 	bl	8016764 <USBD_Get_USB_Status>
 801667c:	4603      	mov	r3, r0
 801667e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016680:	7bbb      	ldrb	r3, [r7, #14]
}
 8016682:	4618      	mov	r0, r3
 8016684:	3710      	adds	r7, #16
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}

0801668a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801668a:	b580      	push	{r7, lr}
 801668c:	b086      	sub	sp, #24
 801668e:	af00      	add	r7, sp, #0
 8016690:	60f8      	str	r0, [r7, #12]
 8016692:	607a      	str	r2, [r7, #4]
 8016694:	603b      	str	r3, [r7, #0]
 8016696:	460b      	mov	r3, r1
 8016698:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801669a:	2300      	movs	r3, #0
 801669c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801669e:	2300      	movs	r3, #0
 80166a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80166a8:	7af9      	ldrb	r1, [r7, #11]
 80166aa:	683b      	ldr	r3, [r7, #0]
 80166ac:	687a      	ldr	r2, [r7, #4]
 80166ae:	f7f3 fe82 	bl	800a3b6 <HAL_PCD_EP_Transmit>
 80166b2:	4603      	mov	r3, r0
 80166b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166b6:	7dfb      	ldrb	r3, [r7, #23]
 80166b8:	4618      	mov	r0, r3
 80166ba:	f000 f853 	bl	8016764 <USBD_Get_USB_Status>
 80166be:	4603      	mov	r3, r0
 80166c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80166c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	3718      	adds	r7, #24
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}

080166cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	60f8      	str	r0, [r7, #12]
 80166d4:	607a      	str	r2, [r7, #4]
 80166d6:	603b      	str	r3, [r7, #0]
 80166d8:	460b      	mov	r3, r1
 80166da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166dc:	2300      	movs	r3, #0
 80166de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166e0:	2300      	movs	r3, #0
 80166e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80166ea:	7af9      	ldrb	r1, [r7, #11]
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	f7f3 fdfe 	bl	800a2f0 <HAL_PCD_EP_Receive>
 80166f4:	4603      	mov	r3, r0
 80166f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166f8:	7dfb      	ldrb	r3, [r7, #23]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f000 f832 	bl	8016764 <USBD_Get_USB_Status>
 8016700:	4603      	mov	r3, r0
 8016702:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016704:	7dbb      	ldrb	r3, [r7, #22]
}
 8016706:	4618      	mov	r0, r3
 8016708:	3718      	adds	r7, #24
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}

0801670e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801670e:	b580      	push	{r7, lr}
 8016710:	b082      	sub	sp, #8
 8016712:	af00      	add	r7, sp, #0
 8016714:	6078      	str	r0, [r7, #4]
 8016716:	460b      	mov	r3, r1
 8016718:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016720:	78fa      	ldrb	r2, [r7, #3]
 8016722:	4611      	mov	r1, r2
 8016724:	4618      	mov	r0, r3
 8016726:	f7f3 fe2e 	bl	800a386 <HAL_PCD_EP_GetRxCount>
 801672a:	4603      	mov	r3, r0
}
 801672c:	4618      	mov	r0, r3
 801672e:	3708      	adds	r7, #8
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}

08016734 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016734:	b480      	push	{r7}
 8016736:	b083      	sub	sp, #12
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801673c:	4b03      	ldr	r3, [pc, #12]	; (801674c <USBD_static_malloc+0x18>)
}
 801673e:	4618      	mov	r0, r3
 8016740:	370c      	adds	r7, #12
 8016742:	46bd      	mov	sp, r7
 8016744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016748:	4770      	bx	lr
 801674a:	bf00      	nop
 801674c:	200028dc 	.word	0x200028dc

08016750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]

}
 8016758:	bf00      	nop
 801675a:	370c      	adds	r7, #12
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr

08016764 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016764:	b480      	push	{r7}
 8016766:	b085      	sub	sp, #20
 8016768:	af00      	add	r7, sp, #0
 801676a:	4603      	mov	r3, r0
 801676c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801676e:	2300      	movs	r3, #0
 8016770:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016772:	79fb      	ldrb	r3, [r7, #7]
 8016774:	2b03      	cmp	r3, #3
 8016776:	d817      	bhi.n	80167a8 <USBD_Get_USB_Status+0x44>
 8016778:	a201      	add	r2, pc, #4	; (adr r2, 8016780 <USBD_Get_USB_Status+0x1c>)
 801677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801677e:	bf00      	nop
 8016780:	08016791 	.word	0x08016791
 8016784:	08016797 	.word	0x08016797
 8016788:	0801679d 	.word	0x0801679d
 801678c:	080167a3 	.word	0x080167a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016790:	2300      	movs	r3, #0
 8016792:	73fb      	strb	r3, [r7, #15]
    break;
 8016794:	e00b      	b.n	80167ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016796:	2303      	movs	r3, #3
 8016798:	73fb      	strb	r3, [r7, #15]
    break;
 801679a:	e008      	b.n	80167ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801679c:	2301      	movs	r3, #1
 801679e:	73fb      	strb	r3, [r7, #15]
    break;
 80167a0:	e005      	b.n	80167ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80167a2:	2303      	movs	r3, #3
 80167a4:	73fb      	strb	r3, [r7, #15]
    break;
 80167a6:	e002      	b.n	80167ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80167a8:	2303      	movs	r3, #3
 80167aa:	73fb      	strb	r3, [r7, #15]
    break;
 80167ac:	bf00      	nop
  }
  return usb_status;
 80167ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	3714      	adds	r7, #20
 80167b4:	46bd      	mov	sp, r7
 80167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ba:	4770      	bx	lr

080167bc <__assert_func>:
 80167bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167be:	4614      	mov	r4, r2
 80167c0:	461a      	mov	r2, r3
 80167c2:	4b09      	ldr	r3, [pc, #36]	; (80167e8 <__assert_func+0x2c>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	4605      	mov	r5, r0
 80167c8:	68d8      	ldr	r0, [r3, #12]
 80167ca:	b14c      	cbz	r4, 80167e0 <__assert_func+0x24>
 80167cc:	4b07      	ldr	r3, [pc, #28]	; (80167ec <__assert_func+0x30>)
 80167ce:	9100      	str	r1, [sp, #0]
 80167d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167d4:	4906      	ldr	r1, [pc, #24]	; (80167f0 <__assert_func+0x34>)
 80167d6:	462b      	mov	r3, r5
 80167d8:	f001 f802 	bl	80177e0 <fiprintf>
 80167dc:	f001 fa64 	bl	8017ca8 <abort>
 80167e0:	4b04      	ldr	r3, [pc, #16]	; (80167f4 <__assert_func+0x38>)
 80167e2:	461c      	mov	r4, r3
 80167e4:	e7f3      	b.n	80167ce <__assert_func+0x12>
 80167e6:	bf00      	nop
 80167e8:	200001ac 	.word	0x200001ac
 80167ec:	0801c890 	.word	0x0801c890
 80167f0:	0801c89d 	.word	0x0801c89d
 80167f4:	0801c8cb 	.word	0x0801c8cb

080167f8 <calloc>:
 80167f8:	4b02      	ldr	r3, [pc, #8]	; (8016804 <calloc+0xc>)
 80167fa:	460a      	mov	r2, r1
 80167fc:	4601      	mov	r1, r0
 80167fe:	6818      	ldr	r0, [r3, #0]
 8016800:	f000 b802 	b.w	8016808 <_calloc_r>
 8016804:	200001ac 	.word	0x200001ac

08016808 <_calloc_r>:
 8016808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801680a:	fba1 2402 	umull	r2, r4, r1, r2
 801680e:	b94c      	cbnz	r4, 8016824 <_calloc_r+0x1c>
 8016810:	4611      	mov	r1, r2
 8016812:	9201      	str	r2, [sp, #4]
 8016814:	f000 f83e 	bl	8016894 <_malloc_r>
 8016818:	9a01      	ldr	r2, [sp, #4]
 801681a:	4605      	mov	r5, r0
 801681c:	b930      	cbnz	r0, 801682c <_calloc_r+0x24>
 801681e:	4628      	mov	r0, r5
 8016820:	b003      	add	sp, #12
 8016822:	bd30      	pop	{r4, r5, pc}
 8016824:	220c      	movs	r2, #12
 8016826:	6002      	str	r2, [r0, #0]
 8016828:	2500      	movs	r5, #0
 801682a:	e7f8      	b.n	801681e <_calloc_r+0x16>
 801682c:	4621      	mov	r1, r4
 801682e:	f001 f95f 	bl	8017af0 <memset>
 8016832:	e7f4      	b.n	801681e <_calloc_r+0x16>

08016834 <malloc>:
 8016834:	4b02      	ldr	r3, [pc, #8]	; (8016840 <malloc+0xc>)
 8016836:	4601      	mov	r1, r0
 8016838:	6818      	ldr	r0, [r3, #0]
 801683a:	f000 b82b 	b.w	8016894 <_malloc_r>
 801683e:	bf00      	nop
 8016840:	200001ac 	.word	0x200001ac

08016844 <free>:
 8016844:	4b02      	ldr	r3, [pc, #8]	; (8016850 <free+0xc>)
 8016846:	4601      	mov	r1, r0
 8016848:	6818      	ldr	r0, [r3, #0]
 801684a:	f002 b8af 	b.w	80189ac <_free_r>
 801684e:	bf00      	nop
 8016850:	200001ac 	.word	0x200001ac

08016854 <sbrk_aligned>:
 8016854:	b570      	push	{r4, r5, r6, lr}
 8016856:	4e0e      	ldr	r6, [pc, #56]	; (8016890 <sbrk_aligned+0x3c>)
 8016858:	460c      	mov	r4, r1
 801685a:	6831      	ldr	r1, [r6, #0]
 801685c:	4605      	mov	r5, r0
 801685e:	b911      	cbnz	r1, 8016866 <sbrk_aligned+0x12>
 8016860:	f001 f9b6 	bl	8017bd0 <_sbrk_r>
 8016864:	6030      	str	r0, [r6, #0]
 8016866:	4621      	mov	r1, r4
 8016868:	4628      	mov	r0, r5
 801686a:	f001 f9b1 	bl	8017bd0 <_sbrk_r>
 801686e:	1c43      	adds	r3, r0, #1
 8016870:	d00a      	beq.n	8016888 <sbrk_aligned+0x34>
 8016872:	1cc4      	adds	r4, r0, #3
 8016874:	f024 0403 	bic.w	r4, r4, #3
 8016878:	42a0      	cmp	r0, r4
 801687a:	d007      	beq.n	801688c <sbrk_aligned+0x38>
 801687c:	1a21      	subs	r1, r4, r0
 801687e:	4628      	mov	r0, r5
 8016880:	f001 f9a6 	bl	8017bd0 <_sbrk_r>
 8016884:	3001      	adds	r0, #1
 8016886:	d101      	bne.n	801688c <sbrk_aligned+0x38>
 8016888:	f04f 34ff 	mov.w	r4, #4294967295
 801688c:	4620      	mov	r0, r4
 801688e:	bd70      	pop	{r4, r5, r6, pc}
 8016890:	20002b00 	.word	0x20002b00

08016894 <_malloc_r>:
 8016894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016898:	1ccd      	adds	r5, r1, #3
 801689a:	f025 0503 	bic.w	r5, r5, #3
 801689e:	3508      	adds	r5, #8
 80168a0:	2d0c      	cmp	r5, #12
 80168a2:	bf38      	it	cc
 80168a4:	250c      	movcc	r5, #12
 80168a6:	2d00      	cmp	r5, #0
 80168a8:	4607      	mov	r7, r0
 80168aa:	db01      	blt.n	80168b0 <_malloc_r+0x1c>
 80168ac:	42a9      	cmp	r1, r5
 80168ae:	d905      	bls.n	80168bc <_malloc_r+0x28>
 80168b0:	230c      	movs	r3, #12
 80168b2:	603b      	str	r3, [r7, #0]
 80168b4:	2600      	movs	r6, #0
 80168b6:	4630      	mov	r0, r6
 80168b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016990 <_malloc_r+0xfc>
 80168c0:	f000 f868 	bl	8016994 <__malloc_lock>
 80168c4:	f8d8 3000 	ldr.w	r3, [r8]
 80168c8:	461c      	mov	r4, r3
 80168ca:	bb5c      	cbnz	r4, 8016924 <_malloc_r+0x90>
 80168cc:	4629      	mov	r1, r5
 80168ce:	4638      	mov	r0, r7
 80168d0:	f7ff ffc0 	bl	8016854 <sbrk_aligned>
 80168d4:	1c43      	adds	r3, r0, #1
 80168d6:	4604      	mov	r4, r0
 80168d8:	d155      	bne.n	8016986 <_malloc_r+0xf2>
 80168da:	f8d8 4000 	ldr.w	r4, [r8]
 80168de:	4626      	mov	r6, r4
 80168e0:	2e00      	cmp	r6, #0
 80168e2:	d145      	bne.n	8016970 <_malloc_r+0xdc>
 80168e4:	2c00      	cmp	r4, #0
 80168e6:	d048      	beq.n	801697a <_malloc_r+0xe6>
 80168e8:	6823      	ldr	r3, [r4, #0]
 80168ea:	4631      	mov	r1, r6
 80168ec:	4638      	mov	r0, r7
 80168ee:	eb04 0903 	add.w	r9, r4, r3
 80168f2:	f001 f96d 	bl	8017bd0 <_sbrk_r>
 80168f6:	4581      	cmp	r9, r0
 80168f8:	d13f      	bne.n	801697a <_malloc_r+0xe6>
 80168fa:	6821      	ldr	r1, [r4, #0]
 80168fc:	1a6d      	subs	r5, r5, r1
 80168fe:	4629      	mov	r1, r5
 8016900:	4638      	mov	r0, r7
 8016902:	f7ff ffa7 	bl	8016854 <sbrk_aligned>
 8016906:	3001      	adds	r0, #1
 8016908:	d037      	beq.n	801697a <_malloc_r+0xe6>
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	442b      	add	r3, r5
 801690e:	6023      	str	r3, [r4, #0]
 8016910:	f8d8 3000 	ldr.w	r3, [r8]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d038      	beq.n	801698a <_malloc_r+0xf6>
 8016918:	685a      	ldr	r2, [r3, #4]
 801691a:	42a2      	cmp	r2, r4
 801691c:	d12b      	bne.n	8016976 <_malloc_r+0xe2>
 801691e:	2200      	movs	r2, #0
 8016920:	605a      	str	r2, [r3, #4]
 8016922:	e00f      	b.n	8016944 <_malloc_r+0xb0>
 8016924:	6822      	ldr	r2, [r4, #0]
 8016926:	1b52      	subs	r2, r2, r5
 8016928:	d41f      	bmi.n	801696a <_malloc_r+0xd6>
 801692a:	2a0b      	cmp	r2, #11
 801692c:	d917      	bls.n	801695e <_malloc_r+0xca>
 801692e:	1961      	adds	r1, r4, r5
 8016930:	42a3      	cmp	r3, r4
 8016932:	6025      	str	r5, [r4, #0]
 8016934:	bf18      	it	ne
 8016936:	6059      	strne	r1, [r3, #4]
 8016938:	6863      	ldr	r3, [r4, #4]
 801693a:	bf08      	it	eq
 801693c:	f8c8 1000 	streq.w	r1, [r8]
 8016940:	5162      	str	r2, [r4, r5]
 8016942:	604b      	str	r3, [r1, #4]
 8016944:	4638      	mov	r0, r7
 8016946:	f104 060b 	add.w	r6, r4, #11
 801694a:	f000 f829 	bl	80169a0 <__malloc_unlock>
 801694e:	f026 0607 	bic.w	r6, r6, #7
 8016952:	1d23      	adds	r3, r4, #4
 8016954:	1af2      	subs	r2, r6, r3
 8016956:	d0ae      	beq.n	80168b6 <_malloc_r+0x22>
 8016958:	1b9b      	subs	r3, r3, r6
 801695a:	50a3      	str	r3, [r4, r2]
 801695c:	e7ab      	b.n	80168b6 <_malloc_r+0x22>
 801695e:	42a3      	cmp	r3, r4
 8016960:	6862      	ldr	r2, [r4, #4]
 8016962:	d1dd      	bne.n	8016920 <_malloc_r+0x8c>
 8016964:	f8c8 2000 	str.w	r2, [r8]
 8016968:	e7ec      	b.n	8016944 <_malloc_r+0xb0>
 801696a:	4623      	mov	r3, r4
 801696c:	6864      	ldr	r4, [r4, #4]
 801696e:	e7ac      	b.n	80168ca <_malloc_r+0x36>
 8016970:	4634      	mov	r4, r6
 8016972:	6876      	ldr	r6, [r6, #4]
 8016974:	e7b4      	b.n	80168e0 <_malloc_r+0x4c>
 8016976:	4613      	mov	r3, r2
 8016978:	e7cc      	b.n	8016914 <_malloc_r+0x80>
 801697a:	230c      	movs	r3, #12
 801697c:	603b      	str	r3, [r7, #0]
 801697e:	4638      	mov	r0, r7
 8016980:	f000 f80e 	bl	80169a0 <__malloc_unlock>
 8016984:	e797      	b.n	80168b6 <_malloc_r+0x22>
 8016986:	6025      	str	r5, [r4, #0]
 8016988:	e7dc      	b.n	8016944 <_malloc_r+0xb0>
 801698a:	605b      	str	r3, [r3, #4]
 801698c:	deff      	udf	#255	; 0xff
 801698e:	bf00      	nop
 8016990:	20002afc 	.word	0x20002afc

08016994 <__malloc_lock>:
 8016994:	4801      	ldr	r0, [pc, #4]	; (801699c <__malloc_lock+0x8>)
 8016996:	f001 b968 	b.w	8017c6a <__retarget_lock_acquire_recursive>
 801699a:	bf00      	nop
 801699c:	20002c44 	.word	0x20002c44

080169a0 <__malloc_unlock>:
 80169a0:	4801      	ldr	r0, [pc, #4]	; (80169a8 <__malloc_unlock+0x8>)
 80169a2:	f001 b963 	b.w	8017c6c <__retarget_lock_release_recursive>
 80169a6:	bf00      	nop
 80169a8:	20002c44 	.word	0x20002c44

080169ac <__cvt>:
 80169ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80169b0:	ec55 4b10 	vmov	r4, r5, d0
 80169b4:	2d00      	cmp	r5, #0
 80169b6:	460e      	mov	r6, r1
 80169b8:	4619      	mov	r1, r3
 80169ba:	462b      	mov	r3, r5
 80169bc:	bfbb      	ittet	lt
 80169be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80169c2:	461d      	movlt	r5, r3
 80169c4:	2300      	movge	r3, #0
 80169c6:	232d      	movlt	r3, #45	; 0x2d
 80169c8:	700b      	strb	r3, [r1, #0]
 80169ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80169d0:	4691      	mov	r9, r2
 80169d2:	f023 0820 	bic.w	r8, r3, #32
 80169d6:	bfbc      	itt	lt
 80169d8:	4622      	movlt	r2, r4
 80169da:	4614      	movlt	r4, r2
 80169dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80169e0:	d005      	beq.n	80169ee <__cvt+0x42>
 80169e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80169e6:	d100      	bne.n	80169ea <__cvt+0x3e>
 80169e8:	3601      	adds	r6, #1
 80169ea:	2102      	movs	r1, #2
 80169ec:	e000      	b.n	80169f0 <__cvt+0x44>
 80169ee:	2103      	movs	r1, #3
 80169f0:	ab03      	add	r3, sp, #12
 80169f2:	9301      	str	r3, [sp, #4]
 80169f4:	ab02      	add	r3, sp, #8
 80169f6:	9300      	str	r3, [sp, #0]
 80169f8:	ec45 4b10 	vmov	d0, r4, r5
 80169fc:	4653      	mov	r3, sl
 80169fe:	4632      	mov	r2, r6
 8016a00:	f001 f9e2 	bl	8017dc8 <_dtoa_r>
 8016a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016a08:	4607      	mov	r7, r0
 8016a0a:	d102      	bne.n	8016a12 <__cvt+0x66>
 8016a0c:	f019 0f01 	tst.w	r9, #1
 8016a10:	d022      	beq.n	8016a58 <__cvt+0xac>
 8016a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016a16:	eb07 0906 	add.w	r9, r7, r6
 8016a1a:	d110      	bne.n	8016a3e <__cvt+0x92>
 8016a1c:	783b      	ldrb	r3, [r7, #0]
 8016a1e:	2b30      	cmp	r3, #48	; 0x30
 8016a20:	d10a      	bne.n	8016a38 <__cvt+0x8c>
 8016a22:	2200      	movs	r2, #0
 8016a24:	2300      	movs	r3, #0
 8016a26:	4620      	mov	r0, r4
 8016a28:	4629      	mov	r1, r5
 8016a2a:	f7ea f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8016a2e:	b918      	cbnz	r0, 8016a38 <__cvt+0x8c>
 8016a30:	f1c6 0601 	rsb	r6, r6, #1
 8016a34:	f8ca 6000 	str.w	r6, [sl]
 8016a38:	f8da 3000 	ldr.w	r3, [sl]
 8016a3c:	4499      	add	r9, r3
 8016a3e:	2200      	movs	r2, #0
 8016a40:	2300      	movs	r3, #0
 8016a42:	4620      	mov	r0, r4
 8016a44:	4629      	mov	r1, r5
 8016a46:	f7ea f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8016a4a:	b108      	cbz	r0, 8016a50 <__cvt+0xa4>
 8016a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016a50:	2230      	movs	r2, #48	; 0x30
 8016a52:	9b03      	ldr	r3, [sp, #12]
 8016a54:	454b      	cmp	r3, r9
 8016a56:	d307      	bcc.n	8016a68 <__cvt+0xbc>
 8016a58:	9b03      	ldr	r3, [sp, #12]
 8016a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a5c:	1bdb      	subs	r3, r3, r7
 8016a5e:	4638      	mov	r0, r7
 8016a60:	6013      	str	r3, [r2, #0]
 8016a62:	b004      	add	sp, #16
 8016a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a68:	1c59      	adds	r1, r3, #1
 8016a6a:	9103      	str	r1, [sp, #12]
 8016a6c:	701a      	strb	r2, [r3, #0]
 8016a6e:	e7f0      	b.n	8016a52 <__cvt+0xa6>

08016a70 <__exponent>:
 8016a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a72:	4603      	mov	r3, r0
 8016a74:	2900      	cmp	r1, #0
 8016a76:	bfb8      	it	lt
 8016a78:	4249      	neglt	r1, r1
 8016a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8016a7e:	bfb4      	ite	lt
 8016a80:	222d      	movlt	r2, #45	; 0x2d
 8016a82:	222b      	movge	r2, #43	; 0x2b
 8016a84:	2909      	cmp	r1, #9
 8016a86:	7042      	strb	r2, [r0, #1]
 8016a88:	dd2a      	ble.n	8016ae0 <__exponent+0x70>
 8016a8a:	f10d 0207 	add.w	r2, sp, #7
 8016a8e:	4617      	mov	r7, r2
 8016a90:	260a      	movs	r6, #10
 8016a92:	4694      	mov	ip, r2
 8016a94:	fb91 f5f6 	sdiv	r5, r1, r6
 8016a98:	fb06 1415 	mls	r4, r6, r5, r1
 8016a9c:	3430      	adds	r4, #48	; 0x30
 8016a9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016aa2:	460c      	mov	r4, r1
 8016aa4:	2c63      	cmp	r4, #99	; 0x63
 8016aa6:	f102 32ff 	add.w	r2, r2, #4294967295
 8016aaa:	4629      	mov	r1, r5
 8016aac:	dcf1      	bgt.n	8016a92 <__exponent+0x22>
 8016aae:	3130      	adds	r1, #48	; 0x30
 8016ab0:	f1ac 0402 	sub.w	r4, ip, #2
 8016ab4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016ab8:	1c41      	adds	r1, r0, #1
 8016aba:	4622      	mov	r2, r4
 8016abc:	42ba      	cmp	r2, r7
 8016abe:	d30a      	bcc.n	8016ad6 <__exponent+0x66>
 8016ac0:	f10d 0209 	add.w	r2, sp, #9
 8016ac4:	eba2 020c 	sub.w	r2, r2, ip
 8016ac8:	42bc      	cmp	r4, r7
 8016aca:	bf88      	it	hi
 8016acc:	2200      	movhi	r2, #0
 8016ace:	4413      	add	r3, r2
 8016ad0:	1a18      	subs	r0, r3, r0
 8016ad2:	b003      	add	sp, #12
 8016ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ad6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016ada:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016ade:	e7ed      	b.n	8016abc <__exponent+0x4c>
 8016ae0:	2330      	movs	r3, #48	; 0x30
 8016ae2:	3130      	adds	r1, #48	; 0x30
 8016ae4:	7083      	strb	r3, [r0, #2]
 8016ae6:	70c1      	strb	r1, [r0, #3]
 8016ae8:	1d03      	adds	r3, r0, #4
 8016aea:	e7f1      	b.n	8016ad0 <__exponent+0x60>

08016aec <_printf_float>:
 8016aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af0:	ed2d 8b02 	vpush	{d8}
 8016af4:	b08d      	sub	sp, #52	; 0x34
 8016af6:	460c      	mov	r4, r1
 8016af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016afc:	4616      	mov	r6, r2
 8016afe:	461f      	mov	r7, r3
 8016b00:	4605      	mov	r5, r0
 8016b02:	f001 f82d 	bl	8017b60 <_localeconv_r>
 8016b06:	f8d0 a000 	ldr.w	sl, [r0]
 8016b0a:	4650      	mov	r0, sl
 8016b0c:	f7e9 fbb0 	bl	8000270 <strlen>
 8016b10:	2300      	movs	r3, #0
 8016b12:	930a      	str	r3, [sp, #40]	; 0x28
 8016b14:	6823      	ldr	r3, [r4, #0]
 8016b16:	9305      	str	r3, [sp, #20]
 8016b18:	f8d8 3000 	ldr.w	r3, [r8]
 8016b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016b20:	3307      	adds	r3, #7
 8016b22:	f023 0307 	bic.w	r3, r3, #7
 8016b26:	f103 0208 	add.w	r2, r3, #8
 8016b2a:	f8c8 2000 	str.w	r2, [r8]
 8016b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016b32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016b36:	9307      	str	r3, [sp, #28]
 8016b38:	f8cd 8018 	str.w	r8, [sp, #24]
 8016b3c:	ee08 0a10 	vmov	s16, r0
 8016b40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b48:	4b9e      	ldr	r3, [pc, #632]	; (8016dc4 <_printf_float+0x2d8>)
 8016b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b4e:	f7e9 ffed 	bl	8000b2c <__aeabi_dcmpun>
 8016b52:	bb88      	cbnz	r0, 8016bb8 <_printf_float+0xcc>
 8016b54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b58:	4b9a      	ldr	r3, [pc, #616]	; (8016dc4 <_printf_float+0x2d8>)
 8016b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b5e:	f7e9 ffc7 	bl	8000af0 <__aeabi_dcmple>
 8016b62:	bb48      	cbnz	r0, 8016bb8 <_printf_float+0xcc>
 8016b64:	2200      	movs	r2, #0
 8016b66:	2300      	movs	r3, #0
 8016b68:	4640      	mov	r0, r8
 8016b6a:	4649      	mov	r1, r9
 8016b6c:	f7e9 ffb6 	bl	8000adc <__aeabi_dcmplt>
 8016b70:	b110      	cbz	r0, 8016b78 <_printf_float+0x8c>
 8016b72:	232d      	movs	r3, #45	; 0x2d
 8016b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b78:	4a93      	ldr	r2, [pc, #588]	; (8016dc8 <_printf_float+0x2dc>)
 8016b7a:	4b94      	ldr	r3, [pc, #592]	; (8016dcc <_printf_float+0x2e0>)
 8016b7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016b80:	bf94      	ite	ls
 8016b82:	4690      	movls	r8, r2
 8016b84:	4698      	movhi	r8, r3
 8016b86:	2303      	movs	r3, #3
 8016b88:	6123      	str	r3, [r4, #16]
 8016b8a:	9b05      	ldr	r3, [sp, #20]
 8016b8c:	f023 0304 	bic.w	r3, r3, #4
 8016b90:	6023      	str	r3, [r4, #0]
 8016b92:	f04f 0900 	mov.w	r9, #0
 8016b96:	9700      	str	r7, [sp, #0]
 8016b98:	4633      	mov	r3, r6
 8016b9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8016b9c:	4621      	mov	r1, r4
 8016b9e:	4628      	mov	r0, r5
 8016ba0:	f000 f9da 	bl	8016f58 <_printf_common>
 8016ba4:	3001      	adds	r0, #1
 8016ba6:	f040 8090 	bne.w	8016cca <_printf_float+0x1de>
 8016baa:	f04f 30ff 	mov.w	r0, #4294967295
 8016bae:	b00d      	add	sp, #52	; 0x34
 8016bb0:	ecbd 8b02 	vpop	{d8}
 8016bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bb8:	4642      	mov	r2, r8
 8016bba:	464b      	mov	r3, r9
 8016bbc:	4640      	mov	r0, r8
 8016bbe:	4649      	mov	r1, r9
 8016bc0:	f7e9 ffb4 	bl	8000b2c <__aeabi_dcmpun>
 8016bc4:	b140      	cbz	r0, 8016bd8 <_printf_float+0xec>
 8016bc6:	464b      	mov	r3, r9
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	bfbc      	itt	lt
 8016bcc:	232d      	movlt	r3, #45	; 0x2d
 8016bce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016bd2:	4a7f      	ldr	r2, [pc, #508]	; (8016dd0 <_printf_float+0x2e4>)
 8016bd4:	4b7f      	ldr	r3, [pc, #508]	; (8016dd4 <_printf_float+0x2e8>)
 8016bd6:	e7d1      	b.n	8016b7c <_printf_float+0x90>
 8016bd8:	6863      	ldr	r3, [r4, #4]
 8016bda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016bde:	9206      	str	r2, [sp, #24]
 8016be0:	1c5a      	adds	r2, r3, #1
 8016be2:	d13f      	bne.n	8016c64 <_printf_float+0x178>
 8016be4:	2306      	movs	r3, #6
 8016be6:	6063      	str	r3, [r4, #4]
 8016be8:	9b05      	ldr	r3, [sp, #20]
 8016bea:	6861      	ldr	r1, [r4, #4]
 8016bec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	9303      	str	r3, [sp, #12]
 8016bf4:	ab0a      	add	r3, sp, #40	; 0x28
 8016bf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016bfa:	ab09      	add	r3, sp, #36	; 0x24
 8016bfc:	ec49 8b10 	vmov	d0, r8, r9
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	6022      	str	r2, [r4, #0]
 8016c04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016c08:	4628      	mov	r0, r5
 8016c0a:	f7ff fecf 	bl	80169ac <__cvt>
 8016c0e:	9b06      	ldr	r3, [sp, #24]
 8016c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016c12:	2b47      	cmp	r3, #71	; 0x47
 8016c14:	4680      	mov	r8, r0
 8016c16:	d108      	bne.n	8016c2a <_printf_float+0x13e>
 8016c18:	1cc8      	adds	r0, r1, #3
 8016c1a:	db02      	blt.n	8016c22 <_printf_float+0x136>
 8016c1c:	6863      	ldr	r3, [r4, #4]
 8016c1e:	4299      	cmp	r1, r3
 8016c20:	dd41      	ble.n	8016ca6 <_printf_float+0x1ba>
 8016c22:	f1ab 0302 	sub.w	r3, fp, #2
 8016c26:	fa5f fb83 	uxtb.w	fp, r3
 8016c2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016c2e:	d820      	bhi.n	8016c72 <_printf_float+0x186>
 8016c30:	3901      	subs	r1, #1
 8016c32:	465a      	mov	r2, fp
 8016c34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016c38:	9109      	str	r1, [sp, #36]	; 0x24
 8016c3a:	f7ff ff19 	bl	8016a70 <__exponent>
 8016c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c40:	1813      	adds	r3, r2, r0
 8016c42:	2a01      	cmp	r2, #1
 8016c44:	4681      	mov	r9, r0
 8016c46:	6123      	str	r3, [r4, #16]
 8016c48:	dc02      	bgt.n	8016c50 <_printf_float+0x164>
 8016c4a:	6822      	ldr	r2, [r4, #0]
 8016c4c:	07d2      	lsls	r2, r2, #31
 8016c4e:	d501      	bpl.n	8016c54 <_printf_float+0x168>
 8016c50:	3301      	adds	r3, #1
 8016c52:	6123      	str	r3, [r4, #16]
 8016c54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d09c      	beq.n	8016b96 <_printf_float+0xaa>
 8016c5c:	232d      	movs	r3, #45	; 0x2d
 8016c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c62:	e798      	b.n	8016b96 <_printf_float+0xaa>
 8016c64:	9a06      	ldr	r2, [sp, #24]
 8016c66:	2a47      	cmp	r2, #71	; 0x47
 8016c68:	d1be      	bne.n	8016be8 <_printf_float+0xfc>
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1bc      	bne.n	8016be8 <_printf_float+0xfc>
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e7b9      	b.n	8016be6 <_printf_float+0xfa>
 8016c72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016c76:	d118      	bne.n	8016caa <_printf_float+0x1be>
 8016c78:	2900      	cmp	r1, #0
 8016c7a:	6863      	ldr	r3, [r4, #4]
 8016c7c:	dd0b      	ble.n	8016c96 <_printf_float+0x1aa>
 8016c7e:	6121      	str	r1, [r4, #16]
 8016c80:	b913      	cbnz	r3, 8016c88 <_printf_float+0x19c>
 8016c82:	6822      	ldr	r2, [r4, #0]
 8016c84:	07d0      	lsls	r0, r2, #31
 8016c86:	d502      	bpl.n	8016c8e <_printf_float+0x1a2>
 8016c88:	3301      	adds	r3, #1
 8016c8a:	440b      	add	r3, r1
 8016c8c:	6123      	str	r3, [r4, #16]
 8016c8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016c90:	f04f 0900 	mov.w	r9, #0
 8016c94:	e7de      	b.n	8016c54 <_printf_float+0x168>
 8016c96:	b913      	cbnz	r3, 8016c9e <_printf_float+0x1b2>
 8016c98:	6822      	ldr	r2, [r4, #0]
 8016c9a:	07d2      	lsls	r2, r2, #31
 8016c9c:	d501      	bpl.n	8016ca2 <_printf_float+0x1b6>
 8016c9e:	3302      	adds	r3, #2
 8016ca0:	e7f4      	b.n	8016c8c <_printf_float+0x1a0>
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	e7f2      	b.n	8016c8c <_printf_float+0x1a0>
 8016ca6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cac:	4299      	cmp	r1, r3
 8016cae:	db05      	blt.n	8016cbc <_printf_float+0x1d0>
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	6121      	str	r1, [r4, #16]
 8016cb4:	07d8      	lsls	r0, r3, #31
 8016cb6:	d5ea      	bpl.n	8016c8e <_printf_float+0x1a2>
 8016cb8:	1c4b      	adds	r3, r1, #1
 8016cba:	e7e7      	b.n	8016c8c <_printf_float+0x1a0>
 8016cbc:	2900      	cmp	r1, #0
 8016cbe:	bfd4      	ite	le
 8016cc0:	f1c1 0202 	rsble	r2, r1, #2
 8016cc4:	2201      	movgt	r2, #1
 8016cc6:	4413      	add	r3, r2
 8016cc8:	e7e0      	b.n	8016c8c <_printf_float+0x1a0>
 8016cca:	6823      	ldr	r3, [r4, #0]
 8016ccc:	055a      	lsls	r2, r3, #21
 8016cce:	d407      	bmi.n	8016ce0 <_printf_float+0x1f4>
 8016cd0:	6923      	ldr	r3, [r4, #16]
 8016cd2:	4642      	mov	r2, r8
 8016cd4:	4631      	mov	r1, r6
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	47b8      	blx	r7
 8016cda:	3001      	adds	r0, #1
 8016cdc:	d12c      	bne.n	8016d38 <_printf_float+0x24c>
 8016cde:	e764      	b.n	8016baa <_printf_float+0xbe>
 8016ce0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016ce4:	f240 80e0 	bls.w	8016ea8 <_printf_float+0x3bc>
 8016ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016cec:	2200      	movs	r2, #0
 8016cee:	2300      	movs	r3, #0
 8016cf0:	f7e9 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d034      	beq.n	8016d62 <_printf_float+0x276>
 8016cf8:	4a37      	ldr	r2, [pc, #220]	; (8016dd8 <_printf_float+0x2ec>)
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	4631      	mov	r1, r6
 8016cfe:	4628      	mov	r0, r5
 8016d00:	47b8      	blx	r7
 8016d02:	3001      	adds	r0, #1
 8016d04:	f43f af51 	beq.w	8016baa <_printf_float+0xbe>
 8016d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	db02      	blt.n	8016d16 <_printf_float+0x22a>
 8016d10:	6823      	ldr	r3, [r4, #0]
 8016d12:	07d8      	lsls	r0, r3, #31
 8016d14:	d510      	bpl.n	8016d38 <_printf_float+0x24c>
 8016d16:	ee18 3a10 	vmov	r3, s16
 8016d1a:	4652      	mov	r2, sl
 8016d1c:	4631      	mov	r1, r6
 8016d1e:	4628      	mov	r0, r5
 8016d20:	47b8      	blx	r7
 8016d22:	3001      	adds	r0, #1
 8016d24:	f43f af41 	beq.w	8016baa <_printf_float+0xbe>
 8016d28:	f04f 0800 	mov.w	r8, #0
 8016d2c:	f104 091a 	add.w	r9, r4, #26
 8016d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d32:	3b01      	subs	r3, #1
 8016d34:	4543      	cmp	r3, r8
 8016d36:	dc09      	bgt.n	8016d4c <_printf_float+0x260>
 8016d38:	6823      	ldr	r3, [r4, #0]
 8016d3a:	079b      	lsls	r3, r3, #30
 8016d3c:	f100 8107 	bmi.w	8016f4e <_printf_float+0x462>
 8016d40:	68e0      	ldr	r0, [r4, #12]
 8016d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d44:	4298      	cmp	r0, r3
 8016d46:	bfb8      	it	lt
 8016d48:	4618      	movlt	r0, r3
 8016d4a:	e730      	b.n	8016bae <_printf_float+0xc2>
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	464a      	mov	r2, r9
 8016d50:	4631      	mov	r1, r6
 8016d52:	4628      	mov	r0, r5
 8016d54:	47b8      	blx	r7
 8016d56:	3001      	adds	r0, #1
 8016d58:	f43f af27 	beq.w	8016baa <_printf_float+0xbe>
 8016d5c:	f108 0801 	add.w	r8, r8, #1
 8016d60:	e7e6      	b.n	8016d30 <_printf_float+0x244>
 8016d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	dc39      	bgt.n	8016ddc <_printf_float+0x2f0>
 8016d68:	4a1b      	ldr	r2, [pc, #108]	; (8016dd8 <_printf_float+0x2ec>)
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	4631      	mov	r1, r6
 8016d6e:	4628      	mov	r0, r5
 8016d70:	47b8      	blx	r7
 8016d72:	3001      	adds	r0, #1
 8016d74:	f43f af19 	beq.w	8016baa <_printf_float+0xbe>
 8016d78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016d7c:	4313      	orrs	r3, r2
 8016d7e:	d102      	bne.n	8016d86 <_printf_float+0x29a>
 8016d80:	6823      	ldr	r3, [r4, #0]
 8016d82:	07d9      	lsls	r1, r3, #31
 8016d84:	d5d8      	bpl.n	8016d38 <_printf_float+0x24c>
 8016d86:	ee18 3a10 	vmov	r3, s16
 8016d8a:	4652      	mov	r2, sl
 8016d8c:	4631      	mov	r1, r6
 8016d8e:	4628      	mov	r0, r5
 8016d90:	47b8      	blx	r7
 8016d92:	3001      	adds	r0, #1
 8016d94:	f43f af09 	beq.w	8016baa <_printf_float+0xbe>
 8016d98:	f04f 0900 	mov.w	r9, #0
 8016d9c:	f104 0a1a 	add.w	sl, r4, #26
 8016da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016da2:	425b      	negs	r3, r3
 8016da4:	454b      	cmp	r3, r9
 8016da6:	dc01      	bgt.n	8016dac <_printf_float+0x2c0>
 8016da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016daa:	e792      	b.n	8016cd2 <_printf_float+0x1e6>
 8016dac:	2301      	movs	r3, #1
 8016dae:	4652      	mov	r2, sl
 8016db0:	4631      	mov	r1, r6
 8016db2:	4628      	mov	r0, r5
 8016db4:	47b8      	blx	r7
 8016db6:	3001      	adds	r0, #1
 8016db8:	f43f aef7 	beq.w	8016baa <_printf_float+0xbe>
 8016dbc:	f109 0901 	add.w	r9, r9, #1
 8016dc0:	e7ee      	b.n	8016da0 <_printf_float+0x2b4>
 8016dc2:	bf00      	nop
 8016dc4:	7fefffff 	.word	0x7fefffff
 8016dc8:	0801c8cc 	.word	0x0801c8cc
 8016dcc:	0801c8d0 	.word	0x0801c8d0
 8016dd0:	0801c8d4 	.word	0x0801c8d4
 8016dd4:	0801c8d8 	.word	0x0801c8d8
 8016dd8:	0801c8dc 	.word	0x0801c8dc
 8016ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016de0:	429a      	cmp	r2, r3
 8016de2:	bfa8      	it	ge
 8016de4:	461a      	movge	r2, r3
 8016de6:	2a00      	cmp	r2, #0
 8016de8:	4691      	mov	r9, r2
 8016dea:	dc37      	bgt.n	8016e5c <_printf_float+0x370>
 8016dec:	f04f 0b00 	mov.w	fp, #0
 8016df0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016df4:	f104 021a 	add.w	r2, r4, #26
 8016df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016dfa:	9305      	str	r3, [sp, #20]
 8016dfc:	eba3 0309 	sub.w	r3, r3, r9
 8016e00:	455b      	cmp	r3, fp
 8016e02:	dc33      	bgt.n	8016e6c <_printf_float+0x380>
 8016e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	db3b      	blt.n	8016e84 <_printf_float+0x398>
 8016e0c:	6823      	ldr	r3, [r4, #0]
 8016e0e:	07da      	lsls	r2, r3, #31
 8016e10:	d438      	bmi.n	8016e84 <_printf_float+0x398>
 8016e12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016e16:	eba2 0903 	sub.w	r9, r2, r3
 8016e1a:	9b05      	ldr	r3, [sp, #20]
 8016e1c:	1ad2      	subs	r2, r2, r3
 8016e1e:	4591      	cmp	r9, r2
 8016e20:	bfa8      	it	ge
 8016e22:	4691      	movge	r9, r2
 8016e24:	f1b9 0f00 	cmp.w	r9, #0
 8016e28:	dc35      	bgt.n	8016e96 <_printf_float+0x3aa>
 8016e2a:	f04f 0800 	mov.w	r8, #0
 8016e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016e32:	f104 0a1a 	add.w	sl, r4, #26
 8016e36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016e3a:	1a9b      	subs	r3, r3, r2
 8016e3c:	eba3 0309 	sub.w	r3, r3, r9
 8016e40:	4543      	cmp	r3, r8
 8016e42:	f77f af79 	ble.w	8016d38 <_printf_float+0x24c>
 8016e46:	2301      	movs	r3, #1
 8016e48:	4652      	mov	r2, sl
 8016e4a:	4631      	mov	r1, r6
 8016e4c:	4628      	mov	r0, r5
 8016e4e:	47b8      	blx	r7
 8016e50:	3001      	adds	r0, #1
 8016e52:	f43f aeaa 	beq.w	8016baa <_printf_float+0xbe>
 8016e56:	f108 0801 	add.w	r8, r8, #1
 8016e5a:	e7ec      	b.n	8016e36 <_printf_float+0x34a>
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	4631      	mov	r1, r6
 8016e60:	4642      	mov	r2, r8
 8016e62:	4628      	mov	r0, r5
 8016e64:	47b8      	blx	r7
 8016e66:	3001      	adds	r0, #1
 8016e68:	d1c0      	bne.n	8016dec <_printf_float+0x300>
 8016e6a:	e69e      	b.n	8016baa <_printf_float+0xbe>
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	4631      	mov	r1, r6
 8016e70:	4628      	mov	r0, r5
 8016e72:	9205      	str	r2, [sp, #20]
 8016e74:	47b8      	blx	r7
 8016e76:	3001      	adds	r0, #1
 8016e78:	f43f ae97 	beq.w	8016baa <_printf_float+0xbe>
 8016e7c:	9a05      	ldr	r2, [sp, #20]
 8016e7e:	f10b 0b01 	add.w	fp, fp, #1
 8016e82:	e7b9      	b.n	8016df8 <_printf_float+0x30c>
 8016e84:	ee18 3a10 	vmov	r3, s16
 8016e88:	4652      	mov	r2, sl
 8016e8a:	4631      	mov	r1, r6
 8016e8c:	4628      	mov	r0, r5
 8016e8e:	47b8      	blx	r7
 8016e90:	3001      	adds	r0, #1
 8016e92:	d1be      	bne.n	8016e12 <_printf_float+0x326>
 8016e94:	e689      	b.n	8016baa <_printf_float+0xbe>
 8016e96:	9a05      	ldr	r2, [sp, #20]
 8016e98:	464b      	mov	r3, r9
 8016e9a:	4442      	add	r2, r8
 8016e9c:	4631      	mov	r1, r6
 8016e9e:	4628      	mov	r0, r5
 8016ea0:	47b8      	blx	r7
 8016ea2:	3001      	adds	r0, #1
 8016ea4:	d1c1      	bne.n	8016e2a <_printf_float+0x33e>
 8016ea6:	e680      	b.n	8016baa <_printf_float+0xbe>
 8016ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eaa:	2a01      	cmp	r2, #1
 8016eac:	dc01      	bgt.n	8016eb2 <_printf_float+0x3c6>
 8016eae:	07db      	lsls	r3, r3, #31
 8016eb0:	d53a      	bpl.n	8016f28 <_printf_float+0x43c>
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	4642      	mov	r2, r8
 8016eb6:	4631      	mov	r1, r6
 8016eb8:	4628      	mov	r0, r5
 8016eba:	47b8      	blx	r7
 8016ebc:	3001      	adds	r0, #1
 8016ebe:	f43f ae74 	beq.w	8016baa <_printf_float+0xbe>
 8016ec2:	ee18 3a10 	vmov	r3, s16
 8016ec6:	4652      	mov	r2, sl
 8016ec8:	4631      	mov	r1, r6
 8016eca:	4628      	mov	r0, r5
 8016ecc:	47b8      	blx	r7
 8016ece:	3001      	adds	r0, #1
 8016ed0:	f43f ae6b 	beq.w	8016baa <_printf_float+0xbe>
 8016ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ed8:	2200      	movs	r2, #0
 8016eda:	2300      	movs	r3, #0
 8016edc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016ee0:	f7e9 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8016ee4:	b9d8      	cbnz	r0, 8016f1e <_printf_float+0x432>
 8016ee6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016eea:	f108 0201 	add.w	r2, r8, #1
 8016eee:	4631      	mov	r1, r6
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	47b8      	blx	r7
 8016ef4:	3001      	adds	r0, #1
 8016ef6:	d10e      	bne.n	8016f16 <_printf_float+0x42a>
 8016ef8:	e657      	b.n	8016baa <_printf_float+0xbe>
 8016efa:	2301      	movs	r3, #1
 8016efc:	4652      	mov	r2, sl
 8016efe:	4631      	mov	r1, r6
 8016f00:	4628      	mov	r0, r5
 8016f02:	47b8      	blx	r7
 8016f04:	3001      	adds	r0, #1
 8016f06:	f43f ae50 	beq.w	8016baa <_printf_float+0xbe>
 8016f0a:	f108 0801 	add.w	r8, r8, #1
 8016f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f10:	3b01      	subs	r3, #1
 8016f12:	4543      	cmp	r3, r8
 8016f14:	dcf1      	bgt.n	8016efa <_printf_float+0x40e>
 8016f16:	464b      	mov	r3, r9
 8016f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016f1c:	e6da      	b.n	8016cd4 <_printf_float+0x1e8>
 8016f1e:	f04f 0800 	mov.w	r8, #0
 8016f22:	f104 0a1a 	add.w	sl, r4, #26
 8016f26:	e7f2      	b.n	8016f0e <_printf_float+0x422>
 8016f28:	2301      	movs	r3, #1
 8016f2a:	4642      	mov	r2, r8
 8016f2c:	e7df      	b.n	8016eee <_printf_float+0x402>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	464a      	mov	r2, r9
 8016f32:	4631      	mov	r1, r6
 8016f34:	4628      	mov	r0, r5
 8016f36:	47b8      	blx	r7
 8016f38:	3001      	adds	r0, #1
 8016f3a:	f43f ae36 	beq.w	8016baa <_printf_float+0xbe>
 8016f3e:	f108 0801 	add.w	r8, r8, #1
 8016f42:	68e3      	ldr	r3, [r4, #12]
 8016f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f46:	1a5b      	subs	r3, r3, r1
 8016f48:	4543      	cmp	r3, r8
 8016f4a:	dcf0      	bgt.n	8016f2e <_printf_float+0x442>
 8016f4c:	e6f8      	b.n	8016d40 <_printf_float+0x254>
 8016f4e:	f04f 0800 	mov.w	r8, #0
 8016f52:	f104 0919 	add.w	r9, r4, #25
 8016f56:	e7f4      	b.n	8016f42 <_printf_float+0x456>

08016f58 <_printf_common>:
 8016f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f5c:	4616      	mov	r6, r2
 8016f5e:	4699      	mov	r9, r3
 8016f60:	688a      	ldr	r2, [r1, #8]
 8016f62:	690b      	ldr	r3, [r1, #16]
 8016f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016f68:	4293      	cmp	r3, r2
 8016f6a:	bfb8      	it	lt
 8016f6c:	4613      	movlt	r3, r2
 8016f6e:	6033      	str	r3, [r6, #0]
 8016f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016f74:	4607      	mov	r7, r0
 8016f76:	460c      	mov	r4, r1
 8016f78:	b10a      	cbz	r2, 8016f7e <_printf_common+0x26>
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	6033      	str	r3, [r6, #0]
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	0699      	lsls	r1, r3, #26
 8016f82:	bf42      	ittt	mi
 8016f84:	6833      	ldrmi	r3, [r6, #0]
 8016f86:	3302      	addmi	r3, #2
 8016f88:	6033      	strmi	r3, [r6, #0]
 8016f8a:	6825      	ldr	r5, [r4, #0]
 8016f8c:	f015 0506 	ands.w	r5, r5, #6
 8016f90:	d106      	bne.n	8016fa0 <_printf_common+0x48>
 8016f92:	f104 0a19 	add.w	sl, r4, #25
 8016f96:	68e3      	ldr	r3, [r4, #12]
 8016f98:	6832      	ldr	r2, [r6, #0]
 8016f9a:	1a9b      	subs	r3, r3, r2
 8016f9c:	42ab      	cmp	r3, r5
 8016f9e:	dc26      	bgt.n	8016fee <_printf_common+0x96>
 8016fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fa4:	1e13      	subs	r3, r2, #0
 8016fa6:	6822      	ldr	r2, [r4, #0]
 8016fa8:	bf18      	it	ne
 8016faa:	2301      	movne	r3, #1
 8016fac:	0692      	lsls	r2, r2, #26
 8016fae:	d42b      	bmi.n	8017008 <_printf_common+0xb0>
 8016fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fb4:	4649      	mov	r1, r9
 8016fb6:	4638      	mov	r0, r7
 8016fb8:	47c0      	blx	r8
 8016fba:	3001      	adds	r0, #1
 8016fbc:	d01e      	beq.n	8016ffc <_printf_common+0xa4>
 8016fbe:	6823      	ldr	r3, [r4, #0]
 8016fc0:	6922      	ldr	r2, [r4, #16]
 8016fc2:	f003 0306 	and.w	r3, r3, #6
 8016fc6:	2b04      	cmp	r3, #4
 8016fc8:	bf02      	ittt	eq
 8016fca:	68e5      	ldreq	r5, [r4, #12]
 8016fcc:	6833      	ldreq	r3, [r6, #0]
 8016fce:	1aed      	subeq	r5, r5, r3
 8016fd0:	68a3      	ldr	r3, [r4, #8]
 8016fd2:	bf0c      	ite	eq
 8016fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016fd8:	2500      	movne	r5, #0
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	bfc4      	itt	gt
 8016fde:	1a9b      	subgt	r3, r3, r2
 8016fe0:	18ed      	addgt	r5, r5, r3
 8016fe2:	2600      	movs	r6, #0
 8016fe4:	341a      	adds	r4, #26
 8016fe6:	42b5      	cmp	r5, r6
 8016fe8:	d11a      	bne.n	8017020 <_printf_common+0xc8>
 8016fea:	2000      	movs	r0, #0
 8016fec:	e008      	b.n	8017000 <_printf_common+0xa8>
 8016fee:	2301      	movs	r3, #1
 8016ff0:	4652      	mov	r2, sl
 8016ff2:	4649      	mov	r1, r9
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	47c0      	blx	r8
 8016ff8:	3001      	adds	r0, #1
 8016ffa:	d103      	bne.n	8017004 <_printf_common+0xac>
 8016ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8017000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017004:	3501      	adds	r5, #1
 8017006:	e7c6      	b.n	8016f96 <_printf_common+0x3e>
 8017008:	18e1      	adds	r1, r4, r3
 801700a:	1c5a      	adds	r2, r3, #1
 801700c:	2030      	movs	r0, #48	; 0x30
 801700e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017012:	4422      	add	r2, r4
 8017014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801701c:	3302      	adds	r3, #2
 801701e:	e7c7      	b.n	8016fb0 <_printf_common+0x58>
 8017020:	2301      	movs	r3, #1
 8017022:	4622      	mov	r2, r4
 8017024:	4649      	mov	r1, r9
 8017026:	4638      	mov	r0, r7
 8017028:	47c0      	blx	r8
 801702a:	3001      	adds	r0, #1
 801702c:	d0e6      	beq.n	8016ffc <_printf_common+0xa4>
 801702e:	3601      	adds	r6, #1
 8017030:	e7d9      	b.n	8016fe6 <_printf_common+0x8e>
	...

08017034 <_printf_i>:
 8017034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017038:	7e0f      	ldrb	r7, [r1, #24]
 801703a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801703c:	2f78      	cmp	r7, #120	; 0x78
 801703e:	4691      	mov	r9, r2
 8017040:	4680      	mov	r8, r0
 8017042:	460c      	mov	r4, r1
 8017044:	469a      	mov	sl, r3
 8017046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801704a:	d807      	bhi.n	801705c <_printf_i+0x28>
 801704c:	2f62      	cmp	r7, #98	; 0x62
 801704e:	d80a      	bhi.n	8017066 <_printf_i+0x32>
 8017050:	2f00      	cmp	r7, #0
 8017052:	f000 80d4 	beq.w	80171fe <_printf_i+0x1ca>
 8017056:	2f58      	cmp	r7, #88	; 0x58
 8017058:	f000 80c0 	beq.w	80171dc <_printf_i+0x1a8>
 801705c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017064:	e03a      	b.n	80170dc <_printf_i+0xa8>
 8017066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801706a:	2b15      	cmp	r3, #21
 801706c:	d8f6      	bhi.n	801705c <_printf_i+0x28>
 801706e:	a101      	add	r1, pc, #4	; (adr r1, 8017074 <_printf_i+0x40>)
 8017070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017074:	080170cd 	.word	0x080170cd
 8017078:	080170e1 	.word	0x080170e1
 801707c:	0801705d 	.word	0x0801705d
 8017080:	0801705d 	.word	0x0801705d
 8017084:	0801705d 	.word	0x0801705d
 8017088:	0801705d 	.word	0x0801705d
 801708c:	080170e1 	.word	0x080170e1
 8017090:	0801705d 	.word	0x0801705d
 8017094:	0801705d 	.word	0x0801705d
 8017098:	0801705d 	.word	0x0801705d
 801709c:	0801705d 	.word	0x0801705d
 80170a0:	080171e5 	.word	0x080171e5
 80170a4:	0801710d 	.word	0x0801710d
 80170a8:	0801719f 	.word	0x0801719f
 80170ac:	0801705d 	.word	0x0801705d
 80170b0:	0801705d 	.word	0x0801705d
 80170b4:	08017207 	.word	0x08017207
 80170b8:	0801705d 	.word	0x0801705d
 80170bc:	0801710d 	.word	0x0801710d
 80170c0:	0801705d 	.word	0x0801705d
 80170c4:	0801705d 	.word	0x0801705d
 80170c8:	080171a7 	.word	0x080171a7
 80170cc:	682b      	ldr	r3, [r5, #0]
 80170ce:	1d1a      	adds	r2, r3, #4
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	602a      	str	r2, [r5, #0]
 80170d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80170d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80170dc:	2301      	movs	r3, #1
 80170de:	e09f      	b.n	8017220 <_printf_i+0x1ec>
 80170e0:	6820      	ldr	r0, [r4, #0]
 80170e2:	682b      	ldr	r3, [r5, #0]
 80170e4:	0607      	lsls	r7, r0, #24
 80170e6:	f103 0104 	add.w	r1, r3, #4
 80170ea:	6029      	str	r1, [r5, #0]
 80170ec:	d501      	bpl.n	80170f2 <_printf_i+0xbe>
 80170ee:	681e      	ldr	r6, [r3, #0]
 80170f0:	e003      	b.n	80170fa <_printf_i+0xc6>
 80170f2:	0646      	lsls	r6, r0, #25
 80170f4:	d5fb      	bpl.n	80170ee <_printf_i+0xba>
 80170f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80170fa:	2e00      	cmp	r6, #0
 80170fc:	da03      	bge.n	8017106 <_printf_i+0xd2>
 80170fe:	232d      	movs	r3, #45	; 0x2d
 8017100:	4276      	negs	r6, r6
 8017102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017106:	485a      	ldr	r0, [pc, #360]	; (8017270 <_printf_i+0x23c>)
 8017108:	230a      	movs	r3, #10
 801710a:	e012      	b.n	8017132 <_printf_i+0xfe>
 801710c:	682b      	ldr	r3, [r5, #0]
 801710e:	6820      	ldr	r0, [r4, #0]
 8017110:	1d19      	adds	r1, r3, #4
 8017112:	6029      	str	r1, [r5, #0]
 8017114:	0605      	lsls	r5, r0, #24
 8017116:	d501      	bpl.n	801711c <_printf_i+0xe8>
 8017118:	681e      	ldr	r6, [r3, #0]
 801711a:	e002      	b.n	8017122 <_printf_i+0xee>
 801711c:	0641      	lsls	r1, r0, #25
 801711e:	d5fb      	bpl.n	8017118 <_printf_i+0xe4>
 8017120:	881e      	ldrh	r6, [r3, #0]
 8017122:	4853      	ldr	r0, [pc, #332]	; (8017270 <_printf_i+0x23c>)
 8017124:	2f6f      	cmp	r7, #111	; 0x6f
 8017126:	bf0c      	ite	eq
 8017128:	2308      	moveq	r3, #8
 801712a:	230a      	movne	r3, #10
 801712c:	2100      	movs	r1, #0
 801712e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017132:	6865      	ldr	r5, [r4, #4]
 8017134:	60a5      	str	r5, [r4, #8]
 8017136:	2d00      	cmp	r5, #0
 8017138:	bfa2      	ittt	ge
 801713a:	6821      	ldrge	r1, [r4, #0]
 801713c:	f021 0104 	bicge.w	r1, r1, #4
 8017140:	6021      	strge	r1, [r4, #0]
 8017142:	b90e      	cbnz	r6, 8017148 <_printf_i+0x114>
 8017144:	2d00      	cmp	r5, #0
 8017146:	d04b      	beq.n	80171e0 <_printf_i+0x1ac>
 8017148:	4615      	mov	r5, r2
 801714a:	fbb6 f1f3 	udiv	r1, r6, r3
 801714e:	fb03 6711 	mls	r7, r3, r1, r6
 8017152:	5dc7      	ldrb	r7, [r0, r7]
 8017154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017158:	4637      	mov	r7, r6
 801715a:	42bb      	cmp	r3, r7
 801715c:	460e      	mov	r6, r1
 801715e:	d9f4      	bls.n	801714a <_printf_i+0x116>
 8017160:	2b08      	cmp	r3, #8
 8017162:	d10b      	bne.n	801717c <_printf_i+0x148>
 8017164:	6823      	ldr	r3, [r4, #0]
 8017166:	07de      	lsls	r6, r3, #31
 8017168:	d508      	bpl.n	801717c <_printf_i+0x148>
 801716a:	6923      	ldr	r3, [r4, #16]
 801716c:	6861      	ldr	r1, [r4, #4]
 801716e:	4299      	cmp	r1, r3
 8017170:	bfde      	ittt	le
 8017172:	2330      	movle	r3, #48	; 0x30
 8017174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017178:	f105 35ff 	addle.w	r5, r5, #4294967295
 801717c:	1b52      	subs	r2, r2, r5
 801717e:	6122      	str	r2, [r4, #16]
 8017180:	f8cd a000 	str.w	sl, [sp]
 8017184:	464b      	mov	r3, r9
 8017186:	aa03      	add	r2, sp, #12
 8017188:	4621      	mov	r1, r4
 801718a:	4640      	mov	r0, r8
 801718c:	f7ff fee4 	bl	8016f58 <_printf_common>
 8017190:	3001      	adds	r0, #1
 8017192:	d14a      	bne.n	801722a <_printf_i+0x1f6>
 8017194:	f04f 30ff 	mov.w	r0, #4294967295
 8017198:	b004      	add	sp, #16
 801719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801719e:	6823      	ldr	r3, [r4, #0]
 80171a0:	f043 0320 	orr.w	r3, r3, #32
 80171a4:	6023      	str	r3, [r4, #0]
 80171a6:	4833      	ldr	r0, [pc, #204]	; (8017274 <_printf_i+0x240>)
 80171a8:	2778      	movs	r7, #120	; 0x78
 80171aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80171ae:	6823      	ldr	r3, [r4, #0]
 80171b0:	6829      	ldr	r1, [r5, #0]
 80171b2:	061f      	lsls	r7, r3, #24
 80171b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80171b8:	d402      	bmi.n	80171c0 <_printf_i+0x18c>
 80171ba:	065f      	lsls	r7, r3, #25
 80171bc:	bf48      	it	mi
 80171be:	b2b6      	uxthmi	r6, r6
 80171c0:	07df      	lsls	r7, r3, #31
 80171c2:	bf48      	it	mi
 80171c4:	f043 0320 	orrmi.w	r3, r3, #32
 80171c8:	6029      	str	r1, [r5, #0]
 80171ca:	bf48      	it	mi
 80171cc:	6023      	strmi	r3, [r4, #0]
 80171ce:	b91e      	cbnz	r6, 80171d8 <_printf_i+0x1a4>
 80171d0:	6823      	ldr	r3, [r4, #0]
 80171d2:	f023 0320 	bic.w	r3, r3, #32
 80171d6:	6023      	str	r3, [r4, #0]
 80171d8:	2310      	movs	r3, #16
 80171da:	e7a7      	b.n	801712c <_printf_i+0xf8>
 80171dc:	4824      	ldr	r0, [pc, #144]	; (8017270 <_printf_i+0x23c>)
 80171de:	e7e4      	b.n	80171aa <_printf_i+0x176>
 80171e0:	4615      	mov	r5, r2
 80171e2:	e7bd      	b.n	8017160 <_printf_i+0x12c>
 80171e4:	682b      	ldr	r3, [r5, #0]
 80171e6:	6826      	ldr	r6, [r4, #0]
 80171e8:	6961      	ldr	r1, [r4, #20]
 80171ea:	1d18      	adds	r0, r3, #4
 80171ec:	6028      	str	r0, [r5, #0]
 80171ee:	0635      	lsls	r5, r6, #24
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	d501      	bpl.n	80171f8 <_printf_i+0x1c4>
 80171f4:	6019      	str	r1, [r3, #0]
 80171f6:	e002      	b.n	80171fe <_printf_i+0x1ca>
 80171f8:	0670      	lsls	r0, r6, #25
 80171fa:	d5fb      	bpl.n	80171f4 <_printf_i+0x1c0>
 80171fc:	8019      	strh	r1, [r3, #0]
 80171fe:	2300      	movs	r3, #0
 8017200:	6123      	str	r3, [r4, #16]
 8017202:	4615      	mov	r5, r2
 8017204:	e7bc      	b.n	8017180 <_printf_i+0x14c>
 8017206:	682b      	ldr	r3, [r5, #0]
 8017208:	1d1a      	adds	r2, r3, #4
 801720a:	602a      	str	r2, [r5, #0]
 801720c:	681d      	ldr	r5, [r3, #0]
 801720e:	6862      	ldr	r2, [r4, #4]
 8017210:	2100      	movs	r1, #0
 8017212:	4628      	mov	r0, r5
 8017214:	f7e8 ffdc 	bl	80001d0 <memchr>
 8017218:	b108      	cbz	r0, 801721e <_printf_i+0x1ea>
 801721a:	1b40      	subs	r0, r0, r5
 801721c:	6060      	str	r0, [r4, #4]
 801721e:	6863      	ldr	r3, [r4, #4]
 8017220:	6123      	str	r3, [r4, #16]
 8017222:	2300      	movs	r3, #0
 8017224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017228:	e7aa      	b.n	8017180 <_printf_i+0x14c>
 801722a:	6923      	ldr	r3, [r4, #16]
 801722c:	462a      	mov	r2, r5
 801722e:	4649      	mov	r1, r9
 8017230:	4640      	mov	r0, r8
 8017232:	47d0      	blx	sl
 8017234:	3001      	adds	r0, #1
 8017236:	d0ad      	beq.n	8017194 <_printf_i+0x160>
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	079b      	lsls	r3, r3, #30
 801723c:	d413      	bmi.n	8017266 <_printf_i+0x232>
 801723e:	68e0      	ldr	r0, [r4, #12]
 8017240:	9b03      	ldr	r3, [sp, #12]
 8017242:	4298      	cmp	r0, r3
 8017244:	bfb8      	it	lt
 8017246:	4618      	movlt	r0, r3
 8017248:	e7a6      	b.n	8017198 <_printf_i+0x164>
 801724a:	2301      	movs	r3, #1
 801724c:	4632      	mov	r2, r6
 801724e:	4649      	mov	r1, r9
 8017250:	4640      	mov	r0, r8
 8017252:	47d0      	blx	sl
 8017254:	3001      	adds	r0, #1
 8017256:	d09d      	beq.n	8017194 <_printf_i+0x160>
 8017258:	3501      	adds	r5, #1
 801725a:	68e3      	ldr	r3, [r4, #12]
 801725c:	9903      	ldr	r1, [sp, #12]
 801725e:	1a5b      	subs	r3, r3, r1
 8017260:	42ab      	cmp	r3, r5
 8017262:	dcf2      	bgt.n	801724a <_printf_i+0x216>
 8017264:	e7eb      	b.n	801723e <_printf_i+0x20a>
 8017266:	2500      	movs	r5, #0
 8017268:	f104 0619 	add.w	r6, r4, #25
 801726c:	e7f5      	b.n	801725a <_printf_i+0x226>
 801726e:	bf00      	nop
 8017270:	0801c8de 	.word	0x0801c8de
 8017274:	0801c8ef 	.word	0x0801c8ef

08017278 <_scanf_float>:
 8017278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727c:	b087      	sub	sp, #28
 801727e:	4617      	mov	r7, r2
 8017280:	9303      	str	r3, [sp, #12]
 8017282:	688b      	ldr	r3, [r1, #8]
 8017284:	1e5a      	subs	r2, r3, #1
 8017286:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801728a:	bf83      	ittte	hi
 801728c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017290:	195b      	addhi	r3, r3, r5
 8017292:	9302      	strhi	r3, [sp, #8]
 8017294:	2300      	movls	r3, #0
 8017296:	bf86      	itte	hi
 8017298:	f240 135d 	movwhi	r3, #349	; 0x15d
 801729c:	608b      	strhi	r3, [r1, #8]
 801729e:	9302      	strls	r3, [sp, #8]
 80172a0:	680b      	ldr	r3, [r1, #0]
 80172a2:	468b      	mov	fp, r1
 80172a4:	2500      	movs	r5, #0
 80172a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80172aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80172ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80172b2:	4680      	mov	r8, r0
 80172b4:	460c      	mov	r4, r1
 80172b6:	465e      	mov	r6, fp
 80172b8:	46aa      	mov	sl, r5
 80172ba:	46a9      	mov	r9, r5
 80172bc:	9501      	str	r5, [sp, #4]
 80172be:	68a2      	ldr	r2, [r4, #8]
 80172c0:	b152      	cbz	r2, 80172d8 <_scanf_float+0x60>
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	2b4e      	cmp	r3, #78	; 0x4e
 80172c8:	d864      	bhi.n	8017394 <_scanf_float+0x11c>
 80172ca:	2b40      	cmp	r3, #64	; 0x40
 80172cc:	d83c      	bhi.n	8017348 <_scanf_float+0xd0>
 80172ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80172d2:	b2c8      	uxtb	r0, r1
 80172d4:	280e      	cmp	r0, #14
 80172d6:	d93a      	bls.n	801734e <_scanf_float+0xd6>
 80172d8:	f1b9 0f00 	cmp.w	r9, #0
 80172dc:	d003      	beq.n	80172e6 <_scanf_float+0x6e>
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80172e4:	6023      	str	r3, [r4, #0]
 80172e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80172ea:	f1ba 0f01 	cmp.w	sl, #1
 80172ee:	f200 8113 	bhi.w	8017518 <_scanf_float+0x2a0>
 80172f2:	455e      	cmp	r6, fp
 80172f4:	f200 8105 	bhi.w	8017502 <_scanf_float+0x28a>
 80172f8:	2501      	movs	r5, #1
 80172fa:	4628      	mov	r0, r5
 80172fc:	b007      	add	sp, #28
 80172fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017302:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017306:	2a0d      	cmp	r2, #13
 8017308:	d8e6      	bhi.n	80172d8 <_scanf_float+0x60>
 801730a:	a101      	add	r1, pc, #4	; (adr r1, 8017310 <_scanf_float+0x98>)
 801730c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017310:	0801744f 	.word	0x0801744f
 8017314:	080172d9 	.word	0x080172d9
 8017318:	080172d9 	.word	0x080172d9
 801731c:	080172d9 	.word	0x080172d9
 8017320:	080174af 	.word	0x080174af
 8017324:	08017487 	.word	0x08017487
 8017328:	080172d9 	.word	0x080172d9
 801732c:	080172d9 	.word	0x080172d9
 8017330:	0801745d 	.word	0x0801745d
 8017334:	080172d9 	.word	0x080172d9
 8017338:	080172d9 	.word	0x080172d9
 801733c:	080172d9 	.word	0x080172d9
 8017340:	080172d9 	.word	0x080172d9
 8017344:	08017415 	.word	0x08017415
 8017348:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801734c:	e7db      	b.n	8017306 <_scanf_float+0x8e>
 801734e:	290e      	cmp	r1, #14
 8017350:	d8c2      	bhi.n	80172d8 <_scanf_float+0x60>
 8017352:	a001      	add	r0, pc, #4	; (adr r0, 8017358 <_scanf_float+0xe0>)
 8017354:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017358:	08017407 	.word	0x08017407
 801735c:	080172d9 	.word	0x080172d9
 8017360:	08017407 	.word	0x08017407
 8017364:	0801749b 	.word	0x0801749b
 8017368:	080172d9 	.word	0x080172d9
 801736c:	080173b5 	.word	0x080173b5
 8017370:	080173f1 	.word	0x080173f1
 8017374:	080173f1 	.word	0x080173f1
 8017378:	080173f1 	.word	0x080173f1
 801737c:	080173f1 	.word	0x080173f1
 8017380:	080173f1 	.word	0x080173f1
 8017384:	080173f1 	.word	0x080173f1
 8017388:	080173f1 	.word	0x080173f1
 801738c:	080173f1 	.word	0x080173f1
 8017390:	080173f1 	.word	0x080173f1
 8017394:	2b6e      	cmp	r3, #110	; 0x6e
 8017396:	d809      	bhi.n	80173ac <_scanf_float+0x134>
 8017398:	2b60      	cmp	r3, #96	; 0x60
 801739a:	d8b2      	bhi.n	8017302 <_scanf_float+0x8a>
 801739c:	2b54      	cmp	r3, #84	; 0x54
 801739e:	d077      	beq.n	8017490 <_scanf_float+0x218>
 80173a0:	2b59      	cmp	r3, #89	; 0x59
 80173a2:	d199      	bne.n	80172d8 <_scanf_float+0x60>
 80173a4:	2d07      	cmp	r5, #7
 80173a6:	d197      	bne.n	80172d8 <_scanf_float+0x60>
 80173a8:	2508      	movs	r5, #8
 80173aa:	e029      	b.n	8017400 <_scanf_float+0x188>
 80173ac:	2b74      	cmp	r3, #116	; 0x74
 80173ae:	d06f      	beq.n	8017490 <_scanf_float+0x218>
 80173b0:	2b79      	cmp	r3, #121	; 0x79
 80173b2:	e7f6      	b.n	80173a2 <_scanf_float+0x12a>
 80173b4:	6821      	ldr	r1, [r4, #0]
 80173b6:	05c8      	lsls	r0, r1, #23
 80173b8:	d51a      	bpl.n	80173f0 <_scanf_float+0x178>
 80173ba:	9b02      	ldr	r3, [sp, #8]
 80173bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80173c0:	6021      	str	r1, [r4, #0]
 80173c2:	f109 0901 	add.w	r9, r9, #1
 80173c6:	b11b      	cbz	r3, 80173d0 <_scanf_float+0x158>
 80173c8:	3b01      	subs	r3, #1
 80173ca:	3201      	adds	r2, #1
 80173cc:	9302      	str	r3, [sp, #8]
 80173ce:	60a2      	str	r2, [r4, #8]
 80173d0:	68a3      	ldr	r3, [r4, #8]
 80173d2:	3b01      	subs	r3, #1
 80173d4:	60a3      	str	r3, [r4, #8]
 80173d6:	6923      	ldr	r3, [r4, #16]
 80173d8:	3301      	adds	r3, #1
 80173da:	6123      	str	r3, [r4, #16]
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	3b01      	subs	r3, #1
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	607b      	str	r3, [r7, #4]
 80173e4:	f340 8084 	ble.w	80174f0 <_scanf_float+0x278>
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	3301      	adds	r3, #1
 80173ec:	603b      	str	r3, [r7, #0]
 80173ee:	e766      	b.n	80172be <_scanf_float+0x46>
 80173f0:	eb1a 0f05 	cmn.w	sl, r5
 80173f4:	f47f af70 	bne.w	80172d8 <_scanf_float+0x60>
 80173f8:	6822      	ldr	r2, [r4, #0]
 80173fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80173fe:	6022      	str	r2, [r4, #0]
 8017400:	f806 3b01 	strb.w	r3, [r6], #1
 8017404:	e7e4      	b.n	80173d0 <_scanf_float+0x158>
 8017406:	6822      	ldr	r2, [r4, #0]
 8017408:	0610      	lsls	r0, r2, #24
 801740a:	f57f af65 	bpl.w	80172d8 <_scanf_float+0x60>
 801740e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017412:	e7f4      	b.n	80173fe <_scanf_float+0x186>
 8017414:	f1ba 0f00 	cmp.w	sl, #0
 8017418:	d10e      	bne.n	8017438 <_scanf_float+0x1c0>
 801741a:	f1b9 0f00 	cmp.w	r9, #0
 801741e:	d10e      	bne.n	801743e <_scanf_float+0x1c6>
 8017420:	6822      	ldr	r2, [r4, #0]
 8017422:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017426:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801742a:	d108      	bne.n	801743e <_scanf_float+0x1c6>
 801742c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017430:	6022      	str	r2, [r4, #0]
 8017432:	f04f 0a01 	mov.w	sl, #1
 8017436:	e7e3      	b.n	8017400 <_scanf_float+0x188>
 8017438:	f1ba 0f02 	cmp.w	sl, #2
 801743c:	d055      	beq.n	80174ea <_scanf_float+0x272>
 801743e:	2d01      	cmp	r5, #1
 8017440:	d002      	beq.n	8017448 <_scanf_float+0x1d0>
 8017442:	2d04      	cmp	r5, #4
 8017444:	f47f af48 	bne.w	80172d8 <_scanf_float+0x60>
 8017448:	3501      	adds	r5, #1
 801744a:	b2ed      	uxtb	r5, r5
 801744c:	e7d8      	b.n	8017400 <_scanf_float+0x188>
 801744e:	f1ba 0f01 	cmp.w	sl, #1
 8017452:	f47f af41 	bne.w	80172d8 <_scanf_float+0x60>
 8017456:	f04f 0a02 	mov.w	sl, #2
 801745a:	e7d1      	b.n	8017400 <_scanf_float+0x188>
 801745c:	b97d      	cbnz	r5, 801747e <_scanf_float+0x206>
 801745e:	f1b9 0f00 	cmp.w	r9, #0
 8017462:	f47f af3c 	bne.w	80172de <_scanf_float+0x66>
 8017466:	6822      	ldr	r2, [r4, #0]
 8017468:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801746c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017470:	f47f af39 	bne.w	80172e6 <_scanf_float+0x6e>
 8017474:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017478:	6022      	str	r2, [r4, #0]
 801747a:	2501      	movs	r5, #1
 801747c:	e7c0      	b.n	8017400 <_scanf_float+0x188>
 801747e:	2d03      	cmp	r5, #3
 8017480:	d0e2      	beq.n	8017448 <_scanf_float+0x1d0>
 8017482:	2d05      	cmp	r5, #5
 8017484:	e7de      	b.n	8017444 <_scanf_float+0x1cc>
 8017486:	2d02      	cmp	r5, #2
 8017488:	f47f af26 	bne.w	80172d8 <_scanf_float+0x60>
 801748c:	2503      	movs	r5, #3
 801748e:	e7b7      	b.n	8017400 <_scanf_float+0x188>
 8017490:	2d06      	cmp	r5, #6
 8017492:	f47f af21 	bne.w	80172d8 <_scanf_float+0x60>
 8017496:	2507      	movs	r5, #7
 8017498:	e7b2      	b.n	8017400 <_scanf_float+0x188>
 801749a:	6822      	ldr	r2, [r4, #0]
 801749c:	0591      	lsls	r1, r2, #22
 801749e:	f57f af1b 	bpl.w	80172d8 <_scanf_float+0x60>
 80174a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80174a6:	6022      	str	r2, [r4, #0]
 80174a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80174ac:	e7a8      	b.n	8017400 <_scanf_float+0x188>
 80174ae:	6822      	ldr	r2, [r4, #0]
 80174b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80174b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80174b8:	d006      	beq.n	80174c8 <_scanf_float+0x250>
 80174ba:	0550      	lsls	r0, r2, #21
 80174bc:	f57f af0c 	bpl.w	80172d8 <_scanf_float+0x60>
 80174c0:	f1b9 0f00 	cmp.w	r9, #0
 80174c4:	f43f af0f 	beq.w	80172e6 <_scanf_float+0x6e>
 80174c8:	0591      	lsls	r1, r2, #22
 80174ca:	bf58      	it	pl
 80174cc:	9901      	ldrpl	r1, [sp, #4]
 80174ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80174d2:	bf58      	it	pl
 80174d4:	eba9 0101 	subpl.w	r1, r9, r1
 80174d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80174dc:	bf58      	it	pl
 80174de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80174e2:	6022      	str	r2, [r4, #0]
 80174e4:	f04f 0900 	mov.w	r9, #0
 80174e8:	e78a      	b.n	8017400 <_scanf_float+0x188>
 80174ea:	f04f 0a03 	mov.w	sl, #3
 80174ee:	e787      	b.n	8017400 <_scanf_float+0x188>
 80174f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80174f4:	4639      	mov	r1, r7
 80174f6:	4640      	mov	r0, r8
 80174f8:	4798      	blx	r3
 80174fa:	2800      	cmp	r0, #0
 80174fc:	f43f aedf 	beq.w	80172be <_scanf_float+0x46>
 8017500:	e6ea      	b.n	80172d8 <_scanf_float+0x60>
 8017502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017506:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801750a:	463a      	mov	r2, r7
 801750c:	4640      	mov	r0, r8
 801750e:	4798      	blx	r3
 8017510:	6923      	ldr	r3, [r4, #16]
 8017512:	3b01      	subs	r3, #1
 8017514:	6123      	str	r3, [r4, #16]
 8017516:	e6ec      	b.n	80172f2 <_scanf_float+0x7a>
 8017518:	1e6b      	subs	r3, r5, #1
 801751a:	2b06      	cmp	r3, #6
 801751c:	d825      	bhi.n	801756a <_scanf_float+0x2f2>
 801751e:	2d02      	cmp	r5, #2
 8017520:	d836      	bhi.n	8017590 <_scanf_float+0x318>
 8017522:	455e      	cmp	r6, fp
 8017524:	f67f aee8 	bls.w	80172f8 <_scanf_float+0x80>
 8017528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801752c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017530:	463a      	mov	r2, r7
 8017532:	4640      	mov	r0, r8
 8017534:	4798      	blx	r3
 8017536:	6923      	ldr	r3, [r4, #16]
 8017538:	3b01      	subs	r3, #1
 801753a:	6123      	str	r3, [r4, #16]
 801753c:	e7f1      	b.n	8017522 <_scanf_float+0x2aa>
 801753e:	9802      	ldr	r0, [sp, #8]
 8017540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017544:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017548:	9002      	str	r0, [sp, #8]
 801754a:	463a      	mov	r2, r7
 801754c:	4640      	mov	r0, r8
 801754e:	4798      	blx	r3
 8017550:	6923      	ldr	r3, [r4, #16]
 8017552:	3b01      	subs	r3, #1
 8017554:	6123      	str	r3, [r4, #16]
 8017556:	f10a 3aff 	add.w	sl, sl, #4294967295
 801755a:	fa5f fa8a 	uxtb.w	sl, sl
 801755e:	f1ba 0f02 	cmp.w	sl, #2
 8017562:	d1ec      	bne.n	801753e <_scanf_float+0x2c6>
 8017564:	3d03      	subs	r5, #3
 8017566:	b2ed      	uxtb	r5, r5
 8017568:	1b76      	subs	r6, r6, r5
 801756a:	6823      	ldr	r3, [r4, #0]
 801756c:	05da      	lsls	r2, r3, #23
 801756e:	d52f      	bpl.n	80175d0 <_scanf_float+0x358>
 8017570:	055b      	lsls	r3, r3, #21
 8017572:	d510      	bpl.n	8017596 <_scanf_float+0x31e>
 8017574:	455e      	cmp	r6, fp
 8017576:	f67f aebf 	bls.w	80172f8 <_scanf_float+0x80>
 801757a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801757e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017582:	463a      	mov	r2, r7
 8017584:	4640      	mov	r0, r8
 8017586:	4798      	blx	r3
 8017588:	6923      	ldr	r3, [r4, #16]
 801758a:	3b01      	subs	r3, #1
 801758c:	6123      	str	r3, [r4, #16]
 801758e:	e7f1      	b.n	8017574 <_scanf_float+0x2fc>
 8017590:	46aa      	mov	sl, r5
 8017592:	9602      	str	r6, [sp, #8]
 8017594:	e7df      	b.n	8017556 <_scanf_float+0x2de>
 8017596:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801759a:	6923      	ldr	r3, [r4, #16]
 801759c:	2965      	cmp	r1, #101	; 0x65
 801759e:	f103 33ff 	add.w	r3, r3, #4294967295
 80175a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80175a6:	6123      	str	r3, [r4, #16]
 80175a8:	d00c      	beq.n	80175c4 <_scanf_float+0x34c>
 80175aa:	2945      	cmp	r1, #69	; 0x45
 80175ac:	d00a      	beq.n	80175c4 <_scanf_float+0x34c>
 80175ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175b2:	463a      	mov	r2, r7
 80175b4:	4640      	mov	r0, r8
 80175b6:	4798      	blx	r3
 80175b8:	6923      	ldr	r3, [r4, #16]
 80175ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80175be:	3b01      	subs	r3, #1
 80175c0:	1eb5      	subs	r5, r6, #2
 80175c2:	6123      	str	r3, [r4, #16]
 80175c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175c8:	463a      	mov	r2, r7
 80175ca:	4640      	mov	r0, r8
 80175cc:	4798      	blx	r3
 80175ce:	462e      	mov	r6, r5
 80175d0:	6825      	ldr	r5, [r4, #0]
 80175d2:	f015 0510 	ands.w	r5, r5, #16
 80175d6:	d158      	bne.n	801768a <_scanf_float+0x412>
 80175d8:	7035      	strb	r5, [r6, #0]
 80175da:	6823      	ldr	r3, [r4, #0]
 80175dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80175e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80175e4:	d11c      	bne.n	8017620 <_scanf_float+0x3a8>
 80175e6:	9b01      	ldr	r3, [sp, #4]
 80175e8:	454b      	cmp	r3, r9
 80175ea:	eba3 0209 	sub.w	r2, r3, r9
 80175ee:	d124      	bne.n	801763a <_scanf_float+0x3c2>
 80175f0:	2200      	movs	r2, #0
 80175f2:	4659      	mov	r1, fp
 80175f4:	4640      	mov	r0, r8
 80175f6:	f002 fcdf 	bl	8019fb8 <_strtod_r>
 80175fa:	9b03      	ldr	r3, [sp, #12]
 80175fc:	6821      	ldr	r1, [r4, #0]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	f011 0f02 	tst.w	r1, #2
 8017604:	ec57 6b10 	vmov	r6, r7, d0
 8017608:	f103 0204 	add.w	r2, r3, #4
 801760c:	d020      	beq.n	8017650 <_scanf_float+0x3d8>
 801760e:	9903      	ldr	r1, [sp, #12]
 8017610:	600a      	str	r2, [r1, #0]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	e9c3 6700 	strd	r6, r7, [r3]
 8017618:	68e3      	ldr	r3, [r4, #12]
 801761a:	3301      	adds	r3, #1
 801761c:	60e3      	str	r3, [r4, #12]
 801761e:	e66c      	b.n	80172fa <_scanf_float+0x82>
 8017620:	9b04      	ldr	r3, [sp, #16]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d0e4      	beq.n	80175f0 <_scanf_float+0x378>
 8017626:	9905      	ldr	r1, [sp, #20]
 8017628:	230a      	movs	r3, #10
 801762a:	462a      	mov	r2, r5
 801762c:	3101      	adds	r1, #1
 801762e:	4640      	mov	r0, r8
 8017630:	f002 fd4a 	bl	801a0c8 <_strtol_r>
 8017634:	9b04      	ldr	r3, [sp, #16]
 8017636:	9e05      	ldr	r6, [sp, #20]
 8017638:	1ac2      	subs	r2, r0, r3
 801763a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801763e:	429e      	cmp	r6, r3
 8017640:	bf28      	it	cs
 8017642:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017646:	4912      	ldr	r1, [pc, #72]	; (8017690 <_scanf_float+0x418>)
 8017648:	4630      	mov	r0, r6
 801764a:	f000 f959 	bl	8017900 <siprintf>
 801764e:	e7cf      	b.n	80175f0 <_scanf_float+0x378>
 8017650:	f011 0f04 	tst.w	r1, #4
 8017654:	9903      	ldr	r1, [sp, #12]
 8017656:	600a      	str	r2, [r1, #0]
 8017658:	d1db      	bne.n	8017612 <_scanf_float+0x39a>
 801765a:	f8d3 8000 	ldr.w	r8, [r3]
 801765e:	ee10 2a10 	vmov	r2, s0
 8017662:	ee10 0a10 	vmov	r0, s0
 8017666:	463b      	mov	r3, r7
 8017668:	4639      	mov	r1, r7
 801766a:	f7e9 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 801766e:	b128      	cbz	r0, 801767c <_scanf_float+0x404>
 8017670:	4808      	ldr	r0, [pc, #32]	; (8017694 <_scanf_float+0x41c>)
 8017672:	f000 fb13 	bl	8017c9c <nanf>
 8017676:	ed88 0a00 	vstr	s0, [r8]
 801767a:	e7cd      	b.n	8017618 <_scanf_float+0x3a0>
 801767c:	4630      	mov	r0, r6
 801767e:	4639      	mov	r1, r7
 8017680:	f7e9 fab2 	bl	8000be8 <__aeabi_d2f>
 8017684:	f8c8 0000 	str.w	r0, [r8]
 8017688:	e7c6      	b.n	8017618 <_scanf_float+0x3a0>
 801768a:	2500      	movs	r5, #0
 801768c:	e635      	b.n	80172fa <_scanf_float+0x82>
 801768e:	bf00      	nop
 8017690:	0801c900 	.word	0x0801c900
 8017694:	0801c8cb 	.word	0x0801c8cb

08017698 <std>:
 8017698:	2300      	movs	r3, #0
 801769a:	b510      	push	{r4, lr}
 801769c:	4604      	mov	r4, r0
 801769e:	e9c0 3300 	strd	r3, r3, [r0]
 80176a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176a6:	6083      	str	r3, [r0, #8]
 80176a8:	8181      	strh	r1, [r0, #12]
 80176aa:	6643      	str	r3, [r0, #100]	; 0x64
 80176ac:	81c2      	strh	r2, [r0, #14]
 80176ae:	6183      	str	r3, [r0, #24]
 80176b0:	4619      	mov	r1, r3
 80176b2:	2208      	movs	r2, #8
 80176b4:	305c      	adds	r0, #92	; 0x5c
 80176b6:	f000 fa1b 	bl	8017af0 <memset>
 80176ba:	4b0d      	ldr	r3, [pc, #52]	; (80176f0 <std+0x58>)
 80176bc:	6263      	str	r3, [r4, #36]	; 0x24
 80176be:	4b0d      	ldr	r3, [pc, #52]	; (80176f4 <std+0x5c>)
 80176c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80176c2:	4b0d      	ldr	r3, [pc, #52]	; (80176f8 <std+0x60>)
 80176c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80176c6:	4b0d      	ldr	r3, [pc, #52]	; (80176fc <std+0x64>)
 80176c8:	6323      	str	r3, [r4, #48]	; 0x30
 80176ca:	4b0d      	ldr	r3, [pc, #52]	; (8017700 <std+0x68>)
 80176cc:	6224      	str	r4, [r4, #32]
 80176ce:	429c      	cmp	r4, r3
 80176d0:	d006      	beq.n	80176e0 <std+0x48>
 80176d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80176d6:	4294      	cmp	r4, r2
 80176d8:	d002      	beq.n	80176e0 <std+0x48>
 80176da:	33d0      	adds	r3, #208	; 0xd0
 80176dc:	429c      	cmp	r4, r3
 80176de:	d105      	bne.n	80176ec <std+0x54>
 80176e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80176e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176e8:	f000 babe 	b.w	8017c68 <__retarget_lock_init_recursive>
 80176ec:	bd10      	pop	{r4, pc}
 80176ee:	bf00      	nop
 80176f0:	08017941 	.word	0x08017941
 80176f4:	08017963 	.word	0x08017963
 80176f8:	0801799b 	.word	0x0801799b
 80176fc:	080179bf 	.word	0x080179bf
 8017700:	20002b04 	.word	0x20002b04

08017704 <stdio_exit_handler>:
 8017704:	4a02      	ldr	r2, [pc, #8]	; (8017710 <stdio_exit_handler+0xc>)
 8017706:	4903      	ldr	r1, [pc, #12]	; (8017714 <stdio_exit_handler+0x10>)
 8017708:	4803      	ldr	r0, [pc, #12]	; (8017718 <stdio_exit_handler+0x14>)
 801770a:	f000 b8a7 	b.w	801785c <_fwalk_sglue>
 801770e:	bf00      	nop
 8017710:	20000154 	.word	0x20000154
 8017714:	0801a711 	.word	0x0801a711
 8017718:	20000160 	.word	0x20000160

0801771c <cleanup_stdio>:
 801771c:	6841      	ldr	r1, [r0, #4]
 801771e:	4b0c      	ldr	r3, [pc, #48]	; (8017750 <cleanup_stdio+0x34>)
 8017720:	4299      	cmp	r1, r3
 8017722:	b510      	push	{r4, lr}
 8017724:	4604      	mov	r4, r0
 8017726:	d001      	beq.n	801772c <cleanup_stdio+0x10>
 8017728:	f002 fff2 	bl	801a710 <_fflush_r>
 801772c:	68a1      	ldr	r1, [r4, #8]
 801772e:	4b09      	ldr	r3, [pc, #36]	; (8017754 <cleanup_stdio+0x38>)
 8017730:	4299      	cmp	r1, r3
 8017732:	d002      	beq.n	801773a <cleanup_stdio+0x1e>
 8017734:	4620      	mov	r0, r4
 8017736:	f002 ffeb 	bl	801a710 <_fflush_r>
 801773a:	68e1      	ldr	r1, [r4, #12]
 801773c:	4b06      	ldr	r3, [pc, #24]	; (8017758 <cleanup_stdio+0x3c>)
 801773e:	4299      	cmp	r1, r3
 8017740:	d004      	beq.n	801774c <cleanup_stdio+0x30>
 8017742:	4620      	mov	r0, r4
 8017744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017748:	f002 bfe2 	b.w	801a710 <_fflush_r>
 801774c:	bd10      	pop	{r4, pc}
 801774e:	bf00      	nop
 8017750:	20002b04 	.word	0x20002b04
 8017754:	20002b6c 	.word	0x20002b6c
 8017758:	20002bd4 	.word	0x20002bd4

0801775c <global_stdio_init.part.0>:
 801775c:	b510      	push	{r4, lr}
 801775e:	4b0b      	ldr	r3, [pc, #44]	; (801778c <global_stdio_init.part.0+0x30>)
 8017760:	4c0b      	ldr	r4, [pc, #44]	; (8017790 <global_stdio_init.part.0+0x34>)
 8017762:	4a0c      	ldr	r2, [pc, #48]	; (8017794 <global_stdio_init.part.0+0x38>)
 8017764:	601a      	str	r2, [r3, #0]
 8017766:	4620      	mov	r0, r4
 8017768:	2200      	movs	r2, #0
 801776a:	2104      	movs	r1, #4
 801776c:	f7ff ff94 	bl	8017698 <std>
 8017770:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017774:	2201      	movs	r2, #1
 8017776:	2109      	movs	r1, #9
 8017778:	f7ff ff8e 	bl	8017698 <std>
 801777c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017780:	2202      	movs	r2, #2
 8017782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017786:	2112      	movs	r1, #18
 8017788:	f7ff bf86 	b.w	8017698 <std>
 801778c:	20002c3c 	.word	0x20002c3c
 8017790:	20002b04 	.word	0x20002b04
 8017794:	08017705 	.word	0x08017705

08017798 <__sfp_lock_acquire>:
 8017798:	4801      	ldr	r0, [pc, #4]	; (80177a0 <__sfp_lock_acquire+0x8>)
 801779a:	f000 ba66 	b.w	8017c6a <__retarget_lock_acquire_recursive>
 801779e:	bf00      	nop
 80177a0:	20002c45 	.word	0x20002c45

080177a4 <__sfp_lock_release>:
 80177a4:	4801      	ldr	r0, [pc, #4]	; (80177ac <__sfp_lock_release+0x8>)
 80177a6:	f000 ba61 	b.w	8017c6c <__retarget_lock_release_recursive>
 80177aa:	bf00      	nop
 80177ac:	20002c45 	.word	0x20002c45

080177b0 <__sinit>:
 80177b0:	b510      	push	{r4, lr}
 80177b2:	4604      	mov	r4, r0
 80177b4:	f7ff fff0 	bl	8017798 <__sfp_lock_acquire>
 80177b8:	6a23      	ldr	r3, [r4, #32]
 80177ba:	b11b      	cbz	r3, 80177c4 <__sinit+0x14>
 80177bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177c0:	f7ff bff0 	b.w	80177a4 <__sfp_lock_release>
 80177c4:	4b04      	ldr	r3, [pc, #16]	; (80177d8 <__sinit+0x28>)
 80177c6:	6223      	str	r3, [r4, #32]
 80177c8:	4b04      	ldr	r3, [pc, #16]	; (80177dc <__sinit+0x2c>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d1f5      	bne.n	80177bc <__sinit+0xc>
 80177d0:	f7ff ffc4 	bl	801775c <global_stdio_init.part.0>
 80177d4:	e7f2      	b.n	80177bc <__sinit+0xc>
 80177d6:	bf00      	nop
 80177d8:	0801771d 	.word	0x0801771d
 80177dc:	20002c3c 	.word	0x20002c3c

080177e0 <fiprintf>:
 80177e0:	b40e      	push	{r1, r2, r3}
 80177e2:	b503      	push	{r0, r1, lr}
 80177e4:	4601      	mov	r1, r0
 80177e6:	ab03      	add	r3, sp, #12
 80177e8:	4805      	ldr	r0, [pc, #20]	; (8017800 <fiprintf+0x20>)
 80177ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80177ee:	6800      	ldr	r0, [r0, #0]
 80177f0:	9301      	str	r3, [sp, #4]
 80177f2:	f002 fded 	bl	801a3d0 <_vfiprintf_r>
 80177f6:	b002      	add	sp, #8
 80177f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80177fc:	b003      	add	sp, #12
 80177fe:	4770      	bx	lr
 8017800:	200001ac 	.word	0x200001ac

08017804 <_fputc_r>:
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	460e      	mov	r6, r1
 8017808:	4614      	mov	r4, r2
 801780a:	4605      	mov	r5, r0
 801780c:	b118      	cbz	r0, 8017816 <_fputc_r+0x12>
 801780e:	6a03      	ldr	r3, [r0, #32]
 8017810:	b90b      	cbnz	r3, 8017816 <_fputc_r+0x12>
 8017812:	f7ff ffcd 	bl	80177b0 <__sinit>
 8017816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017818:	07d8      	lsls	r0, r3, #31
 801781a:	d405      	bmi.n	8017828 <_fputc_r+0x24>
 801781c:	89a3      	ldrh	r3, [r4, #12]
 801781e:	0599      	lsls	r1, r3, #22
 8017820:	d402      	bmi.n	8017828 <_fputc_r+0x24>
 8017822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017824:	f000 fa21 	bl	8017c6a <__retarget_lock_acquire_recursive>
 8017828:	4622      	mov	r2, r4
 801782a:	4628      	mov	r0, r5
 801782c:	4631      	mov	r1, r6
 801782e:	f000 f833 	bl	8017898 <_putc_r>
 8017832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017834:	07da      	lsls	r2, r3, #31
 8017836:	4605      	mov	r5, r0
 8017838:	d405      	bmi.n	8017846 <_fputc_r+0x42>
 801783a:	89a3      	ldrh	r3, [r4, #12]
 801783c:	059b      	lsls	r3, r3, #22
 801783e:	d402      	bmi.n	8017846 <_fputc_r+0x42>
 8017840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017842:	f000 fa13 	bl	8017c6c <__retarget_lock_release_recursive>
 8017846:	4628      	mov	r0, r5
 8017848:	bd70      	pop	{r4, r5, r6, pc}
	...

0801784c <fputc>:
 801784c:	4b02      	ldr	r3, [pc, #8]	; (8017858 <fputc+0xc>)
 801784e:	460a      	mov	r2, r1
 8017850:	4601      	mov	r1, r0
 8017852:	6818      	ldr	r0, [r3, #0]
 8017854:	f7ff bfd6 	b.w	8017804 <_fputc_r>
 8017858:	200001ac 	.word	0x200001ac

0801785c <_fwalk_sglue>:
 801785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017860:	4607      	mov	r7, r0
 8017862:	4688      	mov	r8, r1
 8017864:	4614      	mov	r4, r2
 8017866:	2600      	movs	r6, #0
 8017868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801786c:	f1b9 0901 	subs.w	r9, r9, #1
 8017870:	d505      	bpl.n	801787e <_fwalk_sglue+0x22>
 8017872:	6824      	ldr	r4, [r4, #0]
 8017874:	2c00      	cmp	r4, #0
 8017876:	d1f7      	bne.n	8017868 <_fwalk_sglue+0xc>
 8017878:	4630      	mov	r0, r6
 801787a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801787e:	89ab      	ldrh	r3, [r5, #12]
 8017880:	2b01      	cmp	r3, #1
 8017882:	d907      	bls.n	8017894 <_fwalk_sglue+0x38>
 8017884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017888:	3301      	adds	r3, #1
 801788a:	d003      	beq.n	8017894 <_fwalk_sglue+0x38>
 801788c:	4629      	mov	r1, r5
 801788e:	4638      	mov	r0, r7
 8017890:	47c0      	blx	r8
 8017892:	4306      	orrs	r6, r0
 8017894:	3568      	adds	r5, #104	; 0x68
 8017896:	e7e9      	b.n	801786c <_fwalk_sglue+0x10>

08017898 <_putc_r>:
 8017898:	b570      	push	{r4, r5, r6, lr}
 801789a:	460d      	mov	r5, r1
 801789c:	4614      	mov	r4, r2
 801789e:	4606      	mov	r6, r0
 80178a0:	b118      	cbz	r0, 80178aa <_putc_r+0x12>
 80178a2:	6a03      	ldr	r3, [r0, #32]
 80178a4:	b90b      	cbnz	r3, 80178aa <_putc_r+0x12>
 80178a6:	f7ff ff83 	bl	80177b0 <__sinit>
 80178aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178ac:	07d8      	lsls	r0, r3, #31
 80178ae:	d405      	bmi.n	80178bc <_putc_r+0x24>
 80178b0:	89a3      	ldrh	r3, [r4, #12]
 80178b2:	0599      	lsls	r1, r3, #22
 80178b4:	d402      	bmi.n	80178bc <_putc_r+0x24>
 80178b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178b8:	f000 f9d7 	bl	8017c6a <__retarget_lock_acquire_recursive>
 80178bc:	68a3      	ldr	r3, [r4, #8]
 80178be:	3b01      	subs	r3, #1
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	60a3      	str	r3, [r4, #8]
 80178c4:	da05      	bge.n	80178d2 <_putc_r+0x3a>
 80178c6:	69a2      	ldr	r2, [r4, #24]
 80178c8:	4293      	cmp	r3, r2
 80178ca:	db12      	blt.n	80178f2 <_putc_r+0x5a>
 80178cc:	b2eb      	uxtb	r3, r5
 80178ce:	2b0a      	cmp	r3, #10
 80178d0:	d00f      	beq.n	80178f2 <_putc_r+0x5a>
 80178d2:	6823      	ldr	r3, [r4, #0]
 80178d4:	1c5a      	adds	r2, r3, #1
 80178d6:	6022      	str	r2, [r4, #0]
 80178d8:	701d      	strb	r5, [r3, #0]
 80178da:	b2ed      	uxtb	r5, r5
 80178dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178de:	07da      	lsls	r2, r3, #31
 80178e0:	d405      	bmi.n	80178ee <_putc_r+0x56>
 80178e2:	89a3      	ldrh	r3, [r4, #12]
 80178e4:	059b      	lsls	r3, r3, #22
 80178e6:	d402      	bmi.n	80178ee <_putc_r+0x56>
 80178e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178ea:	f000 f9bf 	bl	8017c6c <__retarget_lock_release_recursive>
 80178ee:	4628      	mov	r0, r5
 80178f0:	bd70      	pop	{r4, r5, r6, pc}
 80178f2:	4629      	mov	r1, r5
 80178f4:	4622      	mov	r2, r4
 80178f6:	4630      	mov	r0, r6
 80178f8:	f000 f865 	bl	80179c6 <__swbuf_r>
 80178fc:	4605      	mov	r5, r0
 80178fe:	e7ed      	b.n	80178dc <_putc_r+0x44>

08017900 <siprintf>:
 8017900:	b40e      	push	{r1, r2, r3}
 8017902:	b500      	push	{lr}
 8017904:	b09c      	sub	sp, #112	; 0x70
 8017906:	ab1d      	add	r3, sp, #116	; 0x74
 8017908:	9002      	str	r0, [sp, #8]
 801790a:	9006      	str	r0, [sp, #24]
 801790c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017910:	4809      	ldr	r0, [pc, #36]	; (8017938 <siprintf+0x38>)
 8017912:	9107      	str	r1, [sp, #28]
 8017914:	9104      	str	r1, [sp, #16]
 8017916:	4909      	ldr	r1, [pc, #36]	; (801793c <siprintf+0x3c>)
 8017918:	f853 2b04 	ldr.w	r2, [r3], #4
 801791c:	9105      	str	r1, [sp, #20]
 801791e:	6800      	ldr	r0, [r0, #0]
 8017920:	9301      	str	r3, [sp, #4]
 8017922:	a902      	add	r1, sp, #8
 8017924:	f002 fc2c 	bl	801a180 <_svfiprintf_r>
 8017928:	9b02      	ldr	r3, [sp, #8]
 801792a:	2200      	movs	r2, #0
 801792c:	701a      	strb	r2, [r3, #0]
 801792e:	b01c      	add	sp, #112	; 0x70
 8017930:	f85d eb04 	ldr.w	lr, [sp], #4
 8017934:	b003      	add	sp, #12
 8017936:	4770      	bx	lr
 8017938:	200001ac 	.word	0x200001ac
 801793c:	ffff0208 	.word	0xffff0208

08017940 <__sread>:
 8017940:	b510      	push	{r4, lr}
 8017942:	460c      	mov	r4, r1
 8017944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017948:	f000 f930 	bl	8017bac <_read_r>
 801794c:	2800      	cmp	r0, #0
 801794e:	bfab      	itete	ge
 8017950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017952:	89a3      	ldrhlt	r3, [r4, #12]
 8017954:	181b      	addge	r3, r3, r0
 8017956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801795a:	bfac      	ite	ge
 801795c:	6563      	strge	r3, [r4, #84]	; 0x54
 801795e:	81a3      	strhlt	r3, [r4, #12]
 8017960:	bd10      	pop	{r4, pc}

08017962 <__swrite>:
 8017962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017966:	461f      	mov	r7, r3
 8017968:	898b      	ldrh	r3, [r1, #12]
 801796a:	05db      	lsls	r3, r3, #23
 801796c:	4605      	mov	r5, r0
 801796e:	460c      	mov	r4, r1
 8017970:	4616      	mov	r6, r2
 8017972:	d505      	bpl.n	8017980 <__swrite+0x1e>
 8017974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017978:	2302      	movs	r3, #2
 801797a:	2200      	movs	r2, #0
 801797c:	f000 f904 	bl	8017b88 <_lseek_r>
 8017980:	89a3      	ldrh	r3, [r4, #12]
 8017982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801798a:	81a3      	strh	r3, [r4, #12]
 801798c:	4632      	mov	r2, r6
 801798e:	463b      	mov	r3, r7
 8017990:	4628      	mov	r0, r5
 8017992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017996:	f000 b92b 	b.w	8017bf0 <_write_r>

0801799a <__sseek>:
 801799a:	b510      	push	{r4, lr}
 801799c:	460c      	mov	r4, r1
 801799e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179a2:	f000 f8f1 	bl	8017b88 <_lseek_r>
 80179a6:	1c43      	adds	r3, r0, #1
 80179a8:	89a3      	ldrh	r3, [r4, #12]
 80179aa:	bf15      	itete	ne
 80179ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80179ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80179b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80179b6:	81a3      	strheq	r3, [r4, #12]
 80179b8:	bf18      	it	ne
 80179ba:	81a3      	strhne	r3, [r4, #12]
 80179bc:	bd10      	pop	{r4, pc}

080179be <__sclose>:
 80179be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179c2:	f000 b8d1 	b.w	8017b68 <_close_r>

080179c6 <__swbuf_r>:
 80179c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179c8:	460e      	mov	r6, r1
 80179ca:	4614      	mov	r4, r2
 80179cc:	4605      	mov	r5, r0
 80179ce:	b118      	cbz	r0, 80179d8 <__swbuf_r+0x12>
 80179d0:	6a03      	ldr	r3, [r0, #32]
 80179d2:	b90b      	cbnz	r3, 80179d8 <__swbuf_r+0x12>
 80179d4:	f7ff feec 	bl	80177b0 <__sinit>
 80179d8:	69a3      	ldr	r3, [r4, #24]
 80179da:	60a3      	str	r3, [r4, #8]
 80179dc:	89a3      	ldrh	r3, [r4, #12]
 80179de:	071a      	lsls	r2, r3, #28
 80179e0:	d525      	bpl.n	8017a2e <__swbuf_r+0x68>
 80179e2:	6923      	ldr	r3, [r4, #16]
 80179e4:	b31b      	cbz	r3, 8017a2e <__swbuf_r+0x68>
 80179e6:	6823      	ldr	r3, [r4, #0]
 80179e8:	6922      	ldr	r2, [r4, #16]
 80179ea:	1a98      	subs	r0, r3, r2
 80179ec:	6963      	ldr	r3, [r4, #20]
 80179ee:	b2f6      	uxtb	r6, r6
 80179f0:	4283      	cmp	r3, r0
 80179f2:	4637      	mov	r7, r6
 80179f4:	dc04      	bgt.n	8017a00 <__swbuf_r+0x3a>
 80179f6:	4621      	mov	r1, r4
 80179f8:	4628      	mov	r0, r5
 80179fa:	f002 fe89 	bl	801a710 <_fflush_r>
 80179fe:	b9e0      	cbnz	r0, 8017a3a <__swbuf_r+0x74>
 8017a00:	68a3      	ldr	r3, [r4, #8]
 8017a02:	3b01      	subs	r3, #1
 8017a04:	60a3      	str	r3, [r4, #8]
 8017a06:	6823      	ldr	r3, [r4, #0]
 8017a08:	1c5a      	adds	r2, r3, #1
 8017a0a:	6022      	str	r2, [r4, #0]
 8017a0c:	701e      	strb	r6, [r3, #0]
 8017a0e:	6962      	ldr	r2, [r4, #20]
 8017a10:	1c43      	adds	r3, r0, #1
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d004      	beq.n	8017a20 <__swbuf_r+0x5a>
 8017a16:	89a3      	ldrh	r3, [r4, #12]
 8017a18:	07db      	lsls	r3, r3, #31
 8017a1a:	d506      	bpl.n	8017a2a <__swbuf_r+0x64>
 8017a1c:	2e0a      	cmp	r6, #10
 8017a1e:	d104      	bne.n	8017a2a <__swbuf_r+0x64>
 8017a20:	4621      	mov	r1, r4
 8017a22:	4628      	mov	r0, r5
 8017a24:	f002 fe74 	bl	801a710 <_fflush_r>
 8017a28:	b938      	cbnz	r0, 8017a3a <__swbuf_r+0x74>
 8017a2a:	4638      	mov	r0, r7
 8017a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a2e:	4621      	mov	r1, r4
 8017a30:	4628      	mov	r0, r5
 8017a32:	f000 f805 	bl	8017a40 <__swsetup_r>
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d0d5      	beq.n	80179e6 <__swbuf_r+0x20>
 8017a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8017a3e:	e7f4      	b.n	8017a2a <__swbuf_r+0x64>

08017a40 <__swsetup_r>:
 8017a40:	b538      	push	{r3, r4, r5, lr}
 8017a42:	4b2a      	ldr	r3, [pc, #168]	; (8017aec <__swsetup_r+0xac>)
 8017a44:	4605      	mov	r5, r0
 8017a46:	6818      	ldr	r0, [r3, #0]
 8017a48:	460c      	mov	r4, r1
 8017a4a:	b118      	cbz	r0, 8017a54 <__swsetup_r+0x14>
 8017a4c:	6a03      	ldr	r3, [r0, #32]
 8017a4e:	b90b      	cbnz	r3, 8017a54 <__swsetup_r+0x14>
 8017a50:	f7ff feae 	bl	80177b0 <__sinit>
 8017a54:	89a3      	ldrh	r3, [r4, #12]
 8017a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a5a:	0718      	lsls	r0, r3, #28
 8017a5c:	d422      	bmi.n	8017aa4 <__swsetup_r+0x64>
 8017a5e:	06d9      	lsls	r1, r3, #27
 8017a60:	d407      	bmi.n	8017a72 <__swsetup_r+0x32>
 8017a62:	2309      	movs	r3, #9
 8017a64:	602b      	str	r3, [r5, #0]
 8017a66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a6a:	81a3      	strh	r3, [r4, #12]
 8017a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017a70:	e034      	b.n	8017adc <__swsetup_r+0x9c>
 8017a72:	0758      	lsls	r0, r3, #29
 8017a74:	d512      	bpl.n	8017a9c <__swsetup_r+0x5c>
 8017a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a78:	b141      	cbz	r1, 8017a8c <__swsetup_r+0x4c>
 8017a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a7e:	4299      	cmp	r1, r3
 8017a80:	d002      	beq.n	8017a88 <__swsetup_r+0x48>
 8017a82:	4628      	mov	r0, r5
 8017a84:	f000 ff92 	bl	80189ac <_free_r>
 8017a88:	2300      	movs	r3, #0
 8017a8a:	6363      	str	r3, [r4, #52]	; 0x34
 8017a8c:	89a3      	ldrh	r3, [r4, #12]
 8017a8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a92:	81a3      	strh	r3, [r4, #12]
 8017a94:	2300      	movs	r3, #0
 8017a96:	6063      	str	r3, [r4, #4]
 8017a98:	6923      	ldr	r3, [r4, #16]
 8017a9a:	6023      	str	r3, [r4, #0]
 8017a9c:	89a3      	ldrh	r3, [r4, #12]
 8017a9e:	f043 0308 	orr.w	r3, r3, #8
 8017aa2:	81a3      	strh	r3, [r4, #12]
 8017aa4:	6923      	ldr	r3, [r4, #16]
 8017aa6:	b94b      	cbnz	r3, 8017abc <__swsetup_r+0x7c>
 8017aa8:	89a3      	ldrh	r3, [r4, #12]
 8017aaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ab2:	d003      	beq.n	8017abc <__swsetup_r+0x7c>
 8017ab4:	4621      	mov	r1, r4
 8017ab6:	4628      	mov	r0, r5
 8017ab8:	f002 fe78 	bl	801a7ac <__smakebuf_r>
 8017abc:	89a0      	ldrh	r0, [r4, #12]
 8017abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ac2:	f010 0301 	ands.w	r3, r0, #1
 8017ac6:	d00a      	beq.n	8017ade <__swsetup_r+0x9e>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	60a3      	str	r3, [r4, #8]
 8017acc:	6963      	ldr	r3, [r4, #20]
 8017ace:	425b      	negs	r3, r3
 8017ad0:	61a3      	str	r3, [r4, #24]
 8017ad2:	6923      	ldr	r3, [r4, #16]
 8017ad4:	b943      	cbnz	r3, 8017ae8 <__swsetup_r+0xa8>
 8017ad6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ada:	d1c4      	bne.n	8017a66 <__swsetup_r+0x26>
 8017adc:	bd38      	pop	{r3, r4, r5, pc}
 8017ade:	0781      	lsls	r1, r0, #30
 8017ae0:	bf58      	it	pl
 8017ae2:	6963      	ldrpl	r3, [r4, #20]
 8017ae4:	60a3      	str	r3, [r4, #8]
 8017ae6:	e7f4      	b.n	8017ad2 <__swsetup_r+0x92>
 8017ae8:	2000      	movs	r0, #0
 8017aea:	e7f7      	b.n	8017adc <__swsetup_r+0x9c>
 8017aec:	200001ac 	.word	0x200001ac

08017af0 <memset>:
 8017af0:	4402      	add	r2, r0
 8017af2:	4603      	mov	r3, r0
 8017af4:	4293      	cmp	r3, r2
 8017af6:	d100      	bne.n	8017afa <memset+0xa>
 8017af8:	4770      	bx	lr
 8017afa:	f803 1b01 	strb.w	r1, [r3], #1
 8017afe:	e7f9      	b.n	8017af4 <memset+0x4>

08017b00 <strdup>:
 8017b00:	4b02      	ldr	r3, [pc, #8]	; (8017b0c <strdup+0xc>)
 8017b02:	4601      	mov	r1, r0
 8017b04:	6818      	ldr	r0, [r3, #0]
 8017b06:	f000 b803 	b.w	8017b10 <_strdup_r>
 8017b0a:	bf00      	nop
 8017b0c:	200001ac 	.word	0x200001ac

08017b10 <_strdup_r>:
 8017b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b12:	4604      	mov	r4, r0
 8017b14:	4608      	mov	r0, r1
 8017b16:	460d      	mov	r5, r1
 8017b18:	f7e8 fbaa 	bl	8000270 <strlen>
 8017b1c:	1c42      	adds	r2, r0, #1
 8017b1e:	4611      	mov	r1, r2
 8017b20:	4620      	mov	r0, r4
 8017b22:	9201      	str	r2, [sp, #4]
 8017b24:	f7fe feb6 	bl	8016894 <_malloc_r>
 8017b28:	4604      	mov	r4, r0
 8017b2a:	b118      	cbz	r0, 8017b34 <_strdup_r+0x24>
 8017b2c:	9a01      	ldr	r2, [sp, #4]
 8017b2e:	4629      	mov	r1, r5
 8017b30:	f000 f8a5 	bl	8017c7e <memcpy>
 8017b34:	4620      	mov	r0, r4
 8017b36:	b003      	add	sp, #12
 8017b38:	bd30      	pop	{r4, r5, pc}

08017b3a <strncmp>:
 8017b3a:	b510      	push	{r4, lr}
 8017b3c:	b16a      	cbz	r2, 8017b5a <strncmp+0x20>
 8017b3e:	3901      	subs	r1, #1
 8017b40:	1884      	adds	r4, r0, r2
 8017b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d103      	bne.n	8017b56 <strncmp+0x1c>
 8017b4e:	42a0      	cmp	r0, r4
 8017b50:	d001      	beq.n	8017b56 <strncmp+0x1c>
 8017b52:	2a00      	cmp	r2, #0
 8017b54:	d1f5      	bne.n	8017b42 <strncmp+0x8>
 8017b56:	1ad0      	subs	r0, r2, r3
 8017b58:	bd10      	pop	{r4, pc}
 8017b5a:	4610      	mov	r0, r2
 8017b5c:	e7fc      	b.n	8017b58 <strncmp+0x1e>
	...

08017b60 <_localeconv_r>:
 8017b60:	4800      	ldr	r0, [pc, #0]	; (8017b64 <_localeconv_r+0x4>)
 8017b62:	4770      	bx	lr
 8017b64:	200002a0 	.word	0x200002a0

08017b68 <_close_r>:
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	4d06      	ldr	r5, [pc, #24]	; (8017b84 <_close_r+0x1c>)
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	4604      	mov	r4, r0
 8017b70:	4608      	mov	r0, r1
 8017b72:	602b      	str	r3, [r5, #0]
 8017b74:	f7ec fa4f 	bl	8004016 <_close>
 8017b78:	1c43      	adds	r3, r0, #1
 8017b7a:	d102      	bne.n	8017b82 <_close_r+0x1a>
 8017b7c:	682b      	ldr	r3, [r5, #0]
 8017b7e:	b103      	cbz	r3, 8017b82 <_close_r+0x1a>
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	bd38      	pop	{r3, r4, r5, pc}
 8017b84:	20002c40 	.word	0x20002c40

08017b88 <_lseek_r>:
 8017b88:	b538      	push	{r3, r4, r5, lr}
 8017b8a:	4d07      	ldr	r5, [pc, #28]	; (8017ba8 <_lseek_r+0x20>)
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	4608      	mov	r0, r1
 8017b90:	4611      	mov	r1, r2
 8017b92:	2200      	movs	r2, #0
 8017b94:	602a      	str	r2, [r5, #0]
 8017b96:	461a      	mov	r2, r3
 8017b98:	f7ec fa64 	bl	8004064 <_lseek>
 8017b9c:	1c43      	adds	r3, r0, #1
 8017b9e:	d102      	bne.n	8017ba6 <_lseek_r+0x1e>
 8017ba0:	682b      	ldr	r3, [r5, #0]
 8017ba2:	b103      	cbz	r3, 8017ba6 <_lseek_r+0x1e>
 8017ba4:	6023      	str	r3, [r4, #0]
 8017ba6:	bd38      	pop	{r3, r4, r5, pc}
 8017ba8:	20002c40 	.word	0x20002c40

08017bac <_read_r>:
 8017bac:	b538      	push	{r3, r4, r5, lr}
 8017bae:	4d07      	ldr	r5, [pc, #28]	; (8017bcc <_read_r+0x20>)
 8017bb0:	4604      	mov	r4, r0
 8017bb2:	4608      	mov	r0, r1
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	602a      	str	r2, [r5, #0]
 8017bba:	461a      	mov	r2, r3
 8017bbc:	f7ec f9f2 	bl	8003fa4 <_read>
 8017bc0:	1c43      	adds	r3, r0, #1
 8017bc2:	d102      	bne.n	8017bca <_read_r+0x1e>
 8017bc4:	682b      	ldr	r3, [r5, #0]
 8017bc6:	b103      	cbz	r3, 8017bca <_read_r+0x1e>
 8017bc8:	6023      	str	r3, [r4, #0]
 8017bca:	bd38      	pop	{r3, r4, r5, pc}
 8017bcc:	20002c40 	.word	0x20002c40

08017bd0 <_sbrk_r>:
 8017bd0:	b538      	push	{r3, r4, r5, lr}
 8017bd2:	4d06      	ldr	r5, [pc, #24]	; (8017bec <_sbrk_r+0x1c>)
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	4608      	mov	r0, r1
 8017bda:	602b      	str	r3, [r5, #0]
 8017bdc:	f7ec fa50 	bl	8004080 <_sbrk>
 8017be0:	1c43      	adds	r3, r0, #1
 8017be2:	d102      	bne.n	8017bea <_sbrk_r+0x1a>
 8017be4:	682b      	ldr	r3, [r5, #0]
 8017be6:	b103      	cbz	r3, 8017bea <_sbrk_r+0x1a>
 8017be8:	6023      	str	r3, [r4, #0]
 8017bea:	bd38      	pop	{r3, r4, r5, pc}
 8017bec:	20002c40 	.word	0x20002c40

08017bf0 <_write_r>:
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	4d07      	ldr	r5, [pc, #28]	; (8017c10 <_write_r+0x20>)
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	4608      	mov	r0, r1
 8017bf8:	4611      	mov	r1, r2
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	602a      	str	r2, [r5, #0]
 8017bfe:	461a      	mov	r2, r3
 8017c00:	f7ec f9ed 	bl	8003fde <_write>
 8017c04:	1c43      	adds	r3, r0, #1
 8017c06:	d102      	bne.n	8017c0e <_write_r+0x1e>
 8017c08:	682b      	ldr	r3, [r5, #0]
 8017c0a:	b103      	cbz	r3, 8017c0e <_write_r+0x1e>
 8017c0c:	6023      	str	r3, [r4, #0]
 8017c0e:	bd38      	pop	{r3, r4, r5, pc}
 8017c10:	20002c40 	.word	0x20002c40

08017c14 <__errno>:
 8017c14:	4b01      	ldr	r3, [pc, #4]	; (8017c1c <__errno+0x8>)
 8017c16:	6818      	ldr	r0, [r3, #0]
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop
 8017c1c:	200001ac 	.word	0x200001ac

08017c20 <__libc_init_array>:
 8017c20:	b570      	push	{r4, r5, r6, lr}
 8017c22:	4d0d      	ldr	r5, [pc, #52]	; (8017c58 <__libc_init_array+0x38>)
 8017c24:	4c0d      	ldr	r4, [pc, #52]	; (8017c5c <__libc_init_array+0x3c>)
 8017c26:	1b64      	subs	r4, r4, r5
 8017c28:	10a4      	asrs	r4, r4, #2
 8017c2a:	2600      	movs	r6, #0
 8017c2c:	42a6      	cmp	r6, r4
 8017c2e:	d109      	bne.n	8017c44 <__libc_init_array+0x24>
 8017c30:	4d0b      	ldr	r5, [pc, #44]	; (8017c60 <__libc_init_array+0x40>)
 8017c32:	4c0c      	ldr	r4, [pc, #48]	; (8017c64 <__libc_init_array+0x44>)
 8017c34:	f004 f966 	bl	801bf04 <_init>
 8017c38:	1b64      	subs	r4, r4, r5
 8017c3a:	10a4      	asrs	r4, r4, #2
 8017c3c:	2600      	movs	r6, #0
 8017c3e:	42a6      	cmp	r6, r4
 8017c40:	d105      	bne.n	8017c4e <__libc_init_array+0x2e>
 8017c42:	bd70      	pop	{r4, r5, r6, pc}
 8017c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c48:	4798      	blx	r3
 8017c4a:	3601      	adds	r6, #1
 8017c4c:	e7ee      	b.n	8017c2c <__libc_init_array+0xc>
 8017c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c52:	4798      	blx	r3
 8017c54:	3601      	adds	r6, #1
 8017c56:	e7f2      	b.n	8017c3e <__libc_init_array+0x1e>
 8017c58:	0801ccf8 	.word	0x0801ccf8
 8017c5c:	0801ccf8 	.word	0x0801ccf8
 8017c60:	0801ccf8 	.word	0x0801ccf8
 8017c64:	0801ccfc 	.word	0x0801ccfc

08017c68 <__retarget_lock_init_recursive>:
 8017c68:	4770      	bx	lr

08017c6a <__retarget_lock_acquire_recursive>:
 8017c6a:	4770      	bx	lr

08017c6c <__retarget_lock_release_recursive>:
 8017c6c:	4770      	bx	lr

08017c6e <strcpy>:
 8017c6e:	4603      	mov	r3, r0
 8017c70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c74:	f803 2b01 	strb.w	r2, [r3], #1
 8017c78:	2a00      	cmp	r2, #0
 8017c7a:	d1f9      	bne.n	8017c70 <strcpy+0x2>
 8017c7c:	4770      	bx	lr

08017c7e <memcpy>:
 8017c7e:	440a      	add	r2, r1
 8017c80:	4291      	cmp	r1, r2
 8017c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8017c86:	d100      	bne.n	8017c8a <memcpy+0xc>
 8017c88:	4770      	bx	lr
 8017c8a:	b510      	push	{r4, lr}
 8017c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c94:	4291      	cmp	r1, r2
 8017c96:	d1f9      	bne.n	8017c8c <memcpy+0xe>
 8017c98:	bd10      	pop	{r4, pc}
	...

08017c9c <nanf>:
 8017c9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017ca4 <nanf+0x8>
 8017ca0:	4770      	bx	lr
 8017ca2:	bf00      	nop
 8017ca4:	7fc00000 	.word	0x7fc00000

08017ca8 <abort>:
 8017ca8:	b508      	push	{r3, lr}
 8017caa:	2006      	movs	r0, #6
 8017cac:	f002 fdfc 	bl	801a8a8 <raise>
 8017cb0:	2001      	movs	r0, #1
 8017cb2:	f7ec f96d 	bl	8003f90 <_exit>

08017cb6 <quorem>:
 8017cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cba:	6903      	ldr	r3, [r0, #16]
 8017cbc:	690c      	ldr	r4, [r1, #16]
 8017cbe:	42a3      	cmp	r3, r4
 8017cc0:	4607      	mov	r7, r0
 8017cc2:	db7e      	blt.n	8017dc2 <quorem+0x10c>
 8017cc4:	3c01      	subs	r4, #1
 8017cc6:	f101 0814 	add.w	r8, r1, #20
 8017cca:	f100 0514 	add.w	r5, r0, #20
 8017cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017cd2:	9301      	str	r3, [sp, #4]
 8017cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017cdc:	3301      	adds	r3, #1
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8017cec:	d331      	bcc.n	8017d52 <quorem+0x9c>
 8017cee:	f04f 0e00 	mov.w	lr, #0
 8017cf2:	4640      	mov	r0, r8
 8017cf4:	46ac      	mov	ip, r5
 8017cf6:	46f2      	mov	sl, lr
 8017cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8017cfc:	b293      	uxth	r3, r2
 8017cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8017d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017d06:	0c1a      	lsrs	r2, r3, #16
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	ebaa 0303 	sub.w	r3, sl, r3
 8017d0e:	f8dc a000 	ldr.w	sl, [ip]
 8017d12:	fa13 f38a 	uxtah	r3, r3, sl
 8017d16:	fb06 220e 	mla	r2, r6, lr, r2
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	9b00      	ldr	r3, [sp, #0]
 8017d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017d22:	b292      	uxth	r2, r2
 8017d24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017d30:	4581      	cmp	r9, r0
 8017d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d36:	f84c 3b04 	str.w	r3, [ip], #4
 8017d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017d3e:	d2db      	bcs.n	8017cf8 <quorem+0x42>
 8017d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8017d44:	b92b      	cbnz	r3, 8017d52 <quorem+0x9c>
 8017d46:	9b01      	ldr	r3, [sp, #4]
 8017d48:	3b04      	subs	r3, #4
 8017d4a:	429d      	cmp	r5, r3
 8017d4c:	461a      	mov	r2, r3
 8017d4e:	d32c      	bcc.n	8017daa <quorem+0xf4>
 8017d50:	613c      	str	r4, [r7, #16]
 8017d52:	4638      	mov	r0, r7
 8017d54:	f001 f93c 	bl	8018fd0 <__mcmp>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	db22      	blt.n	8017da2 <quorem+0xec>
 8017d5c:	3601      	adds	r6, #1
 8017d5e:	4629      	mov	r1, r5
 8017d60:	2000      	movs	r0, #0
 8017d62:	f858 2b04 	ldr.w	r2, [r8], #4
 8017d66:	f8d1 c000 	ldr.w	ip, [r1]
 8017d6a:	b293      	uxth	r3, r2
 8017d6c:	1ac3      	subs	r3, r0, r3
 8017d6e:	0c12      	lsrs	r2, r2, #16
 8017d70:	fa13 f38c 	uxtah	r3, r3, ip
 8017d74:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d7c:	b29b      	uxth	r3, r3
 8017d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d82:	45c1      	cmp	r9, r8
 8017d84:	f841 3b04 	str.w	r3, [r1], #4
 8017d88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017d8c:	d2e9      	bcs.n	8017d62 <quorem+0xac>
 8017d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d96:	b922      	cbnz	r2, 8017da2 <quorem+0xec>
 8017d98:	3b04      	subs	r3, #4
 8017d9a:	429d      	cmp	r5, r3
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	d30a      	bcc.n	8017db6 <quorem+0x100>
 8017da0:	613c      	str	r4, [r7, #16]
 8017da2:	4630      	mov	r0, r6
 8017da4:	b003      	add	sp, #12
 8017da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017daa:	6812      	ldr	r2, [r2, #0]
 8017dac:	3b04      	subs	r3, #4
 8017dae:	2a00      	cmp	r2, #0
 8017db0:	d1ce      	bne.n	8017d50 <quorem+0x9a>
 8017db2:	3c01      	subs	r4, #1
 8017db4:	e7c9      	b.n	8017d4a <quorem+0x94>
 8017db6:	6812      	ldr	r2, [r2, #0]
 8017db8:	3b04      	subs	r3, #4
 8017dba:	2a00      	cmp	r2, #0
 8017dbc:	d1f0      	bne.n	8017da0 <quorem+0xea>
 8017dbe:	3c01      	subs	r4, #1
 8017dc0:	e7eb      	b.n	8017d9a <quorem+0xe4>
 8017dc2:	2000      	movs	r0, #0
 8017dc4:	e7ee      	b.n	8017da4 <quorem+0xee>
	...

08017dc8 <_dtoa_r>:
 8017dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dcc:	ed2d 8b04 	vpush	{d8-d9}
 8017dd0:	69c5      	ldr	r5, [r0, #28]
 8017dd2:	b093      	sub	sp, #76	; 0x4c
 8017dd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017dd8:	ec57 6b10 	vmov	r6, r7, d0
 8017ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017de0:	9107      	str	r1, [sp, #28]
 8017de2:	4604      	mov	r4, r0
 8017de4:	920a      	str	r2, [sp, #40]	; 0x28
 8017de6:	930d      	str	r3, [sp, #52]	; 0x34
 8017de8:	b975      	cbnz	r5, 8017e08 <_dtoa_r+0x40>
 8017dea:	2010      	movs	r0, #16
 8017dec:	f7fe fd22 	bl	8016834 <malloc>
 8017df0:	4602      	mov	r2, r0
 8017df2:	61e0      	str	r0, [r4, #28]
 8017df4:	b920      	cbnz	r0, 8017e00 <_dtoa_r+0x38>
 8017df6:	4bae      	ldr	r3, [pc, #696]	; (80180b0 <_dtoa_r+0x2e8>)
 8017df8:	21ef      	movs	r1, #239	; 0xef
 8017dfa:	48ae      	ldr	r0, [pc, #696]	; (80180b4 <_dtoa_r+0x2ec>)
 8017dfc:	f7fe fcde 	bl	80167bc <__assert_func>
 8017e00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017e04:	6005      	str	r5, [r0, #0]
 8017e06:	60c5      	str	r5, [r0, #12]
 8017e08:	69e3      	ldr	r3, [r4, #28]
 8017e0a:	6819      	ldr	r1, [r3, #0]
 8017e0c:	b151      	cbz	r1, 8017e24 <_dtoa_r+0x5c>
 8017e0e:	685a      	ldr	r2, [r3, #4]
 8017e10:	604a      	str	r2, [r1, #4]
 8017e12:	2301      	movs	r3, #1
 8017e14:	4093      	lsls	r3, r2
 8017e16:	608b      	str	r3, [r1, #8]
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f000 fe53 	bl	8018ac4 <_Bfree>
 8017e1e:	69e3      	ldr	r3, [r4, #28]
 8017e20:	2200      	movs	r2, #0
 8017e22:	601a      	str	r2, [r3, #0]
 8017e24:	1e3b      	subs	r3, r7, #0
 8017e26:	bfbb      	ittet	lt
 8017e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017e2c:	9303      	strlt	r3, [sp, #12]
 8017e2e:	2300      	movge	r3, #0
 8017e30:	2201      	movlt	r2, #1
 8017e32:	bfac      	ite	ge
 8017e34:	f8c8 3000 	strge.w	r3, [r8]
 8017e38:	f8c8 2000 	strlt.w	r2, [r8]
 8017e3c:	4b9e      	ldr	r3, [pc, #632]	; (80180b8 <_dtoa_r+0x2f0>)
 8017e3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017e42:	ea33 0308 	bics.w	r3, r3, r8
 8017e46:	d11b      	bne.n	8017e80 <_dtoa_r+0xb8>
 8017e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8017e4e:	6013      	str	r3, [r2, #0]
 8017e50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017e54:	4333      	orrs	r3, r6
 8017e56:	f000 8593 	beq.w	8018980 <_dtoa_r+0xbb8>
 8017e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e5c:	b963      	cbnz	r3, 8017e78 <_dtoa_r+0xb0>
 8017e5e:	4b97      	ldr	r3, [pc, #604]	; (80180bc <_dtoa_r+0x2f4>)
 8017e60:	e027      	b.n	8017eb2 <_dtoa_r+0xea>
 8017e62:	4b97      	ldr	r3, [pc, #604]	; (80180c0 <_dtoa_r+0x2f8>)
 8017e64:	9300      	str	r3, [sp, #0]
 8017e66:	3308      	adds	r3, #8
 8017e68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017e6a:	6013      	str	r3, [r2, #0]
 8017e6c:	9800      	ldr	r0, [sp, #0]
 8017e6e:	b013      	add	sp, #76	; 0x4c
 8017e70:	ecbd 8b04 	vpop	{d8-d9}
 8017e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e78:	4b90      	ldr	r3, [pc, #576]	; (80180bc <_dtoa_r+0x2f4>)
 8017e7a:	9300      	str	r3, [sp, #0]
 8017e7c:	3303      	adds	r3, #3
 8017e7e:	e7f3      	b.n	8017e68 <_dtoa_r+0xa0>
 8017e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e84:	2200      	movs	r2, #0
 8017e86:	ec51 0b17 	vmov	r0, r1, d7
 8017e8a:	eeb0 8a47 	vmov.f32	s16, s14
 8017e8e:	eef0 8a67 	vmov.f32	s17, s15
 8017e92:	2300      	movs	r3, #0
 8017e94:	f7e8 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e98:	4681      	mov	r9, r0
 8017e9a:	b160      	cbz	r0, 8017eb6 <_dtoa_r+0xee>
 8017e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	6013      	str	r3, [r2, #0]
 8017ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	f000 8568 	beq.w	801897a <_dtoa_r+0xbb2>
 8017eaa:	4b86      	ldr	r3, [pc, #536]	; (80180c4 <_dtoa_r+0x2fc>)
 8017eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017eae:	6013      	str	r3, [r2, #0]
 8017eb0:	3b01      	subs	r3, #1
 8017eb2:	9300      	str	r3, [sp, #0]
 8017eb4:	e7da      	b.n	8017e6c <_dtoa_r+0xa4>
 8017eb6:	aa10      	add	r2, sp, #64	; 0x40
 8017eb8:	a911      	add	r1, sp, #68	; 0x44
 8017eba:	4620      	mov	r0, r4
 8017ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8017ec0:	eef0 0a68 	vmov.f32	s1, s17
 8017ec4:	f001 f99a 	bl	80191fc <__d2b>
 8017ec8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017ecc:	4682      	mov	sl, r0
 8017ece:	2d00      	cmp	r5, #0
 8017ed0:	d07f      	beq.n	8017fd2 <_dtoa_r+0x20a>
 8017ed2:	ee18 3a90 	vmov	r3, s17
 8017ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017eda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017ede:	ec51 0b18 	vmov	r0, r1, d8
 8017ee2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017eea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017eee:	4619      	mov	r1, r3
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	4b75      	ldr	r3, [pc, #468]	; (80180c8 <_dtoa_r+0x300>)
 8017ef4:	f7e8 f9c8 	bl	8000288 <__aeabi_dsub>
 8017ef8:	a367      	add	r3, pc, #412	; (adr r3, 8018098 <_dtoa_r+0x2d0>)
 8017efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017efe:	f7e8 fb7b 	bl	80005f8 <__aeabi_dmul>
 8017f02:	a367      	add	r3, pc, #412	; (adr r3, 80180a0 <_dtoa_r+0x2d8>)
 8017f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f08:	f7e8 f9c0 	bl	800028c <__adddf3>
 8017f0c:	4606      	mov	r6, r0
 8017f0e:	4628      	mov	r0, r5
 8017f10:	460f      	mov	r7, r1
 8017f12:	f7e8 fb07 	bl	8000524 <__aeabi_i2d>
 8017f16:	a364      	add	r3, pc, #400	; (adr r3, 80180a8 <_dtoa_r+0x2e0>)
 8017f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f1c:	f7e8 fb6c 	bl	80005f8 <__aeabi_dmul>
 8017f20:	4602      	mov	r2, r0
 8017f22:	460b      	mov	r3, r1
 8017f24:	4630      	mov	r0, r6
 8017f26:	4639      	mov	r1, r7
 8017f28:	f7e8 f9b0 	bl	800028c <__adddf3>
 8017f2c:	4606      	mov	r6, r0
 8017f2e:	460f      	mov	r7, r1
 8017f30:	f7e8 fe12 	bl	8000b58 <__aeabi_d2iz>
 8017f34:	2200      	movs	r2, #0
 8017f36:	4683      	mov	fp, r0
 8017f38:	2300      	movs	r3, #0
 8017f3a:	4630      	mov	r0, r6
 8017f3c:	4639      	mov	r1, r7
 8017f3e:	f7e8 fdcd 	bl	8000adc <__aeabi_dcmplt>
 8017f42:	b148      	cbz	r0, 8017f58 <_dtoa_r+0x190>
 8017f44:	4658      	mov	r0, fp
 8017f46:	f7e8 faed 	bl	8000524 <__aeabi_i2d>
 8017f4a:	4632      	mov	r2, r6
 8017f4c:	463b      	mov	r3, r7
 8017f4e:	f7e8 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f52:	b908      	cbnz	r0, 8017f58 <_dtoa_r+0x190>
 8017f54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017f58:	f1bb 0f16 	cmp.w	fp, #22
 8017f5c:	d857      	bhi.n	801800e <_dtoa_r+0x246>
 8017f5e:	4b5b      	ldr	r3, [pc, #364]	; (80180cc <_dtoa_r+0x304>)
 8017f60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f68:	ec51 0b18 	vmov	r0, r1, d8
 8017f6c:	f7e8 fdb6 	bl	8000adc <__aeabi_dcmplt>
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d04e      	beq.n	8018012 <_dtoa_r+0x24a>
 8017f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017f78:	2300      	movs	r3, #0
 8017f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8017f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f7e:	1b5b      	subs	r3, r3, r5
 8017f80:	1e5a      	subs	r2, r3, #1
 8017f82:	bf45      	ittet	mi
 8017f84:	f1c3 0301 	rsbmi	r3, r3, #1
 8017f88:	9305      	strmi	r3, [sp, #20]
 8017f8a:	2300      	movpl	r3, #0
 8017f8c:	2300      	movmi	r3, #0
 8017f8e:	9206      	str	r2, [sp, #24]
 8017f90:	bf54      	ite	pl
 8017f92:	9305      	strpl	r3, [sp, #20]
 8017f94:	9306      	strmi	r3, [sp, #24]
 8017f96:	f1bb 0f00 	cmp.w	fp, #0
 8017f9a:	db3c      	blt.n	8018016 <_dtoa_r+0x24e>
 8017f9c:	9b06      	ldr	r3, [sp, #24]
 8017f9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017fa2:	445b      	add	r3, fp
 8017fa4:	9306      	str	r3, [sp, #24]
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	9308      	str	r3, [sp, #32]
 8017faa:	9b07      	ldr	r3, [sp, #28]
 8017fac:	2b09      	cmp	r3, #9
 8017fae:	d868      	bhi.n	8018082 <_dtoa_r+0x2ba>
 8017fb0:	2b05      	cmp	r3, #5
 8017fb2:	bfc4      	itt	gt
 8017fb4:	3b04      	subgt	r3, #4
 8017fb6:	9307      	strgt	r3, [sp, #28]
 8017fb8:	9b07      	ldr	r3, [sp, #28]
 8017fba:	f1a3 0302 	sub.w	r3, r3, #2
 8017fbe:	bfcc      	ite	gt
 8017fc0:	2500      	movgt	r5, #0
 8017fc2:	2501      	movle	r5, #1
 8017fc4:	2b03      	cmp	r3, #3
 8017fc6:	f200 8085 	bhi.w	80180d4 <_dtoa_r+0x30c>
 8017fca:	e8df f003 	tbb	[pc, r3]
 8017fce:	3b2e      	.short	0x3b2e
 8017fd0:	5839      	.short	0x5839
 8017fd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017fd6:	441d      	add	r5, r3
 8017fd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017fdc:	2b20      	cmp	r3, #32
 8017fde:	bfc1      	itttt	gt
 8017fe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017fe4:	fa08 f803 	lslgt.w	r8, r8, r3
 8017fe8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017fec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017ff0:	bfd6      	itet	le
 8017ff2:	f1c3 0320 	rsble	r3, r3, #32
 8017ff6:	ea48 0003 	orrgt.w	r0, r8, r3
 8017ffa:	fa06 f003 	lslle.w	r0, r6, r3
 8017ffe:	f7e8 fa81 	bl	8000504 <__aeabi_ui2d>
 8018002:	2201      	movs	r2, #1
 8018004:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8018008:	3d01      	subs	r5, #1
 801800a:	920e      	str	r2, [sp, #56]	; 0x38
 801800c:	e76f      	b.n	8017eee <_dtoa_r+0x126>
 801800e:	2301      	movs	r3, #1
 8018010:	e7b3      	b.n	8017f7a <_dtoa_r+0x1b2>
 8018012:	900c      	str	r0, [sp, #48]	; 0x30
 8018014:	e7b2      	b.n	8017f7c <_dtoa_r+0x1b4>
 8018016:	9b05      	ldr	r3, [sp, #20]
 8018018:	eba3 030b 	sub.w	r3, r3, fp
 801801c:	9305      	str	r3, [sp, #20]
 801801e:	f1cb 0300 	rsb	r3, fp, #0
 8018022:	9308      	str	r3, [sp, #32]
 8018024:	2300      	movs	r3, #0
 8018026:	930b      	str	r3, [sp, #44]	; 0x2c
 8018028:	e7bf      	b.n	8017faa <_dtoa_r+0x1e2>
 801802a:	2300      	movs	r3, #0
 801802c:	9309      	str	r3, [sp, #36]	; 0x24
 801802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018030:	2b00      	cmp	r3, #0
 8018032:	dc52      	bgt.n	80180da <_dtoa_r+0x312>
 8018034:	2301      	movs	r3, #1
 8018036:	9301      	str	r3, [sp, #4]
 8018038:	9304      	str	r3, [sp, #16]
 801803a:	461a      	mov	r2, r3
 801803c:	920a      	str	r2, [sp, #40]	; 0x28
 801803e:	e00b      	b.n	8018058 <_dtoa_r+0x290>
 8018040:	2301      	movs	r3, #1
 8018042:	e7f3      	b.n	801802c <_dtoa_r+0x264>
 8018044:	2300      	movs	r3, #0
 8018046:	9309      	str	r3, [sp, #36]	; 0x24
 8018048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801804a:	445b      	add	r3, fp
 801804c:	9301      	str	r3, [sp, #4]
 801804e:	3301      	adds	r3, #1
 8018050:	2b01      	cmp	r3, #1
 8018052:	9304      	str	r3, [sp, #16]
 8018054:	bfb8      	it	lt
 8018056:	2301      	movlt	r3, #1
 8018058:	69e0      	ldr	r0, [r4, #28]
 801805a:	2100      	movs	r1, #0
 801805c:	2204      	movs	r2, #4
 801805e:	f102 0614 	add.w	r6, r2, #20
 8018062:	429e      	cmp	r6, r3
 8018064:	d93d      	bls.n	80180e2 <_dtoa_r+0x31a>
 8018066:	6041      	str	r1, [r0, #4]
 8018068:	4620      	mov	r0, r4
 801806a:	f000 fceb 	bl	8018a44 <_Balloc>
 801806e:	9000      	str	r0, [sp, #0]
 8018070:	2800      	cmp	r0, #0
 8018072:	d139      	bne.n	80180e8 <_dtoa_r+0x320>
 8018074:	4b16      	ldr	r3, [pc, #88]	; (80180d0 <_dtoa_r+0x308>)
 8018076:	4602      	mov	r2, r0
 8018078:	f240 11af 	movw	r1, #431	; 0x1af
 801807c:	e6bd      	b.n	8017dfa <_dtoa_r+0x32>
 801807e:	2301      	movs	r3, #1
 8018080:	e7e1      	b.n	8018046 <_dtoa_r+0x27e>
 8018082:	2501      	movs	r5, #1
 8018084:	2300      	movs	r3, #0
 8018086:	9307      	str	r3, [sp, #28]
 8018088:	9509      	str	r5, [sp, #36]	; 0x24
 801808a:	f04f 33ff 	mov.w	r3, #4294967295
 801808e:	9301      	str	r3, [sp, #4]
 8018090:	9304      	str	r3, [sp, #16]
 8018092:	2200      	movs	r2, #0
 8018094:	2312      	movs	r3, #18
 8018096:	e7d1      	b.n	801803c <_dtoa_r+0x274>
 8018098:	636f4361 	.word	0x636f4361
 801809c:	3fd287a7 	.word	0x3fd287a7
 80180a0:	8b60c8b3 	.word	0x8b60c8b3
 80180a4:	3fc68a28 	.word	0x3fc68a28
 80180a8:	509f79fb 	.word	0x509f79fb
 80180ac:	3fd34413 	.word	0x3fd34413
 80180b0:	0801c912 	.word	0x0801c912
 80180b4:	0801c929 	.word	0x0801c929
 80180b8:	7ff00000 	.word	0x7ff00000
 80180bc:	0801c90e 	.word	0x0801c90e
 80180c0:	0801c905 	.word	0x0801c905
 80180c4:	0801c8dd 	.word	0x0801c8dd
 80180c8:	3ff80000 	.word	0x3ff80000
 80180cc:	0801ca18 	.word	0x0801ca18
 80180d0:	0801c981 	.word	0x0801c981
 80180d4:	2301      	movs	r3, #1
 80180d6:	9309      	str	r3, [sp, #36]	; 0x24
 80180d8:	e7d7      	b.n	801808a <_dtoa_r+0x2c2>
 80180da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180dc:	9301      	str	r3, [sp, #4]
 80180de:	9304      	str	r3, [sp, #16]
 80180e0:	e7ba      	b.n	8018058 <_dtoa_r+0x290>
 80180e2:	3101      	adds	r1, #1
 80180e4:	0052      	lsls	r2, r2, #1
 80180e6:	e7ba      	b.n	801805e <_dtoa_r+0x296>
 80180e8:	69e3      	ldr	r3, [r4, #28]
 80180ea:	9a00      	ldr	r2, [sp, #0]
 80180ec:	601a      	str	r2, [r3, #0]
 80180ee:	9b04      	ldr	r3, [sp, #16]
 80180f0:	2b0e      	cmp	r3, #14
 80180f2:	f200 80a8 	bhi.w	8018246 <_dtoa_r+0x47e>
 80180f6:	2d00      	cmp	r5, #0
 80180f8:	f000 80a5 	beq.w	8018246 <_dtoa_r+0x47e>
 80180fc:	f1bb 0f00 	cmp.w	fp, #0
 8018100:	dd38      	ble.n	8018174 <_dtoa_r+0x3ac>
 8018102:	4bc0      	ldr	r3, [pc, #768]	; (8018404 <_dtoa_r+0x63c>)
 8018104:	f00b 020f 	and.w	r2, fp, #15
 8018108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801810c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018110:	e9d3 6700 	ldrd	r6, r7, [r3]
 8018114:	ea4f 182b 	mov.w	r8, fp, asr #4
 8018118:	d019      	beq.n	801814e <_dtoa_r+0x386>
 801811a:	4bbb      	ldr	r3, [pc, #748]	; (8018408 <_dtoa_r+0x640>)
 801811c:	ec51 0b18 	vmov	r0, r1, d8
 8018120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018124:	f7e8 fb92 	bl	800084c <__aeabi_ddiv>
 8018128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801812c:	f008 080f 	and.w	r8, r8, #15
 8018130:	2503      	movs	r5, #3
 8018132:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8018408 <_dtoa_r+0x640>
 8018136:	f1b8 0f00 	cmp.w	r8, #0
 801813a:	d10a      	bne.n	8018152 <_dtoa_r+0x38a>
 801813c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018140:	4632      	mov	r2, r6
 8018142:	463b      	mov	r3, r7
 8018144:	f7e8 fb82 	bl	800084c <__aeabi_ddiv>
 8018148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801814c:	e02b      	b.n	80181a6 <_dtoa_r+0x3de>
 801814e:	2502      	movs	r5, #2
 8018150:	e7ef      	b.n	8018132 <_dtoa_r+0x36a>
 8018152:	f018 0f01 	tst.w	r8, #1
 8018156:	d008      	beq.n	801816a <_dtoa_r+0x3a2>
 8018158:	4630      	mov	r0, r6
 801815a:	4639      	mov	r1, r7
 801815c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018160:	f7e8 fa4a 	bl	80005f8 <__aeabi_dmul>
 8018164:	3501      	adds	r5, #1
 8018166:	4606      	mov	r6, r0
 8018168:	460f      	mov	r7, r1
 801816a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801816e:	f109 0908 	add.w	r9, r9, #8
 8018172:	e7e0      	b.n	8018136 <_dtoa_r+0x36e>
 8018174:	f000 809f 	beq.w	80182b6 <_dtoa_r+0x4ee>
 8018178:	f1cb 0600 	rsb	r6, fp, #0
 801817c:	4ba1      	ldr	r3, [pc, #644]	; (8018404 <_dtoa_r+0x63c>)
 801817e:	4fa2      	ldr	r7, [pc, #648]	; (8018408 <_dtoa_r+0x640>)
 8018180:	f006 020f 	and.w	r2, r6, #15
 8018184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801818c:	ec51 0b18 	vmov	r0, r1, d8
 8018190:	f7e8 fa32 	bl	80005f8 <__aeabi_dmul>
 8018194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018198:	1136      	asrs	r6, r6, #4
 801819a:	2300      	movs	r3, #0
 801819c:	2502      	movs	r5, #2
 801819e:	2e00      	cmp	r6, #0
 80181a0:	d17e      	bne.n	80182a0 <_dtoa_r+0x4d8>
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d1d0      	bne.n	8018148 <_dtoa_r+0x380>
 80181a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	f000 8084 	beq.w	80182ba <_dtoa_r+0x4f2>
 80181b2:	4b96      	ldr	r3, [pc, #600]	; (801840c <_dtoa_r+0x644>)
 80181b4:	2200      	movs	r2, #0
 80181b6:	4640      	mov	r0, r8
 80181b8:	4649      	mov	r1, r9
 80181ba:	f7e8 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80181be:	2800      	cmp	r0, #0
 80181c0:	d07b      	beq.n	80182ba <_dtoa_r+0x4f2>
 80181c2:	9b04      	ldr	r3, [sp, #16]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d078      	beq.n	80182ba <_dtoa_r+0x4f2>
 80181c8:	9b01      	ldr	r3, [sp, #4]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	dd39      	ble.n	8018242 <_dtoa_r+0x47a>
 80181ce:	4b90      	ldr	r3, [pc, #576]	; (8018410 <_dtoa_r+0x648>)
 80181d0:	2200      	movs	r2, #0
 80181d2:	4640      	mov	r0, r8
 80181d4:	4649      	mov	r1, r9
 80181d6:	f7e8 fa0f 	bl	80005f8 <__aeabi_dmul>
 80181da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181de:	9e01      	ldr	r6, [sp, #4]
 80181e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80181e4:	3501      	adds	r5, #1
 80181e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80181ea:	4628      	mov	r0, r5
 80181ec:	f7e8 f99a 	bl	8000524 <__aeabi_i2d>
 80181f0:	4642      	mov	r2, r8
 80181f2:	464b      	mov	r3, r9
 80181f4:	f7e8 fa00 	bl	80005f8 <__aeabi_dmul>
 80181f8:	4b86      	ldr	r3, [pc, #536]	; (8018414 <_dtoa_r+0x64c>)
 80181fa:	2200      	movs	r2, #0
 80181fc:	f7e8 f846 	bl	800028c <__adddf3>
 8018200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018208:	9303      	str	r3, [sp, #12]
 801820a:	2e00      	cmp	r6, #0
 801820c:	d158      	bne.n	80182c0 <_dtoa_r+0x4f8>
 801820e:	4b82      	ldr	r3, [pc, #520]	; (8018418 <_dtoa_r+0x650>)
 8018210:	2200      	movs	r2, #0
 8018212:	4640      	mov	r0, r8
 8018214:	4649      	mov	r1, r9
 8018216:	f7e8 f837 	bl	8000288 <__aeabi_dsub>
 801821a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801821e:	4680      	mov	r8, r0
 8018220:	4689      	mov	r9, r1
 8018222:	f7e8 fc79 	bl	8000b18 <__aeabi_dcmpgt>
 8018226:	2800      	cmp	r0, #0
 8018228:	f040 8296 	bne.w	8018758 <_dtoa_r+0x990>
 801822c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018230:	4640      	mov	r0, r8
 8018232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018236:	4649      	mov	r1, r9
 8018238:	f7e8 fc50 	bl	8000adc <__aeabi_dcmplt>
 801823c:	2800      	cmp	r0, #0
 801823e:	f040 8289 	bne.w	8018754 <_dtoa_r+0x98c>
 8018242:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018248:	2b00      	cmp	r3, #0
 801824a:	f2c0 814e 	blt.w	80184ea <_dtoa_r+0x722>
 801824e:	f1bb 0f0e 	cmp.w	fp, #14
 8018252:	f300 814a 	bgt.w	80184ea <_dtoa_r+0x722>
 8018256:	4b6b      	ldr	r3, [pc, #428]	; (8018404 <_dtoa_r+0x63c>)
 8018258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801825c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018262:	2b00      	cmp	r3, #0
 8018264:	f280 80dc 	bge.w	8018420 <_dtoa_r+0x658>
 8018268:	9b04      	ldr	r3, [sp, #16]
 801826a:	2b00      	cmp	r3, #0
 801826c:	f300 80d8 	bgt.w	8018420 <_dtoa_r+0x658>
 8018270:	f040 826f 	bne.w	8018752 <_dtoa_r+0x98a>
 8018274:	4b68      	ldr	r3, [pc, #416]	; (8018418 <_dtoa_r+0x650>)
 8018276:	2200      	movs	r2, #0
 8018278:	4640      	mov	r0, r8
 801827a:	4649      	mov	r1, r9
 801827c:	f7e8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8018280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018284:	f7e8 fc3e 	bl	8000b04 <__aeabi_dcmpge>
 8018288:	9e04      	ldr	r6, [sp, #16]
 801828a:	4637      	mov	r7, r6
 801828c:	2800      	cmp	r0, #0
 801828e:	f040 8245 	bne.w	801871c <_dtoa_r+0x954>
 8018292:	9d00      	ldr	r5, [sp, #0]
 8018294:	2331      	movs	r3, #49	; 0x31
 8018296:	f805 3b01 	strb.w	r3, [r5], #1
 801829a:	f10b 0b01 	add.w	fp, fp, #1
 801829e:	e241      	b.n	8018724 <_dtoa_r+0x95c>
 80182a0:	07f2      	lsls	r2, r6, #31
 80182a2:	d505      	bpl.n	80182b0 <_dtoa_r+0x4e8>
 80182a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80182a8:	f7e8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80182ac:	3501      	adds	r5, #1
 80182ae:	2301      	movs	r3, #1
 80182b0:	1076      	asrs	r6, r6, #1
 80182b2:	3708      	adds	r7, #8
 80182b4:	e773      	b.n	801819e <_dtoa_r+0x3d6>
 80182b6:	2502      	movs	r5, #2
 80182b8:	e775      	b.n	80181a6 <_dtoa_r+0x3de>
 80182ba:	9e04      	ldr	r6, [sp, #16]
 80182bc:	465f      	mov	r7, fp
 80182be:	e792      	b.n	80181e6 <_dtoa_r+0x41e>
 80182c0:	9900      	ldr	r1, [sp, #0]
 80182c2:	4b50      	ldr	r3, [pc, #320]	; (8018404 <_dtoa_r+0x63c>)
 80182c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80182c8:	4431      	add	r1, r6
 80182ca:	9102      	str	r1, [sp, #8]
 80182cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182ce:	eeb0 9a47 	vmov.f32	s18, s14
 80182d2:	eef0 9a67 	vmov.f32	s19, s15
 80182d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80182da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80182de:	2900      	cmp	r1, #0
 80182e0:	d044      	beq.n	801836c <_dtoa_r+0x5a4>
 80182e2:	494e      	ldr	r1, [pc, #312]	; (801841c <_dtoa_r+0x654>)
 80182e4:	2000      	movs	r0, #0
 80182e6:	f7e8 fab1 	bl	800084c <__aeabi_ddiv>
 80182ea:	ec53 2b19 	vmov	r2, r3, d9
 80182ee:	f7e7 ffcb 	bl	8000288 <__aeabi_dsub>
 80182f2:	9d00      	ldr	r5, [sp, #0]
 80182f4:	ec41 0b19 	vmov	d9, r0, r1
 80182f8:	4649      	mov	r1, r9
 80182fa:	4640      	mov	r0, r8
 80182fc:	f7e8 fc2c 	bl	8000b58 <__aeabi_d2iz>
 8018300:	4606      	mov	r6, r0
 8018302:	f7e8 f90f 	bl	8000524 <__aeabi_i2d>
 8018306:	4602      	mov	r2, r0
 8018308:	460b      	mov	r3, r1
 801830a:	4640      	mov	r0, r8
 801830c:	4649      	mov	r1, r9
 801830e:	f7e7 ffbb 	bl	8000288 <__aeabi_dsub>
 8018312:	3630      	adds	r6, #48	; 0x30
 8018314:	f805 6b01 	strb.w	r6, [r5], #1
 8018318:	ec53 2b19 	vmov	r2, r3, d9
 801831c:	4680      	mov	r8, r0
 801831e:	4689      	mov	r9, r1
 8018320:	f7e8 fbdc 	bl	8000adc <__aeabi_dcmplt>
 8018324:	2800      	cmp	r0, #0
 8018326:	d164      	bne.n	80183f2 <_dtoa_r+0x62a>
 8018328:	4642      	mov	r2, r8
 801832a:	464b      	mov	r3, r9
 801832c:	4937      	ldr	r1, [pc, #220]	; (801840c <_dtoa_r+0x644>)
 801832e:	2000      	movs	r0, #0
 8018330:	f7e7 ffaa 	bl	8000288 <__aeabi_dsub>
 8018334:	ec53 2b19 	vmov	r2, r3, d9
 8018338:	f7e8 fbd0 	bl	8000adc <__aeabi_dcmplt>
 801833c:	2800      	cmp	r0, #0
 801833e:	f040 80b6 	bne.w	80184ae <_dtoa_r+0x6e6>
 8018342:	9b02      	ldr	r3, [sp, #8]
 8018344:	429d      	cmp	r5, r3
 8018346:	f43f af7c 	beq.w	8018242 <_dtoa_r+0x47a>
 801834a:	4b31      	ldr	r3, [pc, #196]	; (8018410 <_dtoa_r+0x648>)
 801834c:	ec51 0b19 	vmov	r0, r1, d9
 8018350:	2200      	movs	r2, #0
 8018352:	f7e8 f951 	bl	80005f8 <__aeabi_dmul>
 8018356:	4b2e      	ldr	r3, [pc, #184]	; (8018410 <_dtoa_r+0x648>)
 8018358:	ec41 0b19 	vmov	d9, r0, r1
 801835c:	2200      	movs	r2, #0
 801835e:	4640      	mov	r0, r8
 8018360:	4649      	mov	r1, r9
 8018362:	f7e8 f949 	bl	80005f8 <__aeabi_dmul>
 8018366:	4680      	mov	r8, r0
 8018368:	4689      	mov	r9, r1
 801836a:	e7c5      	b.n	80182f8 <_dtoa_r+0x530>
 801836c:	ec51 0b17 	vmov	r0, r1, d7
 8018370:	f7e8 f942 	bl	80005f8 <__aeabi_dmul>
 8018374:	9b02      	ldr	r3, [sp, #8]
 8018376:	9d00      	ldr	r5, [sp, #0]
 8018378:	930f      	str	r3, [sp, #60]	; 0x3c
 801837a:	ec41 0b19 	vmov	d9, r0, r1
 801837e:	4649      	mov	r1, r9
 8018380:	4640      	mov	r0, r8
 8018382:	f7e8 fbe9 	bl	8000b58 <__aeabi_d2iz>
 8018386:	4606      	mov	r6, r0
 8018388:	f7e8 f8cc 	bl	8000524 <__aeabi_i2d>
 801838c:	3630      	adds	r6, #48	; 0x30
 801838e:	4602      	mov	r2, r0
 8018390:	460b      	mov	r3, r1
 8018392:	4640      	mov	r0, r8
 8018394:	4649      	mov	r1, r9
 8018396:	f7e7 ff77 	bl	8000288 <__aeabi_dsub>
 801839a:	f805 6b01 	strb.w	r6, [r5], #1
 801839e:	9b02      	ldr	r3, [sp, #8]
 80183a0:	429d      	cmp	r5, r3
 80183a2:	4680      	mov	r8, r0
 80183a4:	4689      	mov	r9, r1
 80183a6:	f04f 0200 	mov.w	r2, #0
 80183aa:	d124      	bne.n	80183f6 <_dtoa_r+0x62e>
 80183ac:	4b1b      	ldr	r3, [pc, #108]	; (801841c <_dtoa_r+0x654>)
 80183ae:	ec51 0b19 	vmov	r0, r1, d9
 80183b2:	f7e7 ff6b 	bl	800028c <__adddf3>
 80183b6:	4602      	mov	r2, r0
 80183b8:	460b      	mov	r3, r1
 80183ba:	4640      	mov	r0, r8
 80183bc:	4649      	mov	r1, r9
 80183be:	f7e8 fbab 	bl	8000b18 <__aeabi_dcmpgt>
 80183c2:	2800      	cmp	r0, #0
 80183c4:	d173      	bne.n	80184ae <_dtoa_r+0x6e6>
 80183c6:	ec53 2b19 	vmov	r2, r3, d9
 80183ca:	4914      	ldr	r1, [pc, #80]	; (801841c <_dtoa_r+0x654>)
 80183cc:	2000      	movs	r0, #0
 80183ce:	f7e7 ff5b 	bl	8000288 <__aeabi_dsub>
 80183d2:	4602      	mov	r2, r0
 80183d4:	460b      	mov	r3, r1
 80183d6:	4640      	mov	r0, r8
 80183d8:	4649      	mov	r1, r9
 80183da:	f7e8 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80183de:	2800      	cmp	r0, #0
 80183e0:	f43f af2f 	beq.w	8018242 <_dtoa_r+0x47a>
 80183e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80183e6:	1e6b      	subs	r3, r5, #1
 80183e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80183ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80183ee:	2b30      	cmp	r3, #48	; 0x30
 80183f0:	d0f8      	beq.n	80183e4 <_dtoa_r+0x61c>
 80183f2:	46bb      	mov	fp, r7
 80183f4:	e04a      	b.n	801848c <_dtoa_r+0x6c4>
 80183f6:	4b06      	ldr	r3, [pc, #24]	; (8018410 <_dtoa_r+0x648>)
 80183f8:	f7e8 f8fe 	bl	80005f8 <__aeabi_dmul>
 80183fc:	4680      	mov	r8, r0
 80183fe:	4689      	mov	r9, r1
 8018400:	e7bd      	b.n	801837e <_dtoa_r+0x5b6>
 8018402:	bf00      	nop
 8018404:	0801ca18 	.word	0x0801ca18
 8018408:	0801c9f0 	.word	0x0801c9f0
 801840c:	3ff00000 	.word	0x3ff00000
 8018410:	40240000 	.word	0x40240000
 8018414:	401c0000 	.word	0x401c0000
 8018418:	40140000 	.word	0x40140000
 801841c:	3fe00000 	.word	0x3fe00000
 8018420:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018424:	9d00      	ldr	r5, [sp, #0]
 8018426:	4642      	mov	r2, r8
 8018428:	464b      	mov	r3, r9
 801842a:	4630      	mov	r0, r6
 801842c:	4639      	mov	r1, r7
 801842e:	f7e8 fa0d 	bl	800084c <__aeabi_ddiv>
 8018432:	f7e8 fb91 	bl	8000b58 <__aeabi_d2iz>
 8018436:	9001      	str	r0, [sp, #4]
 8018438:	f7e8 f874 	bl	8000524 <__aeabi_i2d>
 801843c:	4642      	mov	r2, r8
 801843e:	464b      	mov	r3, r9
 8018440:	f7e8 f8da 	bl	80005f8 <__aeabi_dmul>
 8018444:	4602      	mov	r2, r0
 8018446:	460b      	mov	r3, r1
 8018448:	4630      	mov	r0, r6
 801844a:	4639      	mov	r1, r7
 801844c:	f7e7 ff1c 	bl	8000288 <__aeabi_dsub>
 8018450:	9e01      	ldr	r6, [sp, #4]
 8018452:	9f04      	ldr	r7, [sp, #16]
 8018454:	3630      	adds	r6, #48	; 0x30
 8018456:	f805 6b01 	strb.w	r6, [r5], #1
 801845a:	9e00      	ldr	r6, [sp, #0]
 801845c:	1bae      	subs	r6, r5, r6
 801845e:	42b7      	cmp	r7, r6
 8018460:	4602      	mov	r2, r0
 8018462:	460b      	mov	r3, r1
 8018464:	d134      	bne.n	80184d0 <_dtoa_r+0x708>
 8018466:	f7e7 ff11 	bl	800028c <__adddf3>
 801846a:	4642      	mov	r2, r8
 801846c:	464b      	mov	r3, r9
 801846e:	4606      	mov	r6, r0
 8018470:	460f      	mov	r7, r1
 8018472:	f7e8 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 8018476:	b9c8      	cbnz	r0, 80184ac <_dtoa_r+0x6e4>
 8018478:	4642      	mov	r2, r8
 801847a:	464b      	mov	r3, r9
 801847c:	4630      	mov	r0, r6
 801847e:	4639      	mov	r1, r7
 8018480:	f7e8 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8018484:	b110      	cbz	r0, 801848c <_dtoa_r+0x6c4>
 8018486:	9b01      	ldr	r3, [sp, #4]
 8018488:	07db      	lsls	r3, r3, #31
 801848a:	d40f      	bmi.n	80184ac <_dtoa_r+0x6e4>
 801848c:	4651      	mov	r1, sl
 801848e:	4620      	mov	r0, r4
 8018490:	f000 fb18 	bl	8018ac4 <_Bfree>
 8018494:	2300      	movs	r3, #0
 8018496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018498:	702b      	strb	r3, [r5, #0]
 801849a:	f10b 0301 	add.w	r3, fp, #1
 801849e:	6013      	str	r3, [r2, #0]
 80184a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	f43f ace2 	beq.w	8017e6c <_dtoa_r+0xa4>
 80184a8:	601d      	str	r5, [r3, #0]
 80184aa:	e4df      	b.n	8017e6c <_dtoa_r+0xa4>
 80184ac:	465f      	mov	r7, fp
 80184ae:	462b      	mov	r3, r5
 80184b0:	461d      	mov	r5, r3
 80184b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80184b6:	2a39      	cmp	r2, #57	; 0x39
 80184b8:	d106      	bne.n	80184c8 <_dtoa_r+0x700>
 80184ba:	9a00      	ldr	r2, [sp, #0]
 80184bc:	429a      	cmp	r2, r3
 80184be:	d1f7      	bne.n	80184b0 <_dtoa_r+0x6e8>
 80184c0:	9900      	ldr	r1, [sp, #0]
 80184c2:	2230      	movs	r2, #48	; 0x30
 80184c4:	3701      	adds	r7, #1
 80184c6:	700a      	strb	r2, [r1, #0]
 80184c8:	781a      	ldrb	r2, [r3, #0]
 80184ca:	3201      	adds	r2, #1
 80184cc:	701a      	strb	r2, [r3, #0]
 80184ce:	e790      	b.n	80183f2 <_dtoa_r+0x62a>
 80184d0:	4ba3      	ldr	r3, [pc, #652]	; (8018760 <_dtoa_r+0x998>)
 80184d2:	2200      	movs	r2, #0
 80184d4:	f7e8 f890 	bl	80005f8 <__aeabi_dmul>
 80184d8:	2200      	movs	r2, #0
 80184da:	2300      	movs	r3, #0
 80184dc:	4606      	mov	r6, r0
 80184de:	460f      	mov	r7, r1
 80184e0:	f7e8 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d09e      	beq.n	8018426 <_dtoa_r+0x65e>
 80184e8:	e7d0      	b.n	801848c <_dtoa_r+0x6c4>
 80184ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184ec:	2a00      	cmp	r2, #0
 80184ee:	f000 80ca 	beq.w	8018686 <_dtoa_r+0x8be>
 80184f2:	9a07      	ldr	r2, [sp, #28]
 80184f4:	2a01      	cmp	r2, #1
 80184f6:	f300 80ad 	bgt.w	8018654 <_dtoa_r+0x88c>
 80184fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80184fc:	2a00      	cmp	r2, #0
 80184fe:	f000 80a5 	beq.w	801864c <_dtoa_r+0x884>
 8018502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018506:	9e08      	ldr	r6, [sp, #32]
 8018508:	9d05      	ldr	r5, [sp, #20]
 801850a:	9a05      	ldr	r2, [sp, #20]
 801850c:	441a      	add	r2, r3
 801850e:	9205      	str	r2, [sp, #20]
 8018510:	9a06      	ldr	r2, [sp, #24]
 8018512:	2101      	movs	r1, #1
 8018514:	441a      	add	r2, r3
 8018516:	4620      	mov	r0, r4
 8018518:	9206      	str	r2, [sp, #24]
 801851a:	f000 fbd3 	bl	8018cc4 <__i2b>
 801851e:	4607      	mov	r7, r0
 8018520:	b165      	cbz	r5, 801853c <_dtoa_r+0x774>
 8018522:	9b06      	ldr	r3, [sp, #24]
 8018524:	2b00      	cmp	r3, #0
 8018526:	dd09      	ble.n	801853c <_dtoa_r+0x774>
 8018528:	42ab      	cmp	r3, r5
 801852a:	9a05      	ldr	r2, [sp, #20]
 801852c:	bfa8      	it	ge
 801852e:	462b      	movge	r3, r5
 8018530:	1ad2      	subs	r2, r2, r3
 8018532:	9205      	str	r2, [sp, #20]
 8018534:	9a06      	ldr	r2, [sp, #24]
 8018536:	1aed      	subs	r5, r5, r3
 8018538:	1ad3      	subs	r3, r2, r3
 801853a:	9306      	str	r3, [sp, #24]
 801853c:	9b08      	ldr	r3, [sp, #32]
 801853e:	b1f3      	cbz	r3, 801857e <_dtoa_r+0x7b6>
 8018540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018542:	2b00      	cmp	r3, #0
 8018544:	f000 80a3 	beq.w	801868e <_dtoa_r+0x8c6>
 8018548:	2e00      	cmp	r6, #0
 801854a:	dd10      	ble.n	801856e <_dtoa_r+0x7a6>
 801854c:	4639      	mov	r1, r7
 801854e:	4632      	mov	r2, r6
 8018550:	4620      	mov	r0, r4
 8018552:	f000 fc77 	bl	8018e44 <__pow5mult>
 8018556:	4652      	mov	r2, sl
 8018558:	4601      	mov	r1, r0
 801855a:	4607      	mov	r7, r0
 801855c:	4620      	mov	r0, r4
 801855e:	f000 fbc7 	bl	8018cf0 <__multiply>
 8018562:	4651      	mov	r1, sl
 8018564:	4680      	mov	r8, r0
 8018566:	4620      	mov	r0, r4
 8018568:	f000 faac 	bl	8018ac4 <_Bfree>
 801856c:	46c2      	mov	sl, r8
 801856e:	9b08      	ldr	r3, [sp, #32]
 8018570:	1b9a      	subs	r2, r3, r6
 8018572:	d004      	beq.n	801857e <_dtoa_r+0x7b6>
 8018574:	4651      	mov	r1, sl
 8018576:	4620      	mov	r0, r4
 8018578:	f000 fc64 	bl	8018e44 <__pow5mult>
 801857c:	4682      	mov	sl, r0
 801857e:	2101      	movs	r1, #1
 8018580:	4620      	mov	r0, r4
 8018582:	f000 fb9f 	bl	8018cc4 <__i2b>
 8018586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018588:	2b00      	cmp	r3, #0
 801858a:	4606      	mov	r6, r0
 801858c:	f340 8081 	ble.w	8018692 <_dtoa_r+0x8ca>
 8018590:	461a      	mov	r2, r3
 8018592:	4601      	mov	r1, r0
 8018594:	4620      	mov	r0, r4
 8018596:	f000 fc55 	bl	8018e44 <__pow5mult>
 801859a:	9b07      	ldr	r3, [sp, #28]
 801859c:	2b01      	cmp	r3, #1
 801859e:	4606      	mov	r6, r0
 80185a0:	dd7a      	ble.n	8018698 <_dtoa_r+0x8d0>
 80185a2:	f04f 0800 	mov.w	r8, #0
 80185a6:	6933      	ldr	r3, [r6, #16]
 80185a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80185ac:	6918      	ldr	r0, [r3, #16]
 80185ae:	f000 fb3b 	bl	8018c28 <__hi0bits>
 80185b2:	f1c0 0020 	rsb	r0, r0, #32
 80185b6:	9b06      	ldr	r3, [sp, #24]
 80185b8:	4418      	add	r0, r3
 80185ba:	f010 001f 	ands.w	r0, r0, #31
 80185be:	f000 8094 	beq.w	80186ea <_dtoa_r+0x922>
 80185c2:	f1c0 0320 	rsb	r3, r0, #32
 80185c6:	2b04      	cmp	r3, #4
 80185c8:	f340 8085 	ble.w	80186d6 <_dtoa_r+0x90e>
 80185cc:	9b05      	ldr	r3, [sp, #20]
 80185ce:	f1c0 001c 	rsb	r0, r0, #28
 80185d2:	4403      	add	r3, r0
 80185d4:	9305      	str	r3, [sp, #20]
 80185d6:	9b06      	ldr	r3, [sp, #24]
 80185d8:	4403      	add	r3, r0
 80185da:	4405      	add	r5, r0
 80185dc:	9306      	str	r3, [sp, #24]
 80185de:	9b05      	ldr	r3, [sp, #20]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	dd05      	ble.n	80185f0 <_dtoa_r+0x828>
 80185e4:	4651      	mov	r1, sl
 80185e6:	461a      	mov	r2, r3
 80185e8:	4620      	mov	r0, r4
 80185ea:	f000 fc85 	bl	8018ef8 <__lshift>
 80185ee:	4682      	mov	sl, r0
 80185f0:	9b06      	ldr	r3, [sp, #24]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	dd05      	ble.n	8018602 <_dtoa_r+0x83a>
 80185f6:	4631      	mov	r1, r6
 80185f8:	461a      	mov	r2, r3
 80185fa:	4620      	mov	r0, r4
 80185fc:	f000 fc7c 	bl	8018ef8 <__lshift>
 8018600:	4606      	mov	r6, r0
 8018602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018604:	2b00      	cmp	r3, #0
 8018606:	d072      	beq.n	80186ee <_dtoa_r+0x926>
 8018608:	4631      	mov	r1, r6
 801860a:	4650      	mov	r0, sl
 801860c:	f000 fce0 	bl	8018fd0 <__mcmp>
 8018610:	2800      	cmp	r0, #0
 8018612:	da6c      	bge.n	80186ee <_dtoa_r+0x926>
 8018614:	2300      	movs	r3, #0
 8018616:	4651      	mov	r1, sl
 8018618:	220a      	movs	r2, #10
 801861a:	4620      	mov	r0, r4
 801861c:	f000 fa74 	bl	8018b08 <__multadd>
 8018620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018622:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018626:	4682      	mov	sl, r0
 8018628:	2b00      	cmp	r3, #0
 801862a:	f000 81b0 	beq.w	801898e <_dtoa_r+0xbc6>
 801862e:	2300      	movs	r3, #0
 8018630:	4639      	mov	r1, r7
 8018632:	220a      	movs	r2, #10
 8018634:	4620      	mov	r0, r4
 8018636:	f000 fa67 	bl	8018b08 <__multadd>
 801863a:	9b01      	ldr	r3, [sp, #4]
 801863c:	2b00      	cmp	r3, #0
 801863e:	4607      	mov	r7, r0
 8018640:	f300 8096 	bgt.w	8018770 <_dtoa_r+0x9a8>
 8018644:	9b07      	ldr	r3, [sp, #28]
 8018646:	2b02      	cmp	r3, #2
 8018648:	dc59      	bgt.n	80186fe <_dtoa_r+0x936>
 801864a:	e091      	b.n	8018770 <_dtoa_r+0x9a8>
 801864c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801864e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018652:	e758      	b.n	8018506 <_dtoa_r+0x73e>
 8018654:	9b04      	ldr	r3, [sp, #16]
 8018656:	1e5e      	subs	r6, r3, #1
 8018658:	9b08      	ldr	r3, [sp, #32]
 801865a:	42b3      	cmp	r3, r6
 801865c:	bfbf      	itttt	lt
 801865e:	9b08      	ldrlt	r3, [sp, #32]
 8018660:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8018662:	9608      	strlt	r6, [sp, #32]
 8018664:	1af3      	sublt	r3, r6, r3
 8018666:	bfb4      	ite	lt
 8018668:	18d2      	addlt	r2, r2, r3
 801866a:	1b9e      	subge	r6, r3, r6
 801866c:	9b04      	ldr	r3, [sp, #16]
 801866e:	bfbc      	itt	lt
 8018670:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8018672:	2600      	movlt	r6, #0
 8018674:	2b00      	cmp	r3, #0
 8018676:	bfb7      	itett	lt
 8018678:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801867c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018680:	1a9d      	sublt	r5, r3, r2
 8018682:	2300      	movlt	r3, #0
 8018684:	e741      	b.n	801850a <_dtoa_r+0x742>
 8018686:	9e08      	ldr	r6, [sp, #32]
 8018688:	9d05      	ldr	r5, [sp, #20]
 801868a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801868c:	e748      	b.n	8018520 <_dtoa_r+0x758>
 801868e:	9a08      	ldr	r2, [sp, #32]
 8018690:	e770      	b.n	8018574 <_dtoa_r+0x7ac>
 8018692:	9b07      	ldr	r3, [sp, #28]
 8018694:	2b01      	cmp	r3, #1
 8018696:	dc19      	bgt.n	80186cc <_dtoa_r+0x904>
 8018698:	9b02      	ldr	r3, [sp, #8]
 801869a:	b9bb      	cbnz	r3, 80186cc <_dtoa_r+0x904>
 801869c:	9b03      	ldr	r3, [sp, #12]
 801869e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80186a2:	b99b      	cbnz	r3, 80186cc <_dtoa_r+0x904>
 80186a4:	9b03      	ldr	r3, [sp, #12]
 80186a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80186aa:	0d1b      	lsrs	r3, r3, #20
 80186ac:	051b      	lsls	r3, r3, #20
 80186ae:	b183      	cbz	r3, 80186d2 <_dtoa_r+0x90a>
 80186b0:	9b05      	ldr	r3, [sp, #20]
 80186b2:	3301      	adds	r3, #1
 80186b4:	9305      	str	r3, [sp, #20]
 80186b6:	9b06      	ldr	r3, [sp, #24]
 80186b8:	3301      	adds	r3, #1
 80186ba:	9306      	str	r3, [sp, #24]
 80186bc:	f04f 0801 	mov.w	r8, #1
 80186c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	f47f af6f 	bne.w	80185a6 <_dtoa_r+0x7de>
 80186c8:	2001      	movs	r0, #1
 80186ca:	e774      	b.n	80185b6 <_dtoa_r+0x7ee>
 80186cc:	f04f 0800 	mov.w	r8, #0
 80186d0:	e7f6      	b.n	80186c0 <_dtoa_r+0x8f8>
 80186d2:	4698      	mov	r8, r3
 80186d4:	e7f4      	b.n	80186c0 <_dtoa_r+0x8f8>
 80186d6:	d082      	beq.n	80185de <_dtoa_r+0x816>
 80186d8:	9a05      	ldr	r2, [sp, #20]
 80186da:	331c      	adds	r3, #28
 80186dc:	441a      	add	r2, r3
 80186de:	9205      	str	r2, [sp, #20]
 80186e0:	9a06      	ldr	r2, [sp, #24]
 80186e2:	441a      	add	r2, r3
 80186e4:	441d      	add	r5, r3
 80186e6:	9206      	str	r2, [sp, #24]
 80186e8:	e779      	b.n	80185de <_dtoa_r+0x816>
 80186ea:	4603      	mov	r3, r0
 80186ec:	e7f4      	b.n	80186d8 <_dtoa_r+0x910>
 80186ee:	9b04      	ldr	r3, [sp, #16]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	dc37      	bgt.n	8018764 <_dtoa_r+0x99c>
 80186f4:	9b07      	ldr	r3, [sp, #28]
 80186f6:	2b02      	cmp	r3, #2
 80186f8:	dd34      	ble.n	8018764 <_dtoa_r+0x99c>
 80186fa:	9b04      	ldr	r3, [sp, #16]
 80186fc:	9301      	str	r3, [sp, #4]
 80186fe:	9b01      	ldr	r3, [sp, #4]
 8018700:	b963      	cbnz	r3, 801871c <_dtoa_r+0x954>
 8018702:	4631      	mov	r1, r6
 8018704:	2205      	movs	r2, #5
 8018706:	4620      	mov	r0, r4
 8018708:	f000 f9fe 	bl	8018b08 <__multadd>
 801870c:	4601      	mov	r1, r0
 801870e:	4606      	mov	r6, r0
 8018710:	4650      	mov	r0, sl
 8018712:	f000 fc5d 	bl	8018fd0 <__mcmp>
 8018716:	2800      	cmp	r0, #0
 8018718:	f73f adbb 	bgt.w	8018292 <_dtoa_r+0x4ca>
 801871c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801871e:	9d00      	ldr	r5, [sp, #0]
 8018720:	ea6f 0b03 	mvn.w	fp, r3
 8018724:	f04f 0800 	mov.w	r8, #0
 8018728:	4631      	mov	r1, r6
 801872a:	4620      	mov	r0, r4
 801872c:	f000 f9ca 	bl	8018ac4 <_Bfree>
 8018730:	2f00      	cmp	r7, #0
 8018732:	f43f aeab 	beq.w	801848c <_dtoa_r+0x6c4>
 8018736:	f1b8 0f00 	cmp.w	r8, #0
 801873a:	d005      	beq.n	8018748 <_dtoa_r+0x980>
 801873c:	45b8      	cmp	r8, r7
 801873e:	d003      	beq.n	8018748 <_dtoa_r+0x980>
 8018740:	4641      	mov	r1, r8
 8018742:	4620      	mov	r0, r4
 8018744:	f000 f9be 	bl	8018ac4 <_Bfree>
 8018748:	4639      	mov	r1, r7
 801874a:	4620      	mov	r0, r4
 801874c:	f000 f9ba 	bl	8018ac4 <_Bfree>
 8018750:	e69c      	b.n	801848c <_dtoa_r+0x6c4>
 8018752:	2600      	movs	r6, #0
 8018754:	4637      	mov	r7, r6
 8018756:	e7e1      	b.n	801871c <_dtoa_r+0x954>
 8018758:	46bb      	mov	fp, r7
 801875a:	4637      	mov	r7, r6
 801875c:	e599      	b.n	8018292 <_dtoa_r+0x4ca>
 801875e:	bf00      	nop
 8018760:	40240000 	.word	0x40240000
 8018764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018766:	2b00      	cmp	r3, #0
 8018768:	f000 80c8 	beq.w	80188fc <_dtoa_r+0xb34>
 801876c:	9b04      	ldr	r3, [sp, #16]
 801876e:	9301      	str	r3, [sp, #4]
 8018770:	2d00      	cmp	r5, #0
 8018772:	dd05      	ble.n	8018780 <_dtoa_r+0x9b8>
 8018774:	4639      	mov	r1, r7
 8018776:	462a      	mov	r2, r5
 8018778:	4620      	mov	r0, r4
 801877a:	f000 fbbd 	bl	8018ef8 <__lshift>
 801877e:	4607      	mov	r7, r0
 8018780:	f1b8 0f00 	cmp.w	r8, #0
 8018784:	d05b      	beq.n	801883e <_dtoa_r+0xa76>
 8018786:	6879      	ldr	r1, [r7, #4]
 8018788:	4620      	mov	r0, r4
 801878a:	f000 f95b 	bl	8018a44 <_Balloc>
 801878e:	4605      	mov	r5, r0
 8018790:	b928      	cbnz	r0, 801879e <_dtoa_r+0x9d6>
 8018792:	4b83      	ldr	r3, [pc, #524]	; (80189a0 <_dtoa_r+0xbd8>)
 8018794:	4602      	mov	r2, r0
 8018796:	f240 21ef 	movw	r1, #751	; 0x2ef
 801879a:	f7ff bb2e 	b.w	8017dfa <_dtoa_r+0x32>
 801879e:	693a      	ldr	r2, [r7, #16]
 80187a0:	3202      	adds	r2, #2
 80187a2:	0092      	lsls	r2, r2, #2
 80187a4:	f107 010c 	add.w	r1, r7, #12
 80187a8:	300c      	adds	r0, #12
 80187aa:	f7ff fa68 	bl	8017c7e <memcpy>
 80187ae:	2201      	movs	r2, #1
 80187b0:	4629      	mov	r1, r5
 80187b2:	4620      	mov	r0, r4
 80187b4:	f000 fba0 	bl	8018ef8 <__lshift>
 80187b8:	9b00      	ldr	r3, [sp, #0]
 80187ba:	3301      	adds	r3, #1
 80187bc:	9304      	str	r3, [sp, #16]
 80187be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187c2:	4413      	add	r3, r2
 80187c4:	9308      	str	r3, [sp, #32]
 80187c6:	9b02      	ldr	r3, [sp, #8]
 80187c8:	f003 0301 	and.w	r3, r3, #1
 80187cc:	46b8      	mov	r8, r7
 80187ce:	9306      	str	r3, [sp, #24]
 80187d0:	4607      	mov	r7, r0
 80187d2:	9b04      	ldr	r3, [sp, #16]
 80187d4:	4631      	mov	r1, r6
 80187d6:	3b01      	subs	r3, #1
 80187d8:	4650      	mov	r0, sl
 80187da:	9301      	str	r3, [sp, #4]
 80187dc:	f7ff fa6b 	bl	8017cb6 <quorem>
 80187e0:	4641      	mov	r1, r8
 80187e2:	9002      	str	r0, [sp, #8]
 80187e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80187e8:	4650      	mov	r0, sl
 80187ea:	f000 fbf1 	bl	8018fd0 <__mcmp>
 80187ee:	463a      	mov	r2, r7
 80187f0:	9005      	str	r0, [sp, #20]
 80187f2:	4631      	mov	r1, r6
 80187f4:	4620      	mov	r0, r4
 80187f6:	f000 fc07 	bl	8019008 <__mdiff>
 80187fa:	68c2      	ldr	r2, [r0, #12]
 80187fc:	4605      	mov	r5, r0
 80187fe:	bb02      	cbnz	r2, 8018842 <_dtoa_r+0xa7a>
 8018800:	4601      	mov	r1, r0
 8018802:	4650      	mov	r0, sl
 8018804:	f000 fbe4 	bl	8018fd0 <__mcmp>
 8018808:	4602      	mov	r2, r0
 801880a:	4629      	mov	r1, r5
 801880c:	4620      	mov	r0, r4
 801880e:	9209      	str	r2, [sp, #36]	; 0x24
 8018810:	f000 f958 	bl	8018ac4 <_Bfree>
 8018814:	9b07      	ldr	r3, [sp, #28]
 8018816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018818:	9d04      	ldr	r5, [sp, #16]
 801881a:	ea43 0102 	orr.w	r1, r3, r2
 801881e:	9b06      	ldr	r3, [sp, #24]
 8018820:	4319      	orrs	r1, r3
 8018822:	d110      	bne.n	8018846 <_dtoa_r+0xa7e>
 8018824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018828:	d029      	beq.n	801887e <_dtoa_r+0xab6>
 801882a:	9b05      	ldr	r3, [sp, #20]
 801882c:	2b00      	cmp	r3, #0
 801882e:	dd02      	ble.n	8018836 <_dtoa_r+0xa6e>
 8018830:	9b02      	ldr	r3, [sp, #8]
 8018832:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8018836:	9b01      	ldr	r3, [sp, #4]
 8018838:	f883 9000 	strb.w	r9, [r3]
 801883c:	e774      	b.n	8018728 <_dtoa_r+0x960>
 801883e:	4638      	mov	r0, r7
 8018840:	e7ba      	b.n	80187b8 <_dtoa_r+0x9f0>
 8018842:	2201      	movs	r2, #1
 8018844:	e7e1      	b.n	801880a <_dtoa_r+0xa42>
 8018846:	9b05      	ldr	r3, [sp, #20]
 8018848:	2b00      	cmp	r3, #0
 801884a:	db04      	blt.n	8018856 <_dtoa_r+0xa8e>
 801884c:	9907      	ldr	r1, [sp, #28]
 801884e:	430b      	orrs	r3, r1
 8018850:	9906      	ldr	r1, [sp, #24]
 8018852:	430b      	orrs	r3, r1
 8018854:	d120      	bne.n	8018898 <_dtoa_r+0xad0>
 8018856:	2a00      	cmp	r2, #0
 8018858:	dded      	ble.n	8018836 <_dtoa_r+0xa6e>
 801885a:	4651      	mov	r1, sl
 801885c:	2201      	movs	r2, #1
 801885e:	4620      	mov	r0, r4
 8018860:	f000 fb4a 	bl	8018ef8 <__lshift>
 8018864:	4631      	mov	r1, r6
 8018866:	4682      	mov	sl, r0
 8018868:	f000 fbb2 	bl	8018fd0 <__mcmp>
 801886c:	2800      	cmp	r0, #0
 801886e:	dc03      	bgt.n	8018878 <_dtoa_r+0xab0>
 8018870:	d1e1      	bne.n	8018836 <_dtoa_r+0xa6e>
 8018872:	f019 0f01 	tst.w	r9, #1
 8018876:	d0de      	beq.n	8018836 <_dtoa_r+0xa6e>
 8018878:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801887c:	d1d8      	bne.n	8018830 <_dtoa_r+0xa68>
 801887e:	9a01      	ldr	r2, [sp, #4]
 8018880:	2339      	movs	r3, #57	; 0x39
 8018882:	7013      	strb	r3, [r2, #0]
 8018884:	462b      	mov	r3, r5
 8018886:	461d      	mov	r5, r3
 8018888:	3b01      	subs	r3, #1
 801888a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801888e:	2a39      	cmp	r2, #57	; 0x39
 8018890:	d06c      	beq.n	801896c <_dtoa_r+0xba4>
 8018892:	3201      	adds	r2, #1
 8018894:	701a      	strb	r2, [r3, #0]
 8018896:	e747      	b.n	8018728 <_dtoa_r+0x960>
 8018898:	2a00      	cmp	r2, #0
 801889a:	dd07      	ble.n	80188ac <_dtoa_r+0xae4>
 801889c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80188a0:	d0ed      	beq.n	801887e <_dtoa_r+0xab6>
 80188a2:	9a01      	ldr	r2, [sp, #4]
 80188a4:	f109 0301 	add.w	r3, r9, #1
 80188a8:	7013      	strb	r3, [r2, #0]
 80188aa:	e73d      	b.n	8018728 <_dtoa_r+0x960>
 80188ac:	9b04      	ldr	r3, [sp, #16]
 80188ae:	9a08      	ldr	r2, [sp, #32]
 80188b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80188b4:	4293      	cmp	r3, r2
 80188b6:	d043      	beq.n	8018940 <_dtoa_r+0xb78>
 80188b8:	4651      	mov	r1, sl
 80188ba:	2300      	movs	r3, #0
 80188bc:	220a      	movs	r2, #10
 80188be:	4620      	mov	r0, r4
 80188c0:	f000 f922 	bl	8018b08 <__multadd>
 80188c4:	45b8      	cmp	r8, r7
 80188c6:	4682      	mov	sl, r0
 80188c8:	f04f 0300 	mov.w	r3, #0
 80188cc:	f04f 020a 	mov.w	r2, #10
 80188d0:	4641      	mov	r1, r8
 80188d2:	4620      	mov	r0, r4
 80188d4:	d107      	bne.n	80188e6 <_dtoa_r+0xb1e>
 80188d6:	f000 f917 	bl	8018b08 <__multadd>
 80188da:	4680      	mov	r8, r0
 80188dc:	4607      	mov	r7, r0
 80188de:	9b04      	ldr	r3, [sp, #16]
 80188e0:	3301      	adds	r3, #1
 80188e2:	9304      	str	r3, [sp, #16]
 80188e4:	e775      	b.n	80187d2 <_dtoa_r+0xa0a>
 80188e6:	f000 f90f 	bl	8018b08 <__multadd>
 80188ea:	4639      	mov	r1, r7
 80188ec:	4680      	mov	r8, r0
 80188ee:	2300      	movs	r3, #0
 80188f0:	220a      	movs	r2, #10
 80188f2:	4620      	mov	r0, r4
 80188f4:	f000 f908 	bl	8018b08 <__multadd>
 80188f8:	4607      	mov	r7, r0
 80188fa:	e7f0      	b.n	80188de <_dtoa_r+0xb16>
 80188fc:	9b04      	ldr	r3, [sp, #16]
 80188fe:	9301      	str	r3, [sp, #4]
 8018900:	9d00      	ldr	r5, [sp, #0]
 8018902:	4631      	mov	r1, r6
 8018904:	4650      	mov	r0, sl
 8018906:	f7ff f9d6 	bl	8017cb6 <quorem>
 801890a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801890e:	9b00      	ldr	r3, [sp, #0]
 8018910:	f805 9b01 	strb.w	r9, [r5], #1
 8018914:	1aea      	subs	r2, r5, r3
 8018916:	9b01      	ldr	r3, [sp, #4]
 8018918:	4293      	cmp	r3, r2
 801891a:	dd07      	ble.n	801892c <_dtoa_r+0xb64>
 801891c:	4651      	mov	r1, sl
 801891e:	2300      	movs	r3, #0
 8018920:	220a      	movs	r2, #10
 8018922:	4620      	mov	r0, r4
 8018924:	f000 f8f0 	bl	8018b08 <__multadd>
 8018928:	4682      	mov	sl, r0
 801892a:	e7ea      	b.n	8018902 <_dtoa_r+0xb3a>
 801892c:	9b01      	ldr	r3, [sp, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	bfc8      	it	gt
 8018932:	461d      	movgt	r5, r3
 8018934:	9b00      	ldr	r3, [sp, #0]
 8018936:	bfd8      	it	le
 8018938:	2501      	movle	r5, #1
 801893a:	441d      	add	r5, r3
 801893c:	f04f 0800 	mov.w	r8, #0
 8018940:	4651      	mov	r1, sl
 8018942:	2201      	movs	r2, #1
 8018944:	4620      	mov	r0, r4
 8018946:	f000 fad7 	bl	8018ef8 <__lshift>
 801894a:	4631      	mov	r1, r6
 801894c:	4682      	mov	sl, r0
 801894e:	f000 fb3f 	bl	8018fd0 <__mcmp>
 8018952:	2800      	cmp	r0, #0
 8018954:	dc96      	bgt.n	8018884 <_dtoa_r+0xabc>
 8018956:	d102      	bne.n	801895e <_dtoa_r+0xb96>
 8018958:	f019 0f01 	tst.w	r9, #1
 801895c:	d192      	bne.n	8018884 <_dtoa_r+0xabc>
 801895e:	462b      	mov	r3, r5
 8018960:	461d      	mov	r5, r3
 8018962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018966:	2a30      	cmp	r2, #48	; 0x30
 8018968:	d0fa      	beq.n	8018960 <_dtoa_r+0xb98>
 801896a:	e6dd      	b.n	8018728 <_dtoa_r+0x960>
 801896c:	9a00      	ldr	r2, [sp, #0]
 801896e:	429a      	cmp	r2, r3
 8018970:	d189      	bne.n	8018886 <_dtoa_r+0xabe>
 8018972:	f10b 0b01 	add.w	fp, fp, #1
 8018976:	2331      	movs	r3, #49	; 0x31
 8018978:	e796      	b.n	80188a8 <_dtoa_r+0xae0>
 801897a:	4b0a      	ldr	r3, [pc, #40]	; (80189a4 <_dtoa_r+0xbdc>)
 801897c:	f7ff ba99 	b.w	8017eb2 <_dtoa_r+0xea>
 8018980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018982:	2b00      	cmp	r3, #0
 8018984:	f47f aa6d 	bne.w	8017e62 <_dtoa_r+0x9a>
 8018988:	4b07      	ldr	r3, [pc, #28]	; (80189a8 <_dtoa_r+0xbe0>)
 801898a:	f7ff ba92 	b.w	8017eb2 <_dtoa_r+0xea>
 801898e:	9b01      	ldr	r3, [sp, #4]
 8018990:	2b00      	cmp	r3, #0
 8018992:	dcb5      	bgt.n	8018900 <_dtoa_r+0xb38>
 8018994:	9b07      	ldr	r3, [sp, #28]
 8018996:	2b02      	cmp	r3, #2
 8018998:	f73f aeb1 	bgt.w	80186fe <_dtoa_r+0x936>
 801899c:	e7b0      	b.n	8018900 <_dtoa_r+0xb38>
 801899e:	bf00      	nop
 80189a0:	0801c981 	.word	0x0801c981
 80189a4:	0801c8dc 	.word	0x0801c8dc
 80189a8:	0801c905 	.word	0x0801c905

080189ac <_free_r>:
 80189ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189ae:	2900      	cmp	r1, #0
 80189b0:	d044      	beq.n	8018a3c <_free_r+0x90>
 80189b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189b6:	9001      	str	r0, [sp, #4]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	f1a1 0404 	sub.w	r4, r1, #4
 80189be:	bfb8      	it	lt
 80189c0:	18e4      	addlt	r4, r4, r3
 80189c2:	f7fd ffe7 	bl	8016994 <__malloc_lock>
 80189c6:	4a1e      	ldr	r2, [pc, #120]	; (8018a40 <_free_r+0x94>)
 80189c8:	9801      	ldr	r0, [sp, #4]
 80189ca:	6813      	ldr	r3, [r2, #0]
 80189cc:	b933      	cbnz	r3, 80189dc <_free_r+0x30>
 80189ce:	6063      	str	r3, [r4, #4]
 80189d0:	6014      	str	r4, [r2, #0]
 80189d2:	b003      	add	sp, #12
 80189d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189d8:	f7fd bfe2 	b.w	80169a0 <__malloc_unlock>
 80189dc:	42a3      	cmp	r3, r4
 80189de:	d908      	bls.n	80189f2 <_free_r+0x46>
 80189e0:	6825      	ldr	r5, [r4, #0]
 80189e2:	1961      	adds	r1, r4, r5
 80189e4:	428b      	cmp	r3, r1
 80189e6:	bf01      	itttt	eq
 80189e8:	6819      	ldreq	r1, [r3, #0]
 80189ea:	685b      	ldreq	r3, [r3, #4]
 80189ec:	1949      	addeq	r1, r1, r5
 80189ee:	6021      	streq	r1, [r4, #0]
 80189f0:	e7ed      	b.n	80189ce <_free_r+0x22>
 80189f2:	461a      	mov	r2, r3
 80189f4:	685b      	ldr	r3, [r3, #4]
 80189f6:	b10b      	cbz	r3, 80189fc <_free_r+0x50>
 80189f8:	42a3      	cmp	r3, r4
 80189fa:	d9fa      	bls.n	80189f2 <_free_r+0x46>
 80189fc:	6811      	ldr	r1, [r2, #0]
 80189fe:	1855      	adds	r5, r2, r1
 8018a00:	42a5      	cmp	r5, r4
 8018a02:	d10b      	bne.n	8018a1c <_free_r+0x70>
 8018a04:	6824      	ldr	r4, [r4, #0]
 8018a06:	4421      	add	r1, r4
 8018a08:	1854      	adds	r4, r2, r1
 8018a0a:	42a3      	cmp	r3, r4
 8018a0c:	6011      	str	r1, [r2, #0]
 8018a0e:	d1e0      	bne.n	80189d2 <_free_r+0x26>
 8018a10:	681c      	ldr	r4, [r3, #0]
 8018a12:	685b      	ldr	r3, [r3, #4]
 8018a14:	6053      	str	r3, [r2, #4]
 8018a16:	440c      	add	r4, r1
 8018a18:	6014      	str	r4, [r2, #0]
 8018a1a:	e7da      	b.n	80189d2 <_free_r+0x26>
 8018a1c:	d902      	bls.n	8018a24 <_free_r+0x78>
 8018a1e:	230c      	movs	r3, #12
 8018a20:	6003      	str	r3, [r0, #0]
 8018a22:	e7d6      	b.n	80189d2 <_free_r+0x26>
 8018a24:	6825      	ldr	r5, [r4, #0]
 8018a26:	1961      	adds	r1, r4, r5
 8018a28:	428b      	cmp	r3, r1
 8018a2a:	bf04      	itt	eq
 8018a2c:	6819      	ldreq	r1, [r3, #0]
 8018a2e:	685b      	ldreq	r3, [r3, #4]
 8018a30:	6063      	str	r3, [r4, #4]
 8018a32:	bf04      	itt	eq
 8018a34:	1949      	addeq	r1, r1, r5
 8018a36:	6021      	streq	r1, [r4, #0]
 8018a38:	6054      	str	r4, [r2, #4]
 8018a3a:	e7ca      	b.n	80189d2 <_free_r+0x26>
 8018a3c:	b003      	add	sp, #12
 8018a3e:	bd30      	pop	{r4, r5, pc}
 8018a40:	20002afc 	.word	0x20002afc

08018a44 <_Balloc>:
 8018a44:	b570      	push	{r4, r5, r6, lr}
 8018a46:	69c6      	ldr	r6, [r0, #28]
 8018a48:	4604      	mov	r4, r0
 8018a4a:	460d      	mov	r5, r1
 8018a4c:	b976      	cbnz	r6, 8018a6c <_Balloc+0x28>
 8018a4e:	2010      	movs	r0, #16
 8018a50:	f7fd fef0 	bl	8016834 <malloc>
 8018a54:	4602      	mov	r2, r0
 8018a56:	61e0      	str	r0, [r4, #28]
 8018a58:	b920      	cbnz	r0, 8018a64 <_Balloc+0x20>
 8018a5a:	4b18      	ldr	r3, [pc, #96]	; (8018abc <_Balloc+0x78>)
 8018a5c:	4818      	ldr	r0, [pc, #96]	; (8018ac0 <_Balloc+0x7c>)
 8018a5e:	216b      	movs	r1, #107	; 0x6b
 8018a60:	f7fd feac 	bl	80167bc <__assert_func>
 8018a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a68:	6006      	str	r6, [r0, #0]
 8018a6a:	60c6      	str	r6, [r0, #12]
 8018a6c:	69e6      	ldr	r6, [r4, #28]
 8018a6e:	68f3      	ldr	r3, [r6, #12]
 8018a70:	b183      	cbz	r3, 8018a94 <_Balloc+0x50>
 8018a72:	69e3      	ldr	r3, [r4, #28]
 8018a74:	68db      	ldr	r3, [r3, #12]
 8018a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018a7a:	b9b8      	cbnz	r0, 8018aac <_Balloc+0x68>
 8018a7c:	2101      	movs	r1, #1
 8018a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8018a82:	1d72      	adds	r2, r6, #5
 8018a84:	0092      	lsls	r2, r2, #2
 8018a86:	4620      	mov	r0, r4
 8018a88:	f7fd febe 	bl	8016808 <_calloc_r>
 8018a8c:	b160      	cbz	r0, 8018aa8 <_Balloc+0x64>
 8018a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018a92:	e00e      	b.n	8018ab2 <_Balloc+0x6e>
 8018a94:	2221      	movs	r2, #33	; 0x21
 8018a96:	2104      	movs	r1, #4
 8018a98:	4620      	mov	r0, r4
 8018a9a:	f7fd feb5 	bl	8016808 <_calloc_r>
 8018a9e:	69e3      	ldr	r3, [r4, #28]
 8018aa0:	60f0      	str	r0, [r6, #12]
 8018aa2:	68db      	ldr	r3, [r3, #12]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d1e4      	bne.n	8018a72 <_Balloc+0x2e>
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	bd70      	pop	{r4, r5, r6, pc}
 8018aac:	6802      	ldr	r2, [r0, #0]
 8018aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ab8:	e7f7      	b.n	8018aaa <_Balloc+0x66>
 8018aba:	bf00      	nop
 8018abc:	0801c912 	.word	0x0801c912
 8018ac0:	0801c992 	.word	0x0801c992

08018ac4 <_Bfree>:
 8018ac4:	b570      	push	{r4, r5, r6, lr}
 8018ac6:	69c6      	ldr	r6, [r0, #28]
 8018ac8:	4605      	mov	r5, r0
 8018aca:	460c      	mov	r4, r1
 8018acc:	b976      	cbnz	r6, 8018aec <_Bfree+0x28>
 8018ace:	2010      	movs	r0, #16
 8018ad0:	f7fd feb0 	bl	8016834 <malloc>
 8018ad4:	4602      	mov	r2, r0
 8018ad6:	61e8      	str	r0, [r5, #28]
 8018ad8:	b920      	cbnz	r0, 8018ae4 <_Bfree+0x20>
 8018ada:	4b09      	ldr	r3, [pc, #36]	; (8018b00 <_Bfree+0x3c>)
 8018adc:	4809      	ldr	r0, [pc, #36]	; (8018b04 <_Bfree+0x40>)
 8018ade:	218f      	movs	r1, #143	; 0x8f
 8018ae0:	f7fd fe6c 	bl	80167bc <__assert_func>
 8018ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ae8:	6006      	str	r6, [r0, #0]
 8018aea:	60c6      	str	r6, [r0, #12]
 8018aec:	b13c      	cbz	r4, 8018afe <_Bfree+0x3a>
 8018aee:	69eb      	ldr	r3, [r5, #28]
 8018af0:	6862      	ldr	r2, [r4, #4]
 8018af2:	68db      	ldr	r3, [r3, #12]
 8018af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018af8:	6021      	str	r1, [r4, #0]
 8018afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018afe:	bd70      	pop	{r4, r5, r6, pc}
 8018b00:	0801c912 	.word	0x0801c912
 8018b04:	0801c992 	.word	0x0801c992

08018b08 <__multadd>:
 8018b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b0c:	690d      	ldr	r5, [r1, #16]
 8018b0e:	4607      	mov	r7, r0
 8018b10:	460c      	mov	r4, r1
 8018b12:	461e      	mov	r6, r3
 8018b14:	f101 0c14 	add.w	ip, r1, #20
 8018b18:	2000      	movs	r0, #0
 8018b1a:	f8dc 3000 	ldr.w	r3, [ip]
 8018b1e:	b299      	uxth	r1, r3
 8018b20:	fb02 6101 	mla	r1, r2, r1, r6
 8018b24:	0c1e      	lsrs	r6, r3, #16
 8018b26:	0c0b      	lsrs	r3, r1, #16
 8018b28:	fb02 3306 	mla	r3, r2, r6, r3
 8018b2c:	b289      	uxth	r1, r1
 8018b2e:	3001      	adds	r0, #1
 8018b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018b34:	4285      	cmp	r5, r0
 8018b36:	f84c 1b04 	str.w	r1, [ip], #4
 8018b3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018b3e:	dcec      	bgt.n	8018b1a <__multadd+0x12>
 8018b40:	b30e      	cbz	r6, 8018b86 <__multadd+0x7e>
 8018b42:	68a3      	ldr	r3, [r4, #8]
 8018b44:	42ab      	cmp	r3, r5
 8018b46:	dc19      	bgt.n	8018b7c <__multadd+0x74>
 8018b48:	6861      	ldr	r1, [r4, #4]
 8018b4a:	4638      	mov	r0, r7
 8018b4c:	3101      	adds	r1, #1
 8018b4e:	f7ff ff79 	bl	8018a44 <_Balloc>
 8018b52:	4680      	mov	r8, r0
 8018b54:	b928      	cbnz	r0, 8018b62 <__multadd+0x5a>
 8018b56:	4602      	mov	r2, r0
 8018b58:	4b0c      	ldr	r3, [pc, #48]	; (8018b8c <__multadd+0x84>)
 8018b5a:	480d      	ldr	r0, [pc, #52]	; (8018b90 <__multadd+0x88>)
 8018b5c:	21ba      	movs	r1, #186	; 0xba
 8018b5e:	f7fd fe2d 	bl	80167bc <__assert_func>
 8018b62:	6922      	ldr	r2, [r4, #16]
 8018b64:	3202      	adds	r2, #2
 8018b66:	f104 010c 	add.w	r1, r4, #12
 8018b6a:	0092      	lsls	r2, r2, #2
 8018b6c:	300c      	adds	r0, #12
 8018b6e:	f7ff f886 	bl	8017c7e <memcpy>
 8018b72:	4621      	mov	r1, r4
 8018b74:	4638      	mov	r0, r7
 8018b76:	f7ff ffa5 	bl	8018ac4 <_Bfree>
 8018b7a:	4644      	mov	r4, r8
 8018b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b80:	3501      	adds	r5, #1
 8018b82:	615e      	str	r6, [r3, #20]
 8018b84:	6125      	str	r5, [r4, #16]
 8018b86:	4620      	mov	r0, r4
 8018b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b8c:	0801c981 	.word	0x0801c981
 8018b90:	0801c992 	.word	0x0801c992

08018b94 <__s2b>:
 8018b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b98:	460c      	mov	r4, r1
 8018b9a:	4615      	mov	r5, r2
 8018b9c:	461f      	mov	r7, r3
 8018b9e:	2209      	movs	r2, #9
 8018ba0:	3308      	adds	r3, #8
 8018ba2:	4606      	mov	r6, r0
 8018ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ba8:	2100      	movs	r1, #0
 8018baa:	2201      	movs	r2, #1
 8018bac:	429a      	cmp	r2, r3
 8018bae:	db09      	blt.n	8018bc4 <__s2b+0x30>
 8018bb0:	4630      	mov	r0, r6
 8018bb2:	f7ff ff47 	bl	8018a44 <_Balloc>
 8018bb6:	b940      	cbnz	r0, 8018bca <__s2b+0x36>
 8018bb8:	4602      	mov	r2, r0
 8018bba:	4b19      	ldr	r3, [pc, #100]	; (8018c20 <__s2b+0x8c>)
 8018bbc:	4819      	ldr	r0, [pc, #100]	; (8018c24 <__s2b+0x90>)
 8018bbe:	21d3      	movs	r1, #211	; 0xd3
 8018bc0:	f7fd fdfc 	bl	80167bc <__assert_func>
 8018bc4:	0052      	lsls	r2, r2, #1
 8018bc6:	3101      	adds	r1, #1
 8018bc8:	e7f0      	b.n	8018bac <__s2b+0x18>
 8018bca:	9b08      	ldr	r3, [sp, #32]
 8018bcc:	6143      	str	r3, [r0, #20]
 8018bce:	2d09      	cmp	r5, #9
 8018bd0:	f04f 0301 	mov.w	r3, #1
 8018bd4:	6103      	str	r3, [r0, #16]
 8018bd6:	dd16      	ble.n	8018c06 <__s2b+0x72>
 8018bd8:	f104 0909 	add.w	r9, r4, #9
 8018bdc:	46c8      	mov	r8, r9
 8018bde:	442c      	add	r4, r5
 8018be0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018be4:	4601      	mov	r1, r0
 8018be6:	3b30      	subs	r3, #48	; 0x30
 8018be8:	220a      	movs	r2, #10
 8018bea:	4630      	mov	r0, r6
 8018bec:	f7ff ff8c 	bl	8018b08 <__multadd>
 8018bf0:	45a0      	cmp	r8, r4
 8018bf2:	d1f5      	bne.n	8018be0 <__s2b+0x4c>
 8018bf4:	f1a5 0408 	sub.w	r4, r5, #8
 8018bf8:	444c      	add	r4, r9
 8018bfa:	1b2d      	subs	r5, r5, r4
 8018bfc:	1963      	adds	r3, r4, r5
 8018bfe:	42bb      	cmp	r3, r7
 8018c00:	db04      	blt.n	8018c0c <__s2b+0x78>
 8018c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c06:	340a      	adds	r4, #10
 8018c08:	2509      	movs	r5, #9
 8018c0a:	e7f6      	b.n	8018bfa <__s2b+0x66>
 8018c0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018c10:	4601      	mov	r1, r0
 8018c12:	3b30      	subs	r3, #48	; 0x30
 8018c14:	220a      	movs	r2, #10
 8018c16:	4630      	mov	r0, r6
 8018c18:	f7ff ff76 	bl	8018b08 <__multadd>
 8018c1c:	e7ee      	b.n	8018bfc <__s2b+0x68>
 8018c1e:	bf00      	nop
 8018c20:	0801c981 	.word	0x0801c981
 8018c24:	0801c992 	.word	0x0801c992

08018c28 <__hi0bits>:
 8018c28:	0c03      	lsrs	r3, r0, #16
 8018c2a:	041b      	lsls	r3, r3, #16
 8018c2c:	b9d3      	cbnz	r3, 8018c64 <__hi0bits+0x3c>
 8018c2e:	0400      	lsls	r0, r0, #16
 8018c30:	2310      	movs	r3, #16
 8018c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018c36:	bf04      	itt	eq
 8018c38:	0200      	lsleq	r0, r0, #8
 8018c3a:	3308      	addeq	r3, #8
 8018c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018c40:	bf04      	itt	eq
 8018c42:	0100      	lsleq	r0, r0, #4
 8018c44:	3304      	addeq	r3, #4
 8018c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018c4a:	bf04      	itt	eq
 8018c4c:	0080      	lsleq	r0, r0, #2
 8018c4e:	3302      	addeq	r3, #2
 8018c50:	2800      	cmp	r0, #0
 8018c52:	db05      	blt.n	8018c60 <__hi0bits+0x38>
 8018c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018c58:	f103 0301 	add.w	r3, r3, #1
 8018c5c:	bf08      	it	eq
 8018c5e:	2320      	moveq	r3, #32
 8018c60:	4618      	mov	r0, r3
 8018c62:	4770      	bx	lr
 8018c64:	2300      	movs	r3, #0
 8018c66:	e7e4      	b.n	8018c32 <__hi0bits+0xa>

08018c68 <__lo0bits>:
 8018c68:	6803      	ldr	r3, [r0, #0]
 8018c6a:	f013 0207 	ands.w	r2, r3, #7
 8018c6e:	d00c      	beq.n	8018c8a <__lo0bits+0x22>
 8018c70:	07d9      	lsls	r1, r3, #31
 8018c72:	d422      	bmi.n	8018cba <__lo0bits+0x52>
 8018c74:	079a      	lsls	r2, r3, #30
 8018c76:	bf49      	itett	mi
 8018c78:	085b      	lsrmi	r3, r3, #1
 8018c7a:	089b      	lsrpl	r3, r3, #2
 8018c7c:	6003      	strmi	r3, [r0, #0]
 8018c7e:	2201      	movmi	r2, #1
 8018c80:	bf5c      	itt	pl
 8018c82:	6003      	strpl	r3, [r0, #0]
 8018c84:	2202      	movpl	r2, #2
 8018c86:	4610      	mov	r0, r2
 8018c88:	4770      	bx	lr
 8018c8a:	b299      	uxth	r1, r3
 8018c8c:	b909      	cbnz	r1, 8018c92 <__lo0bits+0x2a>
 8018c8e:	0c1b      	lsrs	r3, r3, #16
 8018c90:	2210      	movs	r2, #16
 8018c92:	b2d9      	uxtb	r1, r3
 8018c94:	b909      	cbnz	r1, 8018c9a <__lo0bits+0x32>
 8018c96:	3208      	adds	r2, #8
 8018c98:	0a1b      	lsrs	r3, r3, #8
 8018c9a:	0719      	lsls	r1, r3, #28
 8018c9c:	bf04      	itt	eq
 8018c9e:	091b      	lsreq	r3, r3, #4
 8018ca0:	3204      	addeq	r2, #4
 8018ca2:	0799      	lsls	r1, r3, #30
 8018ca4:	bf04      	itt	eq
 8018ca6:	089b      	lsreq	r3, r3, #2
 8018ca8:	3202      	addeq	r2, #2
 8018caa:	07d9      	lsls	r1, r3, #31
 8018cac:	d403      	bmi.n	8018cb6 <__lo0bits+0x4e>
 8018cae:	085b      	lsrs	r3, r3, #1
 8018cb0:	f102 0201 	add.w	r2, r2, #1
 8018cb4:	d003      	beq.n	8018cbe <__lo0bits+0x56>
 8018cb6:	6003      	str	r3, [r0, #0]
 8018cb8:	e7e5      	b.n	8018c86 <__lo0bits+0x1e>
 8018cba:	2200      	movs	r2, #0
 8018cbc:	e7e3      	b.n	8018c86 <__lo0bits+0x1e>
 8018cbe:	2220      	movs	r2, #32
 8018cc0:	e7e1      	b.n	8018c86 <__lo0bits+0x1e>
	...

08018cc4 <__i2b>:
 8018cc4:	b510      	push	{r4, lr}
 8018cc6:	460c      	mov	r4, r1
 8018cc8:	2101      	movs	r1, #1
 8018cca:	f7ff febb 	bl	8018a44 <_Balloc>
 8018cce:	4602      	mov	r2, r0
 8018cd0:	b928      	cbnz	r0, 8018cde <__i2b+0x1a>
 8018cd2:	4b05      	ldr	r3, [pc, #20]	; (8018ce8 <__i2b+0x24>)
 8018cd4:	4805      	ldr	r0, [pc, #20]	; (8018cec <__i2b+0x28>)
 8018cd6:	f240 1145 	movw	r1, #325	; 0x145
 8018cda:	f7fd fd6f 	bl	80167bc <__assert_func>
 8018cde:	2301      	movs	r3, #1
 8018ce0:	6144      	str	r4, [r0, #20]
 8018ce2:	6103      	str	r3, [r0, #16]
 8018ce4:	bd10      	pop	{r4, pc}
 8018ce6:	bf00      	nop
 8018ce8:	0801c981 	.word	0x0801c981
 8018cec:	0801c992 	.word	0x0801c992

08018cf0 <__multiply>:
 8018cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf4:	4691      	mov	r9, r2
 8018cf6:	690a      	ldr	r2, [r1, #16]
 8018cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018cfc:	429a      	cmp	r2, r3
 8018cfe:	bfb8      	it	lt
 8018d00:	460b      	movlt	r3, r1
 8018d02:	460c      	mov	r4, r1
 8018d04:	bfbc      	itt	lt
 8018d06:	464c      	movlt	r4, r9
 8018d08:	4699      	movlt	r9, r3
 8018d0a:	6927      	ldr	r7, [r4, #16]
 8018d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018d10:	68a3      	ldr	r3, [r4, #8]
 8018d12:	6861      	ldr	r1, [r4, #4]
 8018d14:	eb07 060a 	add.w	r6, r7, sl
 8018d18:	42b3      	cmp	r3, r6
 8018d1a:	b085      	sub	sp, #20
 8018d1c:	bfb8      	it	lt
 8018d1e:	3101      	addlt	r1, #1
 8018d20:	f7ff fe90 	bl	8018a44 <_Balloc>
 8018d24:	b930      	cbnz	r0, 8018d34 <__multiply+0x44>
 8018d26:	4602      	mov	r2, r0
 8018d28:	4b44      	ldr	r3, [pc, #272]	; (8018e3c <__multiply+0x14c>)
 8018d2a:	4845      	ldr	r0, [pc, #276]	; (8018e40 <__multiply+0x150>)
 8018d2c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018d30:	f7fd fd44 	bl	80167bc <__assert_func>
 8018d34:	f100 0514 	add.w	r5, r0, #20
 8018d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018d3c:	462b      	mov	r3, r5
 8018d3e:	2200      	movs	r2, #0
 8018d40:	4543      	cmp	r3, r8
 8018d42:	d321      	bcc.n	8018d88 <__multiply+0x98>
 8018d44:	f104 0314 	add.w	r3, r4, #20
 8018d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018d4c:	f109 0314 	add.w	r3, r9, #20
 8018d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018d54:	9202      	str	r2, [sp, #8]
 8018d56:	1b3a      	subs	r2, r7, r4
 8018d58:	3a15      	subs	r2, #21
 8018d5a:	f022 0203 	bic.w	r2, r2, #3
 8018d5e:	3204      	adds	r2, #4
 8018d60:	f104 0115 	add.w	r1, r4, #21
 8018d64:	428f      	cmp	r7, r1
 8018d66:	bf38      	it	cc
 8018d68:	2204      	movcc	r2, #4
 8018d6a:	9201      	str	r2, [sp, #4]
 8018d6c:	9a02      	ldr	r2, [sp, #8]
 8018d6e:	9303      	str	r3, [sp, #12]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d80c      	bhi.n	8018d8e <__multiply+0x9e>
 8018d74:	2e00      	cmp	r6, #0
 8018d76:	dd03      	ble.n	8018d80 <__multiply+0x90>
 8018d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d05b      	beq.n	8018e38 <__multiply+0x148>
 8018d80:	6106      	str	r6, [r0, #16]
 8018d82:	b005      	add	sp, #20
 8018d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d88:	f843 2b04 	str.w	r2, [r3], #4
 8018d8c:	e7d8      	b.n	8018d40 <__multiply+0x50>
 8018d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8018d92:	f1ba 0f00 	cmp.w	sl, #0
 8018d96:	d024      	beq.n	8018de2 <__multiply+0xf2>
 8018d98:	f104 0e14 	add.w	lr, r4, #20
 8018d9c:	46a9      	mov	r9, r5
 8018d9e:	f04f 0c00 	mov.w	ip, #0
 8018da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018da6:	f8d9 1000 	ldr.w	r1, [r9]
 8018daa:	fa1f fb82 	uxth.w	fp, r2
 8018dae:	b289      	uxth	r1, r1
 8018db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8018db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018db8:	f8d9 2000 	ldr.w	r2, [r9]
 8018dbc:	4461      	add	r1, ip
 8018dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8018dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018dca:	b289      	uxth	r1, r1
 8018dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018dd0:	4577      	cmp	r7, lr
 8018dd2:	f849 1b04 	str.w	r1, [r9], #4
 8018dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018dda:	d8e2      	bhi.n	8018da2 <__multiply+0xb2>
 8018ddc:	9a01      	ldr	r2, [sp, #4]
 8018dde:	f845 c002 	str.w	ip, [r5, r2]
 8018de2:	9a03      	ldr	r2, [sp, #12]
 8018de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018de8:	3304      	adds	r3, #4
 8018dea:	f1b9 0f00 	cmp.w	r9, #0
 8018dee:	d021      	beq.n	8018e34 <__multiply+0x144>
 8018df0:	6829      	ldr	r1, [r5, #0]
 8018df2:	f104 0c14 	add.w	ip, r4, #20
 8018df6:	46ae      	mov	lr, r5
 8018df8:	f04f 0a00 	mov.w	sl, #0
 8018dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8018e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018e04:	fb09 220b 	mla	r2, r9, fp, r2
 8018e08:	4452      	add	r2, sl
 8018e0a:	b289      	uxth	r1, r1
 8018e0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018e10:	f84e 1b04 	str.w	r1, [lr], #4
 8018e14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018e1c:	f8be 1000 	ldrh.w	r1, [lr]
 8018e20:	fb09 110a 	mla	r1, r9, sl, r1
 8018e24:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018e28:	4567      	cmp	r7, ip
 8018e2a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018e2e:	d8e5      	bhi.n	8018dfc <__multiply+0x10c>
 8018e30:	9a01      	ldr	r2, [sp, #4]
 8018e32:	50a9      	str	r1, [r5, r2]
 8018e34:	3504      	adds	r5, #4
 8018e36:	e799      	b.n	8018d6c <__multiply+0x7c>
 8018e38:	3e01      	subs	r6, #1
 8018e3a:	e79b      	b.n	8018d74 <__multiply+0x84>
 8018e3c:	0801c981 	.word	0x0801c981
 8018e40:	0801c992 	.word	0x0801c992

08018e44 <__pow5mult>:
 8018e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e48:	4615      	mov	r5, r2
 8018e4a:	f012 0203 	ands.w	r2, r2, #3
 8018e4e:	4606      	mov	r6, r0
 8018e50:	460f      	mov	r7, r1
 8018e52:	d007      	beq.n	8018e64 <__pow5mult+0x20>
 8018e54:	4c25      	ldr	r4, [pc, #148]	; (8018eec <__pow5mult+0xa8>)
 8018e56:	3a01      	subs	r2, #1
 8018e58:	2300      	movs	r3, #0
 8018e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018e5e:	f7ff fe53 	bl	8018b08 <__multadd>
 8018e62:	4607      	mov	r7, r0
 8018e64:	10ad      	asrs	r5, r5, #2
 8018e66:	d03d      	beq.n	8018ee4 <__pow5mult+0xa0>
 8018e68:	69f4      	ldr	r4, [r6, #28]
 8018e6a:	b97c      	cbnz	r4, 8018e8c <__pow5mult+0x48>
 8018e6c:	2010      	movs	r0, #16
 8018e6e:	f7fd fce1 	bl	8016834 <malloc>
 8018e72:	4602      	mov	r2, r0
 8018e74:	61f0      	str	r0, [r6, #28]
 8018e76:	b928      	cbnz	r0, 8018e84 <__pow5mult+0x40>
 8018e78:	4b1d      	ldr	r3, [pc, #116]	; (8018ef0 <__pow5mult+0xac>)
 8018e7a:	481e      	ldr	r0, [pc, #120]	; (8018ef4 <__pow5mult+0xb0>)
 8018e7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018e80:	f7fd fc9c 	bl	80167bc <__assert_func>
 8018e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e88:	6004      	str	r4, [r0, #0]
 8018e8a:	60c4      	str	r4, [r0, #12]
 8018e8c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018e94:	b94c      	cbnz	r4, 8018eaa <__pow5mult+0x66>
 8018e96:	f240 2171 	movw	r1, #625	; 0x271
 8018e9a:	4630      	mov	r0, r6
 8018e9c:	f7ff ff12 	bl	8018cc4 <__i2b>
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	6003      	str	r3, [r0, #0]
 8018eaa:	f04f 0900 	mov.w	r9, #0
 8018eae:	07eb      	lsls	r3, r5, #31
 8018eb0:	d50a      	bpl.n	8018ec8 <__pow5mult+0x84>
 8018eb2:	4639      	mov	r1, r7
 8018eb4:	4622      	mov	r2, r4
 8018eb6:	4630      	mov	r0, r6
 8018eb8:	f7ff ff1a 	bl	8018cf0 <__multiply>
 8018ebc:	4639      	mov	r1, r7
 8018ebe:	4680      	mov	r8, r0
 8018ec0:	4630      	mov	r0, r6
 8018ec2:	f7ff fdff 	bl	8018ac4 <_Bfree>
 8018ec6:	4647      	mov	r7, r8
 8018ec8:	106d      	asrs	r5, r5, #1
 8018eca:	d00b      	beq.n	8018ee4 <__pow5mult+0xa0>
 8018ecc:	6820      	ldr	r0, [r4, #0]
 8018ece:	b938      	cbnz	r0, 8018ee0 <__pow5mult+0x9c>
 8018ed0:	4622      	mov	r2, r4
 8018ed2:	4621      	mov	r1, r4
 8018ed4:	4630      	mov	r0, r6
 8018ed6:	f7ff ff0b 	bl	8018cf0 <__multiply>
 8018eda:	6020      	str	r0, [r4, #0]
 8018edc:	f8c0 9000 	str.w	r9, [r0]
 8018ee0:	4604      	mov	r4, r0
 8018ee2:	e7e4      	b.n	8018eae <__pow5mult+0x6a>
 8018ee4:	4638      	mov	r0, r7
 8018ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018eea:	bf00      	nop
 8018eec:	0801cae0 	.word	0x0801cae0
 8018ef0:	0801c912 	.word	0x0801c912
 8018ef4:	0801c992 	.word	0x0801c992

08018ef8 <__lshift>:
 8018ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018efc:	460c      	mov	r4, r1
 8018efe:	6849      	ldr	r1, [r1, #4]
 8018f00:	6923      	ldr	r3, [r4, #16]
 8018f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018f06:	68a3      	ldr	r3, [r4, #8]
 8018f08:	4607      	mov	r7, r0
 8018f0a:	4691      	mov	r9, r2
 8018f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018f10:	f108 0601 	add.w	r6, r8, #1
 8018f14:	42b3      	cmp	r3, r6
 8018f16:	db0b      	blt.n	8018f30 <__lshift+0x38>
 8018f18:	4638      	mov	r0, r7
 8018f1a:	f7ff fd93 	bl	8018a44 <_Balloc>
 8018f1e:	4605      	mov	r5, r0
 8018f20:	b948      	cbnz	r0, 8018f36 <__lshift+0x3e>
 8018f22:	4602      	mov	r2, r0
 8018f24:	4b28      	ldr	r3, [pc, #160]	; (8018fc8 <__lshift+0xd0>)
 8018f26:	4829      	ldr	r0, [pc, #164]	; (8018fcc <__lshift+0xd4>)
 8018f28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018f2c:	f7fd fc46 	bl	80167bc <__assert_func>
 8018f30:	3101      	adds	r1, #1
 8018f32:	005b      	lsls	r3, r3, #1
 8018f34:	e7ee      	b.n	8018f14 <__lshift+0x1c>
 8018f36:	2300      	movs	r3, #0
 8018f38:	f100 0114 	add.w	r1, r0, #20
 8018f3c:	f100 0210 	add.w	r2, r0, #16
 8018f40:	4618      	mov	r0, r3
 8018f42:	4553      	cmp	r3, sl
 8018f44:	db33      	blt.n	8018fae <__lshift+0xb6>
 8018f46:	6920      	ldr	r0, [r4, #16]
 8018f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018f4c:	f104 0314 	add.w	r3, r4, #20
 8018f50:	f019 091f 	ands.w	r9, r9, #31
 8018f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018f58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018f5c:	d02b      	beq.n	8018fb6 <__lshift+0xbe>
 8018f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8018f62:	468a      	mov	sl, r1
 8018f64:	2200      	movs	r2, #0
 8018f66:	6818      	ldr	r0, [r3, #0]
 8018f68:	fa00 f009 	lsl.w	r0, r0, r9
 8018f6c:	4310      	orrs	r0, r2
 8018f6e:	f84a 0b04 	str.w	r0, [sl], #4
 8018f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f76:	459c      	cmp	ip, r3
 8018f78:	fa22 f20e 	lsr.w	r2, r2, lr
 8018f7c:	d8f3      	bhi.n	8018f66 <__lshift+0x6e>
 8018f7e:	ebac 0304 	sub.w	r3, ip, r4
 8018f82:	3b15      	subs	r3, #21
 8018f84:	f023 0303 	bic.w	r3, r3, #3
 8018f88:	3304      	adds	r3, #4
 8018f8a:	f104 0015 	add.w	r0, r4, #21
 8018f8e:	4584      	cmp	ip, r0
 8018f90:	bf38      	it	cc
 8018f92:	2304      	movcc	r3, #4
 8018f94:	50ca      	str	r2, [r1, r3]
 8018f96:	b10a      	cbz	r2, 8018f9c <__lshift+0xa4>
 8018f98:	f108 0602 	add.w	r6, r8, #2
 8018f9c:	3e01      	subs	r6, #1
 8018f9e:	4638      	mov	r0, r7
 8018fa0:	612e      	str	r6, [r5, #16]
 8018fa2:	4621      	mov	r1, r4
 8018fa4:	f7ff fd8e 	bl	8018ac4 <_Bfree>
 8018fa8:	4628      	mov	r0, r5
 8018faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	e7c5      	b.n	8018f42 <__lshift+0x4a>
 8018fb6:	3904      	subs	r1, #4
 8018fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8018fc0:	459c      	cmp	ip, r3
 8018fc2:	d8f9      	bhi.n	8018fb8 <__lshift+0xc0>
 8018fc4:	e7ea      	b.n	8018f9c <__lshift+0xa4>
 8018fc6:	bf00      	nop
 8018fc8:	0801c981 	.word	0x0801c981
 8018fcc:	0801c992 	.word	0x0801c992

08018fd0 <__mcmp>:
 8018fd0:	b530      	push	{r4, r5, lr}
 8018fd2:	6902      	ldr	r2, [r0, #16]
 8018fd4:	690c      	ldr	r4, [r1, #16]
 8018fd6:	1b12      	subs	r2, r2, r4
 8018fd8:	d10e      	bne.n	8018ff8 <__mcmp+0x28>
 8018fda:	f100 0314 	add.w	r3, r0, #20
 8018fde:	3114      	adds	r1, #20
 8018fe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018fe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018fe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018fec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018ff0:	42a5      	cmp	r5, r4
 8018ff2:	d003      	beq.n	8018ffc <__mcmp+0x2c>
 8018ff4:	d305      	bcc.n	8019002 <__mcmp+0x32>
 8018ff6:	2201      	movs	r2, #1
 8018ff8:	4610      	mov	r0, r2
 8018ffa:	bd30      	pop	{r4, r5, pc}
 8018ffc:	4283      	cmp	r3, r0
 8018ffe:	d3f3      	bcc.n	8018fe8 <__mcmp+0x18>
 8019000:	e7fa      	b.n	8018ff8 <__mcmp+0x28>
 8019002:	f04f 32ff 	mov.w	r2, #4294967295
 8019006:	e7f7      	b.n	8018ff8 <__mcmp+0x28>

08019008 <__mdiff>:
 8019008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801900c:	460c      	mov	r4, r1
 801900e:	4606      	mov	r6, r0
 8019010:	4611      	mov	r1, r2
 8019012:	4620      	mov	r0, r4
 8019014:	4690      	mov	r8, r2
 8019016:	f7ff ffdb 	bl	8018fd0 <__mcmp>
 801901a:	1e05      	subs	r5, r0, #0
 801901c:	d110      	bne.n	8019040 <__mdiff+0x38>
 801901e:	4629      	mov	r1, r5
 8019020:	4630      	mov	r0, r6
 8019022:	f7ff fd0f 	bl	8018a44 <_Balloc>
 8019026:	b930      	cbnz	r0, 8019036 <__mdiff+0x2e>
 8019028:	4b3a      	ldr	r3, [pc, #232]	; (8019114 <__mdiff+0x10c>)
 801902a:	4602      	mov	r2, r0
 801902c:	f240 2137 	movw	r1, #567	; 0x237
 8019030:	4839      	ldr	r0, [pc, #228]	; (8019118 <__mdiff+0x110>)
 8019032:	f7fd fbc3 	bl	80167bc <__assert_func>
 8019036:	2301      	movs	r3, #1
 8019038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801903c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019040:	bfa4      	itt	ge
 8019042:	4643      	movge	r3, r8
 8019044:	46a0      	movge	r8, r4
 8019046:	4630      	mov	r0, r6
 8019048:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801904c:	bfa6      	itte	ge
 801904e:	461c      	movge	r4, r3
 8019050:	2500      	movge	r5, #0
 8019052:	2501      	movlt	r5, #1
 8019054:	f7ff fcf6 	bl	8018a44 <_Balloc>
 8019058:	b920      	cbnz	r0, 8019064 <__mdiff+0x5c>
 801905a:	4b2e      	ldr	r3, [pc, #184]	; (8019114 <__mdiff+0x10c>)
 801905c:	4602      	mov	r2, r0
 801905e:	f240 2145 	movw	r1, #581	; 0x245
 8019062:	e7e5      	b.n	8019030 <__mdiff+0x28>
 8019064:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019068:	6926      	ldr	r6, [r4, #16]
 801906a:	60c5      	str	r5, [r0, #12]
 801906c:	f104 0914 	add.w	r9, r4, #20
 8019070:	f108 0514 	add.w	r5, r8, #20
 8019074:	f100 0e14 	add.w	lr, r0, #20
 8019078:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801907c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019080:	f108 0210 	add.w	r2, r8, #16
 8019084:	46f2      	mov	sl, lr
 8019086:	2100      	movs	r1, #0
 8019088:	f859 3b04 	ldr.w	r3, [r9], #4
 801908c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019090:	fa11 f88b 	uxtah	r8, r1, fp
 8019094:	b299      	uxth	r1, r3
 8019096:	0c1b      	lsrs	r3, r3, #16
 8019098:	eba8 0801 	sub.w	r8, r8, r1
 801909c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80190a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80190a4:	fa1f f888 	uxth.w	r8, r8
 80190a8:	1419      	asrs	r1, r3, #16
 80190aa:	454e      	cmp	r6, r9
 80190ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80190b0:	f84a 3b04 	str.w	r3, [sl], #4
 80190b4:	d8e8      	bhi.n	8019088 <__mdiff+0x80>
 80190b6:	1b33      	subs	r3, r6, r4
 80190b8:	3b15      	subs	r3, #21
 80190ba:	f023 0303 	bic.w	r3, r3, #3
 80190be:	3304      	adds	r3, #4
 80190c0:	3415      	adds	r4, #21
 80190c2:	42a6      	cmp	r6, r4
 80190c4:	bf38      	it	cc
 80190c6:	2304      	movcc	r3, #4
 80190c8:	441d      	add	r5, r3
 80190ca:	4473      	add	r3, lr
 80190cc:	469e      	mov	lr, r3
 80190ce:	462e      	mov	r6, r5
 80190d0:	4566      	cmp	r6, ip
 80190d2:	d30e      	bcc.n	80190f2 <__mdiff+0xea>
 80190d4:	f10c 0203 	add.w	r2, ip, #3
 80190d8:	1b52      	subs	r2, r2, r5
 80190da:	f022 0203 	bic.w	r2, r2, #3
 80190de:	3d03      	subs	r5, #3
 80190e0:	45ac      	cmp	ip, r5
 80190e2:	bf38      	it	cc
 80190e4:	2200      	movcc	r2, #0
 80190e6:	4413      	add	r3, r2
 80190e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80190ec:	b17a      	cbz	r2, 801910e <__mdiff+0x106>
 80190ee:	6107      	str	r7, [r0, #16]
 80190f0:	e7a4      	b.n	801903c <__mdiff+0x34>
 80190f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80190f6:	fa11 f288 	uxtah	r2, r1, r8
 80190fa:	1414      	asrs	r4, r2, #16
 80190fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019100:	b292      	uxth	r2, r2
 8019102:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019106:	f84e 2b04 	str.w	r2, [lr], #4
 801910a:	1421      	asrs	r1, r4, #16
 801910c:	e7e0      	b.n	80190d0 <__mdiff+0xc8>
 801910e:	3f01      	subs	r7, #1
 8019110:	e7ea      	b.n	80190e8 <__mdiff+0xe0>
 8019112:	bf00      	nop
 8019114:	0801c981 	.word	0x0801c981
 8019118:	0801c992 	.word	0x0801c992

0801911c <__ulp>:
 801911c:	b082      	sub	sp, #8
 801911e:	ed8d 0b00 	vstr	d0, [sp]
 8019122:	9a01      	ldr	r2, [sp, #4]
 8019124:	4b0f      	ldr	r3, [pc, #60]	; (8019164 <__ulp+0x48>)
 8019126:	4013      	ands	r3, r2
 8019128:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801912c:	2b00      	cmp	r3, #0
 801912e:	dc08      	bgt.n	8019142 <__ulp+0x26>
 8019130:	425b      	negs	r3, r3
 8019132:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019136:	ea4f 5223 	mov.w	r2, r3, asr #20
 801913a:	da04      	bge.n	8019146 <__ulp+0x2a>
 801913c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019140:	4113      	asrs	r3, r2
 8019142:	2200      	movs	r2, #0
 8019144:	e008      	b.n	8019158 <__ulp+0x3c>
 8019146:	f1a2 0314 	sub.w	r3, r2, #20
 801914a:	2b1e      	cmp	r3, #30
 801914c:	bfda      	itte	le
 801914e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019152:	40da      	lsrle	r2, r3
 8019154:	2201      	movgt	r2, #1
 8019156:	2300      	movs	r3, #0
 8019158:	4619      	mov	r1, r3
 801915a:	4610      	mov	r0, r2
 801915c:	ec41 0b10 	vmov	d0, r0, r1
 8019160:	b002      	add	sp, #8
 8019162:	4770      	bx	lr
 8019164:	7ff00000 	.word	0x7ff00000

08019168 <__b2d>:
 8019168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801916c:	6906      	ldr	r6, [r0, #16]
 801916e:	f100 0814 	add.w	r8, r0, #20
 8019172:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019176:	1f37      	subs	r7, r6, #4
 8019178:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801917c:	4610      	mov	r0, r2
 801917e:	f7ff fd53 	bl	8018c28 <__hi0bits>
 8019182:	f1c0 0320 	rsb	r3, r0, #32
 8019186:	280a      	cmp	r0, #10
 8019188:	600b      	str	r3, [r1, #0]
 801918a:	491b      	ldr	r1, [pc, #108]	; (80191f8 <__b2d+0x90>)
 801918c:	dc15      	bgt.n	80191ba <__b2d+0x52>
 801918e:	f1c0 0c0b 	rsb	ip, r0, #11
 8019192:	fa22 f30c 	lsr.w	r3, r2, ip
 8019196:	45b8      	cmp	r8, r7
 8019198:	ea43 0501 	orr.w	r5, r3, r1
 801919c:	bf34      	ite	cc
 801919e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80191a2:	2300      	movcs	r3, #0
 80191a4:	3015      	adds	r0, #21
 80191a6:	fa02 f000 	lsl.w	r0, r2, r0
 80191aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80191ae:	4303      	orrs	r3, r0
 80191b0:	461c      	mov	r4, r3
 80191b2:	ec45 4b10 	vmov	d0, r4, r5
 80191b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191ba:	45b8      	cmp	r8, r7
 80191bc:	bf3a      	itte	cc
 80191be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80191c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80191c6:	2300      	movcs	r3, #0
 80191c8:	380b      	subs	r0, #11
 80191ca:	d012      	beq.n	80191f2 <__b2d+0x8a>
 80191cc:	f1c0 0120 	rsb	r1, r0, #32
 80191d0:	fa23 f401 	lsr.w	r4, r3, r1
 80191d4:	4082      	lsls	r2, r0
 80191d6:	4322      	orrs	r2, r4
 80191d8:	4547      	cmp	r7, r8
 80191da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80191de:	bf8c      	ite	hi
 80191e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80191e4:	2200      	movls	r2, #0
 80191e6:	4083      	lsls	r3, r0
 80191e8:	40ca      	lsrs	r2, r1
 80191ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80191ee:	4313      	orrs	r3, r2
 80191f0:	e7de      	b.n	80191b0 <__b2d+0x48>
 80191f2:	ea42 0501 	orr.w	r5, r2, r1
 80191f6:	e7db      	b.n	80191b0 <__b2d+0x48>
 80191f8:	3ff00000 	.word	0x3ff00000

080191fc <__d2b>:
 80191fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019200:	460f      	mov	r7, r1
 8019202:	2101      	movs	r1, #1
 8019204:	ec59 8b10 	vmov	r8, r9, d0
 8019208:	4616      	mov	r6, r2
 801920a:	f7ff fc1b 	bl	8018a44 <_Balloc>
 801920e:	4604      	mov	r4, r0
 8019210:	b930      	cbnz	r0, 8019220 <__d2b+0x24>
 8019212:	4602      	mov	r2, r0
 8019214:	4b24      	ldr	r3, [pc, #144]	; (80192a8 <__d2b+0xac>)
 8019216:	4825      	ldr	r0, [pc, #148]	; (80192ac <__d2b+0xb0>)
 8019218:	f240 310f 	movw	r1, #783	; 0x30f
 801921c:	f7fd face 	bl	80167bc <__assert_func>
 8019220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019228:	bb2d      	cbnz	r5, 8019276 <__d2b+0x7a>
 801922a:	9301      	str	r3, [sp, #4]
 801922c:	f1b8 0300 	subs.w	r3, r8, #0
 8019230:	d026      	beq.n	8019280 <__d2b+0x84>
 8019232:	4668      	mov	r0, sp
 8019234:	9300      	str	r3, [sp, #0]
 8019236:	f7ff fd17 	bl	8018c68 <__lo0bits>
 801923a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801923e:	b1e8      	cbz	r0, 801927c <__d2b+0x80>
 8019240:	f1c0 0320 	rsb	r3, r0, #32
 8019244:	fa02 f303 	lsl.w	r3, r2, r3
 8019248:	430b      	orrs	r3, r1
 801924a:	40c2      	lsrs	r2, r0
 801924c:	6163      	str	r3, [r4, #20]
 801924e:	9201      	str	r2, [sp, #4]
 8019250:	9b01      	ldr	r3, [sp, #4]
 8019252:	61a3      	str	r3, [r4, #24]
 8019254:	2b00      	cmp	r3, #0
 8019256:	bf14      	ite	ne
 8019258:	2202      	movne	r2, #2
 801925a:	2201      	moveq	r2, #1
 801925c:	6122      	str	r2, [r4, #16]
 801925e:	b1bd      	cbz	r5, 8019290 <__d2b+0x94>
 8019260:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019264:	4405      	add	r5, r0
 8019266:	603d      	str	r5, [r7, #0]
 8019268:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801926c:	6030      	str	r0, [r6, #0]
 801926e:	4620      	mov	r0, r4
 8019270:	b003      	add	sp, #12
 8019272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801927a:	e7d6      	b.n	801922a <__d2b+0x2e>
 801927c:	6161      	str	r1, [r4, #20]
 801927e:	e7e7      	b.n	8019250 <__d2b+0x54>
 8019280:	a801      	add	r0, sp, #4
 8019282:	f7ff fcf1 	bl	8018c68 <__lo0bits>
 8019286:	9b01      	ldr	r3, [sp, #4]
 8019288:	6163      	str	r3, [r4, #20]
 801928a:	3020      	adds	r0, #32
 801928c:	2201      	movs	r2, #1
 801928e:	e7e5      	b.n	801925c <__d2b+0x60>
 8019290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019298:	6038      	str	r0, [r7, #0]
 801929a:	6918      	ldr	r0, [r3, #16]
 801929c:	f7ff fcc4 	bl	8018c28 <__hi0bits>
 80192a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80192a4:	e7e2      	b.n	801926c <__d2b+0x70>
 80192a6:	bf00      	nop
 80192a8:	0801c981 	.word	0x0801c981
 80192ac:	0801c992 	.word	0x0801c992

080192b0 <__ratio>:
 80192b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b4:	4688      	mov	r8, r1
 80192b6:	4669      	mov	r1, sp
 80192b8:	4681      	mov	r9, r0
 80192ba:	f7ff ff55 	bl	8019168 <__b2d>
 80192be:	a901      	add	r1, sp, #4
 80192c0:	4640      	mov	r0, r8
 80192c2:	ec55 4b10 	vmov	r4, r5, d0
 80192c6:	f7ff ff4f 	bl	8019168 <__b2d>
 80192ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80192ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80192d2:	eba3 0c02 	sub.w	ip, r3, r2
 80192d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80192da:	1a9b      	subs	r3, r3, r2
 80192dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80192e0:	ec51 0b10 	vmov	r0, r1, d0
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	bfd6      	itet	le
 80192e8:	460a      	movle	r2, r1
 80192ea:	462a      	movgt	r2, r5
 80192ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80192f0:	468b      	mov	fp, r1
 80192f2:	462f      	mov	r7, r5
 80192f4:	bfd4      	ite	le
 80192f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80192fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80192fe:	4620      	mov	r0, r4
 8019300:	ee10 2a10 	vmov	r2, s0
 8019304:	465b      	mov	r3, fp
 8019306:	4639      	mov	r1, r7
 8019308:	f7e7 faa0 	bl	800084c <__aeabi_ddiv>
 801930c:	ec41 0b10 	vmov	d0, r0, r1
 8019310:	b003      	add	sp, #12
 8019312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019316 <__copybits>:
 8019316:	3901      	subs	r1, #1
 8019318:	b570      	push	{r4, r5, r6, lr}
 801931a:	1149      	asrs	r1, r1, #5
 801931c:	6914      	ldr	r4, [r2, #16]
 801931e:	3101      	adds	r1, #1
 8019320:	f102 0314 	add.w	r3, r2, #20
 8019324:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019328:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801932c:	1f05      	subs	r5, r0, #4
 801932e:	42a3      	cmp	r3, r4
 8019330:	d30c      	bcc.n	801934c <__copybits+0x36>
 8019332:	1aa3      	subs	r3, r4, r2
 8019334:	3b11      	subs	r3, #17
 8019336:	f023 0303 	bic.w	r3, r3, #3
 801933a:	3211      	adds	r2, #17
 801933c:	42a2      	cmp	r2, r4
 801933e:	bf88      	it	hi
 8019340:	2300      	movhi	r3, #0
 8019342:	4418      	add	r0, r3
 8019344:	2300      	movs	r3, #0
 8019346:	4288      	cmp	r0, r1
 8019348:	d305      	bcc.n	8019356 <__copybits+0x40>
 801934a:	bd70      	pop	{r4, r5, r6, pc}
 801934c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019350:	f845 6f04 	str.w	r6, [r5, #4]!
 8019354:	e7eb      	b.n	801932e <__copybits+0x18>
 8019356:	f840 3b04 	str.w	r3, [r0], #4
 801935a:	e7f4      	b.n	8019346 <__copybits+0x30>

0801935c <__any_on>:
 801935c:	f100 0214 	add.w	r2, r0, #20
 8019360:	6900      	ldr	r0, [r0, #16]
 8019362:	114b      	asrs	r3, r1, #5
 8019364:	4298      	cmp	r0, r3
 8019366:	b510      	push	{r4, lr}
 8019368:	db11      	blt.n	801938e <__any_on+0x32>
 801936a:	dd0a      	ble.n	8019382 <__any_on+0x26>
 801936c:	f011 011f 	ands.w	r1, r1, #31
 8019370:	d007      	beq.n	8019382 <__any_on+0x26>
 8019372:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019376:	fa24 f001 	lsr.w	r0, r4, r1
 801937a:	fa00 f101 	lsl.w	r1, r0, r1
 801937e:	428c      	cmp	r4, r1
 8019380:	d10b      	bne.n	801939a <__any_on+0x3e>
 8019382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019386:	4293      	cmp	r3, r2
 8019388:	d803      	bhi.n	8019392 <__any_on+0x36>
 801938a:	2000      	movs	r0, #0
 801938c:	bd10      	pop	{r4, pc}
 801938e:	4603      	mov	r3, r0
 8019390:	e7f7      	b.n	8019382 <__any_on+0x26>
 8019392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019396:	2900      	cmp	r1, #0
 8019398:	d0f5      	beq.n	8019386 <__any_on+0x2a>
 801939a:	2001      	movs	r0, #1
 801939c:	e7f6      	b.n	801938c <__any_on+0x30>

0801939e <sulp>:
 801939e:	b570      	push	{r4, r5, r6, lr}
 80193a0:	4604      	mov	r4, r0
 80193a2:	460d      	mov	r5, r1
 80193a4:	ec45 4b10 	vmov	d0, r4, r5
 80193a8:	4616      	mov	r6, r2
 80193aa:	f7ff feb7 	bl	801911c <__ulp>
 80193ae:	ec51 0b10 	vmov	r0, r1, d0
 80193b2:	b17e      	cbz	r6, 80193d4 <sulp+0x36>
 80193b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80193b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80193bc:	2b00      	cmp	r3, #0
 80193be:	dd09      	ble.n	80193d4 <sulp+0x36>
 80193c0:	051b      	lsls	r3, r3, #20
 80193c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80193c6:	2400      	movs	r4, #0
 80193c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80193cc:	4622      	mov	r2, r4
 80193ce:	462b      	mov	r3, r5
 80193d0:	f7e7 f912 	bl	80005f8 <__aeabi_dmul>
 80193d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080193d8 <_strtod_l>:
 80193d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193dc:	ed2d 8b02 	vpush	{d8}
 80193e0:	b09b      	sub	sp, #108	; 0x6c
 80193e2:	4604      	mov	r4, r0
 80193e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80193e6:	2200      	movs	r2, #0
 80193e8:	9216      	str	r2, [sp, #88]	; 0x58
 80193ea:	460d      	mov	r5, r1
 80193ec:	f04f 0800 	mov.w	r8, #0
 80193f0:	f04f 0900 	mov.w	r9, #0
 80193f4:	460a      	mov	r2, r1
 80193f6:	9215      	str	r2, [sp, #84]	; 0x54
 80193f8:	7811      	ldrb	r1, [r2, #0]
 80193fa:	292b      	cmp	r1, #43	; 0x2b
 80193fc:	d04c      	beq.n	8019498 <_strtod_l+0xc0>
 80193fe:	d83a      	bhi.n	8019476 <_strtod_l+0x9e>
 8019400:	290d      	cmp	r1, #13
 8019402:	d834      	bhi.n	801946e <_strtod_l+0x96>
 8019404:	2908      	cmp	r1, #8
 8019406:	d834      	bhi.n	8019472 <_strtod_l+0x9a>
 8019408:	2900      	cmp	r1, #0
 801940a:	d03d      	beq.n	8019488 <_strtod_l+0xb0>
 801940c:	2200      	movs	r2, #0
 801940e:	920a      	str	r2, [sp, #40]	; 0x28
 8019410:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019412:	7832      	ldrb	r2, [r6, #0]
 8019414:	2a30      	cmp	r2, #48	; 0x30
 8019416:	f040 80b4 	bne.w	8019582 <_strtod_l+0x1aa>
 801941a:	7872      	ldrb	r2, [r6, #1]
 801941c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019420:	2a58      	cmp	r2, #88	; 0x58
 8019422:	d170      	bne.n	8019506 <_strtod_l+0x12e>
 8019424:	9302      	str	r3, [sp, #8]
 8019426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019428:	9301      	str	r3, [sp, #4]
 801942a:	ab16      	add	r3, sp, #88	; 0x58
 801942c:	9300      	str	r3, [sp, #0]
 801942e:	4a8e      	ldr	r2, [pc, #568]	; (8019668 <_strtod_l+0x290>)
 8019430:	ab17      	add	r3, sp, #92	; 0x5c
 8019432:	a915      	add	r1, sp, #84	; 0x54
 8019434:	4620      	mov	r0, r4
 8019436:	f001 fae7 	bl	801aa08 <__gethex>
 801943a:	f010 070f 	ands.w	r7, r0, #15
 801943e:	4605      	mov	r5, r0
 8019440:	d005      	beq.n	801944e <_strtod_l+0x76>
 8019442:	2f06      	cmp	r7, #6
 8019444:	d12a      	bne.n	801949c <_strtod_l+0xc4>
 8019446:	3601      	adds	r6, #1
 8019448:	2300      	movs	r3, #0
 801944a:	9615      	str	r6, [sp, #84]	; 0x54
 801944c:	930a      	str	r3, [sp, #40]	; 0x28
 801944e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019450:	2b00      	cmp	r3, #0
 8019452:	f040 857f 	bne.w	8019f54 <_strtod_l+0xb7c>
 8019456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019458:	b1db      	cbz	r3, 8019492 <_strtod_l+0xba>
 801945a:	4642      	mov	r2, r8
 801945c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019460:	ec43 2b10 	vmov	d0, r2, r3
 8019464:	b01b      	add	sp, #108	; 0x6c
 8019466:	ecbd 8b02 	vpop	{d8}
 801946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801946e:	2920      	cmp	r1, #32
 8019470:	d1cc      	bne.n	801940c <_strtod_l+0x34>
 8019472:	3201      	adds	r2, #1
 8019474:	e7bf      	b.n	80193f6 <_strtod_l+0x1e>
 8019476:	292d      	cmp	r1, #45	; 0x2d
 8019478:	d1c8      	bne.n	801940c <_strtod_l+0x34>
 801947a:	2101      	movs	r1, #1
 801947c:	910a      	str	r1, [sp, #40]	; 0x28
 801947e:	1c51      	adds	r1, r2, #1
 8019480:	9115      	str	r1, [sp, #84]	; 0x54
 8019482:	7852      	ldrb	r2, [r2, #1]
 8019484:	2a00      	cmp	r2, #0
 8019486:	d1c3      	bne.n	8019410 <_strtod_l+0x38>
 8019488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801948a:	9515      	str	r5, [sp, #84]	; 0x54
 801948c:	2b00      	cmp	r3, #0
 801948e:	f040 855f 	bne.w	8019f50 <_strtod_l+0xb78>
 8019492:	4642      	mov	r2, r8
 8019494:	464b      	mov	r3, r9
 8019496:	e7e3      	b.n	8019460 <_strtod_l+0x88>
 8019498:	2100      	movs	r1, #0
 801949a:	e7ef      	b.n	801947c <_strtod_l+0xa4>
 801949c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801949e:	b13a      	cbz	r2, 80194b0 <_strtod_l+0xd8>
 80194a0:	2135      	movs	r1, #53	; 0x35
 80194a2:	a818      	add	r0, sp, #96	; 0x60
 80194a4:	f7ff ff37 	bl	8019316 <__copybits>
 80194a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80194aa:	4620      	mov	r0, r4
 80194ac:	f7ff fb0a 	bl	8018ac4 <_Bfree>
 80194b0:	3f01      	subs	r7, #1
 80194b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80194b4:	2f04      	cmp	r7, #4
 80194b6:	d806      	bhi.n	80194c6 <_strtod_l+0xee>
 80194b8:	e8df f007 	tbb	[pc, r7]
 80194bc:	201d0314 	.word	0x201d0314
 80194c0:	14          	.byte	0x14
 80194c1:	00          	.byte	0x00
 80194c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80194c6:	05e9      	lsls	r1, r5, #23
 80194c8:	bf48      	it	mi
 80194ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80194ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80194d2:	0d1b      	lsrs	r3, r3, #20
 80194d4:	051b      	lsls	r3, r3, #20
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d1b9      	bne.n	801944e <_strtod_l+0x76>
 80194da:	f7fe fb9b 	bl	8017c14 <__errno>
 80194de:	2322      	movs	r3, #34	; 0x22
 80194e0:	6003      	str	r3, [r0, #0]
 80194e2:	e7b4      	b.n	801944e <_strtod_l+0x76>
 80194e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80194e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80194ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80194f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80194f4:	e7e7      	b.n	80194c6 <_strtod_l+0xee>
 80194f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8019670 <_strtod_l+0x298>
 80194fa:	e7e4      	b.n	80194c6 <_strtod_l+0xee>
 80194fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019500:	f04f 38ff 	mov.w	r8, #4294967295
 8019504:	e7df      	b.n	80194c6 <_strtod_l+0xee>
 8019506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019508:	1c5a      	adds	r2, r3, #1
 801950a:	9215      	str	r2, [sp, #84]	; 0x54
 801950c:	785b      	ldrb	r3, [r3, #1]
 801950e:	2b30      	cmp	r3, #48	; 0x30
 8019510:	d0f9      	beq.n	8019506 <_strtod_l+0x12e>
 8019512:	2b00      	cmp	r3, #0
 8019514:	d09b      	beq.n	801944e <_strtod_l+0x76>
 8019516:	2301      	movs	r3, #1
 8019518:	f04f 0a00 	mov.w	sl, #0
 801951c:	9304      	str	r3, [sp, #16]
 801951e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019520:	930b      	str	r3, [sp, #44]	; 0x2c
 8019522:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019526:	46d3      	mov	fp, sl
 8019528:	220a      	movs	r2, #10
 801952a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801952c:	7806      	ldrb	r6, [r0, #0]
 801952e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019532:	b2d9      	uxtb	r1, r3
 8019534:	2909      	cmp	r1, #9
 8019536:	d926      	bls.n	8019586 <_strtod_l+0x1ae>
 8019538:	494c      	ldr	r1, [pc, #304]	; (801966c <_strtod_l+0x294>)
 801953a:	2201      	movs	r2, #1
 801953c:	f7fe fafd 	bl	8017b3a <strncmp>
 8019540:	2800      	cmp	r0, #0
 8019542:	d030      	beq.n	80195a6 <_strtod_l+0x1ce>
 8019544:	2000      	movs	r0, #0
 8019546:	4632      	mov	r2, r6
 8019548:	9005      	str	r0, [sp, #20]
 801954a:	465e      	mov	r6, fp
 801954c:	4603      	mov	r3, r0
 801954e:	2a65      	cmp	r2, #101	; 0x65
 8019550:	d001      	beq.n	8019556 <_strtod_l+0x17e>
 8019552:	2a45      	cmp	r2, #69	; 0x45
 8019554:	d113      	bne.n	801957e <_strtod_l+0x1a6>
 8019556:	b91e      	cbnz	r6, 8019560 <_strtod_l+0x188>
 8019558:	9a04      	ldr	r2, [sp, #16]
 801955a:	4302      	orrs	r2, r0
 801955c:	d094      	beq.n	8019488 <_strtod_l+0xb0>
 801955e:	2600      	movs	r6, #0
 8019560:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019562:	1c6a      	adds	r2, r5, #1
 8019564:	9215      	str	r2, [sp, #84]	; 0x54
 8019566:	786a      	ldrb	r2, [r5, #1]
 8019568:	2a2b      	cmp	r2, #43	; 0x2b
 801956a:	d074      	beq.n	8019656 <_strtod_l+0x27e>
 801956c:	2a2d      	cmp	r2, #45	; 0x2d
 801956e:	d078      	beq.n	8019662 <_strtod_l+0x28a>
 8019570:	f04f 0c00 	mov.w	ip, #0
 8019574:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019578:	2909      	cmp	r1, #9
 801957a:	d97f      	bls.n	801967c <_strtod_l+0x2a4>
 801957c:	9515      	str	r5, [sp, #84]	; 0x54
 801957e:	2700      	movs	r7, #0
 8019580:	e09e      	b.n	80196c0 <_strtod_l+0x2e8>
 8019582:	2300      	movs	r3, #0
 8019584:	e7c8      	b.n	8019518 <_strtod_l+0x140>
 8019586:	f1bb 0f08 	cmp.w	fp, #8
 801958a:	bfd8      	it	le
 801958c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801958e:	f100 0001 	add.w	r0, r0, #1
 8019592:	bfda      	itte	le
 8019594:	fb02 3301 	mlale	r3, r2, r1, r3
 8019598:	9309      	strle	r3, [sp, #36]	; 0x24
 801959a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801959e:	f10b 0b01 	add.w	fp, fp, #1
 80195a2:	9015      	str	r0, [sp, #84]	; 0x54
 80195a4:	e7c1      	b.n	801952a <_strtod_l+0x152>
 80195a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195a8:	1c5a      	adds	r2, r3, #1
 80195aa:	9215      	str	r2, [sp, #84]	; 0x54
 80195ac:	785a      	ldrb	r2, [r3, #1]
 80195ae:	f1bb 0f00 	cmp.w	fp, #0
 80195b2:	d037      	beq.n	8019624 <_strtod_l+0x24c>
 80195b4:	9005      	str	r0, [sp, #20]
 80195b6:	465e      	mov	r6, fp
 80195b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80195bc:	2b09      	cmp	r3, #9
 80195be:	d912      	bls.n	80195e6 <_strtod_l+0x20e>
 80195c0:	2301      	movs	r3, #1
 80195c2:	e7c4      	b.n	801954e <_strtod_l+0x176>
 80195c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195c6:	1c5a      	adds	r2, r3, #1
 80195c8:	9215      	str	r2, [sp, #84]	; 0x54
 80195ca:	785a      	ldrb	r2, [r3, #1]
 80195cc:	3001      	adds	r0, #1
 80195ce:	2a30      	cmp	r2, #48	; 0x30
 80195d0:	d0f8      	beq.n	80195c4 <_strtod_l+0x1ec>
 80195d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80195d6:	2b08      	cmp	r3, #8
 80195d8:	f200 84c1 	bhi.w	8019f5e <_strtod_l+0xb86>
 80195dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195de:	9005      	str	r0, [sp, #20]
 80195e0:	2000      	movs	r0, #0
 80195e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80195e4:	4606      	mov	r6, r0
 80195e6:	3a30      	subs	r2, #48	; 0x30
 80195e8:	f100 0301 	add.w	r3, r0, #1
 80195ec:	d014      	beq.n	8019618 <_strtod_l+0x240>
 80195ee:	9905      	ldr	r1, [sp, #20]
 80195f0:	4419      	add	r1, r3
 80195f2:	9105      	str	r1, [sp, #20]
 80195f4:	4633      	mov	r3, r6
 80195f6:	eb00 0c06 	add.w	ip, r0, r6
 80195fa:	210a      	movs	r1, #10
 80195fc:	4563      	cmp	r3, ip
 80195fe:	d113      	bne.n	8019628 <_strtod_l+0x250>
 8019600:	1833      	adds	r3, r6, r0
 8019602:	2b08      	cmp	r3, #8
 8019604:	f106 0601 	add.w	r6, r6, #1
 8019608:	4406      	add	r6, r0
 801960a:	dc1a      	bgt.n	8019642 <_strtod_l+0x26a>
 801960c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801960e:	230a      	movs	r3, #10
 8019610:	fb03 2301 	mla	r3, r3, r1, r2
 8019614:	9309      	str	r3, [sp, #36]	; 0x24
 8019616:	2300      	movs	r3, #0
 8019618:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801961a:	1c51      	adds	r1, r2, #1
 801961c:	9115      	str	r1, [sp, #84]	; 0x54
 801961e:	7852      	ldrb	r2, [r2, #1]
 8019620:	4618      	mov	r0, r3
 8019622:	e7c9      	b.n	80195b8 <_strtod_l+0x1e0>
 8019624:	4658      	mov	r0, fp
 8019626:	e7d2      	b.n	80195ce <_strtod_l+0x1f6>
 8019628:	2b08      	cmp	r3, #8
 801962a:	f103 0301 	add.w	r3, r3, #1
 801962e:	dc03      	bgt.n	8019638 <_strtod_l+0x260>
 8019630:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019632:	434f      	muls	r7, r1
 8019634:	9709      	str	r7, [sp, #36]	; 0x24
 8019636:	e7e1      	b.n	80195fc <_strtod_l+0x224>
 8019638:	2b10      	cmp	r3, #16
 801963a:	bfd8      	it	le
 801963c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8019640:	e7dc      	b.n	80195fc <_strtod_l+0x224>
 8019642:	2e10      	cmp	r6, #16
 8019644:	bfdc      	itt	le
 8019646:	230a      	movle	r3, #10
 8019648:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801964c:	e7e3      	b.n	8019616 <_strtod_l+0x23e>
 801964e:	2300      	movs	r3, #0
 8019650:	9305      	str	r3, [sp, #20]
 8019652:	2301      	movs	r3, #1
 8019654:	e780      	b.n	8019558 <_strtod_l+0x180>
 8019656:	f04f 0c00 	mov.w	ip, #0
 801965a:	1caa      	adds	r2, r5, #2
 801965c:	9215      	str	r2, [sp, #84]	; 0x54
 801965e:	78aa      	ldrb	r2, [r5, #2]
 8019660:	e788      	b.n	8019574 <_strtod_l+0x19c>
 8019662:	f04f 0c01 	mov.w	ip, #1
 8019666:	e7f8      	b.n	801965a <_strtod_l+0x282>
 8019668:	0801caf0 	.word	0x0801caf0
 801966c:	0801caec 	.word	0x0801caec
 8019670:	7ff00000 	.word	0x7ff00000
 8019674:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019676:	1c51      	adds	r1, r2, #1
 8019678:	9115      	str	r1, [sp, #84]	; 0x54
 801967a:	7852      	ldrb	r2, [r2, #1]
 801967c:	2a30      	cmp	r2, #48	; 0x30
 801967e:	d0f9      	beq.n	8019674 <_strtod_l+0x29c>
 8019680:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8019684:	2908      	cmp	r1, #8
 8019686:	f63f af7a 	bhi.w	801957e <_strtod_l+0x1a6>
 801968a:	3a30      	subs	r2, #48	; 0x30
 801968c:	9208      	str	r2, [sp, #32]
 801968e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019690:	920c      	str	r2, [sp, #48]	; 0x30
 8019692:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019694:	1c57      	adds	r7, r2, #1
 8019696:	9715      	str	r7, [sp, #84]	; 0x54
 8019698:	7852      	ldrb	r2, [r2, #1]
 801969a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801969e:	f1be 0f09 	cmp.w	lr, #9
 80196a2:	d938      	bls.n	8019716 <_strtod_l+0x33e>
 80196a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80196a6:	1a7f      	subs	r7, r7, r1
 80196a8:	2f08      	cmp	r7, #8
 80196aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80196ae:	dc03      	bgt.n	80196b8 <_strtod_l+0x2e0>
 80196b0:	9908      	ldr	r1, [sp, #32]
 80196b2:	428f      	cmp	r7, r1
 80196b4:	bfa8      	it	ge
 80196b6:	460f      	movge	r7, r1
 80196b8:	f1bc 0f00 	cmp.w	ip, #0
 80196bc:	d000      	beq.n	80196c0 <_strtod_l+0x2e8>
 80196be:	427f      	negs	r7, r7
 80196c0:	2e00      	cmp	r6, #0
 80196c2:	d14f      	bne.n	8019764 <_strtod_l+0x38c>
 80196c4:	9904      	ldr	r1, [sp, #16]
 80196c6:	4301      	orrs	r1, r0
 80196c8:	f47f aec1 	bne.w	801944e <_strtod_l+0x76>
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	f47f aedb 	bne.w	8019488 <_strtod_l+0xb0>
 80196d2:	2a69      	cmp	r2, #105	; 0x69
 80196d4:	d029      	beq.n	801972a <_strtod_l+0x352>
 80196d6:	dc26      	bgt.n	8019726 <_strtod_l+0x34e>
 80196d8:	2a49      	cmp	r2, #73	; 0x49
 80196da:	d026      	beq.n	801972a <_strtod_l+0x352>
 80196dc:	2a4e      	cmp	r2, #78	; 0x4e
 80196de:	f47f aed3 	bne.w	8019488 <_strtod_l+0xb0>
 80196e2:	499b      	ldr	r1, [pc, #620]	; (8019950 <_strtod_l+0x578>)
 80196e4:	a815      	add	r0, sp, #84	; 0x54
 80196e6:	f001 fbcf 	bl	801ae88 <__match>
 80196ea:	2800      	cmp	r0, #0
 80196ec:	f43f aecc 	beq.w	8019488 <_strtod_l+0xb0>
 80196f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	2b28      	cmp	r3, #40	; 0x28
 80196f6:	d12f      	bne.n	8019758 <_strtod_l+0x380>
 80196f8:	4996      	ldr	r1, [pc, #600]	; (8019954 <_strtod_l+0x57c>)
 80196fa:	aa18      	add	r2, sp, #96	; 0x60
 80196fc:	a815      	add	r0, sp, #84	; 0x54
 80196fe:	f001 fbd7 	bl	801aeb0 <__hexnan>
 8019702:	2805      	cmp	r0, #5
 8019704:	d128      	bne.n	8019758 <_strtod_l+0x380>
 8019706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019708:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801970c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019710:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019714:	e69b      	b.n	801944e <_strtod_l+0x76>
 8019716:	9f08      	ldr	r7, [sp, #32]
 8019718:	210a      	movs	r1, #10
 801971a:	fb01 2107 	mla	r1, r1, r7, r2
 801971e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019722:	9208      	str	r2, [sp, #32]
 8019724:	e7b5      	b.n	8019692 <_strtod_l+0x2ba>
 8019726:	2a6e      	cmp	r2, #110	; 0x6e
 8019728:	e7d9      	b.n	80196de <_strtod_l+0x306>
 801972a:	498b      	ldr	r1, [pc, #556]	; (8019958 <_strtod_l+0x580>)
 801972c:	a815      	add	r0, sp, #84	; 0x54
 801972e:	f001 fbab 	bl	801ae88 <__match>
 8019732:	2800      	cmp	r0, #0
 8019734:	f43f aea8 	beq.w	8019488 <_strtod_l+0xb0>
 8019738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801973a:	4988      	ldr	r1, [pc, #544]	; (801995c <_strtod_l+0x584>)
 801973c:	3b01      	subs	r3, #1
 801973e:	a815      	add	r0, sp, #84	; 0x54
 8019740:	9315      	str	r3, [sp, #84]	; 0x54
 8019742:	f001 fba1 	bl	801ae88 <__match>
 8019746:	b910      	cbnz	r0, 801974e <_strtod_l+0x376>
 8019748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801974a:	3301      	adds	r3, #1
 801974c:	9315      	str	r3, [sp, #84]	; 0x54
 801974e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801996c <_strtod_l+0x594>
 8019752:	f04f 0800 	mov.w	r8, #0
 8019756:	e67a      	b.n	801944e <_strtod_l+0x76>
 8019758:	4881      	ldr	r0, [pc, #516]	; (8019960 <_strtod_l+0x588>)
 801975a:	f001 f8e5 	bl	801a928 <nan>
 801975e:	ec59 8b10 	vmov	r8, r9, d0
 8019762:	e674      	b.n	801944e <_strtod_l+0x76>
 8019764:	9b05      	ldr	r3, [sp, #20]
 8019766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019768:	1afb      	subs	r3, r7, r3
 801976a:	f1bb 0f00 	cmp.w	fp, #0
 801976e:	bf08      	it	eq
 8019770:	46b3      	moveq	fp, r6
 8019772:	2e10      	cmp	r6, #16
 8019774:	9308      	str	r3, [sp, #32]
 8019776:	4635      	mov	r5, r6
 8019778:	bfa8      	it	ge
 801977a:	2510      	movge	r5, #16
 801977c:	f7e6 fec2 	bl	8000504 <__aeabi_ui2d>
 8019780:	2e09      	cmp	r6, #9
 8019782:	4680      	mov	r8, r0
 8019784:	4689      	mov	r9, r1
 8019786:	dd13      	ble.n	80197b0 <_strtod_l+0x3d8>
 8019788:	4b76      	ldr	r3, [pc, #472]	; (8019964 <_strtod_l+0x58c>)
 801978a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801978e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019792:	f7e6 ff31 	bl	80005f8 <__aeabi_dmul>
 8019796:	4680      	mov	r8, r0
 8019798:	4650      	mov	r0, sl
 801979a:	4689      	mov	r9, r1
 801979c:	f7e6 feb2 	bl	8000504 <__aeabi_ui2d>
 80197a0:	4602      	mov	r2, r0
 80197a2:	460b      	mov	r3, r1
 80197a4:	4640      	mov	r0, r8
 80197a6:	4649      	mov	r1, r9
 80197a8:	f7e6 fd70 	bl	800028c <__adddf3>
 80197ac:	4680      	mov	r8, r0
 80197ae:	4689      	mov	r9, r1
 80197b0:	2e0f      	cmp	r6, #15
 80197b2:	dc38      	bgt.n	8019826 <_strtod_l+0x44e>
 80197b4:	9b08      	ldr	r3, [sp, #32]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f43f ae49 	beq.w	801944e <_strtod_l+0x76>
 80197bc:	dd24      	ble.n	8019808 <_strtod_l+0x430>
 80197be:	2b16      	cmp	r3, #22
 80197c0:	dc0b      	bgt.n	80197da <_strtod_l+0x402>
 80197c2:	4968      	ldr	r1, [pc, #416]	; (8019964 <_strtod_l+0x58c>)
 80197c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80197c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197cc:	4642      	mov	r2, r8
 80197ce:	464b      	mov	r3, r9
 80197d0:	f7e6 ff12 	bl	80005f8 <__aeabi_dmul>
 80197d4:	4680      	mov	r8, r0
 80197d6:	4689      	mov	r9, r1
 80197d8:	e639      	b.n	801944e <_strtod_l+0x76>
 80197da:	9a08      	ldr	r2, [sp, #32]
 80197dc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80197e0:	4293      	cmp	r3, r2
 80197e2:	db20      	blt.n	8019826 <_strtod_l+0x44e>
 80197e4:	4c5f      	ldr	r4, [pc, #380]	; (8019964 <_strtod_l+0x58c>)
 80197e6:	f1c6 060f 	rsb	r6, r6, #15
 80197ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80197ee:	4642      	mov	r2, r8
 80197f0:	464b      	mov	r3, r9
 80197f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197f6:	f7e6 feff 	bl	80005f8 <__aeabi_dmul>
 80197fa:	9b08      	ldr	r3, [sp, #32]
 80197fc:	1b9e      	subs	r6, r3, r6
 80197fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019802:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019806:	e7e3      	b.n	80197d0 <_strtod_l+0x3f8>
 8019808:	9b08      	ldr	r3, [sp, #32]
 801980a:	3316      	adds	r3, #22
 801980c:	db0b      	blt.n	8019826 <_strtod_l+0x44e>
 801980e:	9b05      	ldr	r3, [sp, #20]
 8019810:	1bdf      	subs	r7, r3, r7
 8019812:	4b54      	ldr	r3, [pc, #336]	; (8019964 <_strtod_l+0x58c>)
 8019814:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019818:	e9d7 2300 	ldrd	r2, r3, [r7]
 801981c:	4640      	mov	r0, r8
 801981e:	4649      	mov	r1, r9
 8019820:	f7e7 f814 	bl	800084c <__aeabi_ddiv>
 8019824:	e7d6      	b.n	80197d4 <_strtod_l+0x3fc>
 8019826:	9b08      	ldr	r3, [sp, #32]
 8019828:	1b75      	subs	r5, r6, r5
 801982a:	441d      	add	r5, r3
 801982c:	2d00      	cmp	r5, #0
 801982e:	dd70      	ble.n	8019912 <_strtod_l+0x53a>
 8019830:	f015 030f 	ands.w	r3, r5, #15
 8019834:	d00a      	beq.n	801984c <_strtod_l+0x474>
 8019836:	494b      	ldr	r1, [pc, #300]	; (8019964 <_strtod_l+0x58c>)
 8019838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801983c:	4642      	mov	r2, r8
 801983e:	464b      	mov	r3, r9
 8019840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019844:	f7e6 fed8 	bl	80005f8 <__aeabi_dmul>
 8019848:	4680      	mov	r8, r0
 801984a:	4689      	mov	r9, r1
 801984c:	f035 050f 	bics.w	r5, r5, #15
 8019850:	d04d      	beq.n	80198ee <_strtod_l+0x516>
 8019852:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8019856:	dd22      	ble.n	801989e <_strtod_l+0x4c6>
 8019858:	2500      	movs	r5, #0
 801985a:	46ab      	mov	fp, r5
 801985c:	9509      	str	r5, [sp, #36]	; 0x24
 801985e:	9505      	str	r5, [sp, #20]
 8019860:	2322      	movs	r3, #34	; 0x22
 8019862:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801996c <_strtod_l+0x594>
 8019866:	6023      	str	r3, [r4, #0]
 8019868:	f04f 0800 	mov.w	r8, #0
 801986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801986e:	2b00      	cmp	r3, #0
 8019870:	f43f aded 	beq.w	801944e <_strtod_l+0x76>
 8019874:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019876:	4620      	mov	r0, r4
 8019878:	f7ff f924 	bl	8018ac4 <_Bfree>
 801987c:	9905      	ldr	r1, [sp, #20]
 801987e:	4620      	mov	r0, r4
 8019880:	f7ff f920 	bl	8018ac4 <_Bfree>
 8019884:	4659      	mov	r1, fp
 8019886:	4620      	mov	r0, r4
 8019888:	f7ff f91c 	bl	8018ac4 <_Bfree>
 801988c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801988e:	4620      	mov	r0, r4
 8019890:	f7ff f918 	bl	8018ac4 <_Bfree>
 8019894:	4629      	mov	r1, r5
 8019896:	4620      	mov	r0, r4
 8019898:	f7ff f914 	bl	8018ac4 <_Bfree>
 801989c:	e5d7      	b.n	801944e <_strtod_l+0x76>
 801989e:	4b32      	ldr	r3, [pc, #200]	; (8019968 <_strtod_l+0x590>)
 80198a0:	9304      	str	r3, [sp, #16]
 80198a2:	2300      	movs	r3, #0
 80198a4:	112d      	asrs	r5, r5, #4
 80198a6:	4640      	mov	r0, r8
 80198a8:	4649      	mov	r1, r9
 80198aa:	469a      	mov	sl, r3
 80198ac:	2d01      	cmp	r5, #1
 80198ae:	dc21      	bgt.n	80198f4 <_strtod_l+0x51c>
 80198b0:	b10b      	cbz	r3, 80198b6 <_strtod_l+0x4de>
 80198b2:	4680      	mov	r8, r0
 80198b4:	4689      	mov	r9, r1
 80198b6:	492c      	ldr	r1, [pc, #176]	; (8019968 <_strtod_l+0x590>)
 80198b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80198bc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80198c0:	4642      	mov	r2, r8
 80198c2:	464b      	mov	r3, r9
 80198c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198c8:	f7e6 fe96 	bl	80005f8 <__aeabi_dmul>
 80198cc:	4b27      	ldr	r3, [pc, #156]	; (801996c <_strtod_l+0x594>)
 80198ce:	460a      	mov	r2, r1
 80198d0:	400b      	ands	r3, r1
 80198d2:	4927      	ldr	r1, [pc, #156]	; (8019970 <_strtod_l+0x598>)
 80198d4:	428b      	cmp	r3, r1
 80198d6:	4680      	mov	r8, r0
 80198d8:	d8be      	bhi.n	8019858 <_strtod_l+0x480>
 80198da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80198de:	428b      	cmp	r3, r1
 80198e0:	bf86      	itte	hi
 80198e2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8019974 <_strtod_l+0x59c>
 80198e6:	f04f 38ff 	movhi.w	r8, #4294967295
 80198ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80198ee:	2300      	movs	r3, #0
 80198f0:	9304      	str	r3, [sp, #16]
 80198f2:	e07b      	b.n	80199ec <_strtod_l+0x614>
 80198f4:	07ea      	lsls	r2, r5, #31
 80198f6:	d505      	bpl.n	8019904 <_strtod_l+0x52c>
 80198f8:	9b04      	ldr	r3, [sp, #16]
 80198fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198fe:	f7e6 fe7b 	bl	80005f8 <__aeabi_dmul>
 8019902:	2301      	movs	r3, #1
 8019904:	9a04      	ldr	r2, [sp, #16]
 8019906:	3208      	adds	r2, #8
 8019908:	f10a 0a01 	add.w	sl, sl, #1
 801990c:	106d      	asrs	r5, r5, #1
 801990e:	9204      	str	r2, [sp, #16]
 8019910:	e7cc      	b.n	80198ac <_strtod_l+0x4d4>
 8019912:	d0ec      	beq.n	80198ee <_strtod_l+0x516>
 8019914:	426d      	negs	r5, r5
 8019916:	f015 020f 	ands.w	r2, r5, #15
 801991a:	d00a      	beq.n	8019932 <_strtod_l+0x55a>
 801991c:	4b11      	ldr	r3, [pc, #68]	; (8019964 <_strtod_l+0x58c>)
 801991e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019922:	4640      	mov	r0, r8
 8019924:	4649      	mov	r1, r9
 8019926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801992a:	f7e6 ff8f 	bl	800084c <__aeabi_ddiv>
 801992e:	4680      	mov	r8, r0
 8019930:	4689      	mov	r9, r1
 8019932:	112d      	asrs	r5, r5, #4
 8019934:	d0db      	beq.n	80198ee <_strtod_l+0x516>
 8019936:	2d1f      	cmp	r5, #31
 8019938:	dd1e      	ble.n	8019978 <_strtod_l+0x5a0>
 801993a:	2500      	movs	r5, #0
 801993c:	46ab      	mov	fp, r5
 801993e:	9509      	str	r5, [sp, #36]	; 0x24
 8019940:	9505      	str	r5, [sp, #20]
 8019942:	2322      	movs	r3, #34	; 0x22
 8019944:	f04f 0800 	mov.w	r8, #0
 8019948:	f04f 0900 	mov.w	r9, #0
 801994c:	6023      	str	r3, [r4, #0]
 801994e:	e78d      	b.n	801986c <_strtod_l+0x494>
 8019950:	0801c8d9 	.word	0x0801c8d9
 8019954:	0801cb04 	.word	0x0801cb04
 8019958:	0801c8d1 	.word	0x0801c8d1
 801995c:	0801c908 	.word	0x0801c908
 8019960:	0801c8cb 	.word	0x0801c8cb
 8019964:	0801ca18 	.word	0x0801ca18
 8019968:	0801c9f0 	.word	0x0801c9f0
 801996c:	7ff00000 	.word	0x7ff00000
 8019970:	7ca00000 	.word	0x7ca00000
 8019974:	7fefffff 	.word	0x7fefffff
 8019978:	f015 0310 	ands.w	r3, r5, #16
 801997c:	bf18      	it	ne
 801997e:	236a      	movne	r3, #106	; 0x6a
 8019980:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8019d24 <_strtod_l+0x94c>
 8019984:	9304      	str	r3, [sp, #16]
 8019986:	4640      	mov	r0, r8
 8019988:	4649      	mov	r1, r9
 801998a:	2300      	movs	r3, #0
 801998c:	07ea      	lsls	r2, r5, #31
 801998e:	d504      	bpl.n	801999a <_strtod_l+0x5c2>
 8019990:	e9da 2300 	ldrd	r2, r3, [sl]
 8019994:	f7e6 fe30 	bl	80005f8 <__aeabi_dmul>
 8019998:	2301      	movs	r3, #1
 801999a:	106d      	asrs	r5, r5, #1
 801999c:	f10a 0a08 	add.w	sl, sl, #8
 80199a0:	d1f4      	bne.n	801998c <_strtod_l+0x5b4>
 80199a2:	b10b      	cbz	r3, 80199a8 <_strtod_l+0x5d0>
 80199a4:	4680      	mov	r8, r0
 80199a6:	4689      	mov	r9, r1
 80199a8:	9b04      	ldr	r3, [sp, #16]
 80199aa:	b1bb      	cbz	r3, 80199dc <_strtod_l+0x604>
 80199ac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80199b0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	4649      	mov	r1, r9
 80199b8:	dd10      	ble.n	80199dc <_strtod_l+0x604>
 80199ba:	2b1f      	cmp	r3, #31
 80199bc:	f340 811e 	ble.w	8019bfc <_strtod_l+0x824>
 80199c0:	2b34      	cmp	r3, #52	; 0x34
 80199c2:	bfde      	ittt	le
 80199c4:	f04f 33ff 	movle.w	r3, #4294967295
 80199c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80199cc:	4093      	lslle	r3, r2
 80199ce:	f04f 0800 	mov.w	r8, #0
 80199d2:	bfcc      	ite	gt
 80199d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80199d8:	ea03 0901 	andle.w	r9, r3, r1
 80199dc:	2200      	movs	r2, #0
 80199de:	2300      	movs	r3, #0
 80199e0:	4640      	mov	r0, r8
 80199e2:	4649      	mov	r1, r9
 80199e4:	f7e7 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80199e8:	2800      	cmp	r0, #0
 80199ea:	d1a6      	bne.n	801993a <_strtod_l+0x562>
 80199ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199ee:	9300      	str	r3, [sp, #0]
 80199f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80199f2:	4633      	mov	r3, r6
 80199f4:	465a      	mov	r2, fp
 80199f6:	4620      	mov	r0, r4
 80199f8:	f7ff f8cc 	bl	8018b94 <__s2b>
 80199fc:	9009      	str	r0, [sp, #36]	; 0x24
 80199fe:	2800      	cmp	r0, #0
 8019a00:	f43f af2a 	beq.w	8019858 <_strtod_l+0x480>
 8019a04:	9a08      	ldr	r2, [sp, #32]
 8019a06:	9b05      	ldr	r3, [sp, #20]
 8019a08:	2a00      	cmp	r2, #0
 8019a0a:	eba3 0307 	sub.w	r3, r3, r7
 8019a0e:	bfa8      	it	ge
 8019a10:	2300      	movge	r3, #0
 8019a12:	930c      	str	r3, [sp, #48]	; 0x30
 8019a14:	2500      	movs	r5, #0
 8019a16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019a1a:	9312      	str	r3, [sp, #72]	; 0x48
 8019a1c:	46ab      	mov	fp, r5
 8019a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a20:	4620      	mov	r0, r4
 8019a22:	6859      	ldr	r1, [r3, #4]
 8019a24:	f7ff f80e 	bl	8018a44 <_Balloc>
 8019a28:	9005      	str	r0, [sp, #20]
 8019a2a:	2800      	cmp	r0, #0
 8019a2c:	f43f af18 	beq.w	8019860 <_strtod_l+0x488>
 8019a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a32:	691a      	ldr	r2, [r3, #16]
 8019a34:	3202      	adds	r2, #2
 8019a36:	f103 010c 	add.w	r1, r3, #12
 8019a3a:	0092      	lsls	r2, r2, #2
 8019a3c:	300c      	adds	r0, #12
 8019a3e:	f7fe f91e 	bl	8017c7e <memcpy>
 8019a42:	ec49 8b10 	vmov	d0, r8, r9
 8019a46:	aa18      	add	r2, sp, #96	; 0x60
 8019a48:	a917      	add	r1, sp, #92	; 0x5c
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	f7ff fbd6 	bl	80191fc <__d2b>
 8019a50:	ec49 8b18 	vmov	d8, r8, r9
 8019a54:	9016      	str	r0, [sp, #88]	; 0x58
 8019a56:	2800      	cmp	r0, #0
 8019a58:	f43f af02 	beq.w	8019860 <_strtod_l+0x488>
 8019a5c:	2101      	movs	r1, #1
 8019a5e:	4620      	mov	r0, r4
 8019a60:	f7ff f930 	bl	8018cc4 <__i2b>
 8019a64:	4683      	mov	fp, r0
 8019a66:	2800      	cmp	r0, #0
 8019a68:	f43f aefa 	beq.w	8019860 <_strtod_l+0x488>
 8019a6c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019a6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019a70:	2e00      	cmp	r6, #0
 8019a72:	bfab      	itete	ge
 8019a74:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8019a76:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8019a78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8019a7a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8019a7e:	bfac      	ite	ge
 8019a80:	eb06 0a03 	addge.w	sl, r6, r3
 8019a84:	1b9f      	sublt	r7, r3, r6
 8019a86:	9b04      	ldr	r3, [sp, #16]
 8019a88:	1af6      	subs	r6, r6, r3
 8019a8a:	4416      	add	r6, r2
 8019a8c:	4ba0      	ldr	r3, [pc, #640]	; (8019d10 <_strtod_l+0x938>)
 8019a8e:	3e01      	subs	r6, #1
 8019a90:	429e      	cmp	r6, r3
 8019a92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019a96:	f280 80c4 	bge.w	8019c22 <_strtod_l+0x84a>
 8019a9a:	1b9b      	subs	r3, r3, r6
 8019a9c:	2b1f      	cmp	r3, #31
 8019a9e:	eba2 0203 	sub.w	r2, r2, r3
 8019aa2:	f04f 0101 	mov.w	r1, #1
 8019aa6:	f300 80b0 	bgt.w	8019c0a <_strtod_l+0x832>
 8019aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8019aae:	930e      	str	r3, [sp, #56]	; 0x38
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	930d      	str	r3, [sp, #52]	; 0x34
 8019ab4:	eb0a 0602 	add.w	r6, sl, r2
 8019ab8:	9b04      	ldr	r3, [sp, #16]
 8019aba:	45b2      	cmp	sl, r6
 8019abc:	4417      	add	r7, r2
 8019abe:	441f      	add	r7, r3
 8019ac0:	4653      	mov	r3, sl
 8019ac2:	bfa8      	it	ge
 8019ac4:	4633      	movge	r3, r6
 8019ac6:	42bb      	cmp	r3, r7
 8019ac8:	bfa8      	it	ge
 8019aca:	463b      	movge	r3, r7
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	bfc2      	ittt	gt
 8019ad0:	1af6      	subgt	r6, r6, r3
 8019ad2:	1aff      	subgt	r7, r7, r3
 8019ad4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	dd17      	ble.n	8019b0e <_strtod_l+0x736>
 8019ade:	4659      	mov	r1, fp
 8019ae0:	461a      	mov	r2, r3
 8019ae2:	4620      	mov	r0, r4
 8019ae4:	f7ff f9ae 	bl	8018e44 <__pow5mult>
 8019ae8:	4683      	mov	fp, r0
 8019aea:	2800      	cmp	r0, #0
 8019aec:	f43f aeb8 	beq.w	8019860 <_strtod_l+0x488>
 8019af0:	4601      	mov	r1, r0
 8019af2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019af4:	4620      	mov	r0, r4
 8019af6:	f7ff f8fb 	bl	8018cf0 <__multiply>
 8019afa:	900b      	str	r0, [sp, #44]	; 0x2c
 8019afc:	2800      	cmp	r0, #0
 8019afe:	f43f aeaf 	beq.w	8019860 <_strtod_l+0x488>
 8019b02:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b04:	4620      	mov	r0, r4
 8019b06:	f7fe ffdd 	bl	8018ac4 <_Bfree>
 8019b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b0c:	9316      	str	r3, [sp, #88]	; 0x58
 8019b0e:	2e00      	cmp	r6, #0
 8019b10:	f300 808c 	bgt.w	8019c2c <_strtod_l+0x854>
 8019b14:	9b08      	ldr	r3, [sp, #32]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	dd08      	ble.n	8019b2c <_strtod_l+0x754>
 8019b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b1c:	9905      	ldr	r1, [sp, #20]
 8019b1e:	4620      	mov	r0, r4
 8019b20:	f7ff f990 	bl	8018e44 <__pow5mult>
 8019b24:	9005      	str	r0, [sp, #20]
 8019b26:	2800      	cmp	r0, #0
 8019b28:	f43f ae9a 	beq.w	8019860 <_strtod_l+0x488>
 8019b2c:	2f00      	cmp	r7, #0
 8019b2e:	dd08      	ble.n	8019b42 <_strtod_l+0x76a>
 8019b30:	9905      	ldr	r1, [sp, #20]
 8019b32:	463a      	mov	r2, r7
 8019b34:	4620      	mov	r0, r4
 8019b36:	f7ff f9df 	bl	8018ef8 <__lshift>
 8019b3a:	9005      	str	r0, [sp, #20]
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	f43f ae8f 	beq.w	8019860 <_strtod_l+0x488>
 8019b42:	f1ba 0f00 	cmp.w	sl, #0
 8019b46:	dd08      	ble.n	8019b5a <_strtod_l+0x782>
 8019b48:	4659      	mov	r1, fp
 8019b4a:	4652      	mov	r2, sl
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	f7ff f9d3 	bl	8018ef8 <__lshift>
 8019b52:	4683      	mov	fp, r0
 8019b54:	2800      	cmp	r0, #0
 8019b56:	f43f ae83 	beq.w	8019860 <_strtod_l+0x488>
 8019b5a:	9a05      	ldr	r2, [sp, #20]
 8019b5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b5e:	4620      	mov	r0, r4
 8019b60:	f7ff fa52 	bl	8019008 <__mdiff>
 8019b64:	4605      	mov	r5, r0
 8019b66:	2800      	cmp	r0, #0
 8019b68:	f43f ae7a 	beq.w	8019860 <_strtod_l+0x488>
 8019b6c:	68c3      	ldr	r3, [r0, #12]
 8019b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b70:	2300      	movs	r3, #0
 8019b72:	60c3      	str	r3, [r0, #12]
 8019b74:	4659      	mov	r1, fp
 8019b76:	f7ff fa2b 	bl	8018fd0 <__mcmp>
 8019b7a:	2800      	cmp	r0, #0
 8019b7c:	da60      	bge.n	8019c40 <_strtod_l+0x868>
 8019b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b80:	ea53 0308 	orrs.w	r3, r3, r8
 8019b84:	f040 8084 	bne.w	8019c90 <_strtod_l+0x8b8>
 8019b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d17f      	bne.n	8019c90 <_strtod_l+0x8b8>
 8019b90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019b94:	0d1b      	lsrs	r3, r3, #20
 8019b96:	051b      	lsls	r3, r3, #20
 8019b98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019b9c:	d978      	bls.n	8019c90 <_strtod_l+0x8b8>
 8019b9e:	696b      	ldr	r3, [r5, #20]
 8019ba0:	b913      	cbnz	r3, 8019ba8 <_strtod_l+0x7d0>
 8019ba2:	692b      	ldr	r3, [r5, #16]
 8019ba4:	2b01      	cmp	r3, #1
 8019ba6:	dd73      	ble.n	8019c90 <_strtod_l+0x8b8>
 8019ba8:	4629      	mov	r1, r5
 8019baa:	2201      	movs	r2, #1
 8019bac:	4620      	mov	r0, r4
 8019bae:	f7ff f9a3 	bl	8018ef8 <__lshift>
 8019bb2:	4659      	mov	r1, fp
 8019bb4:	4605      	mov	r5, r0
 8019bb6:	f7ff fa0b 	bl	8018fd0 <__mcmp>
 8019bba:	2800      	cmp	r0, #0
 8019bbc:	dd68      	ble.n	8019c90 <_strtod_l+0x8b8>
 8019bbe:	9904      	ldr	r1, [sp, #16]
 8019bc0:	4a54      	ldr	r2, [pc, #336]	; (8019d14 <_strtod_l+0x93c>)
 8019bc2:	464b      	mov	r3, r9
 8019bc4:	2900      	cmp	r1, #0
 8019bc6:	f000 8084 	beq.w	8019cd2 <_strtod_l+0x8fa>
 8019bca:	ea02 0109 	and.w	r1, r2, r9
 8019bce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019bd2:	dc7e      	bgt.n	8019cd2 <_strtod_l+0x8fa>
 8019bd4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019bd8:	f77f aeb3 	ble.w	8019942 <_strtod_l+0x56a>
 8019bdc:	4b4e      	ldr	r3, [pc, #312]	; (8019d18 <_strtod_l+0x940>)
 8019bde:	4640      	mov	r0, r8
 8019be0:	4649      	mov	r1, r9
 8019be2:	2200      	movs	r2, #0
 8019be4:	f7e6 fd08 	bl	80005f8 <__aeabi_dmul>
 8019be8:	4b4a      	ldr	r3, [pc, #296]	; (8019d14 <_strtod_l+0x93c>)
 8019bea:	400b      	ands	r3, r1
 8019bec:	4680      	mov	r8, r0
 8019bee:	4689      	mov	r9, r1
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	f47f ae3f 	bne.w	8019874 <_strtod_l+0x49c>
 8019bf6:	2322      	movs	r3, #34	; 0x22
 8019bf8:	6023      	str	r3, [r4, #0]
 8019bfa:	e63b      	b.n	8019874 <_strtod_l+0x49c>
 8019bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8019c00:	fa02 f303 	lsl.w	r3, r2, r3
 8019c04:	ea03 0808 	and.w	r8, r3, r8
 8019c08:	e6e8      	b.n	80199dc <_strtod_l+0x604>
 8019c0a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8019c0e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8019c12:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019c16:	36e2      	adds	r6, #226	; 0xe2
 8019c18:	fa01 f306 	lsl.w	r3, r1, r6
 8019c1c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019c20:	e748      	b.n	8019ab4 <_strtod_l+0x6dc>
 8019c22:	2100      	movs	r1, #0
 8019c24:	2301      	movs	r3, #1
 8019c26:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8019c2a:	e743      	b.n	8019ab4 <_strtod_l+0x6dc>
 8019c2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019c2e:	4632      	mov	r2, r6
 8019c30:	4620      	mov	r0, r4
 8019c32:	f7ff f961 	bl	8018ef8 <__lshift>
 8019c36:	9016      	str	r0, [sp, #88]	; 0x58
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	f47f af6b 	bne.w	8019b14 <_strtod_l+0x73c>
 8019c3e:	e60f      	b.n	8019860 <_strtod_l+0x488>
 8019c40:	46ca      	mov	sl, r9
 8019c42:	d171      	bne.n	8019d28 <_strtod_l+0x950>
 8019c44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019c4a:	b352      	cbz	r2, 8019ca2 <_strtod_l+0x8ca>
 8019c4c:	4a33      	ldr	r2, [pc, #204]	; (8019d1c <_strtod_l+0x944>)
 8019c4e:	4293      	cmp	r3, r2
 8019c50:	d12a      	bne.n	8019ca8 <_strtod_l+0x8d0>
 8019c52:	9b04      	ldr	r3, [sp, #16]
 8019c54:	4641      	mov	r1, r8
 8019c56:	b1fb      	cbz	r3, 8019c98 <_strtod_l+0x8c0>
 8019c58:	4b2e      	ldr	r3, [pc, #184]	; (8019d14 <_strtod_l+0x93c>)
 8019c5a:	ea09 0303 	and.w	r3, r9, r3
 8019c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019c62:	f04f 32ff 	mov.w	r2, #4294967295
 8019c66:	d81a      	bhi.n	8019c9e <_strtod_l+0x8c6>
 8019c68:	0d1b      	lsrs	r3, r3, #20
 8019c6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c72:	4299      	cmp	r1, r3
 8019c74:	d118      	bne.n	8019ca8 <_strtod_l+0x8d0>
 8019c76:	4b2a      	ldr	r3, [pc, #168]	; (8019d20 <_strtod_l+0x948>)
 8019c78:	459a      	cmp	sl, r3
 8019c7a:	d102      	bne.n	8019c82 <_strtod_l+0x8aa>
 8019c7c:	3101      	adds	r1, #1
 8019c7e:	f43f adef 	beq.w	8019860 <_strtod_l+0x488>
 8019c82:	4b24      	ldr	r3, [pc, #144]	; (8019d14 <_strtod_l+0x93c>)
 8019c84:	ea0a 0303 	and.w	r3, sl, r3
 8019c88:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019c8c:	f04f 0800 	mov.w	r8, #0
 8019c90:	9b04      	ldr	r3, [sp, #16]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d1a2      	bne.n	8019bdc <_strtod_l+0x804>
 8019c96:	e5ed      	b.n	8019874 <_strtod_l+0x49c>
 8019c98:	f04f 33ff 	mov.w	r3, #4294967295
 8019c9c:	e7e9      	b.n	8019c72 <_strtod_l+0x89a>
 8019c9e:	4613      	mov	r3, r2
 8019ca0:	e7e7      	b.n	8019c72 <_strtod_l+0x89a>
 8019ca2:	ea53 0308 	orrs.w	r3, r3, r8
 8019ca6:	d08a      	beq.n	8019bbe <_strtod_l+0x7e6>
 8019ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019caa:	b1e3      	cbz	r3, 8019ce6 <_strtod_l+0x90e>
 8019cac:	ea13 0f0a 	tst.w	r3, sl
 8019cb0:	d0ee      	beq.n	8019c90 <_strtod_l+0x8b8>
 8019cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cb4:	9a04      	ldr	r2, [sp, #16]
 8019cb6:	4640      	mov	r0, r8
 8019cb8:	4649      	mov	r1, r9
 8019cba:	b1c3      	cbz	r3, 8019cee <_strtod_l+0x916>
 8019cbc:	f7ff fb6f 	bl	801939e <sulp>
 8019cc0:	4602      	mov	r2, r0
 8019cc2:	460b      	mov	r3, r1
 8019cc4:	ec51 0b18 	vmov	r0, r1, d8
 8019cc8:	f7e6 fae0 	bl	800028c <__adddf3>
 8019ccc:	4680      	mov	r8, r0
 8019cce:	4689      	mov	r9, r1
 8019cd0:	e7de      	b.n	8019c90 <_strtod_l+0x8b8>
 8019cd2:	4013      	ands	r3, r2
 8019cd4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019cd8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019cdc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019ce0:	f04f 38ff 	mov.w	r8, #4294967295
 8019ce4:	e7d4      	b.n	8019c90 <_strtod_l+0x8b8>
 8019ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ce8:	ea13 0f08 	tst.w	r3, r8
 8019cec:	e7e0      	b.n	8019cb0 <_strtod_l+0x8d8>
 8019cee:	f7ff fb56 	bl	801939e <sulp>
 8019cf2:	4602      	mov	r2, r0
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	ec51 0b18 	vmov	r0, r1, d8
 8019cfa:	f7e6 fac5 	bl	8000288 <__aeabi_dsub>
 8019cfe:	2200      	movs	r2, #0
 8019d00:	2300      	movs	r3, #0
 8019d02:	4680      	mov	r8, r0
 8019d04:	4689      	mov	r9, r1
 8019d06:	f7e6 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d0a:	2800      	cmp	r0, #0
 8019d0c:	d0c0      	beq.n	8019c90 <_strtod_l+0x8b8>
 8019d0e:	e618      	b.n	8019942 <_strtod_l+0x56a>
 8019d10:	fffffc02 	.word	0xfffffc02
 8019d14:	7ff00000 	.word	0x7ff00000
 8019d18:	39500000 	.word	0x39500000
 8019d1c:	000fffff 	.word	0x000fffff
 8019d20:	7fefffff 	.word	0x7fefffff
 8019d24:	0801cb18 	.word	0x0801cb18
 8019d28:	4659      	mov	r1, fp
 8019d2a:	4628      	mov	r0, r5
 8019d2c:	f7ff fac0 	bl	80192b0 <__ratio>
 8019d30:	ec57 6b10 	vmov	r6, r7, d0
 8019d34:	ee10 0a10 	vmov	r0, s0
 8019d38:	2200      	movs	r2, #0
 8019d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019d3e:	4639      	mov	r1, r7
 8019d40:	f7e6 fed6 	bl	8000af0 <__aeabi_dcmple>
 8019d44:	2800      	cmp	r0, #0
 8019d46:	d071      	beq.n	8019e2c <_strtod_l+0xa54>
 8019d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d17c      	bne.n	8019e48 <_strtod_l+0xa70>
 8019d4e:	f1b8 0f00 	cmp.w	r8, #0
 8019d52:	d15a      	bne.n	8019e0a <_strtod_l+0xa32>
 8019d54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d15d      	bne.n	8019e18 <_strtod_l+0xa40>
 8019d5c:	4b90      	ldr	r3, [pc, #576]	; (8019fa0 <_strtod_l+0xbc8>)
 8019d5e:	2200      	movs	r2, #0
 8019d60:	4630      	mov	r0, r6
 8019d62:	4639      	mov	r1, r7
 8019d64:	f7e6 feba 	bl	8000adc <__aeabi_dcmplt>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	d15c      	bne.n	8019e26 <_strtod_l+0xa4e>
 8019d6c:	4630      	mov	r0, r6
 8019d6e:	4639      	mov	r1, r7
 8019d70:	4b8c      	ldr	r3, [pc, #560]	; (8019fa4 <_strtod_l+0xbcc>)
 8019d72:	2200      	movs	r2, #0
 8019d74:	f7e6 fc40 	bl	80005f8 <__aeabi_dmul>
 8019d78:	4606      	mov	r6, r0
 8019d7a:	460f      	mov	r7, r1
 8019d7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019d80:	9606      	str	r6, [sp, #24]
 8019d82:	9307      	str	r3, [sp, #28]
 8019d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019d88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019d8c:	4b86      	ldr	r3, [pc, #536]	; (8019fa8 <_strtod_l+0xbd0>)
 8019d8e:	ea0a 0303 	and.w	r3, sl, r3
 8019d92:	930d      	str	r3, [sp, #52]	; 0x34
 8019d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d96:	4b85      	ldr	r3, [pc, #532]	; (8019fac <_strtod_l+0xbd4>)
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	f040 8090 	bne.w	8019ebe <_strtod_l+0xae6>
 8019d9e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019da2:	ec49 8b10 	vmov	d0, r8, r9
 8019da6:	f7ff f9b9 	bl	801911c <__ulp>
 8019daa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019dae:	ec51 0b10 	vmov	r0, r1, d0
 8019db2:	f7e6 fc21 	bl	80005f8 <__aeabi_dmul>
 8019db6:	4642      	mov	r2, r8
 8019db8:	464b      	mov	r3, r9
 8019dba:	f7e6 fa67 	bl	800028c <__adddf3>
 8019dbe:	460b      	mov	r3, r1
 8019dc0:	4979      	ldr	r1, [pc, #484]	; (8019fa8 <_strtod_l+0xbd0>)
 8019dc2:	4a7b      	ldr	r2, [pc, #492]	; (8019fb0 <_strtod_l+0xbd8>)
 8019dc4:	4019      	ands	r1, r3
 8019dc6:	4291      	cmp	r1, r2
 8019dc8:	4680      	mov	r8, r0
 8019dca:	d944      	bls.n	8019e56 <_strtod_l+0xa7e>
 8019dcc:	ee18 2a90 	vmov	r2, s17
 8019dd0:	4b78      	ldr	r3, [pc, #480]	; (8019fb4 <_strtod_l+0xbdc>)
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	d104      	bne.n	8019de0 <_strtod_l+0xa08>
 8019dd6:	ee18 3a10 	vmov	r3, s16
 8019dda:	3301      	adds	r3, #1
 8019ddc:	f43f ad40 	beq.w	8019860 <_strtod_l+0x488>
 8019de0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019fb4 <_strtod_l+0xbdc>
 8019de4:	f04f 38ff 	mov.w	r8, #4294967295
 8019de8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019dea:	4620      	mov	r0, r4
 8019dec:	f7fe fe6a 	bl	8018ac4 <_Bfree>
 8019df0:	9905      	ldr	r1, [sp, #20]
 8019df2:	4620      	mov	r0, r4
 8019df4:	f7fe fe66 	bl	8018ac4 <_Bfree>
 8019df8:	4659      	mov	r1, fp
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	f7fe fe62 	bl	8018ac4 <_Bfree>
 8019e00:	4629      	mov	r1, r5
 8019e02:	4620      	mov	r0, r4
 8019e04:	f7fe fe5e 	bl	8018ac4 <_Bfree>
 8019e08:	e609      	b.n	8019a1e <_strtod_l+0x646>
 8019e0a:	f1b8 0f01 	cmp.w	r8, #1
 8019e0e:	d103      	bne.n	8019e18 <_strtod_l+0xa40>
 8019e10:	f1b9 0f00 	cmp.w	r9, #0
 8019e14:	f43f ad95 	beq.w	8019942 <_strtod_l+0x56a>
 8019e18:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019f70 <_strtod_l+0xb98>
 8019e1c:	4f60      	ldr	r7, [pc, #384]	; (8019fa0 <_strtod_l+0xbc8>)
 8019e1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019e22:	2600      	movs	r6, #0
 8019e24:	e7ae      	b.n	8019d84 <_strtod_l+0x9ac>
 8019e26:	4f5f      	ldr	r7, [pc, #380]	; (8019fa4 <_strtod_l+0xbcc>)
 8019e28:	2600      	movs	r6, #0
 8019e2a:	e7a7      	b.n	8019d7c <_strtod_l+0x9a4>
 8019e2c:	4b5d      	ldr	r3, [pc, #372]	; (8019fa4 <_strtod_l+0xbcc>)
 8019e2e:	4630      	mov	r0, r6
 8019e30:	4639      	mov	r1, r7
 8019e32:	2200      	movs	r2, #0
 8019e34:	f7e6 fbe0 	bl	80005f8 <__aeabi_dmul>
 8019e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e3a:	4606      	mov	r6, r0
 8019e3c:	460f      	mov	r7, r1
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d09c      	beq.n	8019d7c <_strtod_l+0x9a4>
 8019e42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019e46:	e79d      	b.n	8019d84 <_strtod_l+0x9ac>
 8019e48:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019f78 <_strtod_l+0xba0>
 8019e4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019e50:	ec57 6b17 	vmov	r6, r7, d7
 8019e54:	e796      	b.n	8019d84 <_strtod_l+0x9ac>
 8019e56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8019e5a:	9b04      	ldr	r3, [sp, #16]
 8019e5c:	46ca      	mov	sl, r9
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d1c2      	bne.n	8019de8 <_strtod_l+0xa10>
 8019e62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019e66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019e68:	0d1b      	lsrs	r3, r3, #20
 8019e6a:	051b      	lsls	r3, r3, #20
 8019e6c:	429a      	cmp	r2, r3
 8019e6e:	d1bb      	bne.n	8019de8 <_strtod_l+0xa10>
 8019e70:	4630      	mov	r0, r6
 8019e72:	4639      	mov	r1, r7
 8019e74:	f7e6 ff20 	bl	8000cb8 <__aeabi_d2lz>
 8019e78:	f7e6 fb90 	bl	800059c <__aeabi_l2d>
 8019e7c:	4602      	mov	r2, r0
 8019e7e:	460b      	mov	r3, r1
 8019e80:	4630      	mov	r0, r6
 8019e82:	4639      	mov	r1, r7
 8019e84:	f7e6 fa00 	bl	8000288 <__aeabi_dsub>
 8019e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019e8e:	ea43 0308 	orr.w	r3, r3, r8
 8019e92:	4313      	orrs	r3, r2
 8019e94:	4606      	mov	r6, r0
 8019e96:	460f      	mov	r7, r1
 8019e98:	d054      	beq.n	8019f44 <_strtod_l+0xb6c>
 8019e9a:	a339      	add	r3, pc, #228	; (adr r3, 8019f80 <_strtod_l+0xba8>)
 8019e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea0:	f7e6 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8019ea4:	2800      	cmp	r0, #0
 8019ea6:	f47f ace5 	bne.w	8019874 <_strtod_l+0x49c>
 8019eaa:	a337      	add	r3, pc, #220	; (adr r3, 8019f88 <_strtod_l+0xbb0>)
 8019eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb0:	4630      	mov	r0, r6
 8019eb2:	4639      	mov	r1, r7
 8019eb4:	f7e6 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	d095      	beq.n	8019de8 <_strtod_l+0xa10>
 8019ebc:	e4da      	b.n	8019874 <_strtod_l+0x49c>
 8019ebe:	9b04      	ldr	r3, [sp, #16]
 8019ec0:	b333      	cbz	r3, 8019f10 <_strtod_l+0xb38>
 8019ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ec4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019ec8:	d822      	bhi.n	8019f10 <_strtod_l+0xb38>
 8019eca:	a331      	add	r3, pc, #196	; (adr r3, 8019f90 <_strtod_l+0xbb8>)
 8019ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed0:	4630      	mov	r0, r6
 8019ed2:	4639      	mov	r1, r7
 8019ed4:	f7e6 fe0c 	bl	8000af0 <__aeabi_dcmple>
 8019ed8:	b1a0      	cbz	r0, 8019f04 <_strtod_l+0xb2c>
 8019eda:	4639      	mov	r1, r7
 8019edc:	4630      	mov	r0, r6
 8019ede:	f7e6 fe63 	bl	8000ba8 <__aeabi_d2uiz>
 8019ee2:	2801      	cmp	r0, #1
 8019ee4:	bf38      	it	cc
 8019ee6:	2001      	movcc	r0, #1
 8019ee8:	f7e6 fb0c 	bl	8000504 <__aeabi_ui2d>
 8019eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019eee:	4606      	mov	r6, r0
 8019ef0:	460f      	mov	r7, r1
 8019ef2:	bb23      	cbnz	r3, 8019f3e <_strtod_l+0xb66>
 8019ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019ef8:	9010      	str	r0, [sp, #64]	; 0x40
 8019efa:	9311      	str	r3, [sp, #68]	; 0x44
 8019efc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019f00:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019f08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019f0c:	1a9b      	subs	r3, r3, r2
 8019f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019f14:	eeb0 0a48 	vmov.f32	s0, s16
 8019f18:	eef0 0a68 	vmov.f32	s1, s17
 8019f1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019f20:	f7ff f8fc 	bl	801911c <__ulp>
 8019f24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019f28:	ec53 2b10 	vmov	r2, r3, d0
 8019f2c:	f7e6 fb64 	bl	80005f8 <__aeabi_dmul>
 8019f30:	ec53 2b18 	vmov	r2, r3, d8
 8019f34:	f7e6 f9aa 	bl	800028c <__adddf3>
 8019f38:	4680      	mov	r8, r0
 8019f3a:	4689      	mov	r9, r1
 8019f3c:	e78d      	b.n	8019e5a <_strtod_l+0xa82>
 8019f3e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019f42:	e7db      	b.n	8019efc <_strtod_l+0xb24>
 8019f44:	a314      	add	r3, pc, #80	; (adr r3, 8019f98 <_strtod_l+0xbc0>)
 8019f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4a:	f7e6 fdc7 	bl	8000adc <__aeabi_dcmplt>
 8019f4e:	e7b3      	b.n	8019eb8 <_strtod_l+0xae0>
 8019f50:	2300      	movs	r3, #0
 8019f52:	930a      	str	r3, [sp, #40]	; 0x28
 8019f54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f58:	6013      	str	r3, [r2, #0]
 8019f5a:	f7ff ba7c 	b.w	8019456 <_strtod_l+0x7e>
 8019f5e:	2a65      	cmp	r2, #101	; 0x65
 8019f60:	f43f ab75 	beq.w	801964e <_strtod_l+0x276>
 8019f64:	2a45      	cmp	r2, #69	; 0x45
 8019f66:	f43f ab72 	beq.w	801964e <_strtod_l+0x276>
 8019f6a:	2301      	movs	r3, #1
 8019f6c:	f7ff bbaa 	b.w	80196c4 <_strtod_l+0x2ec>
 8019f70:	00000000 	.word	0x00000000
 8019f74:	bff00000 	.word	0xbff00000
 8019f78:	00000000 	.word	0x00000000
 8019f7c:	3ff00000 	.word	0x3ff00000
 8019f80:	94a03595 	.word	0x94a03595
 8019f84:	3fdfffff 	.word	0x3fdfffff
 8019f88:	35afe535 	.word	0x35afe535
 8019f8c:	3fe00000 	.word	0x3fe00000
 8019f90:	ffc00000 	.word	0xffc00000
 8019f94:	41dfffff 	.word	0x41dfffff
 8019f98:	94a03595 	.word	0x94a03595
 8019f9c:	3fcfffff 	.word	0x3fcfffff
 8019fa0:	3ff00000 	.word	0x3ff00000
 8019fa4:	3fe00000 	.word	0x3fe00000
 8019fa8:	7ff00000 	.word	0x7ff00000
 8019fac:	7fe00000 	.word	0x7fe00000
 8019fb0:	7c9fffff 	.word	0x7c9fffff
 8019fb4:	7fefffff 	.word	0x7fefffff

08019fb8 <_strtod_r>:
 8019fb8:	4b01      	ldr	r3, [pc, #4]	; (8019fc0 <_strtod_r+0x8>)
 8019fba:	f7ff ba0d 	b.w	80193d8 <_strtod_l>
 8019fbe:	bf00      	nop
 8019fc0:	200001b0 	.word	0x200001b0

08019fc4 <_strtol_l.constprop.0>:
 8019fc4:	2b01      	cmp	r3, #1
 8019fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fca:	d001      	beq.n	8019fd0 <_strtol_l.constprop.0+0xc>
 8019fcc:	2b24      	cmp	r3, #36	; 0x24
 8019fce:	d906      	bls.n	8019fde <_strtol_l.constprop.0+0x1a>
 8019fd0:	f7fd fe20 	bl	8017c14 <__errno>
 8019fd4:	2316      	movs	r3, #22
 8019fd6:	6003      	str	r3, [r0, #0]
 8019fd8:	2000      	movs	r0, #0
 8019fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fde:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a0c4 <_strtol_l.constprop.0+0x100>
 8019fe2:	460d      	mov	r5, r1
 8019fe4:	462e      	mov	r6, r5
 8019fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019fee:	f017 0708 	ands.w	r7, r7, #8
 8019ff2:	d1f7      	bne.n	8019fe4 <_strtol_l.constprop.0+0x20>
 8019ff4:	2c2d      	cmp	r4, #45	; 0x2d
 8019ff6:	d132      	bne.n	801a05e <_strtol_l.constprop.0+0x9a>
 8019ff8:	782c      	ldrb	r4, [r5, #0]
 8019ffa:	2701      	movs	r7, #1
 8019ffc:	1cb5      	adds	r5, r6, #2
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d05b      	beq.n	801a0ba <_strtol_l.constprop.0+0xf6>
 801a002:	2b10      	cmp	r3, #16
 801a004:	d109      	bne.n	801a01a <_strtol_l.constprop.0+0x56>
 801a006:	2c30      	cmp	r4, #48	; 0x30
 801a008:	d107      	bne.n	801a01a <_strtol_l.constprop.0+0x56>
 801a00a:	782c      	ldrb	r4, [r5, #0]
 801a00c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a010:	2c58      	cmp	r4, #88	; 0x58
 801a012:	d14d      	bne.n	801a0b0 <_strtol_l.constprop.0+0xec>
 801a014:	786c      	ldrb	r4, [r5, #1]
 801a016:	2310      	movs	r3, #16
 801a018:	3502      	adds	r5, #2
 801a01a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a01e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a022:	f04f 0e00 	mov.w	lr, #0
 801a026:	fbb8 f9f3 	udiv	r9, r8, r3
 801a02a:	4676      	mov	r6, lr
 801a02c:	fb03 8a19 	mls	sl, r3, r9, r8
 801a030:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a034:	f1bc 0f09 	cmp.w	ip, #9
 801a038:	d816      	bhi.n	801a068 <_strtol_l.constprop.0+0xa4>
 801a03a:	4664      	mov	r4, ip
 801a03c:	42a3      	cmp	r3, r4
 801a03e:	dd24      	ble.n	801a08a <_strtol_l.constprop.0+0xc6>
 801a040:	f1be 3fff 	cmp.w	lr, #4294967295
 801a044:	d008      	beq.n	801a058 <_strtol_l.constprop.0+0x94>
 801a046:	45b1      	cmp	r9, r6
 801a048:	d31c      	bcc.n	801a084 <_strtol_l.constprop.0+0xc0>
 801a04a:	d101      	bne.n	801a050 <_strtol_l.constprop.0+0x8c>
 801a04c:	45a2      	cmp	sl, r4
 801a04e:	db19      	blt.n	801a084 <_strtol_l.constprop.0+0xc0>
 801a050:	fb06 4603 	mla	r6, r6, r3, r4
 801a054:	f04f 0e01 	mov.w	lr, #1
 801a058:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a05c:	e7e8      	b.n	801a030 <_strtol_l.constprop.0+0x6c>
 801a05e:	2c2b      	cmp	r4, #43	; 0x2b
 801a060:	bf04      	itt	eq
 801a062:	782c      	ldrbeq	r4, [r5, #0]
 801a064:	1cb5      	addeq	r5, r6, #2
 801a066:	e7ca      	b.n	8019ffe <_strtol_l.constprop.0+0x3a>
 801a068:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a06c:	f1bc 0f19 	cmp.w	ip, #25
 801a070:	d801      	bhi.n	801a076 <_strtol_l.constprop.0+0xb2>
 801a072:	3c37      	subs	r4, #55	; 0x37
 801a074:	e7e2      	b.n	801a03c <_strtol_l.constprop.0+0x78>
 801a076:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a07a:	f1bc 0f19 	cmp.w	ip, #25
 801a07e:	d804      	bhi.n	801a08a <_strtol_l.constprop.0+0xc6>
 801a080:	3c57      	subs	r4, #87	; 0x57
 801a082:	e7db      	b.n	801a03c <_strtol_l.constprop.0+0x78>
 801a084:	f04f 3eff 	mov.w	lr, #4294967295
 801a088:	e7e6      	b.n	801a058 <_strtol_l.constprop.0+0x94>
 801a08a:	f1be 3fff 	cmp.w	lr, #4294967295
 801a08e:	d105      	bne.n	801a09c <_strtol_l.constprop.0+0xd8>
 801a090:	2322      	movs	r3, #34	; 0x22
 801a092:	6003      	str	r3, [r0, #0]
 801a094:	4646      	mov	r6, r8
 801a096:	b942      	cbnz	r2, 801a0aa <_strtol_l.constprop.0+0xe6>
 801a098:	4630      	mov	r0, r6
 801a09a:	e79e      	b.n	8019fda <_strtol_l.constprop.0+0x16>
 801a09c:	b107      	cbz	r7, 801a0a0 <_strtol_l.constprop.0+0xdc>
 801a09e:	4276      	negs	r6, r6
 801a0a0:	2a00      	cmp	r2, #0
 801a0a2:	d0f9      	beq.n	801a098 <_strtol_l.constprop.0+0xd4>
 801a0a4:	f1be 0f00 	cmp.w	lr, #0
 801a0a8:	d000      	beq.n	801a0ac <_strtol_l.constprop.0+0xe8>
 801a0aa:	1e69      	subs	r1, r5, #1
 801a0ac:	6011      	str	r1, [r2, #0]
 801a0ae:	e7f3      	b.n	801a098 <_strtol_l.constprop.0+0xd4>
 801a0b0:	2430      	movs	r4, #48	; 0x30
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d1b1      	bne.n	801a01a <_strtol_l.constprop.0+0x56>
 801a0b6:	2308      	movs	r3, #8
 801a0b8:	e7af      	b.n	801a01a <_strtol_l.constprop.0+0x56>
 801a0ba:	2c30      	cmp	r4, #48	; 0x30
 801a0bc:	d0a5      	beq.n	801a00a <_strtol_l.constprop.0+0x46>
 801a0be:	230a      	movs	r3, #10
 801a0c0:	e7ab      	b.n	801a01a <_strtol_l.constprop.0+0x56>
 801a0c2:	bf00      	nop
 801a0c4:	0801cb41 	.word	0x0801cb41

0801a0c8 <_strtol_r>:
 801a0c8:	f7ff bf7c 	b.w	8019fc4 <_strtol_l.constprop.0>

0801a0cc <__ssputs_r>:
 801a0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0d0:	688e      	ldr	r6, [r1, #8]
 801a0d2:	461f      	mov	r7, r3
 801a0d4:	42be      	cmp	r6, r7
 801a0d6:	680b      	ldr	r3, [r1, #0]
 801a0d8:	4682      	mov	sl, r0
 801a0da:	460c      	mov	r4, r1
 801a0dc:	4690      	mov	r8, r2
 801a0de:	d82c      	bhi.n	801a13a <__ssputs_r+0x6e>
 801a0e0:	898a      	ldrh	r2, [r1, #12]
 801a0e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a0e6:	d026      	beq.n	801a136 <__ssputs_r+0x6a>
 801a0e8:	6965      	ldr	r5, [r4, #20]
 801a0ea:	6909      	ldr	r1, [r1, #16]
 801a0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a0f0:	eba3 0901 	sub.w	r9, r3, r1
 801a0f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a0f8:	1c7b      	adds	r3, r7, #1
 801a0fa:	444b      	add	r3, r9
 801a0fc:	106d      	asrs	r5, r5, #1
 801a0fe:	429d      	cmp	r5, r3
 801a100:	bf38      	it	cc
 801a102:	461d      	movcc	r5, r3
 801a104:	0553      	lsls	r3, r2, #21
 801a106:	d527      	bpl.n	801a158 <__ssputs_r+0x8c>
 801a108:	4629      	mov	r1, r5
 801a10a:	f7fc fbc3 	bl	8016894 <_malloc_r>
 801a10e:	4606      	mov	r6, r0
 801a110:	b360      	cbz	r0, 801a16c <__ssputs_r+0xa0>
 801a112:	6921      	ldr	r1, [r4, #16]
 801a114:	464a      	mov	r2, r9
 801a116:	f7fd fdb2 	bl	8017c7e <memcpy>
 801a11a:	89a3      	ldrh	r3, [r4, #12]
 801a11c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a124:	81a3      	strh	r3, [r4, #12]
 801a126:	6126      	str	r6, [r4, #16]
 801a128:	6165      	str	r5, [r4, #20]
 801a12a:	444e      	add	r6, r9
 801a12c:	eba5 0509 	sub.w	r5, r5, r9
 801a130:	6026      	str	r6, [r4, #0]
 801a132:	60a5      	str	r5, [r4, #8]
 801a134:	463e      	mov	r6, r7
 801a136:	42be      	cmp	r6, r7
 801a138:	d900      	bls.n	801a13c <__ssputs_r+0x70>
 801a13a:	463e      	mov	r6, r7
 801a13c:	6820      	ldr	r0, [r4, #0]
 801a13e:	4632      	mov	r2, r6
 801a140:	4641      	mov	r1, r8
 801a142:	f000 fb6f 	bl	801a824 <memmove>
 801a146:	68a3      	ldr	r3, [r4, #8]
 801a148:	1b9b      	subs	r3, r3, r6
 801a14a:	60a3      	str	r3, [r4, #8]
 801a14c:	6823      	ldr	r3, [r4, #0]
 801a14e:	4433      	add	r3, r6
 801a150:	6023      	str	r3, [r4, #0]
 801a152:	2000      	movs	r0, #0
 801a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a158:	462a      	mov	r2, r5
 801a15a:	f000 ff56 	bl	801b00a <_realloc_r>
 801a15e:	4606      	mov	r6, r0
 801a160:	2800      	cmp	r0, #0
 801a162:	d1e0      	bne.n	801a126 <__ssputs_r+0x5a>
 801a164:	6921      	ldr	r1, [r4, #16]
 801a166:	4650      	mov	r0, sl
 801a168:	f7fe fc20 	bl	80189ac <_free_r>
 801a16c:	230c      	movs	r3, #12
 801a16e:	f8ca 3000 	str.w	r3, [sl]
 801a172:	89a3      	ldrh	r3, [r4, #12]
 801a174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a178:	81a3      	strh	r3, [r4, #12]
 801a17a:	f04f 30ff 	mov.w	r0, #4294967295
 801a17e:	e7e9      	b.n	801a154 <__ssputs_r+0x88>

0801a180 <_svfiprintf_r>:
 801a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a184:	4698      	mov	r8, r3
 801a186:	898b      	ldrh	r3, [r1, #12]
 801a188:	061b      	lsls	r3, r3, #24
 801a18a:	b09d      	sub	sp, #116	; 0x74
 801a18c:	4607      	mov	r7, r0
 801a18e:	460d      	mov	r5, r1
 801a190:	4614      	mov	r4, r2
 801a192:	d50e      	bpl.n	801a1b2 <_svfiprintf_r+0x32>
 801a194:	690b      	ldr	r3, [r1, #16]
 801a196:	b963      	cbnz	r3, 801a1b2 <_svfiprintf_r+0x32>
 801a198:	2140      	movs	r1, #64	; 0x40
 801a19a:	f7fc fb7b 	bl	8016894 <_malloc_r>
 801a19e:	6028      	str	r0, [r5, #0]
 801a1a0:	6128      	str	r0, [r5, #16]
 801a1a2:	b920      	cbnz	r0, 801a1ae <_svfiprintf_r+0x2e>
 801a1a4:	230c      	movs	r3, #12
 801a1a6:	603b      	str	r3, [r7, #0]
 801a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1ac:	e0d0      	b.n	801a350 <_svfiprintf_r+0x1d0>
 801a1ae:	2340      	movs	r3, #64	; 0x40
 801a1b0:	616b      	str	r3, [r5, #20]
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	9309      	str	r3, [sp, #36]	; 0x24
 801a1b6:	2320      	movs	r3, #32
 801a1b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1c0:	2330      	movs	r3, #48	; 0x30
 801a1c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a368 <_svfiprintf_r+0x1e8>
 801a1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1ca:	f04f 0901 	mov.w	r9, #1
 801a1ce:	4623      	mov	r3, r4
 801a1d0:	469a      	mov	sl, r3
 801a1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1d6:	b10a      	cbz	r2, 801a1dc <_svfiprintf_r+0x5c>
 801a1d8:	2a25      	cmp	r2, #37	; 0x25
 801a1da:	d1f9      	bne.n	801a1d0 <_svfiprintf_r+0x50>
 801a1dc:	ebba 0b04 	subs.w	fp, sl, r4
 801a1e0:	d00b      	beq.n	801a1fa <_svfiprintf_r+0x7a>
 801a1e2:	465b      	mov	r3, fp
 801a1e4:	4622      	mov	r2, r4
 801a1e6:	4629      	mov	r1, r5
 801a1e8:	4638      	mov	r0, r7
 801a1ea:	f7ff ff6f 	bl	801a0cc <__ssputs_r>
 801a1ee:	3001      	adds	r0, #1
 801a1f0:	f000 80a9 	beq.w	801a346 <_svfiprintf_r+0x1c6>
 801a1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1f6:	445a      	add	r2, fp
 801a1f8:	9209      	str	r2, [sp, #36]	; 0x24
 801a1fa:	f89a 3000 	ldrb.w	r3, [sl]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	f000 80a1 	beq.w	801a346 <_svfiprintf_r+0x1c6>
 801a204:	2300      	movs	r3, #0
 801a206:	f04f 32ff 	mov.w	r2, #4294967295
 801a20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a20e:	f10a 0a01 	add.w	sl, sl, #1
 801a212:	9304      	str	r3, [sp, #16]
 801a214:	9307      	str	r3, [sp, #28]
 801a216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a21a:	931a      	str	r3, [sp, #104]	; 0x68
 801a21c:	4654      	mov	r4, sl
 801a21e:	2205      	movs	r2, #5
 801a220:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a224:	4850      	ldr	r0, [pc, #320]	; (801a368 <_svfiprintf_r+0x1e8>)
 801a226:	f7e5 ffd3 	bl	80001d0 <memchr>
 801a22a:	9a04      	ldr	r2, [sp, #16]
 801a22c:	b9d8      	cbnz	r0, 801a266 <_svfiprintf_r+0xe6>
 801a22e:	06d0      	lsls	r0, r2, #27
 801a230:	bf44      	itt	mi
 801a232:	2320      	movmi	r3, #32
 801a234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a238:	0711      	lsls	r1, r2, #28
 801a23a:	bf44      	itt	mi
 801a23c:	232b      	movmi	r3, #43	; 0x2b
 801a23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a242:	f89a 3000 	ldrb.w	r3, [sl]
 801a246:	2b2a      	cmp	r3, #42	; 0x2a
 801a248:	d015      	beq.n	801a276 <_svfiprintf_r+0xf6>
 801a24a:	9a07      	ldr	r2, [sp, #28]
 801a24c:	4654      	mov	r4, sl
 801a24e:	2000      	movs	r0, #0
 801a250:	f04f 0c0a 	mov.w	ip, #10
 801a254:	4621      	mov	r1, r4
 801a256:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a25a:	3b30      	subs	r3, #48	; 0x30
 801a25c:	2b09      	cmp	r3, #9
 801a25e:	d94d      	bls.n	801a2fc <_svfiprintf_r+0x17c>
 801a260:	b1b0      	cbz	r0, 801a290 <_svfiprintf_r+0x110>
 801a262:	9207      	str	r2, [sp, #28]
 801a264:	e014      	b.n	801a290 <_svfiprintf_r+0x110>
 801a266:	eba0 0308 	sub.w	r3, r0, r8
 801a26a:	fa09 f303 	lsl.w	r3, r9, r3
 801a26e:	4313      	orrs	r3, r2
 801a270:	9304      	str	r3, [sp, #16]
 801a272:	46a2      	mov	sl, r4
 801a274:	e7d2      	b.n	801a21c <_svfiprintf_r+0x9c>
 801a276:	9b03      	ldr	r3, [sp, #12]
 801a278:	1d19      	adds	r1, r3, #4
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	9103      	str	r1, [sp, #12]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	bfbb      	ittet	lt
 801a282:	425b      	neglt	r3, r3
 801a284:	f042 0202 	orrlt.w	r2, r2, #2
 801a288:	9307      	strge	r3, [sp, #28]
 801a28a:	9307      	strlt	r3, [sp, #28]
 801a28c:	bfb8      	it	lt
 801a28e:	9204      	strlt	r2, [sp, #16]
 801a290:	7823      	ldrb	r3, [r4, #0]
 801a292:	2b2e      	cmp	r3, #46	; 0x2e
 801a294:	d10c      	bne.n	801a2b0 <_svfiprintf_r+0x130>
 801a296:	7863      	ldrb	r3, [r4, #1]
 801a298:	2b2a      	cmp	r3, #42	; 0x2a
 801a29a:	d134      	bne.n	801a306 <_svfiprintf_r+0x186>
 801a29c:	9b03      	ldr	r3, [sp, #12]
 801a29e:	1d1a      	adds	r2, r3, #4
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	9203      	str	r2, [sp, #12]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	bfb8      	it	lt
 801a2a8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2ac:	3402      	adds	r4, #2
 801a2ae:	9305      	str	r3, [sp, #20]
 801a2b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a378 <_svfiprintf_r+0x1f8>
 801a2b4:	7821      	ldrb	r1, [r4, #0]
 801a2b6:	2203      	movs	r2, #3
 801a2b8:	4650      	mov	r0, sl
 801a2ba:	f7e5 ff89 	bl	80001d0 <memchr>
 801a2be:	b138      	cbz	r0, 801a2d0 <_svfiprintf_r+0x150>
 801a2c0:	9b04      	ldr	r3, [sp, #16]
 801a2c2:	eba0 000a 	sub.w	r0, r0, sl
 801a2c6:	2240      	movs	r2, #64	; 0x40
 801a2c8:	4082      	lsls	r2, r0
 801a2ca:	4313      	orrs	r3, r2
 801a2cc:	3401      	adds	r4, #1
 801a2ce:	9304      	str	r3, [sp, #16]
 801a2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2d4:	4825      	ldr	r0, [pc, #148]	; (801a36c <_svfiprintf_r+0x1ec>)
 801a2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2da:	2206      	movs	r2, #6
 801a2dc:	f7e5 ff78 	bl	80001d0 <memchr>
 801a2e0:	2800      	cmp	r0, #0
 801a2e2:	d038      	beq.n	801a356 <_svfiprintf_r+0x1d6>
 801a2e4:	4b22      	ldr	r3, [pc, #136]	; (801a370 <_svfiprintf_r+0x1f0>)
 801a2e6:	bb1b      	cbnz	r3, 801a330 <_svfiprintf_r+0x1b0>
 801a2e8:	9b03      	ldr	r3, [sp, #12]
 801a2ea:	3307      	adds	r3, #7
 801a2ec:	f023 0307 	bic.w	r3, r3, #7
 801a2f0:	3308      	adds	r3, #8
 801a2f2:	9303      	str	r3, [sp, #12]
 801a2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2f6:	4433      	add	r3, r6
 801a2f8:	9309      	str	r3, [sp, #36]	; 0x24
 801a2fa:	e768      	b.n	801a1ce <_svfiprintf_r+0x4e>
 801a2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a300:	460c      	mov	r4, r1
 801a302:	2001      	movs	r0, #1
 801a304:	e7a6      	b.n	801a254 <_svfiprintf_r+0xd4>
 801a306:	2300      	movs	r3, #0
 801a308:	3401      	adds	r4, #1
 801a30a:	9305      	str	r3, [sp, #20]
 801a30c:	4619      	mov	r1, r3
 801a30e:	f04f 0c0a 	mov.w	ip, #10
 801a312:	4620      	mov	r0, r4
 801a314:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a318:	3a30      	subs	r2, #48	; 0x30
 801a31a:	2a09      	cmp	r2, #9
 801a31c:	d903      	bls.n	801a326 <_svfiprintf_r+0x1a6>
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d0c6      	beq.n	801a2b0 <_svfiprintf_r+0x130>
 801a322:	9105      	str	r1, [sp, #20]
 801a324:	e7c4      	b.n	801a2b0 <_svfiprintf_r+0x130>
 801a326:	fb0c 2101 	mla	r1, ip, r1, r2
 801a32a:	4604      	mov	r4, r0
 801a32c:	2301      	movs	r3, #1
 801a32e:	e7f0      	b.n	801a312 <_svfiprintf_r+0x192>
 801a330:	ab03      	add	r3, sp, #12
 801a332:	9300      	str	r3, [sp, #0]
 801a334:	462a      	mov	r2, r5
 801a336:	4b0f      	ldr	r3, [pc, #60]	; (801a374 <_svfiprintf_r+0x1f4>)
 801a338:	a904      	add	r1, sp, #16
 801a33a:	4638      	mov	r0, r7
 801a33c:	f7fc fbd6 	bl	8016aec <_printf_float>
 801a340:	1c42      	adds	r2, r0, #1
 801a342:	4606      	mov	r6, r0
 801a344:	d1d6      	bne.n	801a2f4 <_svfiprintf_r+0x174>
 801a346:	89ab      	ldrh	r3, [r5, #12]
 801a348:	065b      	lsls	r3, r3, #25
 801a34a:	f53f af2d 	bmi.w	801a1a8 <_svfiprintf_r+0x28>
 801a34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a350:	b01d      	add	sp, #116	; 0x74
 801a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a356:	ab03      	add	r3, sp, #12
 801a358:	9300      	str	r3, [sp, #0]
 801a35a:	462a      	mov	r2, r5
 801a35c:	4b05      	ldr	r3, [pc, #20]	; (801a374 <_svfiprintf_r+0x1f4>)
 801a35e:	a904      	add	r1, sp, #16
 801a360:	4638      	mov	r0, r7
 801a362:	f7fc fe67 	bl	8017034 <_printf_i>
 801a366:	e7eb      	b.n	801a340 <_svfiprintf_r+0x1c0>
 801a368:	0801cc41 	.word	0x0801cc41
 801a36c:	0801cc4b 	.word	0x0801cc4b
 801a370:	08016aed 	.word	0x08016aed
 801a374:	0801a0cd 	.word	0x0801a0cd
 801a378:	0801cc47 	.word	0x0801cc47

0801a37c <__sfputc_r>:
 801a37c:	6893      	ldr	r3, [r2, #8]
 801a37e:	3b01      	subs	r3, #1
 801a380:	2b00      	cmp	r3, #0
 801a382:	b410      	push	{r4}
 801a384:	6093      	str	r3, [r2, #8]
 801a386:	da08      	bge.n	801a39a <__sfputc_r+0x1e>
 801a388:	6994      	ldr	r4, [r2, #24]
 801a38a:	42a3      	cmp	r3, r4
 801a38c:	db01      	blt.n	801a392 <__sfputc_r+0x16>
 801a38e:	290a      	cmp	r1, #10
 801a390:	d103      	bne.n	801a39a <__sfputc_r+0x1e>
 801a392:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a396:	f7fd bb16 	b.w	80179c6 <__swbuf_r>
 801a39a:	6813      	ldr	r3, [r2, #0]
 801a39c:	1c58      	adds	r0, r3, #1
 801a39e:	6010      	str	r0, [r2, #0]
 801a3a0:	7019      	strb	r1, [r3, #0]
 801a3a2:	4608      	mov	r0, r1
 801a3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3a8:	4770      	bx	lr

0801a3aa <__sfputs_r>:
 801a3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ac:	4606      	mov	r6, r0
 801a3ae:	460f      	mov	r7, r1
 801a3b0:	4614      	mov	r4, r2
 801a3b2:	18d5      	adds	r5, r2, r3
 801a3b4:	42ac      	cmp	r4, r5
 801a3b6:	d101      	bne.n	801a3bc <__sfputs_r+0x12>
 801a3b8:	2000      	movs	r0, #0
 801a3ba:	e007      	b.n	801a3cc <__sfputs_r+0x22>
 801a3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3c0:	463a      	mov	r2, r7
 801a3c2:	4630      	mov	r0, r6
 801a3c4:	f7ff ffda 	bl	801a37c <__sfputc_r>
 801a3c8:	1c43      	adds	r3, r0, #1
 801a3ca:	d1f3      	bne.n	801a3b4 <__sfputs_r+0xa>
 801a3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a3d0 <_vfiprintf_r>:
 801a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d4:	460d      	mov	r5, r1
 801a3d6:	b09d      	sub	sp, #116	; 0x74
 801a3d8:	4614      	mov	r4, r2
 801a3da:	4698      	mov	r8, r3
 801a3dc:	4606      	mov	r6, r0
 801a3de:	b118      	cbz	r0, 801a3e8 <_vfiprintf_r+0x18>
 801a3e0:	6a03      	ldr	r3, [r0, #32]
 801a3e2:	b90b      	cbnz	r3, 801a3e8 <_vfiprintf_r+0x18>
 801a3e4:	f7fd f9e4 	bl	80177b0 <__sinit>
 801a3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3ea:	07d9      	lsls	r1, r3, #31
 801a3ec:	d405      	bmi.n	801a3fa <_vfiprintf_r+0x2a>
 801a3ee:	89ab      	ldrh	r3, [r5, #12]
 801a3f0:	059a      	lsls	r2, r3, #22
 801a3f2:	d402      	bmi.n	801a3fa <_vfiprintf_r+0x2a>
 801a3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3f6:	f7fd fc38 	bl	8017c6a <__retarget_lock_acquire_recursive>
 801a3fa:	89ab      	ldrh	r3, [r5, #12]
 801a3fc:	071b      	lsls	r3, r3, #28
 801a3fe:	d501      	bpl.n	801a404 <_vfiprintf_r+0x34>
 801a400:	692b      	ldr	r3, [r5, #16]
 801a402:	b99b      	cbnz	r3, 801a42c <_vfiprintf_r+0x5c>
 801a404:	4629      	mov	r1, r5
 801a406:	4630      	mov	r0, r6
 801a408:	f7fd fb1a 	bl	8017a40 <__swsetup_r>
 801a40c:	b170      	cbz	r0, 801a42c <_vfiprintf_r+0x5c>
 801a40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a410:	07dc      	lsls	r4, r3, #31
 801a412:	d504      	bpl.n	801a41e <_vfiprintf_r+0x4e>
 801a414:	f04f 30ff 	mov.w	r0, #4294967295
 801a418:	b01d      	add	sp, #116	; 0x74
 801a41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a41e:	89ab      	ldrh	r3, [r5, #12]
 801a420:	0598      	lsls	r0, r3, #22
 801a422:	d4f7      	bmi.n	801a414 <_vfiprintf_r+0x44>
 801a424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a426:	f7fd fc21 	bl	8017c6c <__retarget_lock_release_recursive>
 801a42a:	e7f3      	b.n	801a414 <_vfiprintf_r+0x44>
 801a42c:	2300      	movs	r3, #0
 801a42e:	9309      	str	r3, [sp, #36]	; 0x24
 801a430:	2320      	movs	r3, #32
 801a432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a436:	f8cd 800c 	str.w	r8, [sp, #12]
 801a43a:	2330      	movs	r3, #48	; 0x30
 801a43c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a5f0 <_vfiprintf_r+0x220>
 801a440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a444:	f04f 0901 	mov.w	r9, #1
 801a448:	4623      	mov	r3, r4
 801a44a:	469a      	mov	sl, r3
 801a44c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a450:	b10a      	cbz	r2, 801a456 <_vfiprintf_r+0x86>
 801a452:	2a25      	cmp	r2, #37	; 0x25
 801a454:	d1f9      	bne.n	801a44a <_vfiprintf_r+0x7a>
 801a456:	ebba 0b04 	subs.w	fp, sl, r4
 801a45a:	d00b      	beq.n	801a474 <_vfiprintf_r+0xa4>
 801a45c:	465b      	mov	r3, fp
 801a45e:	4622      	mov	r2, r4
 801a460:	4629      	mov	r1, r5
 801a462:	4630      	mov	r0, r6
 801a464:	f7ff ffa1 	bl	801a3aa <__sfputs_r>
 801a468:	3001      	adds	r0, #1
 801a46a:	f000 80a9 	beq.w	801a5c0 <_vfiprintf_r+0x1f0>
 801a46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a470:	445a      	add	r2, fp
 801a472:	9209      	str	r2, [sp, #36]	; 0x24
 801a474:	f89a 3000 	ldrb.w	r3, [sl]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	f000 80a1 	beq.w	801a5c0 <_vfiprintf_r+0x1f0>
 801a47e:	2300      	movs	r3, #0
 801a480:	f04f 32ff 	mov.w	r2, #4294967295
 801a484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a488:	f10a 0a01 	add.w	sl, sl, #1
 801a48c:	9304      	str	r3, [sp, #16]
 801a48e:	9307      	str	r3, [sp, #28]
 801a490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a494:	931a      	str	r3, [sp, #104]	; 0x68
 801a496:	4654      	mov	r4, sl
 801a498:	2205      	movs	r2, #5
 801a49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a49e:	4854      	ldr	r0, [pc, #336]	; (801a5f0 <_vfiprintf_r+0x220>)
 801a4a0:	f7e5 fe96 	bl	80001d0 <memchr>
 801a4a4:	9a04      	ldr	r2, [sp, #16]
 801a4a6:	b9d8      	cbnz	r0, 801a4e0 <_vfiprintf_r+0x110>
 801a4a8:	06d1      	lsls	r1, r2, #27
 801a4aa:	bf44      	itt	mi
 801a4ac:	2320      	movmi	r3, #32
 801a4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4b2:	0713      	lsls	r3, r2, #28
 801a4b4:	bf44      	itt	mi
 801a4b6:	232b      	movmi	r3, #43	; 0x2b
 801a4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4bc:	f89a 3000 	ldrb.w	r3, [sl]
 801a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 801a4c2:	d015      	beq.n	801a4f0 <_vfiprintf_r+0x120>
 801a4c4:	9a07      	ldr	r2, [sp, #28]
 801a4c6:	4654      	mov	r4, sl
 801a4c8:	2000      	movs	r0, #0
 801a4ca:	f04f 0c0a 	mov.w	ip, #10
 801a4ce:	4621      	mov	r1, r4
 801a4d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a4d4:	3b30      	subs	r3, #48	; 0x30
 801a4d6:	2b09      	cmp	r3, #9
 801a4d8:	d94d      	bls.n	801a576 <_vfiprintf_r+0x1a6>
 801a4da:	b1b0      	cbz	r0, 801a50a <_vfiprintf_r+0x13a>
 801a4dc:	9207      	str	r2, [sp, #28]
 801a4de:	e014      	b.n	801a50a <_vfiprintf_r+0x13a>
 801a4e0:	eba0 0308 	sub.w	r3, r0, r8
 801a4e4:	fa09 f303 	lsl.w	r3, r9, r3
 801a4e8:	4313      	orrs	r3, r2
 801a4ea:	9304      	str	r3, [sp, #16]
 801a4ec:	46a2      	mov	sl, r4
 801a4ee:	e7d2      	b.n	801a496 <_vfiprintf_r+0xc6>
 801a4f0:	9b03      	ldr	r3, [sp, #12]
 801a4f2:	1d19      	adds	r1, r3, #4
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	9103      	str	r1, [sp, #12]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	bfbb      	ittet	lt
 801a4fc:	425b      	neglt	r3, r3
 801a4fe:	f042 0202 	orrlt.w	r2, r2, #2
 801a502:	9307      	strge	r3, [sp, #28]
 801a504:	9307      	strlt	r3, [sp, #28]
 801a506:	bfb8      	it	lt
 801a508:	9204      	strlt	r2, [sp, #16]
 801a50a:	7823      	ldrb	r3, [r4, #0]
 801a50c:	2b2e      	cmp	r3, #46	; 0x2e
 801a50e:	d10c      	bne.n	801a52a <_vfiprintf_r+0x15a>
 801a510:	7863      	ldrb	r3, [r4, #1]
 801a512:	2b2a      	cmp	r3, #42	; 0x2a
 801a514:	d134      	bne.n	801a580 <_vfiprintf_r+0x1b0>
 801a516:	9b03      	ldr	r3, [sp, #12]
 801a518:	1d1a      	adds	r2, r3, #4
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	9203      	str	r2, [sp, #12]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	bfb8      	it	lt
 801a522:	f04f 33ff 	movlt.w	r3, #4294967295
 801a526:	3402      	adds	r4, #2
 801a528:	9305      	str	r3, [sp, #20]
 801a52a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a600 <_vfiprintf_r+0x230>
 801a52e:	7821      	ldrb	r1, [r4, #0]
 801a530:	2203      	movs	r2, #3
 801a532:	4650      	mov	r0, sl
 801a534:	f7e5 fe4c 	bl	80001d0 <memchr>
 801a538:	b138      	cbz	r0, 801a54a <_vfiprintf_r+0x17a>
 801a53a:	9b04      	ldr	r3, [sp, #16]
 801a53c:	eba0 000a 	sub.w	r0, r0, sl
 801a540:	2240      	movs	r2, #64	; 0x40
 801a542:	4082      	lsls	r2, r0
 801a544:	4313      	orrs	r3, r2
 801a546:	3401      	adds	r4, #1
 801a548:	9304      	str	r3, [sp, #16]
 801a54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a54e:	4829      	ldr	r0, [pc, #164]	; (801a5f4 <_vfiprintf_r+0x224>)
 801a550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a554:	2206      	movs	r2, #6
 801a556:	f7e5 fe3b 	bl	80001d0 <memchr>
 801a55a:	2800      	cmp	r0, #0
 801a55c:	d03f      	beq.n	801a5de <_vfiprintf_r+0x20e>
 801a55e:	4b26      	ldr	r3, [pc, #152]	; (801a5f8 <_vfiprintf_r+0x228>)
 801a560:	bb1b      	cbnz	r3, 801a5aa <_vfiprintf_r+0x1da>
 801a562:	9b03      	ldr	r3, [sp, #12]
 801a564:	3307      	adds	r3, #7
 801a566:	f023 0307 	bic.w	r3, r3, #7
 801a56a:	3308      	adds	r3, #8
 801a56c:	9303      	str	r3, [sp, #12]
 801a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a570:	443b      	add	r3, r7
 801a572:	9309      	str	r3, [sp, #36]	; 0x24
 801a574:	e768      	b.n	801a448 <_vfiprintf_r+0x78>
 801a576:	fb0c 3202 	mla	r2, ip, r2, r3
 801a57a:	460c      	mov	r4, r1
 801a57c:	2001      	movs	r0, #1
 801a57e:	e7a6      	b.n	801a4ce <_vfiprintf_r+0xfe>
 801a580:	2300      	movs	r3, #0
 801a582:	3401      	adds	r4, #1
 801a584:	9305      	str	r3, [sp, #20]
 801a586:	4619      	mov	r1, r3
 801a588:	f04f 0c0a 	mov.w	ip, #10
 801a58c:	4620      	mov	r0, r4
 801a58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a592:	3a30      	subs	r2, #48	; 0x30
 801a594:	2a09      	cmp	r2, #9
 801a596:	d903      	bls.n	801a5a0 <_vfiprintf_r+0x1d0>
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d0c6      	beq.n	801a52a <_vfiprintf_r+0x15a>
 801a59c:	9105      	str	r1, [sp, #20]
 801a59e:	e7c4      	b.n	801a52a <_vfiprintf_r+0x15a>
 801a5a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5a4:	4604      	mov	r4, r0
 801a5a6:	2301      	movs	r3, #1
 801a5a8:	e7f0      	b.n	801a58c <_vfiprintf_r+0x1bc>
 801a5aa:	ab03      	add	r3, sp, #12
 801a5ac:	9300      	str	r3, [sp, #0]
 801a5ae:	462a      	mov	r2, r5
 801a5b0:	4b12      	ldr	r3, [pc, #72]	; (801a5fc <_vfiprintf_r+0x22c>)
 801a5b2:	a904      	add	r1, sp, #16
 801a5b4:	4630      	mov	r0, r6
 801a5b6:	f7fc fa99 	bl	8016aec <_printf_float>
 801a5ba:	4607      	mov	r7, r0
 801a5bc:	1c78      	adds	r0, r7, #1
 801a5be:	d1d6      	bne.n	801a56e <_vfiprintf_r+0x19e>
 801a5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5c2:	07d9      	lsls	r1, r3, #31
 801a5c4:	d405      	bmi.n	801a5d2 <_vfiprintf_r+0x202>
 801a5c6:	89ab      	ldrh	r3, [r5, #12]
 801a5c8:	059a      	lsls	r2, r3, #22
 801a5ca:	d402      	bmi.n	801a5d2 <_vfiprintf_r+0x202>
 801a5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5ce:	f7fd fb4d 	bl	8017c6c <__retarget_lock_release_recursive>
 801a5d2:	89ab      	ldrh	r3, [r5, #12]
 801a5d4:	065b      	lsls	r3, r3, #25
 801a5d6:	f53f af1d 	bmi.w	801a414 <_vfiprintf_r+0x44>
 801a5da:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a5dc:	e71c      	b.n	801a418 <_vfiprintf_r+0x48>
 801a5de:	ab03      	add	r3, sp, #12
 801a5e0:	9300      	str	r3, [sp, #0]
 801a5e2:	462a      	mov	r2, r5
 801a5e4:	4b05      	ldr	r3, [pc, #20]	; (801a5fc <_vfiprintf_r+0x22c>)
 801a5e6:	a904      	add	r1, sp, #16
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	f7fc fd23 	bl	8017034 <_printf_i>
 801a5ee:	e7e4      	b.n	801a5ba <_vfiprintf_r+0x1ea>
 801a5f0:	0801cc41 	.word	0x0801cc41
 801a5f4:	0801cc4b 	.word	0x0801cc4b
 801a5f8:	08016aed 	.word	0x08016aed
 801a5fc:	0801a3ab 	.word	0x0801a3ab
 801a600:	0801cc47 	.word	0x0801cc47

0801a604 <__sflush_r>:
 801a604:	898a      	ldrh	r2, [r1, #12]
 801a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a60a:	4605      	mov	r5, r0
 801a60c:	0710      	lsls	r0, r2, #28
 801a60e:	460c      	mov	r4, r1
 801a610:	d458      	bmi.n	801a6c4 <__sflush_r+0xc0>
 801a612:	684b      	ldr	r3, [r1, #4]
 801a614:	2b00      	cmp	r3, #0
 801a616:	dc05      	bgt.n	801a624 <__sflush_r+0x20>
 801a618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	dc02      	bgt.n	801a624 <__sflush_r+0x20>
 801a61e:	2000      	movs	r0, #0
 801a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a626:	2e00      	cmp	r6, #0
 801a628:	d0f9      	beq.n	801a61e <__sflush_r+0x1a>
 801a62a:	2300      	movs	r3, #0
 801a62c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a630:	682f      	ldr	r7, [r5, #0]
 801a632:	6a21      	ldr	r1, [r4, #32]
 801a634:	602b      	str	r3, [r5, #0]
 801a636:	d032      	beq.n	801a69e <__sflush_r+0x9a>
 801a638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a63a:	89a3      	ldrh	r3, [r4, #12]
 801a63c:	075a      	lsls	r2, r3, #29
 801a63e:	d505      	bpl.n	801a64c <__sflush_r+0x48>
 801a640:	6863      	ldr	r3, [r4, #4]
 801a642:	1ac0      	subs	r0, r0, r3
 801a644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a646:	b10b      	cbz	r3, 801a64c <__sflush_r+0x48>
 801a648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a64a:	1ac0      	subs	r0, r0, r3
 801a64c:	2300      	movs	r3, #0
 801a64e:	4602      	mov	r2, r0
 801a650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a652:	6a21      	ldr	r1, [r4, #32]
 801a654:	4628      	mov	r0, r5
 801a656:	47b0      	blx	r6
 801a658:	1c43      	adds	r3, r0, #1
 801a65a:	89a3      	ldrh	r3, [r4, #12]
 801a65c:	d106      	bne.n	801a66c <__sflush_r+0x68>
 801a65e:	6829      	ldr	r1, [r5, #0]
 801a660:	291d      	cmp	r1, #29
 801a662:	d82b      	bhi.n	801a6bc <__sflush_r+0xb8>
 801a664:	4a29      	ldr	r2, [pc, #164]	; (801a70c <__sflush_r+0x108>)
 801a666:	410a      	asrs	r2, r1
 801a668:	07d6      	lsls	r6, r2, #31
 801a66a:	d427      	bmi.n	801a6bc <__sflush_r+0xb8>
 801a66c:	2200      	movs	r2, #0
 801a66e:	6062      	str	r2, [r4, #4]
 801a670:	04d9      	lsls	r1, r3, #19
 801a672:	6922      	ldr	r2, [r4, #16]
 801a674:	6022      	str	r2, [r4, #0]
 801a676:	d504      	bpl.n	801a682 <__sflush_r+0x7e>
 801a678:	1c42      	adds	r2, r0, #1
 801a67a:	d101      	bne.n	801a680 <__sflush_r+0x7c>
 801a67c:	682b      	ldr	r3, [r5, #0]
 801a67e:	b903      	cbnz	r3, 801a682 <__sflush_r+0x7e>
 801a680:	6560      	str	r0, [r4, #84]	; 0x54
 801a682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a684:	602f      	str	r7, [r5, #0]
 801a686:	2900      	cmp	r1, #0
 801a688:	d0c9      	beq.n	801a61e <__sflush_r+0x1a>
 801a68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a68e:	4299      	cmp	r1, r3
 801a690:	d002      	beq.n	801a698 <__sflush_r+0x94>
 801a692:	4628      	mov	r0, r5
 801a694:	f7fe f98a 	bl	80189ac <_free_r>
 801a698:	2000      	movs	r0, #0
 801a69a:	6360      	str	r0, [r4, #52]	; 0x34
 801a69c:	e7c0      	b.n	801a620 <__sflush_r+0x1c>
 801a69e:	2301      	movs	r3, #1
 801a6a0:	4628      	mov	r0, r5
 801a6a2:	47b0      	blx	r6
 801a6a4:	1c41      	adds	r1, r0, #1
 801a6a6:	d1c8      	bne.n	801a63a <__sflush_r+0x36>
 801a6a8:	682b      	ldr	r3, [r5, #0]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d0c5      	beq.n	801a63a <__sflush_r+0x36>
 801a6ae:	2b1d      	cmp	r3, #29
 801a6b0:	d001      	beq.n	801a6b6 <__sflush_r+0xb2>
 801a6b2:	2b16      	cmp	r3, #22
 801a6b4:	d101      	bne.n	801a6ba <__sflush_r+0xb6>
 801a6b6:	602f      	str	r7, [r5, #0]
 801a6b8:	e7b1      	b.n	801a61e <__sflush_r+0x1a>
 801a6ba:	89a3      	ldrh	r3, [r4, #12]
 801a6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6c0:	81a3      	strh	r3, [r4, #12]
 801a6c2:	e7ad      	b.n	801a620 <__sflush_r+0x1c>
 801a6c4:	690f      	ldr	r7, [r1, #16]
 801a6c6:	2f00      	cmp	r7, #0
 801a6c8:	d0a9      	beq.n	801a61e <__sflush_r+0x1a>
 801a6ca:	0793      	lsls	r3, r2, #30
 801a6cc:	680e      	ldr	r6, [r1, #0]
 801a6ce:	bf08      	it	eq
 801a6d0:	694b      	ldreq	r3, [r1, #20]
 801a6d2:	600f      	str	r7, [r1, #0]
 801a6d4:	bf18      	it	ne
 801a6d6:	2300      	movne	r3, #0
 801a6d8:	eba6 0807 	sub.w	r8, r6, r7
 801a6dc:	608b      	str	r3, [r1, #8]
 801a6de:	f1b8 0f00 	cmp.w	r8, #0
 801a6e2:	dd9c      	ble.n	801a61e <__sflush_r+0x1a>
 801a6e4:	6a21      	ldr	r1, [r4, #32]
 801a6e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a6e8:	4643      	mov	r3, r8
 801a6ea:	463a      	mov	r2, r7
 801a6ec:	4628      	mov	r0, r5
 801a6ee:	47b0      	blx	r6
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	dc06      	bgt.n	801a702 <__sflush_r+0xfe>
 801a6f4:	89a3      	ldrh	r3, [r4, #12]
 801a6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6fa:	81a3      	strh	r3, [r4, #12]
 801a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 801a700:	e78e      	b.n	801a620 <__sflush_r+0x1c>
 801a702:	4407      	add	r7, r0
 801a704:	eba8 0800 	sub.w	r8, r8, r0
 801a708:	e7e9      	b.n	801a6de <__sflush_r+0xda>
 801a70a:	bf00      	nop
 801a70c:	dfbffffe 	.word	0xdfbffffe

0801a710 <_fflush_r>:
 801a710:	b538      	push	{r3, r4, r5, lr}
 801a712:	690b      	ldr	r3, [r1, #16]
 801a714:	4605      	mov	r5, r0
 801a716:	460c      	mov	r4, r1
 801a718:	b913      	cbnz	r3, 801a720 <_fflush_r+0x10>
 801a71a:	2500      	movs	r5, #0
 801a71c:	4628      	mov	r0, r5
 801a71e:	bd38      	pop	{r3, r4, r5, pc}
 801a720:	b118      	cbz	r0, 801a72a <_fflush_r+0x1a>
 801a722:	6a03      	ldr	r3, [r0, #32]
 801a724:	b90b      	cbnz	r3, 801a72a <_fflush_r+0x1a>
 801a726:	f7fd f843 	bl	80177b0 <__sinit>
 801a72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d0f3      	beq.n	801a71a <_fflush_r+0xa>
 801a732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a734:	07d0      	lsls	r0, r2, #31
 801a736:	d404      	bmi.n	801a742 <_fflush_r+0x32>
 801a738:	0599      	lsls	r1, r3, #22
 801a73a:	d402      	bmi.n	801a742 <_fflush_r+0x32>
 801a73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a73e:	f7fd fa94 	bl	8017c6a <__retarget_lock_acquire_recursive>
 801a742:	4628      	mov	r0, r5
 801a744:	4621      	mov	r1, r4
 801a746:	f7ff ff5d 	bl	801a604 <__sflush_r>
 801a74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a74c:	07da      	lsls	r2, r3, #31
 801a74e:	4605      	mov	r5, r0
 801a750:	d4e4      	bmi.n	801a71c <_fflush_r+0xc>
 801a752:	89a3      	ldrh	r3, [r4, #12]
 801a754:	059b      	lsls	r3, r3, #22
 801a756:	d4e1      	bmi.n	801a71c <_fflush_r+0xc>
 801a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a75a:	f7fd fa87 	bl	8017c6c <__retarget_lock_release_recursive>
 801a75e:	e7dd      	b.n	801a71c <_fflush_r+0xc>

0801a760 <__swhatbuf_r>:
 801a760:	b570      	push	{r4, r5, r6, lr}
 801a762:	460c      	mov	r4, r1
 801a764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a768:	2900      	cmp	r1, #0
 801a76a:	b096      	sub	sp, #88	; 0x58
 801a76c:	4615      	mov	r5, r2
 801a76e:	461e      	mov	r6, r3
 801a770:	da0d      	bge.n	801a78e <__swhatbuf_r+0x2e>
 801a772:	89a3      	ldrh	r3, [r4, #12]
 801a774:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a778:	f04f 0100 	mov.w	r1, #0
 801a77c:	bf0c      	ite	eq
 801a77e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a782:	2340      	movne	r3, #64	; 0x40
 801a784:	2000      	movs	r0, #0
 801a786:	6031      	str	r1, [r6, #0]
 801a788:	602b      	str	r3, [r5, #0]
 801a78a:	b016      	add	sp, #88	; 0x58
 801a78c:	bd70      	pop	{r4, r5, r6, pc}
 801a78e:	466a      	mov	r2, sp
 801a790:	f000 f892 	bl	801a8b8 <_fstat_r>
 801a794:	2800      	cmp	r0, #0
 801a796:	dbec      	blt.n	801a772 <__swhatbuf_r+0x12>
 801a798:	9901      	ldr	r1, [sp, #4]
 801a79a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a79e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a7a2:	4259      	negs	r1, r3
 801a7a4:	4159      	adcs	r1, r3
 801a7a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7aa:	e7eb      	b.n	801a784 <__swhatbuf_r+0x24>

0801a7ac <__smakebuf_r>:
 801a7ac:	898b      	ldrh	r3, [r1, #12]
 801a7ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7b0:	079d      	lsls	r5, r3, #30
 801a7b2:	4606      	mov	r6, r0
 801a7b4:	460c      	mov	r4, r1
 801a7b6:	d507      	bpl.n	801a7c8 <__smakebuf_r+0x1c>
 801a7b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7bc:	6023      	str	r3, [r4, #0]
 801a7be:	6123      	str	r3, [r4, #16]
 801a7c0:	2301      	movs	r3, #1
 801a7c2:	6163      	str	r3, [r4, #20]
 801a7c4:	b002      	add	sp, #8
 801a7c6:	bd70      	pop	{r4, r5, r6, pc}
 801a7c8:	ab01      	add	r3, sp, #4
 801a7ca:	466a      	mov	r2, sp
 801a7cc:	f7ff ffc8 	bl	801a760 <__swhatbuf_r>
 801a7d0:	9900      	ldr	r1, [sp, #0]
 801a7d2:	4605      	mov	r5, r0
 801a7d4:	4630      	mov	r0, r6
 801a7d6:	f7fc f85d 	bl	8016894 <_malloc_r>
 801a7da:	b948      	cbnz	r0, 801a7f0 <__smakebuf_r+0x44>
 801a7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7e0:	059a      	lsls	r2, r3, #22
 801a7e2:	d4ef      	bmi.n	801a7c4 <__smakebuf_r+0x18>
 801a7e4:	f023 0303 	bic.w	r3, r3, #3
 801a7e8:	f043 0302 	orr.w	r3, r3, #2
 801a7ec:	81a3      	strh	r3, [r4, #12]
 801a7ee:	e7e3      	b.n	801a7b8 <__smakebuf_r+0xc>
 801a7f0:	89a3      	ldrh	r3, [r4, #12]
 801a7f2:	6020      	str	r0, [r4, #0]
 801a7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7f8:	81a3      	strh	r3, [r4, #12]
 801a7fa:	9b00      	ldr	r3, [sp, #0]
 801a7fc:	6163      	str	r3, [r4, #20]
 801a7fe:	9b01      	ldr	r3, [sp, #4]
 801a800:	6120      	str	r0, [r4, #16]
 801a802:	b15b      	cbz	r3, 801a81c <__smakebuf_r+0x70>
 801a804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a808:	4630      	mov	r0, r6
 801a80a:	f000 f867 	bl	801a8dc <_isatty_r>
 801a80e:	b128      	cbz	r0, 801a81c <__smakebuf_r+0x70>
 801a810:	89a3      	ldrh	r3, [r4, #12]
 801a812:	f023 0303 	bic.w	r3, r3, #3
 801a816:	f043 0301 	orr.w	r3, r3, #1
 801a81a:	81a3      	strh	r3, [r4, #12]
 801a81c:	89a3      	ldrh	r3, [r4, #12]
 801a81e:	431d      	orrs	r5, r3
 801a820:	81a5      	strh	r5, [r4, #12]
 801a822:	e7cf      	b.n	801a7c4 <__smakebuf_r+0x18>

0801a824 <memmove>:
 801a824:	4288      	cmp	r0, r1
 801a826:	b510      	push	{r4, lr}
 801a828:	eb01 0402 	add.w	r4, r1, r2
 801a82c:	d902      	bls.n	801a834 <memmove+0x10>
 801a82e:	4284      	cmp	r4, r0
 801a830:	4623      	mov	r3, r4
 801a832:	d807      	bhi.n	801a844 <memmove+0x20>
 801a834:	1e43      	subs	r3, r0, #1
 801a836:	42a1      	cmp	r1, r4
 801a838:	d008      	beq.n	801a84c <memmove+0x28>
 801a83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a842:	e7f8      	b.n	801a836 <memmove+0x12>
 801a844:	4402      	add	r2, r0
 801a846:	4601      	mov	r1, r0
 801a848:	428a      	cmp	r2, r1
 801a84a:	d100      	bne.n	801a84e <memmove+0x2a>
 801a84c:	bd10      	pop	{r4, pc}
 801a84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a856:	e7f7      	b.n	801a848 <memmove+0x24>

0801a858 <_raise_r>:
 801a858:	291f      	cmp	r1, #31
 801a85a:	b538      	push	{r3, r4, r5, lr}
 801a85c:	4604      	mov	r4, r0
 801a85e:	460d      	mov	r5, r1
 801a860:	d904      	bls.n	801a86c <_raise_r+0x14>
 801a862:	2316      	movs	r3, #22
 801a864:	6003      	str	r3, [r0, #0]
 801a866:	f04f 30ff 	mov.w	r0, #4294967295
 801a86a:	bd38      	pop	{r3, r4, r5, pc}
 801a86c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a86e:	b112      	cbz	r2, 801a876 <_raise_r+0x1e>
 801a870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a874:	b94b      	cbnz	r3, 801a88a <_raise_r+0x32>
 801a876:	4620      	mov	r0, r4
 801a878:	f000 f852 	bl	801a920 <_getpid_r>
 801a87c:	462a      	mov	r2, r5
 801a87e:	4601      	mov	r1, r0
 801a880:	4620      	mov	r0, r4
 801a882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a886:	f000 b839 	b.w	801a8fc <_kill_r>
 801a88a:	2b01      	cmp	r3, #1
 801a88c:	d00a      	beq.n	801a8a4 <_raise_r+0x4c>
 801a88e:	1c59      	adds	r1, r3, #1
 801a890:	d103      	bne.n	801a89a <_raise_r+0x42>
 801a892:	2316      	movs	r3, #22
 801a894:	6003      	str	r3, [r0, #0]
 801a896:	2001      	movs	r0, #1
 801a898:	e7e7      	b.n	801a86a <_raise_r+0x12>
 801a89a:	2400      	movs	r4, #0
 801a89c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	4798      	blx	r3
 801a8a4:	2000      	movs	r0, #0
 801a8a6:	e7e0      	b.n	801a86a <_raise_r+0x12>

0801a8a8 <raise>:
 801a8a8:	4b02      	ldr	r3, [pc, #8]	; (801a8b4 <raise+0xc>)
 801a8aa:	4601      	mov	r1, r0
 801a8ac:	6818      	ldr	r0, [r3, #0]
 801a8ae:	f7ff bfd3 	b.w	801a858 <_raise_r>
 801a8b2:	bf00      	nop
 801a8b4:	200001ac 	.word	0x200001ac

0801a8b8 <_fstat_r>:
 801a8b8:	b538      	push	{r3, r4, r5, lr}
 801a8ba:	4d07      	ldr	r5, [pc, #28]	; (801a8d8 <_fstat_r+0x20>)
 801a8bc:	2300      	movs	r3, #0
 801a8be:	4604      	mov	r4, r0
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	4611      	mov	r1, r2
 801a8c4:	602b      	str	r3, [r5, #0]
 801a8c6:	f7e9 fbb2 	bl	800402e <_fstat>
 801a8ca:	1c43      	adds	r3, r0, #1
 801a8cc:	d102      	bne.n	801a8d4 <_fstat_r+0x1c>
 801a8ce:	682b      	ldr	r3, [r5, #0]
 801a8d0:	b103      	cbz	r3, 801a8d4 <_fstat_r+0x1c>
 801a8d2:	6023      	str	r3, [r4, #0]
 801a8d4:	bd38      	pop	{r3, r4, r5, pc}
 801a8d6:	bf00      	nop
 801a8d8:	20002c40 	.word	0x20002c40

0801a8dc <_isatty_r>:
 801a8dc:	b538      	push	{r3, r4, r5, lr}
 801a8de:	4d06      	ldr	r5, [pc, #24]	; (801a8f8 <_isatty_r+0x1c>)
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	4608      	mov	r0, r1
 801a8e6:	602b      	str	r3, [r5, #0]
 801a8e8:	f7e9 fbb1 	bl	800404e <_isatty>
 801a8ec:	1c43      	adds	r3, r0, #1
 801a8ee:	d102      	bne.n	801a8f6 <_isatty_r+0x1a>
 801a8f0:	682b      	ldr	r3, [r5, #0]
 801a8f2:	b103      	cbz	r3, 801a8f6 <_isatty_r+0x1a>
 801a8f4:	6023      	str	r3, [r4, #0]
 801a8f6:	bd38      	pop	{r3, r4, r5, pc}
 801a8f8:	20002c40 	.word	0x20002c40

0801a8fc <_kill_r>:
 801a8fc:	b538      	push	{r3, r4, r5, lr}
 801a8fe:	4d07      	ldr	r5, [pc, #28]	; (801a91c <_kill_r+0x20>)
 801a900:	2300      	movs	r3, #0
 801a902:	4604      	mov	r4, r0
 801a904:	4608      	mov	r0, r1
 801a906:	4611      	mov	r1, r2
 801a908:	602b      	str	r3, [r5, #0]
 801a90a:	f7e9 fb31 	bl	8003f70 <_kill>
 801a90e:	1c43      	adds	r3, r0, #1
 801a910:	d102      	bne.n	801a918 <_kill_r+0x1c>
 801a912:	682b      	ldr	r3, [r5, #0]
 801a914:	b103      	cbz	r3, 801a918 <_kill_r+0x1c>
 801a916:	6023      	str	r3, [r4, #0]
 801a918:	bd38      	pop	{r3, r4, r5, pc}
 801a91a:	bf00      	nop
 801a91c:	20002c40 	.word	0x20002c40

0801a920 <_getpid_r>:
 801a920:	f7e9 bb1e 	b.w	8003f60 <_getpid>
 801a924:	0000      	movs	r0, r0
	...

0801a928 <nan>:
 801a928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a930 <nan+0x8>
 801a92c:	4770      	bx	lr
 801a92e:	bf00      	nop
 801a930:	00000000 	.word	0x00000000
 801a934:	7ff80000 	.word	0x7ff80000

0801a938 <rshift>:
 801a938:	6903      	ldr	r3, [r0, #16]
 801a93a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a93e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a942:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a946:	f100 0414 	add.w	r4, r0, #20
 801a94a:	dd45      	ble.n	801a9d8 <rshift+0xa0>
 801a94c:	f011 011f 	ands.w	r1, r1, #31
 801a950:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a954:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a958:	d10c      	bne.n	801a974 <rshift+0x3c>
 801a95a:	f100 0710 	add.w	r7, r0, #16
 801a95e:	4629      	mov	r1, r5
 801a960:	42b1      	cmp	r1, r6
 801a962:	d334      	bcc.n	801a9ce <rshift+0x96>
 801a964:	1a9b      	subs	r3, r3, r2
 801a966:	009b      	lsls	r3, r3, #2
 801a968:	1eea      	subs	r2, r5, #3
 801a96a:	4296      	cmp	r6, r2
 801a96c:	bf38      	it	cc
 801a96e:	2300      	movcc	r3, #0
 801a970:	4423      	add	r3, r4
 801a972:	e015      	b.n	801a9a0 <rshift+0x68>
 801a974:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a978:	f1c1 0820 	rsb	r8, r1, #32
 801a97c:	40cf      	lsrs	r7, r1
 801a97e:	f105 0e04 	add.w	lr, r5, #4
 801a982:	46a1      	mov	r9, r4
 801a984:	4576      	cmp	r6, lr
 801a986:	46f4      	mov	ip, lr
 801a988:	d815      	bhi.n	801a9b6 <rshift+0x7e>
 801a98a:	1a9a      	subs	r2, r3, r2
 801a98c:	0092      	lsls	r2, r2, #2
 801a98e:	3a04      	subs	r2, #4
 801a990:	3501      	adds	r5, #1
 801a992:	42ae      	cmp	r6, r5
 801a994:	bf38      	it	cc
 801a996:	2200      	movcc	r2, #0
 801a998:	18a3      	adds	r3, r4, r2
 801a99a:	50a7      	str	r7, [r4, r2]
 801a99c:	b107      	cbz	r7, 801a9a0 <rshift+0x68>
 801a99e:	3304      	adds	r3, #4
 801a9a0:	1b1a      	subs	r2, r3, r4
 801a9a2:	42a3      	cmp	r3, r4
 801a9a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a9a8:	bf08      	it	eq
 801a9aa:	2300      	moveq	r3, #0
 801a9ac:	6102      	str	r2, [r0, #16]
 801a9ae:	bf08      	it	eq
 801a9b0:	6143      	streq	r3, [r0, #20]
 801a9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9b6:	f8dc c000 	ldr.w	ip, [ip]
 801a9ba:	fa0c fc08 	lsl.w	ip, ip, r8
 801a9be:	ea4c 0707 	orr.w	r7, ip, r7
 801a9c2:	f849 7b04 	str.w	r7, [r9], #4
 801a9c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a9ca:	40cf      	lsrs	r7, r1
 801a9cc:	e7da      	b.n	801a984 <rshift+0x4c>
 801a9ce:	f851 cb04 	ldr.w	ip, [r1], #4
 801a9d2:	f847 cf04 	str.w	ip, [r7, #4]!
 801a9d6:	e7c3      	b.n	801a960 <rshift+0x28>
 801a9d8:	4623      	mov	r3, r4
 801a9da:	e7e1      	b.n	801a9a0 <rshift+0x68>

0801a9dc <__hexdig_fun>:
 801a9dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a9e0:	2b09      	cmp	r3, #9
 801a9e2:	d802      	bhi.n	801a9ea <__hexdig_fun+0xe>
 801a9e4:	3820      	subs	r0, #32
 801a9e6:	b2c0      	uxtb	r0, r0
 801a9e8:	4770      	bx	lr
 801a9ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a9ee:	2b05      	cmp	r3, #5
 801a9f0:	d801      	bhi.n	801a9f6 <__hexdig_fun+0x1a>
 801a9f2:	3847      	subs	r0, #71	; 0x47
 801a9f4:	e7f7      	b.n	801a9e6 <__hexdig_fun+0xa>
 801a9f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a9fa:	2b05      	cmp	r3, #5
 801a9fc:	d801      	bhi.n	801aa02 <__hexdig_fun+0x26>
 801a9fe:	3827      	subs	r0, #39	; 0x27
 801aa00:	e7f1      	b.n	801a9e6 <__hexdig_fun+0xa>
 801aa02:	2000      	movs	r0, #0
 801aa04:	4770      	bx	lr
	...

0801aa08 <__gethex>:
 801aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa0c:	4617      	mov	r7, r2
 801aa0e:	680a      	ldr	r2, [r1, #0]
 801aa10:	b085      	sub	sp, #20
 801aa12:	f102 0b02 	add.w	fp, r2, #2
 801aa16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801aa1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801aa1e:	4681      	mov	r9, r0
 801aa20:	468a      	mov	sl, r1
 801aa22:	9302      	str	r3, [sp, #8]
 801aa24:	32fe      	adds	r2, #254	; 0xfe
 801aa26:	eb02 030b 	add.w	r3, r2, fp
 801aa2a:	46d8      	mov	r8, fp
 801aa2c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801aa30:	9301      	str	r3, [sp, #4]
 801aa32:	2830      	cmp	r0, #48	; 0x30
 801aa34:	d0f7      	beq.n	801aa26 <__gethex+0x1e>
 801aa36:	f7ff ffd1 	bl	801a9dc <__hexdig_fun>
 801aa3a:	4604      	mov	r4, r0
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	d138      	bne.n	801aab2 <__gethex+0xaa>
 801aa40:	49a7      	ldr	r1, [pc, #668]	; (801ace0 <__gethex+0x2d8>)
 801aa42:	2201      	movs	r2, #1
 801aa44:	4640      	mov	r0, r8
 801aa46:	f7fd f878 	bl	8017b3a <strncmp>
 801aa4a:	4606      	mov	r6, r0
 801aa4c:	2800      	cmp	r0, #0
 801aa4e:	d169      	bne.n	801ab24 <__gethex+0x11c>
 801aa50:	f898 0001 	ldrb.w	r0, [r8, #1]
 801aa54:	465d      	mov	r5, fp
 801aa56:	f7ff ffc1 	bl	801a9dc <__hexdig_fun>
 801aa5a:	2800      	cmp	r0, #0
 801aa5c:	d064      	beq.n	801ab28 <__gethex+0x120>
 801aa5e:	465a      	mov	r2, fp
 801aa60:	7810      	ldrb	r0, [r2, #0]
 801aa62:	2830      	cmp	r0, #48	; 0x30
 801aa64:	4690      	mov	r8, r2
 801aa66:	f102 0201 	add.w	r2, r2, #1
 801aa6a:	d0f9      	beq.n	801aa60 <__gethex+0x58>
 801aa6c:	f7ff ffb6 	bl	801a9dc <__hexdig_fun>
 801aa70:	2301      	movs	r3, #1
 801aa72:	fab0 f480 	clz	r4, r0
 801aa76:	0964      	lsrs	r4, r4, #5
 801aa78:	465e      	mov	r6, fp
 801aa7a:	9301      	str	r3, [sp, #4]
 801aa7c:	4642      	mov	r2, r8
 801aa7e:	4615      	mov	r5, r2
 801aa80:	3201      	adds	r2, #1
 801aa82:	7828      	ldrb	r0, [r5, #0]
 801aa84:	f7ff ffaa 	bl	801a9dc <__hexdig_fun>
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	d1f8      	bne.n	801aa7e <__gethex+0x76>
 801aa8c:	4994      	ldr	r1, [pc, #592]	; (801ace0 <__gethex+0x2d8>)
 801aa8e:	2201      	movs	r2, #1
 801aa90:	4628      	mov	r0, r5
 801aa92:	f7fd f852 	bl	8017b3a <strncmp>
 801aa96:	b978      	cbnz	r0, 801aab8 <__gethex+0xb0>
 801aa98:	b946      	cbnz	r6, 801aaac <__gethex+0xa4>
 801aa9a:	1c6e      	adds	r6, r5, #1
 801aa9c:	4632      	mov	r2, r6
 801aa9e:	4615      	mov	r5, r2
 801aaa0:	3201      	adds	r2, #1
 801aaa2:	7828      	ldrb	r0, [r5, #0]
 801aaa4:	f7ff ff9a 	bl	801a9dc <__hexdig_fun>
 801aaa8:	2800      	cmp	r0, #0
 801aaaa:	d1f8      	bne.n	801aa9e <__gethex+0x96>
 801aaac:	1b73      	subs	r3, r6, r5
 801aaae:	009e      	lsls	r6, r3, #2
 801aab0:	e004      	b.n	801aabc <__gethex+0xb4>
 801aab2:	2400      	movs	r4, #0
 801aab4:	4626      	mov	r6, r4
 801aab6:	e7e1      	b.n	801aa7c <__gethex+0x74>
 801aab8:	2e00      	cmp	r6, #0
 801aaba:	d1f7      	bne.n	801aaac <__gethex+0xa4>
 801aabc:	782b      	ldrb	r3, [r5, #0]
 801aabe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aac2:	2b50      	cmp	r3, #80	; 0x50
 801aac4:	d13d      	bne.n	801ab42 <__gethex+0x13a>
 801aac6:	786b      	ldrb	r3, [r5, #1]
 801aac8:	2b2b      	cmp	r3, #43	; 0x2b
 801aaca:	d02f      	beq.n	801ab2c <__gethex+0x124>
 801aacc:	2b2d      	cmp	r3, #45	; 0x2d
 801aace:	d031      	beq.n	801ab34 <__gethex+0x12c>
 801aad0:	1c69      	adds	r1, r5, #1
 801aad2:	f04f 0b00 	mov.w	fp, #0
 801aad6:	7808      	ldrb	r0, [r1, #0]
 801aad8:	f7ff ff80 	bl	801a9dc <__hexdig_fun>
 801aadc:	1e42      	subs	r2, r0, #1
 801aade:	b2d2      	uxtb	r2, r2
 801aae0:	2a18      	cmp	r2, #24
 801aae2:	d82e      	bhi.n	801ab42 <__gethex+0x13a>
 801aae4:	f1a0 0210 	sub.w	r2, r0, #16
 801aae8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801aaec:	f7ff ff76 	bl	801a9dc <__hexdig_fun>
 801aaf0:	f100 3cff 	add.w	ip, r0, #4294967295
 801aaf4:	fa5f fc8c 	uxtb.w	ip, ip
 801aaf8:	f1bc 0f18 	cmp.w	ip, #24
 801aafc:	d91d      	bls.n	801ab3a <__gethex+0x132>
 801aafe:	f1bb 0f00 	cmp.w	fp, #0
 801ab02:	d000      	beq.n	801ab06 <__gethex+0xfe>
 801ab04:	4252      	negs	r2, r2
 801ab06:	4416      	add	r6, r2
 801ab08:	f8ca 1000 	str.w	r1, [sl]
 801ab0c:	b1dc      	cbz	r4, 801ab46 <__gethex+0x13e>
 801ab0e:	9b01      	ldr	r3, [sp, #4]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	bf14      	ite	ne
 801ab14:	f04f 0800 	movne.w	r8, #0
 801ab18:	f04f 0806 	moveq.w	r8, #6
 801ab1c:	4640      	mov	r0, r8
 801ab1e:	b005      	add	sp, #20
 801ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab24:	4645      	mov	r5, r8
 801ab26:	4626      	mov	r6, r4
 801ab28:	2401      	movs	r4, #1
 801ab2a:	e7c7      	b.n	801aabc <__gethex+0xb4>
 801ab2c:	f04f 0b00 	mov.w	fp, #0
 801ab30:	1ca9      	adds	r1, r5, #2
 801ab32:	e7d0      	b.n	801aad6 <__gethex+0xce>
 801ab34:	f04f 0b01 	mov.w	fp, #1
 801ab38:	e7fa      	b.n	801ab30 <__gethex+0x128>
 801ab3a:	230a      	movs	r3, #10
 801ab3c:	fb03 0002 	mla	r0, r3, r2, r0
 801ab40:	e7d0      	b.n	801aae4 <__gethex+0xdc>
 801ab42:	4629      	mov	r1, r5
 801ab44:	e7e0      	b.n	801ab08 <__gethex+0x100>
 801ab46:	eba5 0308 	sub.w	r3, r5, r8
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	4621      	mov	r1, r4
 801ab4e:	2b07      	cmp	r3, #7
 801ab50:	dc0a      	bgt.n	801ab68 <__gethex+0x160>
 801ab52:	4648      	mov	r0, r9
 801ab54:	f7fd ff76 	bl	8018a44 <_Balloc>
 801ab58:	4604      	mov	r4, r0
 801ab5a:	b940      	cbnz	r0, 801ab6e <__gethex+0x166>
 801ab5c:	4b61      	ldr	r3, [pc, #388]	; (801ace4 <__gethex+0x2dc>)
 801ab5e:	4602      	mov	r2, r0
 801ab60:	21e4      	movs	r1, #228	; 0xe4
 801ab62:	4861      	ldr	r0, [pc, #388]	; (801ace8 <__gethex+0x2e0>)
 801ab64:	f7fb fe2a 	bl	80167bc <__assert_func>
 801ab68:	3101      	adds	r1, #1
 801ab6a:	105b      	asrs	r3, r3, #1
 801ab6c:	e7ef      	b.n	801ab4e <__gethex+0x146>
 801ab6e:	f100 0a14 	add.w	sl, r0, #20
 801ab72:	2300      	movs	r3, #0
 801ab74:	495a      	ldr	r1, [pc, #360]	; (801ace0 <__gethex+0x2d8>)
 801ab76:	f8cd a004 	str.w	sl, [sp, #4]
 801ab7a:	469b      	mov	fp, r3
 801ab7c:	45a8      	cmp	r8, r5
 801ab7e:	d342      	bcc.n	801ac06 <__gethex+0x1fe>
 801ab80:	9801      	ldr	r0, [sp, #4]
 801ab82:	f840 bb04 	str.w	fp, [r0], #4
 801ab86:	eba0 000a 	sub.w	r0, r0, sl
 801ab8a:	1080      	asrs	r0, r0, #2
 801ab8c:	6120      	str	r0, [r4, #16]
 801ab8e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801ab92:	4658      	mov	r0, fp
 801ab94:	f7fe f848 	bl	8018c28 <__hi0bits>
 801ab98:	683d      	ldr	r5, [r7, #0]
 801ab9a:	eba8 0000 	sub.w	r0, r8, r0
 801ab9e:	42a8      	cmp	r0, r5
 801aba0:	dd59      	ble.n	801ac56 <__gethex+0x24e>
 801aba2:	eba0 0805 	sub.w	r8, r0, r5
 801aba6:	4641      	mov	r1, r8
 801aba8:	4620      	mov	r0, r4
 801abaa:	f7fe fbd7 	bl	801935c <__any_on>
 801abae:	4683      	mov	fp, r0
 801abb0:	b1b8      	cbz	r0, 801abe2 <__gethex+0x1da>
 801abb2:	f108 33ff 	add.w	r3, r8, #4294967295
 801abb6:	1159      	asrs	r1, r3, #5
 801abb8:	f003 021f 	and.w	r2, r3, #31
 801abbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801abc0:	f04f 0b01 	mov.w	fp, #1
 801abc4:	fa0b f202 	lsl.w	r2, fp, r2
 801abc8:	420a      	tst	r2, r1
 801abca:	d00a      	beq.n	801abe2 <__gethex+0x1da>
 801abcc:	455b      	cmp	r3, fp
 801abce:	dd06      	ble.n	801abde <__gethex+0x1d6>
 801abd0:	f1a8 0102 	sub.w	r1, r8, #2
 801abd4:	4620      	mov	r0, r4
 801abd6:	f7fe fbc1 	bl	801935c <__any_on>
 801abda:	2800      	cmp	r0, #0
 801abdc:	d138      	bne.n	801ac50 <__gethex+0x248>
 801abde:	f04f 0b02 	mov.w	fp, #2
 801abe2:	4641      	mov	r1, r8
 801abe4:	4620      	mov	r0, r4
 801abe6:	f7ff fea7 	bl	801a938 <rshift>
 801abea:	4446      	add	r6, r8
 801abec:	68bb      	ldr	r3, [r7, #8]
 801abee:	42b3      	cmp	r3, r6
 801abf0:	da41      	bge.n	801ac76 <__gethex+0x26e>
 801abf2:	4621      	mov	r1, r4
 801abf4:	4648      	mov	r0, r9
 801abf6:	f7fd ff65 	bl	8018ac4 <_Bfree>
 801abfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801abfc:	2300      	movs	r3, #0
 801abfe:	6013      	str	r3, [r2, #0]
 801ac00:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ac04:	e78a      	b.n	801ab1c <__gethex+0x114>
 801ac06:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ac0a:	2a2e      	cmp	r2, #46	; 0x2e
 801ac0c:	d014      	beq.n	801ac38 <__gethex+0x230>
 801ac0e:	2b20      	cmp	r3, #32
 801ac10:	d106      	bne.n	801ac20 <__gethex+0x218>
 801ac12:	9b01      	ldr	r3, [sp, #4]
 801ac14:	f843 bb04 	str.w	fp, [r3], #4
 801ac18:	f04f 0b00 	mov.w	fp, #0
 801ac1c:	9301      	str	r3, [sp, #4]
 801ac1e:	465b      	mov	r3, fp
 801ac20:	7828      	ldrb	r0, [r5, #0]
 801ac22:	9303      	str	r3, [sp, #12]
 801ac24:	f7ff feda 	bl	801a9dc <__hexdig_fun>
 801ac28:	9b03      	ldr	r3, [sp, #12]
 801ac2a:	f000 000f 	and.w	r0, r0, #15
 801ac2e:	4098      	lsls	r0, r3
 801ac30:	ea4b 0b00 	orr.w	fp, fp, r0
 801ac34:	3304      	adds	r3, #4
 801ac36:	e7a1      	b.n	801ab7c <__gethex+0x174>
 801ac38:	45a8      	cmp	r8, r5
 801ac3a:	d8e8      	bhi.n	801ac0e <__gethex+0x206>
 801ac3c:	2201      	movs	r2, #1
 801ac3e:	4628      	mov	r0, r5
 801ac40:	9303      	str	r3, [sp, #12]
 801ac42:	f7fc ff7a 	bl	8017b3a <strncmp>
 801ac46:	4926      	ldr	r1, [pc, #152]	; (801ace0 <__gethex+0x2d8>)
 801ac48:	9b03      	ldr	r3, [sp, #12]
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	d1df      	bne.n	801ac0e <__gethex+0x206>
 801ac4e:	e795      	b.n	801ab7c <__gethex+0x174>
 801ac50:	f04f 0b03 	mov.w	fp, #3
 801ac54:	e7c5      	b.n	801abe2 <__gethex+0x1da>
 801ac56:	da0b      	bge.n	801ac70 <__gethex+0x268>
 801ac58:	eba5 0800 	sub.w	r8, r5, r0
 801ac5c:	4621      	mov	r1, r4
 801ac5e:	4642      	mov	r2, r8
 801ac60:	4648      	mov	r0, r9
 801ac62:	f7fe f949 	bl	8018ef8 <__lshift>
 801ac66:	eba6 0608 	sub.w	r6, r6, r8
 801ac6a:	4604      	mov	r4, r0
 801ac6c:	f100 0a14 	add.w	sl, r0, #20
 801ac70:	f04f 0b00 	mov.w	fp, #0
 801ac74:	e7ba      	b.n	801abec <__gethex+0x1e4>
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	42b3      	cmp	r3, r6
 801ac7a:	dd73      	ble.n	801ad64 <__gethex+0x35c>
 801ac7c:	1b9e      	subs	r6, r3, r6
 801ac7e:	42b5      	cmp	r5, r6
 801ac80:	dc34      	bgt.n	801acec <__gethex+0x2e4>
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	2b02      	cmp	r3, #2
 801ac86:	d023      	beq.n	801acd0 <__gethex+0x2c8>
 801ac88:	2b03      	cmp	r3, #3
 801ac8a:	d025      	beq.n	801acd8 <__gethex+0x2d0>
 801ac8c:	2b01      	cmp	r3, #1
 801ac8e:	d115      	bne.n	801acbc <__gethex+0x2b4>
 801ac90:	42b5      	cmp	r5, r6
 801ac92:	d113      	bne.n	801acbc <__gethex+0x2b4>
 801ac94:	2d01      	cmp	r5, #1
 801ac96:	d10b      	bne.n	801acb0 <__gethex+0x2a8>
 801ac98:	9a02      	ldr	r2, [sp, #8]
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	6013      	str	r3, [r2, #0]
 801ac9e:	2301      	movs	r3, #1
 801aca0:	6123      	str	r3, [r4, #16]
 801aca2:	f8ca 3000 	str.w	r3, [sl]
 801aca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aca8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801acac:	601c      	str	r4, [r3, #0]
 801acae:	e735      	b.n	801ab1c <__gethex+0x114>
 801acb0:	1e69      	subs	r1, r5, #1
 801acb2:	4620      	mov	r0, r4
 801acb4:	f7fe fb52 	bl	801935c <__any_on>
 801acb8:	2800      	cmp	r0, #0
 801acba:	d1ed      	bne.n	801ac98 <__gethex+0x290>
 801acbc:	4621      	mov	r1, r4
 801acbe:	4648      	mov	r0, r9
 801acc0:	f7fd ff00 	bl	8018ac4 <_Bfree>
 801acc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801acc6:	2300      	movs	r3, #0
 801acc8:	6013      	str	r3, [r2, #0]
 801acca:	f04f 0850 	mov.w	r8, #80	; 0x50
 801acce:	e725      	b.n	801ab1c <__gethex+0x114>
 801acd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d1f2      	bne.n	801acbc <__gethex+0x2b4>
 801acd6:	e7df      	b.n	801ac98 <__gethex+0x290>
 801acd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d1dc      	bne.n	801ac98 <__gethex+0x290>
 801acde:	e7ed      	b.n	801acbc <__gethex+0x2b4>
 801ace0:	0801caec 	.word	0x0801caec
 801ace4:	0801c981 	.word	0x0801c981
 801ace8:	0801cc5a 	.word	0x0801cc5a
 801acec:	f106 38ff 	add.w	r8, r6, #4294967295
 801acf0:	f1bb 0f00 	cmp.w	fp, #0
 801acf4:	d133      	bne.n	801ad5e <__gethex+0x356>
 801acf6:	f1b8 0f00 	cmp.w	r8, #0
 801acfa:	d004      	beq.n	801ad06 <__gethex+0x2fe>
 801acfc:	4641      	mov	r1, r8
 801acfe:	4620      	mov	r0, r4
 801ad00:	f7fe fb2c 	bl	801935c <__any_on>
 801ad04:	4683      	mov	fp, r0
 801ad06:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ad10:	f008 081f 	and.w	r8, r8, #31
 801ad14:	fa03 f308 	lsl.w	r3, r3, r8
 801ad18:	4213      	tst	r3, r2
 801ad1a:	4631      	mov	r1, r6
 801ad1c:	4620      	mov	r0, r4
 801ad1e:	bf18      	it	ne
 801ad20:	f04b 0b02 	orrne.w	fp, fp, #2
 801ad24:	1bad      	subs	r5, r5, r6
 801ad26:	f7ff fe07 	bl	801a938 <rshift>
 801ad2a:	687e      	ldr	r6, [r7, #4]
 801ad2c:	f04f 0802 	mov.w	r8, #2
 801ad30:	f1bb 0f00 	cmp.w	fp, #0
 801ad34:	d04a      	beq.n	801adcc <__gethex+0x3c4>
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	2b02      	cmp	r3, #2
 801ad3a:	d016      	beq.n	801ad6a <__gethex+0x362>
 801ad3c:	2b03      	cmp	r3, #3
 801ad3e:	d018      	beq.n	801ad72 <__gethex+0x36a>
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d109      	bne.n	801ad58 <__gethex+0x350>
 801ad44:	f01b 0f02 	tst.w	fp, #2
 801ad48:	d006      	beq.n	801ad58 <__gethex+0x350>
 801ad4a:	f8da 3000 	ldr.w	r3, [sl]
 801ad4e:	ea4b 0b03 	orr.w	fp, fp, r3
 801ad52:	f01b 0f01 	tst.w	fp, #1
 801ad56:	d10f      	bne.n	801ad78 <__gethex+0x370>
 801ad58:	f048 0810 	orr.w	r8, r8, #16
 801ad5c:	e036      	b.n	801adcc <__gethex+0x3c4>
 801ad5e:	f04f 0b01 	mov.w	fp, #1
 801ad62:	e7d0      	b.n	801ad06 <__gethex+0x2fe>
 801ad64:	f04f 0801 	mov.w	r8, #1
 801ad68:	e7e2      	b.n	801ad30 <__gethex+0x328>
 801ad6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad6c:	f1c3 0301 	rsb	r3, r3, #1
 801ad70:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d0ef      	beq.n	801ad58 <__gethex+0x350>
 801ad78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ad7c:	f104 0214 	add.w	r2, r4, #20
 801ad80:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ad84:	9301      	str	r3, [sp, #4]
 801ad86:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	4694      	mov	ip, r2
 801ad8e:	f852 1b04 	ldr.w	r1, [r2], #4
 801ad92:	f1b1 3fff 	cmp.w	r1, #4294967295
 801ad96:	d01e      	beq.n	801add6 <__gethex+0x3ce>
 801ad98:	3101      	adds	r1, #1
 801ad9a:	f8cc 1000 	str.w	r1, [ip]
 801ad9e:	f1b8 0f02 	cmp.w	r8, #2
 801ada2:	f104 0214 	add.w	r2, r4, #20
 801ada6:	d13d      	bne.n	801ae24 <__gethex+0x41c>
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	3b01      	subs	r3, #1
 801adac:	42ab      	cmp	r3, r5
 801adae:	d10b      	bne.n	801adc8 <__gethex+0x3c0>
 801adb0:	1169      	asrs	r1, r5, #5
 801adb2:	2301      	movs	r3, #1
 801adb4:	f005 051f 	and.w	r5, r5, #31
 801adb8:	fa03 f505 	lsl.w	r5, r3, r5
 801adbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801adc0:	421d      	tst	r5, r3
 801adc2:	bf18      	it	ne
 801adc4:	f04f 0801 	movne.w	r8, #1
 801adc8:	f048 0820 	orr.w	r8, r8, #32
 801adcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adce:	601c      	str	r4, [r3, #0]
 801add0:	9b02      	ldr	r3, [sp, #8]
 801add2:	601e      	str	r6, [r3, #0]
 801add4:	e6a2      	b.n	801ab1c <__gethex+0x114>
 801add6:	4290      	cmp	r0, r2
 801add8:	f842 3c04 	str.w	r3, [r2, #-4]
 801addc:	d8d6      	bhi.n	801ad8c <__gethex+0x384>
 801adde:	68a2      	ldr	r2, [r4, #8]
 801ade0:	4593      	cmp	fp, r2
 801ade2:	db17      	blt.n	801ae14 <__gethex+0x40c>
 801ade4:	6861      	ldr	r1, [r4, #4]
 801ade6:	4648      	mov	r0, r9
 801ade8:	3101      	adds	r1, #1
 801adea:	f7fd fe2b 	bl	8018a44 <_Balloc>
 801adee:	4682      	mov	sl, r0
 801adf0:	b918      	cbnz	r0, 801adfa <__gethex+0x3f2>
 801adf2:	4b1b      	ldr	r3, [pc, #108]	; (801ae60 <__gethex+0x458>)
 801adf4:	4602      	mov	r2, r0
 801adf6:	2184      	movs	r1, #132	; 0x84
 801adf8:	e6b3      	b.n	801ab62 <__gethex+0x15a>
 801adfa:	6922      	ldr	r2, [r4, #16]
 801adfc:	3202      	adds	r2, #2
 801adfe:	f104 010c 	add.w	r1, r4, #12
 801ae02:	0092      	lsls	r2, r2, #2
 801ae04:	300c      	adds	r0, #12
 801ae06:	f7fc ff3a 	bl	8017c7e <memcpy>
 801ae0a:	4621      	mov	r1, r4
 801ae0c:	4648      	mov	r0, r9
 801ae0e:	f7fd fe59 	bl	8018ac4 <_Bfree>
 801ae12:	4654      	mov	r4, sl
 801ae14:	6922      	ldr	r2, [r4, #16]
 801ae16:	1c51      	adds	r1, r2, #1
 801ae18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ae1c:	6121      	str	r1, [r4, #16]
 801ae1e:	2101      	movs	r1, #1
 801ae20:	6151      	str	r1, [r2, #20]
 801ae22:	e7bc      	b.n	801ad9e <__gethex+0x396>
 801ae24:	6921      	ldr	r1, [r4, #16]
 801ae26:	4559      	cmp	r1, fp
 801ae28:	dd0b      	ble.n	801ae42 <__gethex+0x43a>
 801ae2a:	2101      	movs	r1, #1
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f7ff fd83 	bl	801a938 <rshift>
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	3601      	adds	r6, #1
 801ae36:	42b3      	cmp	r3, r6
 801ae38:	f6ff aedb 	blt.w	801abf2 <__gethex+0x1ea>
 801ae3c:	f04f 0801 	mov.w	r8, #1
 801ae40:	e7c2      	b.n	801adc8 <__gethex+0x3c0>
 801ae42:	f015 051f 	ands.w	r5, r5, #31
 801ae46:	d0f9      	beq.n	801ae3c <__gethex+0x434>
 801ae48:	9b01      	ldr	r3, [sp, #4]
 801ae4a:	441a      	add	r2, r3
 801ae4c:	f1c5 0520 	rsb	r5, r5, #32
 801ae50:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ae54:	f7fd fee8 	bl	8018c28 <__hi0bits>
 801ae58:	42a8      	cmp	r0, r5
 801ae5a:	dbe6      	blt.n	801ae2a <__gethex+0x422>
 801ae5c:	e7ee      	b.n	801ae3c <__gethex+0x434>
 801ae5e:	bf00      	nop
 801ae60:	0801c981 	.word	0x0801c981

0801ae64 <L_shift>:
 801ae64:	f1c2 0208 	rsb	r2, r2, #8
 801ae68:	0092      	lsls	r2, r2, #2
 801ae6a:	b570      	push	{r4, r5, r6, lr}
 801ae6c:	f1c2 0620 	rsb	r6, r2, #32
 801ae70:	6843      	ldr	r3, [r0, #4]
 801ae72:	6804      	ldr	r4, [r0, #0]
 801ae74:	fa03 f506 	lsl.w	r5, r3, r6
 801ae78:	432c      	orrs	r4, r5
 801ae7a:	40d3      	lsrs	r3, r2
 801ae7c:	6004      	str	r4, [r0, #0]
 801ae7e:	f840 3f04 	str.w	r3, [r0, #4]!
 801ae82:	4288      	cmp	r0, r1
 801ae84:	d3f4      	bcc.n	801ae70 <L_shift+0xc>
 801ae86:	bd70      	pop	{r4, r5, r6, pc}

0801ae88 <__match>:
 801ae88:	b530      	push	{r4, r5, lr}
 801ae8a:	6803      	ldr	r3, [r0, #0]
 801ae8c:	3301      	adds	r3, #1
 801ae8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae92:	b914      	cbnz	r4, 801ae9a <__match+0x12>
 801ae94:	6003      	str	r3, [r0, #0]
 801ae96:	2001      	movs	r0, #1
 801ae98:	bd30      	pop	{r4, r5, pc}
 801ae9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801aea2:	2d19      	cmp	r5, #25
 801aea4:	bf98      	it	ls
 801aea6:	3220      	addls	r2, #32
 801aea8:	42a2      	cmp	r2, r4
 801aeaa:	d0f0      	beq.n	801ae8e <__match+0x6>
 801aeac:	2000      	movs	r0, #0
 801aeae:	e7f3      	b.n	801ae98 <__match+0x10>

0801aeb0 <__hexnan>:
 801aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb4:	680b      	ldr	r3, [r1, #0]
 801aeb6:	6801      	ldr	r1, [r0, #0]
 801aeb8:	115e      	asrs	r6, r3, #5
 801aeba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801aebe:	f013 031f 	ands.w	r3, r3, #31
 801aec2:	b087      	sub	sp, #28
 801aec4:	bf18      	it	ne
 801aec6:	3604      	addne	r6, #4
 801aec8:	2500      	movs	r5, #0
 801aeca:	1f37      	subs	r7, r6, #4
 801aecc:	4682      	mov	sl, r0
 801aece:	4690      	mov	r8, r2
 801aed0:	9301      	str	r3, [sp, #4]
 801aed2:	f846 5c04 	str.w	r5, [r6, #-4]
 801aed6:	46b9      	mov	r9, r7
 801aed8:	463c      	mov	r4, r7
 801aeda:	9502      	str	r5, [sp, #8]
 801aedc:	46ab      	mov	fp, r5
 801aede:	784a      	ldrb	r2, [r1, #1]
 801aee0:	1c4b      	adds	r3, r1, #1
 801aee2:	9303      	str	r3, [sp, #12]
 801aee4:	b342      	cbz	r2, 801af38 <__hexnan+0x88>
 801aee6:	4610      	mov	r0, r2
 801aee8:	9105      	str	r1, [sp, #20]
 801aeea:	9204      	str	r2, [sp, #16]
 801aeec:	f7ff fd76 	bl	801a9dc <__hexdig_fun>
 801aef0:	2800      	cmp	r0, #0
 801aef2:	d14f      	bne.n	801af94 <__hexnan+0xe4>
 801aef4:	9a04      	ldr	r2, [sp, #16]
 801aef6:	9905      	ldr	r1, [sp, #20]
 801aef8:	2a20      	cmp	r2, #32
 801aefa:	d818      	bhi.n	801af2e <__hexnan+0x7e>
 801aefc:	9b02      	ldr	r3, [sp, #8]
 801aefe:	459b      	cmp	fp, r3
 801af00:	dd13      	ble.n	801af2a <__hexnan+0x7a>
 801af02:	454c      	cmp	r4, r9
 801af04:	d206      	bcs.n	801af14 <__hexnan+0x64>
 801af06:	2d07      	cmp	r5, #7
 801af08:	dc04      	bgt.n	801af14 <__hexnan+0x64>
 801af0a:	462a      	mov	r2, r5
 801af0c:	4649      	mov	r1, r9
 801af0e:	4620      	mov	r0, r4
 801af10:	f7ff ffa8 	bl	801ae64 <L_shift>
 801af14:	4544      	cmp	r4, r8
 801af16:	d950      	bls.n	801afba <__hexnan+0x10a>
 801af18:	2300      	movs	r3, #0
 801af1a:	f1a4 0904 	sub.w	r9, r4, #4
 801af1e:	f844 3c04 	str.w	r3, [r4, #-4]
 801af22:	f8cd b008 	str.w	fp, [sp, #8]
 801af26:	464c      	mov	r4, r9
 801af28:	461d      	mov	r5, r3
 801af2a:	9903      	ldr	r1, [sp, #12]
 801af2c:	e7d7      	b.n	801aede <__hexnan+0x2e>
 801af2e:	2a29      	cmp	r2, #41	; 0x29
 801af30:	d155      	bne.n	801afde <__hexnan+0x12e>
 801af32:	3102      	adds	r1, #2
 801af34:	f8ca 1000 	str.w	r1, [sl]
 801af38:	f1bb 0f00 	cmp.w	fp, #0
 801af3c:	d04f      	beq.n	801afde <__hexnan+0x12e>
 801af3e:	454c      	cmp	r4, r9
 801af40:	d206      	bcs.n	801af50 <__hexnan+0xa0>
 801af42:	2d07      	cmp	r5, #7
 801af44:	dc04      	bgt.n	801af50 <__hexnan+0xa0>
 801af46:	462a      	mov	r2, r5
 801af48:	4649      	mov	r1, r9
 801af4a:	4620      	mov	r0, r4
 801af4c:	f7ff ff8a 	bl	801ae64 <L_shift>
 801af50:	4544      	cmp	r4, r8
 801af52:	d934      	bls.n	801afbe <__hexnan+0x10e>
 801af54:	f1a8 0204 	sub.w	r2, r8, #4
 801af58:	4623      	mov	r3, r4
 801af5a:	f853 1b04 	ldr.w	r1, [r3], #4
 801af5e:	f842 1f04 	str.w	r1, [r2, #4]!
 801af62:	429f      	cmp	r7, r3
 801af64:	d2f9      	bcs.n	801af5a <__hexnan+0xaa>
 801af66:	1b3b      	subs	r3, r7, r4
 801af68:	f023 0303 	bic.w	r3, r3, #3
 801af6c:	3304      	adds	r3, #4
 801af6e:	3e03      	subs	r6, #3
 801af70:	3401      	adds	r4, #1
 801af72:	42a6      	cmp	r6, r4
 801af74:	bf38      	it	cc
 801af76:	2304      	movcc	r3, #4
 801af78:	4443      	add	r3, r8
 801af7a:	2200      	movs	r2, #0
 801af7c:	f843 2b04 	str.w	r2, [r3], #4
 801af80:	429f      	cmp	r7, r3
 801af82:	d2fb      	bcs.n	801af7c <__hexnan+0xcc>
 801af84:	683b      	ldr	r3, [r7, #0]
 801af86:	b91b      	cbnz	r3, 801af90 <__hexnan+0xe0>
 801af88:	4547      	cmp	r7, r8
 801af8a:	d126      	bne.n	801afda <__hexnan+0x12a>
 801af8c:	2301      	movs	r3, #1
 801af8e:	603b      	str	r3, [r7, #0]
 801af90:	2005      	movs	r0, #5
 801af92:	e025      	b.n	801afe0 <__hexnan+0x130>
 801af94:	3501      	adds	r5, #1
 801af96:	2d08      	cmp	r5, #8
 801af98:	f10b 0b01 	add.w	fp, fp, #1
 801af9c:	dd06      	ble.n	801afac <__hexnan+0xfc>
 801af9e:	4544      	cmp	r4, r8
 801afa0:	d9c3      	bls.n	801af2a <__hexnan+0x7a>
 801afa2:	2300      	movs	r3, #0
 801afa4:	f844 3c04 	str.w	r3, [r4, #-4]
 801afa8:	2501      	movs	r5, #1
 801afaa:	3c04      	subs	r4, #4
 801afac:	6822      	ldr	r2, [r4, #0]
 801afae:	f000 000f 	and.w	r0, r0, #15
 801afb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801afb6:	6020      	str	r0, [r4, #0]
 801afb8:	e7b7      	b.n	801af2a <__hexnan+0x7a>
 801afba:	2508      	movs	r5, #8
 801afbc:	e7b5      	b.n	801af2a <__hexnan+0x7a>
 801afbe:	9b01      	ldr	r3, [sp, #4]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d0df      	beq.n	801af84 <__hexnan+0xd4>
 801afc4:	f1c3 0320 	rsb	r3, r3, #32
 801afc8:	f04f 32ff 	mov.w	r2, #4294967295
 801afcc:	40da      	lsrs	r2, r3
 801afce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801afd2:	4013      	ands	r3, r2
 801afd4:	f846 3c04 	str.w	r3, [r6, #-4]
 801afd8:	e7d4      	b.n	801af84 <__hexnan+0xd4>
 801afda:	3f04      	subs	r7, #4
 801afdc:	e7d2      	b.n	801af84 <__hexnan+0xd4>
 801afde:	2004      	movs	r0, #4
 801afe0:	b007      	add	sp, #28
 801afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afe6 <__ascii_mbtowc>:
 801afe6:	b082      	sub	sp, #8
 801afe8:	b901      	cbnz	r1, 801afec <__ascii_mbtowc+0x6>
 801afea:	a901      	add	r1, sp, #4
 801afec:	b142      	cbz	r2, 801b000 <__ascii_mbtowc+0x1a>
 801afee:	b14b      	cbz	r3, 801b004 <__ascii_mbtowc+0x1e>
 801aff0:	7813      	ldrb	r3, [r2, #0]
 801aff2:	600b      	str	r3, [r1, #0]
 801aff4:	7812      	ldrb	r2, [r2, #0]
 801aff6:	1e10      	subs	r0, r2, #0
 801aff8:	bf18      	it	ne
 801affa:	2001      	movne	r0, #1
 801affc:	b002      	add	sp, #8
 801affe:	4770      	bx	lr
 801b000:	4610      	mov	r0, r2
 801b002:	e7fb      	b.n	801affc <__ascii_mbtowc+0x16>
 801b004:	f06f 0001 	mvn.w	r0, #1
 801b008:	e7f8      	b.n	801affc <__ascii_mbtowc+0x16>

0801b00a <_realloc_r>:
 801b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b00e:	4680      	mov	r8, r0
 801b010:	4614      	mov	r4, r2
 801b012:	460e      	mov	r6, r1
 801b014:	b921      	cbnz	r1, 801b020 <_realloc_r+0x16>
 801b016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b01a:	4611      	mov	r1, r2
 801b01c:	f7fb bc3a 	b.w	8016894 <_malloc_r>
 801b020:	b92a      	cbnz	r2, 801b02e <_realloc_r+0x24>
 801b022:	f7fd fcc3 	bl	80189ac <_free_r>
 801b026:	4625      	mov	r5, r4
 801b028:	4628      	mov	r0, r5
 801b02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b02e:	f000 f828 	bl	801b082 <_malloc_usable_size_r>
 801b032:	4284      	cmp	r4, r0
 801b034:	4607      	mov	r7, r0
 801b036:	d802      	bhi.n	801b03e <_realloc_r+0x34>
 801b038:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b03c:	d812      	bhi.n	801b064 <_realloc_r+0x5a>
 801b03e:	4621      	mov	r1, r4
 801b040:	4640      	mov	r0, r8
 801b042:	f7fb fc27 	bl	8016894 <_malloc_r>
 801b046:	4605      	mov	r5, r0
 801b048:	2800      	cmp	r0, #0
 801b04a:	d0ed      	beq.n	801b028 <_realloc_r+0x1e>
 801b04c:	42bc      	cmp	r4, r7
 801b04e:	4622      	mov	r2, r4
 801b050:	4631      	mov	r1, r6
 801b052:	bf28      	it	cs
 801b054:	463a      	movcs	r2, r7
 801b056:	f7fc fe12 	bl	8017c7e <memcpy>
 801b05a:	4631      	mov	r1, r6
 801b05c:	4640      	mov	r0, r8
 801b05e:	f7fd fca5 	bl	80189ac <_free_r>
 801b062:	e7e1      	b.n	801b028 <_realloc_r+0x1e>
 801b064:	4635      	mov	r5, r6
 801b066:	e7df      	b.n	801b028 <_realloc_r+0x1e>

0801b068 <__ascii_wctomb>:
 801b068:	b149      	cbz	r1, 801b07e <__ascii_wctomb+0x16>
 801b06a:	2aff      	cmp	r2, #255	; 0xff
 801b06c:	bf85      	ittet	hi
 801b06e:	238a      	movhi	r3, #138	; 0x8a
 801b070:	6003      	strhi	r3, [r0, #0]
 801b072:	700a      	strbls	r2, [r1, #0]
 801b074:	f04f 30ff 	movhi.w	r0, #4294967295
 801b078:	bf98      	it	ls
 801b07a:	2001      	movls	r0, #1
 801b07c:	4770      	bx	lr
 801b07e:	4608      	mov	r0, r1
 801b080:	4770      	bx	lr

0801b082 <_malloc_usable_size_r>:
 801b082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b086:	1f18      	subs	r0, r3, #4
 801b088:	2b00      	cmp	r3, #0
 801b08a:	bfbc      	itt	lt
 801b08c:	580b      	ldrlt	r3, [r1, r0]
 801b08e:	18c0      	addlt	r0, r0, r3
 801b090:	4770      	bx	lr
	...

0801b094 <pow>:
 801b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b096:	ed2d 8b02 	vpush	{d8}
 801b09a:	eeb0 8a40 	vmov.f32	s16, s0
 801b09e:	eef0 8a60 	vmov.f32	s17, s1
 801b0a2:	ec55 4b11 	vmov	r4, r5, d1
 801b0a6:	f000 f94b 	bl	801b340 <__ieee754_pow>
 801b0aa:	4622      	mov	r2, r4
 801b0ac:	462b      	mov	r3, r5
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	4629      	mov	r1, r5
 801b0b2:	ec57 6b10 	vmov	r6, r7, d0
 801b0b6:	f7e5 fd39 	bl	8000b2c <__aeabi_dcmpun>
 801b0ba:	2800      	cmp	r0, #0
 801b0bc:	d13b      	bne.n	801b136 <pow+0xa2>
 801b0be:	ec51 0b18 	vmov	r0, r1, d8
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	f7e5 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 801b0ca:	b1b8      	cbz	r0, 801b0fc <pow+0x68>
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	4620      	mov	r0, r4
 801b0d2:	4629      	mov	r1, r5
 801b0d4:	f7e5 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 801b0d8:	2800      	cmp	r0, #0
 801b0da:	d146      	bne.n	801b16a <pow+0xd6>
 801b0dc:	ec45 4b10 	vmov	d0, r4, r5
 801b0e0:	f000 f848 	bl	801b174 <finite>
 801b0e4:	b338      	cbz	r0, 801b136 <pow+0xa2>
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	4629      	mov	r1, r5
 801b0ee:	f7e5 fcf5 	bl	8000adc <__aeabi_dcmplt>
 801b0f2:	b300      	cbz	r0, 801b136 <pow+0xa2>
 801b0f4:	f7fc fd8e 	bl	8017c14 <__errno>
 801b0f8:	2322      	movs	r3, #34	; 0x22
 801b0fa:	e01b      	b.n	801b134 <pow+0xa0>
 801b0fc:	ec47 6b10 	vmov	d0, r6, r7
 801b100:	f000 f838 	bl	801b174 <finite>
 801b104:	b9e0      	cbnz	r0, 801b140 <pow+0xac>
 801b106:	eeb0 0a48 	vmov.f32	s0, s16
 801b10a:	eef0 0a68 	vmov.f32	s1, s17
 801b10e:	f000 f831 	bl	801b174 <finite>
 801b112:	b1a8      	cbz	r0, 801b140 <pow+0xac>
 801b114:	ec45 4b10 	vmov	d0, r4, r5
 801b118:	f000 f82c 	bl	801b174 <finite>
 801b11c:	b180      	cbz	r0, 801b140 <pow+0xac>
 801b11e:	4632      	mov	r2, r6
 801b120:	463b      	mov	r3, r7
 801b122:	4630      	mov	r0, r6
 801b124:	4639      	mov	r1, r7
 801b126:	f7e5 fd01 	bl	8000b2c <__aeabi_dcmpun>
 801b12a:	2800      	cmp	r0, #0
 801b12c:	d0e2      	beq.n	801b0f4 <pow+0x60>
 801b12e:	f7fc fd71 	bl	8017c14 <__errno>
 801b132:	2321      	movs	r3, #33	; 0x21
 801b134:	6003      	str	r3, [r0, #0]
 801b136:	ecbd 8b02 	vpop	{d8}
 801b13a:	ec47 6b10 	vmov	d0, r6, r7
 801b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b140:	2200      	movs	r2, #0
 801b142:	2300      	movs	r3, #0
 801b144:	4630      	mov	r0, r6
 801b146:	4639      	mov	r1, r7
 801b148:	f7e5 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 801b14c:	2800      	cmp	r0, #0
 801b14e:	d0f2      	beq.n	801b136 <pow+0xa2>
 801b150:	eeb0 0a48 	vmov.f32	s0, s16
 801b154:	eef0 0a68 	vmov.f32	s1, s17
 801b158:	f000 f80c 	bl	801b174 <finite>
 801b15c:	2800      	cmp	r0, #0
 801b15e:	d0ea      	beq.n	801b136 <pow+0xa2>
 801b160:	ec45 4b10 	vmov	d0, r4, r5
 801b164:	f000 f806 	bl	801b174 <finite>
 801b168:	e7c3      	b.n	801b0f2 <pow+0x5e>
 801b16a:	4f01      	ldr	r7, [pc, #4]	; (801b170 <pow+0xdc>)
 801b16c:	2600      	movs	r6, #0
 801b16e:	e7e2      	b.n	801b136 <pow+0xa2>
 801b170:	3ff00000 	.word	0x3ff00000

0801b174 <finite>:
 801b174:	b082      	sub	sp, #8
 801b176:	ed8d 0b00 	vstr	d0, [sp]
 801b17a:	9801      	ldr	r0, [sp, #4]
 801b17c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801b180:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b184:	0fc0      	lsrs	r0, r0, #31
 801b186:	b002      	add	sp, #8
 801b188:	4770      	bx	lr
	...

0801b18c <__ieee754_sqrt>:
 801b18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b190:	ec55 4b10 	vmov	r4, r5, d0
 801b194:	4e67      	ldr	r6, [pc, #412]	; (801b334 <__ieee754_sqrt+0x1a8>)
 801b196:	43ae      	bics	r6, r5
 801b198:	ee10 0a10 	vmov	r0, s0
 801b19c:	ee10 2a10 	vmov	r2, s0
 801b1a0:	4629      	mov	r1, r5
 801b1a2:	462b      	mov	r3, r5
 801b1a4:	d10d      	bne.n	801b1c2 <__ieee754_sqrt+0x36>
 801b1a6:	f7e5 fa27 	bl	80005f8 <__aeabi_dmul>
 801b1aa:	4602      	mov	r2, r0
 801b1ac:	460b      	mov	r3, r1
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	4629      	mov	r1, r5
 801b1b2:	f7e5 f86b 	bl	800028c <__adddf3>
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	460d      	mov	r5, r1
 801b1ba:	ec45 4b10 	vmov	d0, r4, r5
 801b1be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1c2:	2d00      	cmp	r5, #0
 801b1c4:	dc0b      	bgt.n	801b1de <__ieee754_sqrt+0x52>
 801b1c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b1ca:	4326      	orrs	r6, r4
 801b1cc:	d0f5      	beq.n	801b1ba <__ieee754_sqrt+0x2e>
 801b1ce:	b135      	cbz	r5, 801b1de <__ieee754_sqrt+0x52>
 801b1d0:	f7e5 f85a 	bl	8000288 <__aeabi_dsub>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	f7e5 fb38 	bl	800084c <__aeabi_ddiv>
 801b1dc:	e7eb      	b.n	801b1b6 <__ieee754_sqrt+0x2a>
 801b1de:	1509      	asrs	r1, r1, #20
 801b1e0:	f000 808d 	beq.w	801b2fe <__ieee754_sqrt+0x172>
 801b1e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b1e8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801b1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b1f0:	07c9      	lsls	r1, r1, #31
 801b1f2:	bf5c      	itt	pl
 801b1f4:	005b      	lslpl	r3, r3, #1
 801b1f6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801b1fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b1fe:	bf58      	it	pl
 801b200:	0052      	lslpl	r2, r2, #1
 801b202:	2500      	movs	r5, #0
 801b204:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b208:	1076      	asrs	r6, r6, #1
 801b20a:	0052      	lsls	r2, r2, #1
 801b20c:	f04f 0e16 	mov.w	lr, #22
 801b210:	46ac      	mov	ip, r5
 801b212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b216:	eb0c 0001 	add.w	r0, ip, r1
 801b21a:	4298      	cmp	r0, r3
 801b21c:	bfde      	ittt	le
 801b21e:	1a1b      	suble	r3, r3, r0
 801b220:	eb00 0c01 	addle.w	ip, r0, r1
 801b224:	186d      	addle	r5, r5, r1
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	f1be 0e01 	subs.w	lr, lr, #1
 801b22c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b230:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b234:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b238:	d1ed      	bne.n	801b216 <__ieee754_sqrt+0x8a>
 801b23a:	4674      	mov	r4, lr
 801b23c:	2720      	movs	r7, #32
 801b23e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b242:	4563      	cmp	r3, ip
 801b244:	eb01 000e 	add.w	r0, r1, lr
 801b248:	dc02      	bgt.n	801b250 <__ieee754_sqrt+0xc4>
 801b24a:	d113      	bne.n	801b274 <__ieee754_sqrt+0xe8>
 801b24c:	4290      	cmp	r0, r2
 801b24e:	d811      	bhi.n	801b274 <__ieee754_sqrt+0xe8>
 801b250:	2800      	cmp	r0, #0
 801b252:	eb00 0e01 	add.w	lr, r0, r1
 801b256:	da57      	bge.n	801b308 <__ieee754_sqrt+0x17c>
 801b258:	f1be 0f00 	cmp.w	lr, #0
 801b25c:	db54      	blt.n	801b308 <__ieee754_sqrt+0x17c>
 801b25e:	f10c 0801 	add.w	r8, ip, #1
 801b262:	eba3 030c 	sub.w	r3, r3, ip
 801b266:	4290      	cmp	r0, r2
 801b268:	bf88      	it	hi
 801b26a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801b26e:	1a12      	subs	r2, r2, r0
 801b270:	440c      	add	r4, r1
 801b272:	46c4      	mov	ip, r8
 801b274:	005b      	lsls	r3, r3, #1
 801b276:	3f01      	subs	r7, #1
 801b278:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b27c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b280:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b284:	d1dd      	bne.n	801b242 <__ieee754_sqrt+0xb6>
 801b286:	4313      	orrs	r3, r2
 801b288:	d01b      	beq.n	801b2c2 <__ieee754_sqrt+0x136>
 801b28a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801b338 <__ieee754_sqrt+0x1ac>
 801b28e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801b33c <__ieee754_sqrt+0x1b0>
 801b292:	e9da 0100 	ldrd	r0, r1, [sl]
 801b296:	e9db 2300 	ldrd	r2, r3, [fp]
 801b29a:	f7e4 fff5 	bl	8000288 <__aeabi_dsub>
 801b29e:	e9da 8900 	ldrd	r8, r9, [sl]
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	460b      	mov	r3, r1
 801b2a6:	4640      	mov	r0, r8
 801b2a8:	4649      	mov	r1, r9
 801b2aa:	f7e5 fc21 	bl	8000af0 <__aeabi_dcmple>
 801b2ae:	b140      	cbz	r0, 801b2c2 <__ieee754_sqrt+0x136>
 801b2b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 801b2b4:	e9da 0100 	ldrd	r0, r1, [sl]
 801b2b8:	e9db 2300 	ldrd	r2, r3, [fp]
 801b2bc:	d126      	bne.n	801b30c <__ieee754_sqrt+0x180>
 801b2be:	3501      	adds	r5, #1
 801b2c0:	463c      	mov	r4, r7
 801b2c2:	106a      	asrs	r2, r5, #1
 801b2c4:	0863      	lsrs	r3, r4, #1
 801b2c6:	07e9      	lsls	r1, r5, #31
 801b2c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b2cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b2d0:	bf48      	it	mi
 801b2d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b2d6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801b2da:	461c      	mov	r4, r3
 801b2dc:	e76d      	b.n	801b1ba <__ieee754_sqrt+0x2e>
 801b2de:	0ad3      	lsrs	r3, r2, #11
 801b2e0:	3815      	subs	r0, #21
 801b2e2:	0552      	lsls	r2, r2, #21
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d0fa      	beq.n	801b2de <__ieee754_sqrt+0x152>
 801b2e8:	02dc      	lsls	r4, r3, #11
 801b2ea:	d50a      	bpl.n	801b302 <__ieee754_sqrt+0x176>
 801b2ec:	f1c1 0420 	rsb	r4, r1, #32
 801b2f0:	fa22 f404 	lsr.w	r4, r2, r4
 801b2f4:	1e4d      	subs	r5, r1, #1
 801b2f6:	408a      	lsls	r2, r1
 801b2f8:	4323      	orrs	r3, r4
 801b2fa:	1b41      	subs	r1, r0, r5
 801b2fc:	e772      	b.n	801b1e4 <__ieee754_sqrt+0x58>
 801b2fe:	4608      	mov	r0, r1
 801b300:	e7f0      	b.n	801b2e4 <__ieee754_sqrt+0x158>
 801b302:	005b      	lsls	r3, r3, #1
 801b304:	3101      	adds	r1, #1
 801b306:	e7ef      	b.n	801b2e8 <__ieee754_sqrt+0x15c>
 801b308:	46e0      	mov	r8, ip
 801b30a:	e7aa      	b.n	801b262 <__ieee754_sqrt+0xd6>
 801b30c:	f7e4 ffbe 	bl	800028c <__adddf3>
 801b310:	e9da 8900 	ldrd	r8, r9, [sl]
 801b314:	4602      	mov	r2, r0
 801b316:	460b      	mov	r3, r1
 801b318:	4640      	mov	r0, r8
 801b31a:	4649      	mov	r1, r9
 801b31c:	f7e5 fbde 	bl	8000adc <__aeabi_dcmplt>
 801b320:	b120      	cbz	r0, 801b32c <__ieee754_sqrt+0x1a0>
 801b322:	1ca0      	adds	r0, r4, #2
 801b324:	bf08      	it	eq
 801b326:	3501      	addeq	r5, #1
 801b328:	3402      	adds	r4, #2
 801b32a:	e7ca      	b.n	801b2c2 <__ieee754_sqrt+0x136>
 801b32c:	3401      	adds	r4, #1
 801b32e:	f024 0401 	bic.w	r4, r4, #1
 801b332:	e7c6      	b.n	801b2c2 <__ieee754_sqrt+0x136>
 801b334:	7ff00000 	.word	0x7ff00000
 801b338:	20000320 	.word	0x20000320
 801b33c:	20000328 	.word	0x20000328

0801b340 <__ieee754_pow>:
 801b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b344:	ed2d 8b06 	vpush	{d8-d10}
 801b348:	b089      	sub	sp, #36	; 0x24
 801b34a:	ed8d 1b00 	vstr	d1, [sp]
 801b34e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b352:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b356:	ea58 0102 	orrs.w	r1, r8, r2
 801b35a:	ec57 6b10 	vmov	r6, r7, d0
 801b35e:	d115      	bne.n	801b38c <__ieee754_pow+0x4c>
 801b360:	19b3      	adds	r3, r6, r6
 801b362:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801b366:	4152      	adcs	r2, r2
 801b368:	4299      	cmp	r1, r3
 801b36a:	4b89      	ldr	r3, [pc, #548]	; (801b590 <__ieee754_pow+0x250>)
 801b36c:	4193      	sbcs	r3, r2
 801b36e:	f080 84d1 	bcs.w	801bd14 <__ieee754_pow+0x9d4>
 801b372:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b376:	4630      	mov	r0, r6
 801b378:	4639      	mov	r1, r7
 801b37a:	f7e4 ff87 	bl	800028c <__adddf3>
 801b37e:	ec41 0b10 	vmov	d0, r0, r1
 801b382:	b009      	add	sp, #36	; 0x24
 801b384:	ecbd 8b06 	vpop	{d8-d10}
 801b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b38c:	4b81      	ldr	r3, [pc, #516]	; (801b594 <__ieee754_pow+0x254>)
 801b38e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b392:	429c      	cmp	r4, r3
 801b394:	ee10 aa10 	vmov	sl, s0
 801b398:	463d      	mov	r5, r7
 801b39a:	dc06      	bgt.n	801b3aa <__ieee754_pow+0x6a>
 801b39c:	d101      	bne.n	801b3a2 <__ieee754_pow+0x62>
 801b39e:	2e00      	cmp	r6, #0
 801b3a0:	d1e7      	bne.n	801b372 <__ieee754_pow+0x32>
 801b3a2:	4598      	cmp	r8, r3
 801b3a4:	dc01      	bgt.n	801b3aa <__ieee754_pow+0x6a>
 801b3a6:	d10f      	bne.n	801b3c8 <__ieee754_pow+0x88>
 801b3a8:	b172      	cbz	r2, 801b3c8 <__ieee754_pow+0x88>
 801b3aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801b3ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801b3b2:	ea55 050a 	orrs.w	r5, r5, sl
 801b3b6:	d1dc      	bne.n	801b372 <__ieee754_pow+0x32>
 801b3b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b3bc:	18db      	adds	r3, r3, r3
 801b3be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801b3c2:	4152      	adcs	r2, r2
 801b3c4:	429d      	cmp	r5, r3
 801b3c6:	e7d0      	b.n	801b36a <__ieee754_pow+0x2a>
 801b3c8:	2d00      	cmp	r5, #0
 801b3ca:	da3b      	bge.n	801b444 <__ieee754_pow+0x104>
 801b3cc:	4b72      	ldr	r3, [pc, #456]	; (801b598 <__ieee754_pow+0x258>)
 801b3ce:	4598      	cmp	r8, r3
 801b3d0:	dc51      	bgt.n	801b476 <__ieee754_pow+0x136>
 801b3d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b3d6:	4598      	cmp	r8, r3
 801b3d8:	f340 84ab 	ble.w	801bd32 <__ieee754_pow+0x9f2>
 801b3dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b3e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b3e4:	2b14      	cmp	r3, #20
 801b3e6:	dd0f      	ble.n	801b408 <__ieee754_pow+0xc8>
 801b3e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b3ec:	fa22 f103 	lsr.w	r1, r2, r3
 801b3f0:	fa01 f303 	lsl.w	r3, r1, r3
 801b3f4:	4293      	cmp	r3, r2
 801b3f6:	f040 849c 	bne.w	801bd32 <__ieee754_pow+0x9f2>
 801b3fa:	f001 0101 	and.w	r1, r1, #1
 801b3fe:	f1c1 0302 	rsb	r3, r1, #2
 801b402:	9304      	str	r3, [sp, #16]
 801b404:	b182      	cbz	r2, 801b428 <__ieee754_pow+0xe8>
 801b406:	e05f      	b.n	801b4c8 <__ieee754_pow+0x188>
 801b408:	2a00      	cmp	r2, #0
 801b40a:	d15b      	bne.n	801b4c4 <__ieee754_pow+0x184>
 801b40c:	f1c3 0314 	rsb	r3, r3, #20
 801b410:	fa48 f103 	asr.w	r1, r8, r3
 801b414:	fa01 f303 	lsl.w	r3, r1, r3
 801b418:	4543      	cmp	r3, r8
 801b41a:	f040 8487 	bne.w	801bd2c <__ieee754_pow+0x9ec>
 801b41e:	f001 0101 	and.w	r1, r1, #1
 801b422:	f1c1 0302 	rsb	r3, r1, #2
 801b426:	9304      	str	r3, [sp, #16]
 801b428:	4b5c      	ldr	r3, [pc, #368]	; (801b59c <__ieee754_pow+0x25c>)
 801b42a:	4598      	cmp	r8, r3
 801b42c:	d132      	bne.n	801b494 <__ieee754_pow+0x154>
 801b42e:	f1b9 0f00 	cmp.w	r9, #0
 801b432:	f280 8477 	bge.w	801bd24 <__ieee754_pow+0x9e4>
 801b436:	4959      	ldr	r1, [pc, #356]	; (801b59c <__ieee754_pow+0x25c>)
 801b438:	4632      	mov	r2, r6
 801b43a:	463b      	mov	r3, r7
 801b43c:	2000      	movs	r0, #0
 801b43e:	f7e5 fa05 	bl	800084c <__aeabi_ddiv>
 801b442:	e79c      	b.n	801b37e <__ieee754_pow+0x3e>
 801b444:	2300      	movs	r3, #0
 801b446:	9304      	str	r3, [sp, #16]
 801b448:	2a00      	cmp	r2, #0
 801b44a:	d13d      	bne.n	801b4c8 <__ieee754_pow+0x188>
 801b44c:	4b51      	ldr	r3, [pc, #324]	; (801b594 <__ieee754_pow+0x254>)
 801b44e:	4598      	cmp	r8, r3
 801b450:	d1ea      	bne.n	801b428 <__ieee754_pow+0xe8>
 801b452:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b456:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b45a:	ea53 030a 	orrs.w	r3, r3, sl
 801b45e:	f000 8459 	beq.w	801bd14 <__ieee754_pow+0x9d4>
 801b462:	4b4f      	ldr	r3, [pc, #316]	; (801b5a0 <__ieee754_pow+0x260>)
 801b464:	429c      	cmp	r4, r3
 801b466:	dd08      	ble.n	801b47a <__ieee754_pow+0x13a>
 801b468:	f1b9 0f00 	cmp.w	r9, #0
 801b46c:	f2c0 8456 	blt.w	801bd1c <__ieee754_pow+0x9dc>
 801b470:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b474:	e783      	b.n	801b37e <__ieee754_pow+0x3e>
 801b476:	2302      	movs	r3, #2
 801b478:	e7e5      	b.n	801b446 <__ieee754_pow+0x106>
 801b47a:	f1b9 0f00 	cmp.w	r9, #0
 801b47e:	f04f 0000 	mov.w	r0, #0
 801b482:	f04f 0100 	mov.w	r1, #0
 801b486:	f6bf af7a 	bge.w	801b37e <__ieee754_pow+0x3e>
 801b48a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b48e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b492:	e774      	b.n	801b37e <__ieee754_pow+0x3e>
 801b494:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b498:	d106      	bne.n	801b4a8 <__ieee754_pow+0x168>
 801b49a:	4632      	mov	r2, r6
 801b49c:	463b      	mov	r3, r7
 801b49e:	4630      	mov	r0, r6
 801b4a0:	4639      	mov	r1, r7
 801b4a2:	f7e5 f8a9 	bl	80005f8 <__aeabi_dmul>
 801b4a6:	e76a      	b.n	801b37e <__ieee754_pow+0x3e>
 801b4a8:	4b3e      	ldr	r3, [pc, #248]	; (801b5a4 <__ieee754_pow+0x264>)
 801b4aa:	4599      	cmp	r9, r3
 801b4ac:	d10c      	bne.n	801b4c8 <__ieee754_pow+0x188>
 801b4ae:	2d00      	cmp	r5, #0
 801b4b0:	db0a      	blt.n	801b4c8 <__ieee754_pow+0x188>
 801b4b2:	ec47 6b10 	vmov	d0, r6, r7
 801b4b6:	b009      	add	sp, #36	; 0x24
 801b4b8:	ecbd 8b06 	vpop	{d8-d10}
 801b4bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c0:	f7ff be64 	b.w	801b18c <__ieee754_sqrt>
 801b4c4:	2300      	movs	r3, #0
 801b4c6:	9304      	str	r3, [sp, #16]
 801b4c8:	ec47 6b10 	vmov	d0, r6, r7
 801b4cc:	f000 fc62 	bl	801bd94 <fabs>
 801b4d0:	ec51 0b10 	vmov	r0, r1, d0
 801b4d4:	f1ba 0f00 	cmp.w	sl, #0
 801b4d8:	d129      	bne.n	801b52e <__ieee754_pow+0x1ee>
 801b4da:	b124      	cbz	r4, 801b4e6 <__ieee754_pow+0x1a6>
 801b4dc:	4b2f      	ldr	r3, [pc, #188]	; (801b59c <__ieee754_pow+0x25c>)
 801b4de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d123      	bne.n	801b52e <__ieee754_pow+0x1ee>
 801b4e6:	f1b9 0f00 	cmp.w	r9, #0
 801b4ea:	da05      	bge.n	801b4f8 <__ieee754_pow+0x1b8>
 801b4ec:	4602      	mov	r2, r0
 801b4ee:	460b      	mov	r3, r1
 801b4f0:	2000      	movs	r0, #0
 801b4f2:	492a      	ldr	r1, [pc, #168]	; (801b59c <__ieee754_pow+0x25c>)
 801b4f4:	f7e5 f9aa 	bl	800084c <__aeabi_ddiv>
 801b4f8:	2d00      	cmp	r5, #0
 801b4fa:	f6bf af40 	bge.w	801b37e <__ieee754_pow+0x3e>
 801b4fe:	9b04      	ldr	r3, [sp, #16]
 801b500:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b504:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b508:	431c      	orrs	r4, r3
 801b50a:	d108      	bne.n	801b51e <__ieee754_pow+0x1de>
 801b50c:	4602      	mov	r2, r0
 801b50e:	460b      	mov	r3, r1
 801b510:	4610      	mov	r0, r2
 801b512:	4619      	mov	r1, r3
 801b514:	f7e4 feb8 	bl	8000288 <__aeabi_dsub>
 801b518:	4602      	mov	r2, r0
 801b51a:	460b      	mov	r3, r1
 801b51c:	e78f      	b.n	801b43e <__ieee754_pow+0xfe>
 801b51e:	9b04      	ldr	r3, [sp, #16]
 801b520:	2b01      	cmp	r3, #1
 801b522:	f47f af2c 	bne.w	801b37e <__ieee754_pow+0x3e>
 801b526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b52a:	4619      	mov	r1, r3
 801b52c:	e727      	b.n	801b37e <__ieee754_pow+0x3e>
 801b52e:	0feb      	lsrs	r3, r5, #31
 801b530:	3b01      	subs	r3, #1
 801b532:	9306      	str	r3, [sp, #24]
 801b534:	9a06      	ldr	r2, [sp, #24]
 801b536:	9b04      	ldr	r3, [sp, #16]
 801b538:	4313      	orrs	r3, r2
 801b53a:	d102      	bne.n	801b542 <__ieee754_pow+0x202>
 801b53c:	4632      	mov	r2, r6
 801b53e:	463b      	mov	r3, r7
 801b540:	e7e6      	b.n	801b510 <__ieee754_pow+0x1d0>
 801b542:	4b19      	ldr	r3, [pc, #100]	; (801b5a8 <__ieee754_pow+0x268>)
 801b544:	4598      	cmp	r8, r3
 801b546:	f340 80fb 	ble.w	801b740 <__ieee754_pow+0x400>
 801b54a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b54e:	4598      	cmp	r8, r3
 801b550:	4b13      	ldr	r3, [pc, #76]	; (801b5a0 <__ieee754_pow+0x260>)
 801b552:	dd0c      	ble.n	801b56e <__ieee754_pow+0x22e>
 801b554:	429c      	cmp	r4, r3
 801b556:	dc0f      	bgt.n	801b578 <__ieee754_pow+0x238>
 801b558:	f1b9 0f00 	cmp.w	r9, #0
 801b55c:	da0f      	bge.n	801b57e <__ieee754_pow+0x23e>
 801b55e:	2000      	movs	r0, #0
 801b560:	b009      	add	sp, #36	; 0x24
 801b562:	ecbd 8b06 	vpop	{d8-d10}
 801b566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56a:	f000 bcc2 	b.w	801bef2 <__math_oflow>
 801b56e:	429c      	cmp	r4, r3
 801b570:	dbf2      	blt.n	801b558 <__ieee754_pow+0x218>
 801b572:	4b0a      	ldr	r3, [pc, #40]	; (801b59c <__ieee754_pow+0x25c>)
 801b574:	429c      	cmp	r4, r3
 801b576:	dd19      	ble.n	801b5ac <__ieee754_pow+0x26c>
 801b578:	f1b9 0f00 	cmp.w	r9, #0
 801b57c:	dcef      	bgt.n	801b55e <__ieee754_pow+0x21e>
 801b57e:	2000      	movs	r0, #0
 801b580:	b009      	add	sp, #36	; 0x24
 801b582:	ecbd 8b06 	vpop	{d8-d10}
 801b586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b58a:	f000 bca9 	b.w	801bee0 <__math_uflow>
 801b58e:	bf00      	nop
 801b590:	fff00000 	.word	0xfff00000
 801b594:	7ff00000 	.word	0x7ff00000
 801b598:	433fffff 	.word	0x433fffff
 801b59c:	3ff00000 	.word	0x3ff00000
 801b5a0:	3fefffff 	.word	0x3fefffff
 801b5a4:	3fe00000 	.word	0x3fe00000
 801b5a8:	41e00000 	.word	0x41e00000
 801b5ac:	4b60      	ldr	r3, [pc, #384]	; (801b730 <__ieee754_pow+0x3f0>)
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	f7e4 fe6a 	bl	8000288 <__aeabi_dsub>
 801b5b4:	a354      	add	r3, pc, #336	; (adr r3, 801b708 <__ieee754_pow+0x3c8>)
 801b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ba:	4604      	mov	r4, r0
 801b5bc:	460d      	mov	r5, r1
 801b5be:	f7e5 f81b 	bl	80005f8 <__aeabi_dmul>
 801b5c2:	a353      	add	r3, pc, #332	; (adr r3, 801b710 <__ieee754_pow+0x3d0>)
 801b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c8:	4606      	mov	r6, r0
 801b5ca:	460f      	mov	r7, r1
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	4629      	mov	r1, r5
 801b5d0:	f7e5 f812 	bl	80005f8 <__aeabi_dmul>
 801b5d4:	4b57      	ldr	r3, [pc, #348]	; (801b734 <__ieee754_pow+0x3f4>)
 801b5d6:	4682      	mov	sl, r0
 801b5d8:	468b      	mov	fp, r1
 801b5da:	2200      	movs	r2, #0
 801b5dc:	4620      	mov	r0, r4
 801b5de:	4629      	mov	r1, r5
 801b5e0:	f7e5 f80a 	bl	80005f8 <__aeabi_dmul>
 801b5e4:	4602      	mov	r2, r0
 801b5e6:	460b      	mov	r3, r1
 801b5e8:	a14b      	add	r1, pc, #300	; (adr r1, 801b718 <__ieee754_pow+0x3d8>)
 801b5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5ee:	f7e4 fe4b 	bl	8000288 <__aeabi_dsub>
 801b5f2:	4622      	mov	r2, r4
 801b5f4:	462b      	mov	r3, r5
 801b5f6:	f7e4 ffff 	bl	80005f8 <__aeabi_dmul>
 801b5fa:	4602      	mov	r2, r0
 801b5fc:	460b      	mov	r3, r1
 801b5fe:	2000      	movs	r0, #0
 801b600:	494d      	ldr	r1, [pc, #308]	; (801b738 <__ieee754_pow+0x3f8>)
 801b602:	f7e4 fe41 	bl	8000288 <__aeabi_dsub>
 801b606:	4622      	mov	r2, r4
 801b608:	4680      	mov	r8, r0
 801b60a:	4689      	mov	r9, r1
 801b60c:	462b      	mov	r3, r5
 801b60e:	4620      	mov	r0, r4
 801b610:	4629      	mov	r1, r5
 801b612:	f7e4 fff1 	bl	80005f8 <__aeabi_dmul>
 801b616:	4602      	mov	r2, r0
 801b618:	460b      	mov	r3, r1
 801b61a:	4640      	mov	r0, r8
 801b61c:	4649      	mov	r1, r9
 801b61e:	f7e4 ffeb 	bl	80005f8 <__aeabi_dmul>
 801b622:	a33f      	add	r3, pc, #252	; (adr r3, 801b720 <__ieee754_pow+0x3e0>)
 801b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b628:	f7e4 ffe6 	bl	80005f8 <__aeabi_dmul>
 801b62c:	4602      	mov	r2, r0
 801b62e:	460b      	mov	r3, r1
 801b630:	4650      	mov	r0, sl
 801b632:	4659      	mov	r1, fp
 801b634:	f7e4 fe28 	bl	8000288 <__aeabi_dsub>
 801b638:	4602      	mov	r2, r0
 801b63a:	460b      	mov	r3, r1
 801b63c:	4680      	mov	r8, r0
 801b63e:	4689      	mov	r9, r1
 801b640:	4630      	mov	r0, r6
 801b642:	4639      	mov	r1, r7
 801b644:	f7e4 fe22 	bl	800028c <__adddf3>
 801b648:	2000      	movs	r0, #0
 801b64a:	4632      	mov	r2, r6
 801b64c:	463b      	mov	r3, r7
 801b64e:	4604      	mov	r4, r0
 801b650:	460d      	mov	r5, r1
 801b652:	f7e4 fe19 	bl	8000288 <__aeabi_dsub>
 801b656:	4602      	mov	r2, r0
 801b658:	460b      	mov	r3, r1
 801b65a:	4640      	mov	r0, r8
 801b65c:	4649      	mov	r1, r9
 801b65e:	f7e4 fe13 	bl	8000288 <__aeabi_dsub>
 801b662:	9b04      	ldr	r3, [sp, #16]
 801b664:	9a06      	ldr	r2, [sp, #24]
 801b666:	3b01      	subs	r3, #1
 801b668:	4313      	orrs	r3, r2
 801b66a:	4682      	mov	sl, r0
 801b66c:	468b      	mov	fp, r1
 801b66e:	f040 81e7 	bne.w	801ba40 <__ieee754_pow+0x700>
 801b672:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801b728 <__ieee754_pow+0x3e8>
 801b676:	eeb0 8a47 	vmov.f32	s16, s14
 801b67a:	eef0 8a67 	vmov.f32	s17, s15
 801b67e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b682:	2600      	movs	r6, #0
 801b684:	4632      	mov	r2, r6
 801b686:	463b      	mov	r3, r7
 801b688:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b68c:	f7e4 fdfc 	bl	8000288 <__aeabi_dsub>
 801b690:	4622      	mov	r2, r4
 801b692:	462b      	mov	r3, r5
 801b694:	f7e4 ffb0 	bl	80005f8 <__aeabi_dmul>
 801b698:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b69c:	4680      	mov	r8, r0
 801b69e:	4689      	mov	r9, r1
 801b6a0:	4650      	mov	r0, sl
 801b6a2:	4659      	mov	r1, fp
 801b6a4:	f7e4 ffa8 	bl	80005f8 <__aeabi_dmul>
 801b6a8:	4602      	mov	r2, r0
 801b6aa:	460b      	mov	r3, r1
 801b6ac:	4640      	mov	r0, r8
 801b6ae:	4649      	mov	r1, r9
 801b6b0:	f7e4 fdec 	bl	800028c <__adddf3>
 801b6b4:	4632      	mov	r2, r6
 801b6b6:	463b      	mov	r3, r7
 801b6b8:	4680      	mov	r8, r0
 801b6ba:	4689      	mov	r9, r1
 801b6bc:	4620      	mov	r0, r4
 801b6be:	4629      	mov	r1, r5
 801b6c0:	f7e4 ff9a 	bl	80005f8 <__aeabi_dmul>
 801b6c4:	460b      	mov	r3, r1
 801b6c6:	4604      	mov	r4, r0
 801b6c8:	460d      	mov	r5, r1
 801b6ca:	4602      	mov	r2, r0
 801b6cc:	4649      	mov	r1, r9
 801b6ce:	4640      	mov	r0, r8
 801b6d0:	f7e4 fddc 	bl	800028c <__adddf3>
 801b6d4:	4b19      	ldr	r3, [pc, #100]	; (801b73c <__ieee754_pow+0x3fc>)
 801b6d6:	4299      	cmp	r1, r3
 801b6d8:	ec45 4b19 	vmov	d9, r4, r5
 801b6dc:	4606      	mov	r6, r0
 801b6de:	460f      	mov	r7, r1
 801b6e0:	468b      	mov	fp, r1
 801b6e2:	f340 82f0 	ble.w	801bcc6 <__ieee754_pow+0x986>
 801b6e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b6ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b6ee:	4303      	orrs	r3, r0
 801b6f0:	f000 81e4 	beq.w	801babc <__ieee754_pow+0x77c>
 801b6f4:	ec51 0b18 	vmov	r0, r1, d8
 801b6f8:	2200      	movs	r2, #0
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	f7e5 f9ee 	bl	8000adc <__aeabi_dcmplt>
 801b700:	3800      	subs	r0, #0
 801b702:	bf18      	it	ne
 801b704:	2001      	movne	r0, #1
 801b706:	e72b      	b.n	801b560 <__ieee754_pow+0x220>
 801b708:	60000000 	.word	0x60000000
 801b70c:	3ff71547 	.word	0x3ff71547
 801b710:	f85ddf44 	.word	0xf85ddf44
 801b714:	3e54ae0b 	.word	0x3e54ae0b
 801b718:	55555555 	.word	0x55555555
 801b71c:	3fd55555 	.word	0x3fd55555
 801b720:	652b82fe 	.word	0x652b82fe
 801b724:	3ff71547 	.word	0x3ff71547
 801b728:	00000000 	.word	0x00000000
 801b72c:	bff00000 	.word	0xbff00000
 801b730:	3ff00000 	.word	0x3ff00000
 801b734:	3fd00000 	.word	0x3fd00000
 801b738:	3fe00000 	.word	0x3fe00000
 801b73c:	408fffff 	.word	0x408fffff
 801b740:	4bd5      	ldr	r3, [pc, #852]	; (801ba98 <__ieee754_pow+0x758>)
 801b742:	402b      	ands	r3, r5
 801b744:	2200      	movs	r2, #0
 801b746:	b92b      	cbnz	r3, 801b754 <__ieee754_pow+0x414>
 801b748:	4bd4      	ldr	r3, [pc, #848]	; (801ba9c <__ieee754_pow+0x75c>)
 801b74a:	f7e4 ff55 	bl	80005f8 <__aeabi_dmul>
 801b74e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b752:	460c      	mov	r4, r1
 801b754:	1523      	asrs	r3, r4, #20
 801b756:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b75a:	4413      	add	r3, r2
 801b75c:	9305      	str	r3, [sp, #20]
 801b75e:	4bd0      	ldr	r3, [pc, #832]	; (801baa0 <__ieee754_pow+0x760>)
 801b760:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b764:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b768:	429c      	cmp	r4, r3
 801b76a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b76e:	dd08      	ble.n	801b782 <__ieee754_pow+0x442>
 801b770:	4bcc      	ldr	r3, [pc, #816]	; (801baa4 <__ieee754_pow+0x764>)
 801b772:	429c      	cmp	r4, r3
 801b774:	f340 8162 	ble.w	801ba3c <__ieee754_pow+0x6fc>
 801b778:	9b05      	ldr	r3, [sp, #20]
 801b77a:	3301      	adds	r3, #1
 801b77c:	9305      	str	r3, [sp, #20]
 801b77e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b782:	2400      	movs	r4, #0
 801b784:	00e3      	lsls	r3, r4, #3
 801b786:	9307      	str	r3, [sp, #28]
 801b788:	4bc7      	ldr	r3, [pc, #796]	; (801baa8 <__ieee754_pow+0x768>)
 801b78a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b78e:	ed93 7b00 	vldr	d7, [r3]
 801b792:	4629      	mov	r1, r5
 801b794:	ec53 2b17 	vmov	r2, r3, d7
 801b798:	eeb0 9a47 	vmov.f32	s18, s14
 801b79c:	eef0 9a67 	vmov.f32	s19, s15
 801b7a0:	4682      	mov	sl, r0
 801b7a2:	f7e4 fd71 	bl	8000288 <__aeabi_dsub>
 801b7a6:	4652      	mov	r2, sl
 801b7a8:	4606      	mov	r6, r0
 801b7aa:	460f      	mov	r7, r1
 801b7ac:	462b      	mov	r3, r5
 801b7ae:	ec51 0b19 	vmov	r0, r1, d9
 801b7b2:	f7e4 fd6b 	bl	800028c <__adddf3>
 801b7b6:	4602      	mov	r2, r0
 801b7b8:	460b      	mov	r3, r1
 801b7ba:	2000      	movs	r0, #0
 801b7bc:	49bb      	ldr	r1, [pc, #748]	; (801baac <__ieee754_pow+0x76c>)
 801b7be:	f7e5 f845 	bl	800084c <__aeabi_ddiv>
 801b7c2:	ec41 0b1a 	vmov	d10, r0, r1
 801b7c6:	4602      	mov	r2, r0
 801b7c8:	460b      	mov	r3, r1
 801b7ca:	4630      	mov	r0, r6
 801b7cc:	4639      	mov	r1, r7
 801b7ce:	f7e4 ff13 	bl	80005f8 <__aeabi_dmul>
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b7d8:	9302      	str	r3, [sp, #8]
 801b7da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b7de:	46ab      	mov	fp, r5
 801b7e0:	106d      	asrs	r5, r5, #1
 801b7e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b7e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b7ea:	ec41 0b18 	vmov	d8, r0, r1
 801b7ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	4640      	mov	r0, r8
 801b7f6:	4649      	mov	r1, r9
 801b7f8:	4614      	mov	r4, r2
 801b7fa:	461d      	mov	r5, r3
 801b7fc:	f7e4 fefc 	bl	80005f8 <__aeabi_dmul>
 801b800:	4602      	mov	r2, r0
 801b802:	460b      	mov	r3, r1
 801b804:	4630      	mov	r0, r6
 801b806:	4639      	mov	r1, r7
 801b808:	f7e4 fd3e 	bl	8000288 <__aeabi_dsub>
 801b80c:	ec53 2b19 	vmov	r2, r3, d9
 801b810:	4606      	mov	r6, r0
 801b812:	460f      	mov	r7, r1
 801b814:	4620      	mov	r0, r4
 801b816:	4629      	mov	r1, r5
 801b818:	f7e4 fd36 	bl	8000288 <__aeabi_dsub>
 801b81c:	4602      	mov	r2, r0
 801b81e:	460b      	mov	r3, r1
 801b820:	4650      	mov	r0, sl
 801b822:	4659      	mov	r1, fp
 801b824:	f7e4 fd30 	bl	8000288 <__aeabi_dsub>
 801b828:	4642      	mov	r2, r8
 801b82a:	464b      	mov	r3, r9
 801b82c:	f7e4 fee4 	bl	80005f8 <__aeabi_dmul>
 801b830:	4602      	mov	r2, r0
 801b832:	460b      	mov	r3, r1
 801b834:	4630      	mov	r0, r6
 801b836:	4639      	mov	r1, r7
 801b838:	f7e4 fd26 	bl	8000288 <__aeabi_dsub>
 801b83c:	ec53 2b1a 	vmov	r2, r3, d10
 801b840:	f7e4 feda 	bl	80005f8 <__aeabi_dmul>
 801b844:	ec53 2b18 	vmov	r2, r3, d8
 801b848:	ec41 0b19 	vmov	d9, r0, r1
 801b84c:	ec51 0b18 	vmov	r0, r1, d8
 801b850:	f7e4 fed2 	bl	80005f8 <__aeabi_dmul>
 801b854:	a37c      	add	r3, pc, #496	; (adr r3, 801ba48 <__ieee754_pow+0x708>)
 801b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b85a:	4604      	mov	r4, r0
 801b85c:	460d      	mov	r5, r1
 801b85e:	f7e4 fecb 	bl	80005f8 <__aeabi_dmul>
 801b862:	a37b      	add	r3, pc, #492	; (adr r3, 801ba50 <__ieee754_pow+0x710>)
 801b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b868:	f7e4 fd10 	bl	800028c <__adddf3>
 801b86c:	4622      	mov	r2, r4
 801b86e:	462b      	mov	r3, r5
 801b870:	f7e4 fec2 	bl	80005f8 <__aeabi_dmul>
 801b874:	a378      	add	r3, pc, #480	; (adr r3, 801ba58 <__ieee754_pow+0x718>)
 801b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b87a:	f7e4 fd07 	bl	800028c <__adddf3>
 801b87e:	4622      	mov	r2, r4
 801b880:	462b      	mov	r3, r5
 801b882:	f7e4 feb9 	bl	80005f8 <__aeabi_dmul>
 801b886:	a376      	add	r3, pc, #472	; (adr r3, 801ba60 <__ieee754_pow+0x720>)
 801b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b88c:	f7e4 fcfe 	bl	800028c <__adddf3>
 801b890:	4622      	mov	r2, r4
 801b892:	462b      	mov	r3, r5
 801b894:	f7e4 feb0 	bl	80005f8 <__aeabi_dmul>
 801b898:	a373      	add	r3, pc, #460	; (adr r3, 801ba68 <__ieee754_pow+0x728>)
 801b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b89e:	f7e4 fcf5 	bl	800028c <__adddf3>
 801b8a2:	4622      	mov	r2, r4
 801b8a4:	462b      	mov	r3, r5
 801b8a6:	f7e4 fea7 	bl	80005f8 <__aeabi_dmul>
 801b8aa:	a371      	add	r3, pc, #452	; (adr r3, 801ba70 <__ieee754_pow+0x730>)
 801b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b0:	f7e4 fcec 	bl	800028c <__adddf3>
 801b8b4:	4622      	mov	r2, r4
 801b8b6:	4606      	mov	r6, r0
 801b8b8:	460f      	mov	r7, r1
 801b8ba:	462b      	mov	r3, r5
 801b8bc:	4620      	mov	r0, r4
 801b8be:	4629      	mov	r1, r5
 801b8c0:	f7e4 fe9a 	bl	80005f8 <__aeabi_dmul>
 801b8c4:	4602      	mov	r2, r0
 801b8c6:	460b      	mov	r3, r1
 801b8c8:	4630      	mov	r0, r6
 801b8ca:	4639      	mov	r1, r7
 801b8cc:	f7e4 fe94 	bl	80005f8 <__aeabi_dmul>
 801b8d0:	4642      	mov	r2, r8
 801b8d2:	4604      	mov	r4, r0
 801b8d4:	460d      	mov	r5, r1
 801b8d6:	464b      	mov	r3, r9
 801b8d8:	ec51 0b18 	vmov	r0, r1, d8
 801b8dc:	f7e4 fcd6 	bl	800028c <__adddf3>
 801b8e0:	ec53 2b19 	vmov	r2, r3, d9
 801b8e4:	f7e4 fe88 	bl	80005f8 <__aeabi_dmul>
 801b8e8:	4622      	mov	r2, r4
 801b8ea:	462b      	mov	r3, r5
 801b8ec:	f7e4 fcce 	bl	800028c <__adddf3>
 801b8f0:	4642      	mov	r2, r8
 801b8f2:	4682      	mov	sl, r0
 801b8f4:	468b      	mov	fp, r1
 801b8f6:	464b      	mov	r3, r9
 801b8f8:	4640      	mov	r0, r8
 801b8fa:	4649      	mov	r1, r9
 801b8fc:	f7e4 fe7c 	bl	80005f8 <__aeabi_dmul>
 801b900:	4b6b      	ldr	r3, [pc, #428]	; (801bab0 <__ieee754_pow+0x770>)
 801b902:	2200      	movs	r2, #0
 801b904:	4606      	mov	r6, r0
 801b906:	460f      	mov	r7, r1
 801b908:	f7e4 fcc0 	bl	800028c <__adddf3>
 801b90c:	4652      	mov	r2, sl
 801b90e:	465b      	mov	r3, fp
 801b910:	f7e4 fcbc 	bl	800028c <__adddf3>
 801b914:	2000      	movs	r0, #0
 801b916:	4604      	mov	r4, r0
 801b918:	460d      	mov	r5, r1
 801b91a:	4602      	mov	r2, r0
 801b91c:	460b      	mov	r3, r1
 801b91e:	4640      	mov	r0, r8
 801b920:	4649      	mov	r1, r9
 801b922:	f7e4 fe69 	bl	80005f8 <__aeabi_dmul>
 801b926:	4b62      	ldr	r3, [pc, #392]	; (801bab0 <__ieee754_pow+0x770>)
 801b928:	4680      	mov	r8, r0
 801b92a:	4689      	mov	r9, r1
 801b92c:	2200      	movs	r2, #0
 801b92e:	4620      	mov	r0, r4
 801b930:	4629      	mov	r1, r5
 801b932:	f7e4 fca9 	bl	8000288 <__aeabi_dsub>
 801b936:	4632      	mov	r2, r6
 801b938:	463b      	mov	r3, r7
 801b93a:	f7e4 fca5 	bl	8000288 <__aeabi_dsub>
 801b93e:	4602      	mov	r2, r0
 801b940:	460b      	mov	r3, r1
 801b942:	4650      	mov	r0, sl
 801b944:	4659      	mov	r1, fp
 801b946:	f7e4 fc9f 	bl	8000288 <__aeabi_dsub>
 801b94a:	ec53 2b18 	vmov	r2, r3, d8
 801b94e:	f7e4 fe53 	bl	80005f8 <__aeabi_dmul>
 801b952:	4622      	mov	r2, r4
 801b954:	4606      	mov	r6, r0
 801b956:	460f      	mov	r7, r1
 801b958:	462b      	mov	r3, r5
 801b95a:	ec51 0b19 	vmov	r0, r1, d9
 801b95e:	f7e4 fe4b 	bl	80005f8 <__aeabi_dmul>
 801b962:	4602      	mov	r2, r0
 801b964:	460b      	mov	r3, r1
 801b966:	4630      	mov	r0, r6
 801b968:	4639      	mov	r1, r7
 801b96a:	f7e4 fc8f 	bl	800028c <__adddf3>
 801b96e:	4606      	mov	r6, r0
 801b970:	460f      	mov	r7, r1
 801b972:	4602      	mov	r2, r0
 801b974:	460b      	mov	r3, r1
 801b976:	4640      	mov	r0, r8
 801b978:	4649      	mov	r1, r9
 801b97a:	f7e4 fc87 	bl	800028c <__adddf3>
 801b97e:	a33e      	add	r3, pc, #248	; (adr r3, 801ba78 <__ieee754_pow+0x738>)
 801b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b984:	2000      	movs	r0, #0
 801b986:	4604      	mov	r4, r0
 801b988:	460d      	mov	r5, r1
 801b98a:	f7e4 fe35 	bl	80005f8 <__aeabi_dmul>
 801b98e:	4642      	mov	r2, r8
 801b990:	ec41 0b18 	vmov	d8, r0, r1
 801b994:	464b      	mov	r3, r9
 801b996:	4620      	mov	r0, r4
 801b998:	4629      	mov	r1, r5
 801b99a:	f7e4 fc75 	bl	8000288 <__aeabi_dsub>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	460b      	mov	r3, r1
 801b9a2:	4630      	mov	r0, r6
 801b9a4:	4639      	mov	r1, r7
 801b9a6:	f7e4 fc6f 	bl	8000288 <__aeabi_dsub>
 801b9aa:	a335      	add	r3, pc, #212	; (adr r3, 801ba80 <__ieee754_pow+0x740>)
 801b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b0:	f7e4 fe22 	bl	80005f8 <__aeabi_dmul>
 801b9b4:	a334      	add	r3, pc, #208	; (adr r3, 801ba88 <__ieee754_pow+0x748>)
 801b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ba:	4606      	mov	r6, r0
 801b9bc:	460f      	mov	r7, r1
 801b9be:	4620      	mov	r0, r4
 801b9c0:	4629      	mov	r1, r5
 801b9c2:	f7e4 fe19 	bl	80005f8 <__aeabi_dmul>
 801b9c6:	4602      	mov	r2, r0
 801b9c8:	460b      	mov	r3, r1
 801b9ca:	4630      	mov	r0, r6
 801b9cc:	4639      	mov	r1, r7
 801b9ce:	f7e4 fc5d 	bl	800028c <__adddf3>
 801b9d2:	9a07      	ldr	r2, [sp, #28]
 801b9d4:	4b37      	ldr	r3, [pc, #220]	; (801bab4 <__ieee754_pow+0x774>)
 801b9d6:	4413      	add	r3, r2
 801b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9dc:	f7e4 fc56 	bl	800028c <__adddf3>
 801b9e0:	4682      	mov	sl, r0
 801b9e2:	9805      	ldr	r0, [sp, #20]
 801b9e4:	468b      	mov	fp, r1
 801b9e6:	f7e4 fd9d 	bl	8000524 <__aeabi_i2d>
 801b9ea:	9a07      	ldr	r2, [sp, #28]
 801b9ec:	4b32      	ldr	r3, [pc, #200]	; (801bab8 <__ieee754_pow+0x778>)
 801b9ee:	4413      	add	r3, r2
 801b9f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b9f4:	4606      	mov	r6, r0
 801b9f6:	460f      	mov	r7, r1
 801b9f8:	4652      	mov	r2, sl
 801b9fa:	465b      	mov	r3, fp
 801b9fc:	ec51 0b18 	vmov	r0, r1, d8
 801ba00:	f7e4 fc44 	bl	800028c <__adddf3>
 801ba04:	4642      	mov	r2, r8
 801ba06:	464b      	mov	r3, r9
 801ba08:	f7e4 fc40 	bl	800028c <__adddf3>
 801ba0c:	4632      	mov	r2, r6
 801ba0e:	463b      	mov	r3, r7
 801ba10:	f7e4 fc3c 	bl	800028c <__adddf3>
 801ba14:	2000      	movs	r0, #0
 801ba16:	4632      	mov	r2, r6
 801ba18:	463b      	mov	r3, r7
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	460d      	mov	r5, r1
 801ba1e:	f7e4 fc33 	bl	8000288 <__aeabi_dsub>
 801ba22:	4642      	mov	r2, r8
 801ba24:	464b      	mov	r3, r9
 801ba26:	f7e4 fc2f 	bl	8000288 <__aeabi_dsub>
 801ba2a:	ec53 2b18 	vmov	r2, r3, d8
 801ba2e:	f7e4 fc2b 	bl	8000288 <__aeabi_dsub>
 801ba32:	4602      	mov	r2, r0
 801ba34:	460b      	mov	r3, r1
 801ba36:	4650      	mov	r0, sl
 801ba38:	4659      	mov	r1, fp
 801ba3a:	e610      	b.n	801b65e <__ieee754_pow+0x31e>
 801ba3c:	2401      	movs	r4, #1
 801ba3e:	e6a1      	b.n	801b784 <__ieee754_pow+0x444>
 801ba40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801ba90 <__ieee754_pow+0x750>
 801ba44:	e617      	b.n	801b676 <__ieee754_pow+0x336>
 801ba46:	bf00      	nop
 801ba48:	4a454eef 	.word	0x4a454eef
 801ba4c:	3fca7e28 	.word	0x3fca7e28
 801ba50:	93c9db65 	.word	0x93c9db65
 801ba54:	3fcd864a 	.word	0x3fcd864a
 801ba58:	a91d4101 	.word	0xa91d4101
 801ba5c:	3fd17460 	.word	0x3fd17460
 801ba60:	518f264d 	.word	0x518f264d
 801ba64:	3fd55555 	.word	0x3fd55555
 801ba68:	db6fabff 	.word	0xdb6fabff
 801ba6c:	3fdb6db6 	.word	0x3fdb6db6
 801ba70:	33333303 	.word	0x33333303
 801ba74:	3fe33333 	.word	0x3fe33333
 801ba78:	e0000000 	.word	0xe0000000
 801ba7c:	3feec709 	.word	0x3feec709
 801ba80:	dc3a03fd 	.word	0xdc3a03fd
 801ba84:	3feec709 	.word	0x3feec709
 801ba88:	145b01f5 	.word	0x145b01f5
 801ba8c:	be3e2fe0 	.word	0xbe3e2fe0
 801ba90:	00000000 	.word	0x00000000
 801ba94:	3ff00000 	.word	0x3ff00000
 801ba98:	7ff00000 	.word	0x7ff00000
 801ba9c:	43400000 	.word	0x43400000
 801baa0:	0003988e 	.word	0x0003988e
 801baa4:	000bb679 	.word	0x000bb679
 801baa8:	0801ccc0 	.word	0x0801ccc0
 801baac:	3ff00000 	.word	0x3ff00000
 801bab0:	40080000 	.word	0x40080000
 801bab4:	0801cce0 	.word	0x0801cce0
 801bab8:	0801ccd0 	.word	0x0801ccd0
 801babc:	a3b3      	add	r3, pc, #716	; (adr r3, 801bd8c <__ieee754_pow+0xa4c>)
 801babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac2:	4640      	mov	r0, r8
 801bac4:	4649      	mov	r1, r9
 801bac6:	f7e4 fbe1 	bl	800028c <__adddf3>
 801baca:	4622      	mov	r2, r4
 801bacc:	ec41 0b1a 	vmov	d10, r0, r1
 801bad0:	462b      	mov	r3, r5
 801bad2:	4630      	mov	r0, r6
 801bad4:	4639      	mov	r1, r7
 801bad6:	f7e4 fbd7 	bl	8000288 <__aeabi_dsub>
 801bada:	4602      	mov	r2, r0
 801badc:	460b      	mov	r3, r1
 801bade:	ec51 0b1a 	vmov	r0, r1, d10
 801bae2:	f7e5 f819 	bl	8000b18 <__aeabi_dcmpgt>
 801bae6:	2800      	cmp	r0, #0
 801bae8:	f47f ae04 	bne.w	801b6f4 <__ieee754_pow+0x3b4>
 801baec:	4aa2      	ldr	r2, [pc, #648]	; (801bd78 <__ieee754_pow+0xa38>)
 801baee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801baf2:	4293      	cmp	r3, r2
 801baf4:	f340 8107 	ble.w	801bd06 <__ieee754_pow+0x9c6>
 801baf8:	151b      	asrs	r3, r3, #20
 801bafa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bafe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bb02:	fa4a fa03 	asr.w	sl, sl, r3
 801bb06:	44da      	add	sl, fp
 801bb08:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801bb0c:	489b      	ldr	r0, [pc, #620]	; (801bd7c <__ieee754_pow+0xa3c>)
 801bb0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801bb12:	4108      	asrs	r0, r1
 801bb14:	ea00 030a 	and.w	r3, r0, sl
 801bb18:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801bb1c:	f1c1 0114 	rsb	r1, r1, #20
 801bb20:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801bb24:	fa4a fa01 	asr.w	sl, sl, r1
 801bb28:	f1bb 0f00 	cmp.w	fp, #0
 801bb2c:	f04f 0200 	mov.w	r2, #0
 801bb30:	4620      	mov	r0, r4
 801bb32:	4629      	mov	r1, r5
 801bb34:	bfb8      	it	lt
 801bb36:	f1ca 0a00 	rsblt	sl, sl, #0
 801bb3a:	f7e4 fba5 	bl	8000288 <__aeabi_dsub>
 801bb3e:	ec41 0b19 	vmov	d9, r0, r1
 801bb42:	4642      	mov	r2, r8
 801bb44:	464b      	mov	r3, r9
 801bb46:	ec51 0b19 	vmov	r0, r1, d9
 801bb4a:	f7e4 fb9f 	bl	800028c <__adddf3>
 801bb4e:	a37a      	add	r3, pc, #488	; (adr r3, 801bd38 <__ieee754_pow+0x9f8>)
 801bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb54:	2000      	movs	r0, #0
 801bb56:	4604      	mov	r4, r0
 801bb58:	460d      	mov	r5, r1
 801bb5a:	f7e4 fd4d 	bl	80005f8 <__aeabi_dmul>
 801bb5e:	ec53 2b19 	vmov	r2, r3, d9
 801bb62:	4606      	mov	r6, r0
 801bb64:	460f      	mov	r7, r1
 801bb66:	4620      	mov	r0, r4
 801bb68:	4629      	mov	r1, r5
 801bb6a:	f7e4 fb8d 	bl	8000288 <__aeabi_dsub>
 801bb6e:	4602      	mov	r2, r0
 801bb70:	460b      	mov	r3, r1
 801bb72:	4640      	mov	r0, r8
 801bb74:	4649      	mov	r1, r9
 801bb76:	f7e4 fb87 	bl	8000288 <__aeabi_dsub>
 801bb7a:	a371      	add	r3, pc, #452	; (adr r3, 801bd40 <__ieee754_pow+0xa00>)
 801bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb80:	f7e4 fd3a 	bl	80005f8 <__aeabi_dmul>
 801bb84:	a370      	add	r3, pc, #448	; (adr r3, 801bd48 <__ieee754_pow+0xa08>)
 801bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb8a:	4680      	mov	r8, r0
 801bb8c:	4689      	mov	r9, r1
 801bb8e:	4620      	mov	r0, r4
 801bb90:	4629      	mov	r1, r5
 801bb92:	f7e4 fd31 	bl	80005f8 <__aeabi_dmul>
 801bb96:	4602      	mov	r2, r0
 801bb98:	460b      	mov	r3, r1
 801bb9a:	4640      	mov	r0, r8
 801bb9c:	4649      	mov	r1, r9
 801bb9e:	f7e4 fb75 	bl	800028c <__adddf3>
 801bba2:	4604      	mov	r4, r0
 801bba4:	460d      	mov	r5, r1
 801bba6:	4602      	mov	r2, r0
 801bba8:	460b      	mov	r3, r1
 801bbaa:	4630      	mov	r0, r6
 801bbac:	4639      	mov	r1, r7
 801bbae:	f7e4 fb6d 	bl	800028c <__adddf3>
 801bbb2:	4632      	mov	r2, r6
 801bbb4:	463b      	mov	r3, r7
 801bbb6:	4680      	mov	r8, r0
 801bbb8:	4689      	mov	r9, r1
 801bbba:	f7e4 fb65 	bl	8000288 <__aeabi_dsub>
 801bbbe:	4602      	mov	r2, r0
 801bbc0:	460b      	mov	r3, r1
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	4629      	mov	r1, r5
 801bbc6:	f7e4 fb5f 	bl	8000288 <__aeabi_dsub>
 801bbca:	4642      	mov	r2, r8
 801bbcc:	4606      	mov	r6, r0
 801bbce:	460f      	mov	r7, r1
 801bbd0:	464b      	mov	r3, r9
 801bbd2:	4640      	mov	r0, r8
 801bbd4:	4649      	mov	r1, r9
 801bbd6:	f7e4 fd0f 	bl	80005f8 <__aeabi_dmul>
 801bbda:	a35d      	add	r3, pc, #372	; (adr r3, 801bd50 <__ieee754_pow+0xa10>)
 801bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbe0:	4604      	mov	r4, r0
 801bbe2:	460d      	mov	r5, r1
 801bbe4:	f7e4 fd08 	bl	80005f8 <__aeabi_dmul>
 801bbe8:	a35b      	add	r3, pc, #364	; (adr r3, 801bd58 <__ieee754_pow+0xa18>)
 801bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbee:	f7e4 fb4b 	bl	8000288 <__aeabi_dsub>
 801bbf2:	4622      	mov	r2, r4
 801bbf4:	462b      	mov	r3, r5
 801bbf6:	f7e4 fcff 	bl	80005f8 <__aeabi_dmul>
 801bbfa:	a359      	add	r3, pc, #356	; (adr r3, 801bd60 <__ieee754_pow+0xa20>)
 801bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc00:	f7e4 fb44 	bl	800028c <__adddf3>
 801bc04:	4622      	mov	r2, r4
 801bc06:	462b      	mov	r3, r5
 801bc08:	f7e4 fcf6 	bl	80005f8 <__aeabi_dmul>
 801bc0c:	a356      	add	r3, pc, #344	; (adr r3, 801bd68 <__ieee754_pow+0xa28>)
 801bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc12:	f7e4 fb39 	bl	8000288 <__aeabi_dsub>
 801bc16:	4622      	mov	r2, r4
 801bc18:	462b      	mov	r3, r5
 801bc1a:	f7e4 fced 	bl	80005f8 <__aeabi_dmul>
 801bc1e:	a354      	add	r3, pc, #336	; (adr r3, 801bd70 <__ieee754_pow+0xa30>)
 801bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc24:	f7e4 fb32 	bl	800028c <__adddf3>
 801bc28:	4622      	mov	r2, r4
 801bc2a:	462b      	mov	r3, r5
 801bc2c:	f7e4 fce4 	bl	80005f8 <__aeabi_dmul>
 801bc30:	4602      	mov	r2, r0
 801bc32:	460b      	mov	r3, r1
 801bc34:	4640      	mov	r0, r8
 801bc36:	4649      	mov	r1, r9
 801bc38:	f7e4 fb26 	bl	8000288 <__aeabi_dsub>
 801bc3c:	4604      	mov	r4, r0
 801bc3e:	460d      	mov	r5, r1
 801bc40:	4602      	mov	r2, r0
 801bc42:	460b      	mov	r3, r1
 801bc44:	4640      	mov	r0, r8
 801bc46:	4649      	mov	r1, r9
 801bc48:	f7e4 fcd6 	bl	80005f8 <__aeabi_dmul>
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	ec41 0b19 	vmov	d9, r0, r1
 801bc52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bc56:	4620      	mov	r0, r4
 801bc58:	4629      	mov	r1, r5
 801bc5a:	f7e4 fb15 	bl	8000288 <__aeabi_dsub>
 801bc5e:	4602      	mov	r2, r0
 801bc60:	460b      	mov	r3, r1
 801bc62:	ec51 0b19 	vmov	r0, r1, d9
 801bc66:	f7e4 fdf1 	bl	800084c <__aeabi_ddiv>
 801bc6a:	4632      	mov	r2, r6
 801bc6c:	4604      	mov	r4, r0
 801bc6e:	460d      	mov	r5, r1
 801bc70:	463b      	mov	r3, r7
 801bc72:	4640      	mov	r0, r8
 801bc74:	4649      	mov	r1, r9
 801bc76:	f7e4 fcbf 	bl	80005f8 <__aeabi_dmul>
 801bc7a:	4632      	mov	r2, r6
 801bc7c:	463b      	mov	r3, r7
 801bc7e:	f7e4 fb05 	bl	800028c <__adddf3>
 801bc82:	4602      	mov	r2, r0
 801bc84:	460b      	mov	r3, r1
 801bc86:	4620      	mov	r0, r4
 801bc88:	4629      	mov	r1, r5
 801bc8a:	f7e4 fafd 	bl	8000288 <__aeabi_dsub>
 801bc8e:	4642      	mov	r2, r8
 801bc90:	464b      	mov	r3, r9
 801bc92:	f7e4 faf9 	bl	8000288 <__aeabi_dsub>
 801bc96:	460b      	mov	r3, r1
 801bc98:	4602      	mov	r2, r0
 801bc9a:	4939      	ldr	r1, [pc, #228]	; (801bd80 <__ieee754_pow+0xa40>)
 801bc9c:	2000      	movs	r0, #0
 801bc9e:	f7e4 faf3 	bl	8000288 <__aeabi_dsub>
 801bca2:	ec41 0b10 	vmov	d0, r0, r1
 801bca6:	ee10 3a90 	vmov	r3, s1
 801bcaa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801bcae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bcb2:	da2b      	bge.n	801bd0c <__ieee754_pow+0x9cc>
 801bcb4:	4650      	mov	r0, sl
 801bcb6:	f000 f877 	bl	801bda8 <scalbn>
 801bcba:	ec51 0b10 	vmov	r0, r1, d0
 801bcbe:	ec53 2b18 	vmov	r2, r3, d8
 801bcc2:	f7ff bbee 	b.w	801b4a2 <__ieee754_pow+0x162>
 801bcc6:	4b2f      	ldr	r3, [pc, #188]	; (801bd84 <__ieee754_pow+0xa44>)
 801bcc8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801bccc:	429e      	cmp	r6, r3
 801bcce:	f77f af0d 	ble.w	801baec <__ieee754_pow+0x7ac>
 801bcd2:	4b2d      	ldr	r3, [pc, #180]	; (801bd88 <__ieee754_pow+0xa48>)
 801bcd4:	440b      	add	r3, r1
 801bcd6:	4303      	orrs	r3, r0
 801bcd8:	d009      	beq.n	801bcee <__ieee754_pow+0x9ae>
 801bcda:	ec51 0b18 	vmov	r0, r1, d8
 801bcde:	2200      	movs	r2, #0
 801bce0:	2300      	movs	r3, #0
 801bce2:	f7e4 fefb 	bl	8000adc <__aeabi_dcmplt>
 801bce6:	3800      	subs	r0, #0
 801bce8:	bf18      	it	ne
 801bcea:	2001      	movne	r0, #1
 801bcec:	e448      	b.n	801b580 <__ieee754_pow+0x240>
 801bcee:	4622      	mov	r2, r4
 801bcf0:	462b      	mov	r3, r5
 801bcf2:	f7e4 fac9 	bl	8000288 <__aeabi_dsub>
 801bcf6:	4642      	mov	r2, r8
 801bcf8:	464b      	mov	r3, r9
 801bcfa:	f7e4 ff03 	bl	8000b04 <__aeabi_dcmpge>
 801bcfe:	2800      	cmp	r0, #0
 801bd00:	f43f aef4 	beq.w	801baec <__ieee754_pow+0x7ac>
 801bd04:	e7e9      	b.n	801bcda <__ieee754_pow+0x99a>
 801bd06:	f04f 0a00 	mov.w	sl, #0
 801bd0a:	e71a      	b.n	801bb42 <__ieee754_pow+0x802>
 801bd0c:	ec51 0b10 	vmov	r0, r1, d0
 801bd10:	4619      	mov	r1, r3
 801bd12:	e7d4      	b.n	801bcbe <__ieee754_pow+0x97e>
 801bd14:	491a      	ldr	r1, [pc, #104]	; (801bd80 <__ieee754_pow+0xa40>)
 801bd16:	2000      	movs	r0, #0
 801bd18:	f7ff bb31 	b.w	801b37e <__ieee754_pow+0x3e>
 801bd1c:	2000      	movs	r0, #0
 801bd1e:	2100      	movs	r1, #0
 801bd20:	f7ff bb2d 	b.w	801b37e <__ieee754_pow+0x3e>
 801bd24:	4630      	mov	r0, r6
 801bd26:	4639      	mov	r1, r7
 801bd28:	f7ff bb29 	b.w	801b37e <__ieee754_pow+0x3e>
 801bd2c:	9204      	str	r2, [sp, #16]
 801bd2e:	f7ff bb7b 	b.w	801b428 <__ieee754_pow+0xe8>
 801bd32:	2300      	movs	r3, #0
 801bd34:	f7ff bb65 	b.w	801b402 <__ieee754_pow+0xc2>
 801bd38:	00000000 	.word	0x00000000
 801bd3c:	3fe62e43 	.word	0x3fe62e43
 801bd40:	fefa39ef 	.word	0xfefa39ef
 801bd44:	3fe62e42 	.word	0x3fe62e42
 801bd48:	0ca86c39 	.word	0x0ca86c39
 801bd4c:	be205c61 	.word	0xbe205c61
 801bd50:	72bea4d0 	.word	0x72bea4d0
 801bd54:	3e663769 	.word	0x3e663769
 801bd58:	c5d26bf1 	.word	0xc5d26bf1
 801bd5c:	3ebbbd41 	.word	0x3ebbbd41
 801bd60:	af25de2c 	.word	0xaf25de2c
 801bd64:	3f11566a 	.word	0x3f11566a
 801bd68:	16bebd93 	.word	0x16bebd93
 801bd6c:	3f66c16c 	.word	0x3f66c16c
 801bd70:	5555553e 	.word	0x5555553e
 801bd74:	3fc55555 	.word	0x3fc55555
 801bd78:	3fe00000 	.word	0x3fe00000
 801bd7c:	fff00000 	.word	0xfff00000
 801bd80:	3ff00000 	.word	0x3ff00000
 801bd84:	4090cbff 	.word	0x4090cbff
 801bd88:	3f6f3400 	.word	0x3f6f3400
 801bd8c:	652b82fe 	.word	0x652b82fe
 801bd90:	3c971547 	.word	0x3c971547

0801bd94 <fabs>:
 801bd94:	ec51 0b10 	vmov	r0, r1, d0
 801bd98:	ee10 2a10 	vmov	r2, s0
 801bd9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bda0:	ec43 2b10 	vmov	d0, r2, r3
 801bda4:	4770      	bx	lr
	...

0801bda8 <scalbn>:
 801bda8:	b570      	push	{r4, r5, r6, lr}
 801bdaa:	ec55 4b10 	vmov	r4, r5, d0
 801bdae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801bdb2:	4606      	mov	r6, r0
 801bdb4:	462b      	mov	r3, r5
 801bdb6:	b999      	cbnz	r1, 801bde0 <scalbn+0x38>
 801bdb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bdbc:	4323      	orrs	r3, r4
 801bdbe:	d03f      	beq.n	801be40 <scalbn+0x98>
 801bdc0:	4b35      	ldr	r3, [pc, #212]	; (801be98 <scalbn+0xf0>)
 801bdc2:	4629      	mov	r1, r5
 801bdc4:	ee10 0a10 	vmov	r0, s0
 801bdc8:	2200      	movs	r2, #0
 801bdca:	f7e4 fc15 	bl	80005f8 <__aeabi_dmul>
 801bdce:	4b33      	ldr	r3, [pc, #204]	; (801be9c <scalbn+0xf4>)
 801bdd0:	429e      	cmp	r6, r3
 801bdd2:	4604      	mov	r4, r0
 801bdd4:	460d      	mov	r5, r1
 801bdd6:	da10      	bge.n	801bdfa <scalbn+0x52>
 801bdd8:	a327      	add	r3, pc, #156	; (adr r3, 801be78 <scalbn+0xd0>)
 801bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdde:	e01f      	b.n	801be20 <scalbn+0x78>
 801bde0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801bde4:	4291      	cmp	r1, r2
 801bde6:	d10c      	bne.n	801be02 <scalbn+0x5a>
 801bde8:	ee10 2a10 	vmov	r2, s0
 801bdec:	4620      	mov	r0, r4
 801bdee:	4629      	mov	r1, r5
 801bdf0:	f7e4 fa4c 	bl	800028c <__adddf3>
 801bdf4:	4604      	mov	r4, r0
 801bdf6:	460d      	mov	r5, r1
 801bdf8:	e022      	b.n	801be40 <scalbn+0x98>
 801bdfa:	460b      	mov	r3, r1
 801bdfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801be00:	3936      	subs	r1, #54	; 0x36
 801be02:	f24c 3250 	movw	r2, #50000	; 0xc350
 801be06:	4296      	cmp	r6, r2
 801be08:	dd0d      	ble.n	801be26 <scalbn+0x7e>
 801be0a:	2d00      	cmp	r5, #0
 801be0c:	a11c      	add	r1, pc, #112	; (adr r1, 801be80 <scalbn+0xd8>)
 801be0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be12:	da02      	bge.n	801be1a <scalbn+0x72>
 801be14:	a11c      	add	r1, pc, #112	; (adr r1, 801be88 <scalbn+0xe0>)
 801be16:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be1a:	a319      	add	r3, pc, #100	; (adr r3, 801be80 <scalbn+0xd8>)
 801be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be20:	f7e4 fbea 	bl	80005f8 <__aeabi_dmul>
 801be24:	e7e6      	b.n	801bdf4 <scalbn+0x4c>
 801be26:	1872      	adds	r2, r6, r1
 801be28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801be2c:	428a      	cmp	r2, r1
 801be2e:	dcec      	bgt.n	801be0a <scalbn+0x62>
 801be30:	2a00      	cmp	r2, #0
 801be32:	dd08      	ble.n	801be46 <scalbn+0x9e>
 801be34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801be38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801be3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801be40:	ec45 4b10 	vmov	d0, r4, r5
 801be44:	bd70      	pop	{r4, r5, r6, pc}
 801be46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801be4a:	da08      	bge.n	801be5e <scalbn+0xb6>
 801be4c:	2d00      	cmp	r5, #0
 801be4e:	a10a      	add	r1, pc, #40	; (adr r1, 801be78 <scalbn+0xd0>)
 801be50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be54:	dac0      	bge.n	801bdd8 <scalbn+0x30>
 801be56:	a10e      	add	r1, pc, #56	; (adr r1, 801be90 <scalbn+0xe8>)
 801be58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be5c:	e7bc      	b.n	801bdd8 <scalbn+0x30>
 801be5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801be62:	3236      	adds	r2, #54	; 0x36
 801be64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801be68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801be6c:	4620      	mov	r0, r4
 801be6e:	4b0c      	ldr	r3, [pc, #48]	; (801bea0 <scalbn+0xf8>)
 801be70:	2200      	movs	r2, #0
 801be72:	e7d5      	b.n	801be20 <scalbn+0x78>
 801be74:	f3af 8000 	nop.w
 801be78:	c2f8f359 	.word	0xc2f8f359
 801be7c:	01a56e1f 	.word	0x01a56e1f
 801be80:	8800759c 	.word	0x8800759c
 801be84:	7e37e43c 	.word	0x7e37e43c
 801be88:	8800759c 	.word	0x8800759c
 801be8c:	fe37e43c 	.word	0xfe37e43c
 801be90:	c2f8f359 	.word	0xc2f8f359
 801be94:	81a56e1f 	.word	0x81a56e1f
 801be98:	43500000 	.word	0x43500000
 801be9c:	ffff3cb0 	.word	0xffff3cb0
 801bea0:	3c900000 	.word	0x3c900000

0801bea4 <with_errno>:
 801bea4:	b570      	push	{r4, r5, r6, lr}
 801bea6:	4604      	mov	r4, r0
 801bea8:	460d      	mov	r5, r1
 801beaa:	4616      	mov	r6, r2
 801beac:	f7fb feb2 	bl	8017c14 <__errno>
 801beb0:	4629      	mov	r1, r5
 801beb2:	6006      	str	r6, [r0, #0]
 801beb4:	4620      	mov	r0, r4
 801beb6:	bd70      	pop	{r4, r5, r6, pc}

0801beb8 <xflow>:
 801beb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801beba:	4614      	mov	r4, r2
 801bebc:	461d      	mov	r5, r3
 801bebe:	b108      	cbz	r0, 801bec4 <xflow+0xc>
 801bec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801bec4:	e9cd 2300 	strd	r2, r3, [sp]
 801bec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801becc:	4620      	mov	r0, r4
 801bece:	4629      	mov	r1, r5
 801bed0:	f7e4 fb92 	bl	80005f8 <__aeabi_dmul>
 801bed4:	2222      	movs	r2, #34	; 0x22
 801bed6:	b003      	add	sp, #12
 801bed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bedc:	f7ff bfe2 	b.w	801bea4 <with_errno>

0801bee0 <__math_uflow>:
 801bee0:	b508      	push	{r3, lr}
 801bee2:	2200      	movs	r2, #0
 801bee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801bee8:	f7ff ffe6 	bl	801beb8 <xflow>
 801beec:	ec41 0b10 	vmov	d0, r0, r1
 801bef0:	bd08      	pop	{r3, pc}

0801bef2 <__math_oflow>:
 801bef2:	b508      	push	{r3, lr}
 801bef4:	2200      	movs	r2, #0
 801bef6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801befa:	f7ff ffdd 	bl	801beb8 <xflow>
 801befe:	ec41 0b10 	vmov	d0, r0, r1
 801bf02:	bd08      	pop	{r3, pc}

0801bf04 <_init>:
 801bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf06:	bf00      	nop
 801bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf0a:	bc08      	pop	{r3}
 801bf0c:	469e      	mov	lr, r3
 801bf0e:	4770      	bx	lr

0801bf10 <_fini>:
 801bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf12:	bf00      	nop
 801bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf16:	bc08      	pop	{r3}
 801bf18:	469e      	mov	lr, r3
 801bf1a:	4770      	bx	lr
